/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000048 generated on 2015-10-13 02:37:51.242235
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000048);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72;
x0=IKsin(j[0]);
x1=IKsin(j[2]);
x2=IKcos(j[0]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKsin(j[3]);
x6=IKcos(j[1]);
x7=IKcos(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((0.37429)*x7);
x15=((0.27952)*x9);
x16=((0.01)*x5);
x17=((0.27952)*x7);
x18=((0.01)*x7);
x19=((1.0)*x12);
x20=((0.27952)*x8);
x21=((1.0)*x0);
x22=((1.0)*x5);
x23=((0.37429)*x0);
x24=((1.0)*x7);
x25=((0.01)*x4);
x26=((1.0)*x9);
x27=((0.27952)*x5);
x28=((0.069)*x0);
x29=((1.0)*x8);
x30=((1.0)*x4);
x31=((1.0)*x13);
x32=(x2*x6);
x33=((-1.0)*x9);
x34=(x0*x6);
x35=(x1*x2);
x36=(x4*x7);
x37=((-1.0)*x8);
x38=(x3*x6);
x39=(x2*x3);
x40=(x1*x6);
x41=(x3*x4);
x42=(x0*x3);
x43=(x30*x35);
x44=(x24*x32);
x45=(x21*x41);
x46=(x21*x6*x7);
x47=((((-1.0)*x45))+x35);
x48=(((x4*x5))+(((-1.0)*x24*x38)));
x49=(x36+((x38*x5)));
x50=((((-1.0)*x21*x3))+x43);
x51=((((-1.0)*x35))+x45);
x52=(((x1*x21))+((x30*x39)));
x53=((-1.0)*x52);
x54=(((x1*x21*x4))+(((1.0)*x39)));
x55=((-1.0)*x54);
x56=(x12*x49);
x57=(x50*x8);
x58=(x5*x51);
x59=(x53*x7);
x60=(x5*x52);
x61=(((x47*x7))+(((-1.0)*x21*x5*x6)));
x62=(((x48*x9))+((x40*x8)));
x63=((((-1.0)*x46))+x58);
x64=(((x26*x40))+(((-1.0)*x29*x48)));
x65=((((-1.0)*x22*x32))+x59);
x66=((((-1.0)*x44))+x60);
x67=(x13*x62);
x68=(x12*x63);
x69=(((x54*x8))+((x61*x9)));
x70=(x57+((x65*x9)));
x71=(x13*x69);
x72=(((x37*x65))+((x33*(((((-1.0)*x43))+x42)))));
eerot[0]=(((x10*((((x12*x66))+((x13*x70))))))+((x11*x72)));
eerot[1]=(((x10*x72))+((x11*(((((-1.0)*x19*x66))+(((-1.0)*x31*x70)))))));
eerot[2]=(((x13*((x44+(((-1.0)*x22*x52))))))+((x12*x70)));
IkReal x73=((1.0)*x32);
IkReal x74=((1.0)*x1);
IkReal x75=(x39*x4);
eetrans[0]=((0.0557)+(((0.069)*x2))+((x5*(((((-0.37429)*x75))+(((-1.0)*x23*x74))))))+(((0.36442)*x32))+((x12*((((x20*x50))+((x15*(((((-1.0)*x5*x73))+x59))))))))+((x13*(((((-1.0)*x27*x52))+((x17*x32))))))+((x14*x32))+((x9*((((x18*x53))+(((-1.0)*x16*x73))))))+(((-1.0)*x28*x74))+(((-0.069)*x75))+((x8*((((x25*x35))+(((-0.01)*x42)))))));
eerot[3]=(((x10*((x71+x68))))+((x11*(((((-1.0)*x29*x61))+(((-1.0)*x26*x55)))))));
eerot[4]=(((x11*(((((-1.0)*x31*x69))+(((-1.0)*x19*x63))))))+((x10*((((x37*x61))+((x33*x55)))))));
eerot[5]=(((x12*x69))+((x13*((x46+(((-1.0)*x22*x51)))))));
IkReal x76=((1.0)*x41);
eetrans[1]=(((x5*(((((0.37429)*x35))+(((-1.0)*x23*x76))))))+(((0.36442)*x34))+((x9*((((x18*x47))+(((-0.01)*x34*x5))))))+((x14*x34))+((x8*((((x0*x1*x25))+(((0.01)*x39))))))+x28+(((-1.0)*x28*x76))+((x12*((((x15*x61))+((x20*x54))))))+((x13*(((((-1.0)*x27*x51))+((x17*x34))))))+(((0.069)*x35)));
eerot[6]=(((x10*((x56+x67))))+((x11*x64)));
eerot[7]=(((x10*x64))+((x11*(((((-1.0)*x56))+(((-1.0)*x67)))))));
eerot[8]=(((x12*x62))+((x13*(((((-1.0)*x24*x4))+(((-1.0)*x22*x38)))))));
IkReal x77=((1.0)*x38);
IkReal x78=((1.0)*x4);
eetrans[2]=((0.28139)+((x13*(((((-1.0)*x27*x77))+(((-1.0)*x17*x78))))))+(((0.01)*x40*x8))+((x12*((((x20*x40))+((x15*x48))))))+((x9*(((((-1.0)*x18*x77))+((x16*x4))))))+(((-0.36442)*x4))+(((-0.37429)*x38*x5))+(((-1.0)*x14*x78))+(((-0.069)*x38)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j6,cj6,sj6,htj6,j6mul,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]), htj5=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r01);
new_r01=r00;
new_r02=r02;
new_px=((-0.0557)+(((-0.27952)*r02))+px);
new_r10=((-1.0)*r11);
new_r11=r10;
new_r12=r12;
new_py=((((-0.27952)*r12))+py);
new_r20=((-1.0)*r21);
new_r21=r20;
new_r22=r22;
new_pz=((-0.28139)+(((-0.27952)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x79=((1.0)*px);
IkReal x80=((1.0)*pz);
IkReal x81=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x81))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x80)));
rxp0_2=((((-1.0)*r10*x79))+((py*r00)));
rxp1_0=((((-1.0)*r21*x81))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x80)));
rxp1_2=(((py*r01))+(((-1.0)*r11*x79)));
rxp2_0=((((-1.0)*r22*x81))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x80))+((px*r22)));
rxp2_2=(((py*r02))+(((-1.0)*r12*x79)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x82=(r22*sj5);
IkReal x83=(cj5*r20);
IkReal x84=(cj5*r21);
IkReal x85=((0.37429)*r21);
IkReal x86=(r20*sj5);
IkReal x87=((0.01)*cj5);
IkReal x88=((0.37429)*sj5);
IkReal x89=(r21*sj5);
IkReal x90=((-1.0)*r21);
IkReal x91=((-1.0)*npx);
IkReal x92=((0.01)+(((-1.0)*npz*sj5)));
IkReal x93=((-1.0)*r11);
IkReal x94=((-1.0)*r01);
IkReal x95=((-1.0)*cj5);
IkReal x96=((-1.0)*npy);
IkReal x97=((-1.0)*sj5);
IkReal x98=((-1.0)*x82);
IkReal x99=(r12*x97);
IkReal x100=(r02*x97);
IkReal x101=((-1.0)*x83);
IkReal x102=(r10*x95);
IkReal x103=(r00*x95);
IkReal x104=((-1.0)*x84);
IkReal x105=(cj5*x93);
IkReal x106=(cj5*x94);
IkReal x107=(cj5*x91);
IkReal x108=(npy*x95);
IkReal x109=((((-0.37429)*x86))+(((0.01)*x83)));
IkReal x110=(((r00*x87))+(((-1.0)*r00*x88)));
IkReal x111=((((0.01)*x84))+(((-1.0)*sj5*x85)));
IkReal x112=(((r01*x87))+(((-1.0)*r01*x88)));
matrixinvcoeffs[0]=x109;
matrixinvcoeffs[1]=x110;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=0;
matrixinvcoeffs[10]=0;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=x86;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=(sj5*x91);
matrixinvcoeffs[15]=0;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=0;
matrixinvcoeffs[19]=0;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=x109;
matrixinvcoeffs[22]=x110;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=0;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=((-1.0)*x86);
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=(npx*sj5);
matrixinvcoeffs[30]=0;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x111;
matrixinvcoeffs[33]=x112;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=0;
matrixinvcoeffs[42]=0;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=x89;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=(sj5*x96);
matrixinvcoeffs[47]=0;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=0;
matrixinvcoeffs[51]=0;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=x111;
matrixinvcoeffs[54]=x112;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=0;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=((-1.0)*x89);
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=(npy*sj5);
matrixinvcoeffs[62]=0;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=x98;
matrixinvcoeffs[67]=x99;
matrixinvcoeffs[68]=x100;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=0;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=0;
matrixinvcoeffs[76]=0;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=0;
matrixinvcoeffs[79]=(rxp2_2*sj5);
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=x98;
matrixinvcoeffs[88]=x99;
matrixinvcoeffs[89]=x100;
matrixinvcoeffs[90]=x92;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=0;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=0;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=x101;
matrixinvcoeffs[99]=x102;
matrixinvcoeffs[100]=x103;
matrixinvcoeffs[101]=0;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=x90;
matrixinvcoeffs[108]=0;
matrixinvcoeffs[109]=npy;
matrixinvcoeffs[110]=0;
matrixinvcoeffs[111]=(((cj5*rxp0_2))+x85);
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=0;
matrixinvcoeffs[119]=x101;
matrixinvcoeffs[120]=x102;
matrixinvcoeffs[121]=x103;
matrixinvcoeffs[122]=x107;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=x90;
matrixinvcoeffs[125]=0;
matrixinvcoeffs[126]=npy;
matrixinvcoeffs[127]=0;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=x104;
matrixinvcoeffs[131]=x105;
matrixinvcoeffs[132]=x106;
matrixinvcoeffs[133]=0;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=r20;
matrixinvcoeffs[140]=0;
matrixinvcoeffs[141]=x91;
matrixinvcoeffs[142]=0;
matrixinvcoeffs[143]=(((cj5*rxp1_2))+(((-0.37429)*r20)));
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=0;
matrixinvcoeffs[151]=x104;
matrixinvcoeffs[152]=x105;
matrixinvcoeffs[153]=x106;
matrixinvcoeffs[154]=x108;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=r20;
matrixinvcoeffs[157]=0;
matrixinvcoeffs[158]=x91;
matrixinvcoeffs[159]=0;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=0;
matrixinvcoeffs[165]=0;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=x82;
matrixinvcoeffs[172]=0;
matrixinvcoeffs[173]=x92;
matrixinvcoeffs[174]=0;
matrixinvcoeffs[175]=((((-0.37429)*x82))+((r22*x87)));
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=0;
matrixinvcoeffs[183]=0;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=x82;
matrixinvcoeffs[189]=0;
matrixinvcoeffs[190]=x92;
matrixinvcoeffs[191]=0;
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=x90;
matrixinvcoeffs[195]=x93;
matrixinvcoeffs[196]=x94;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=0;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x83;
matrixinvcoeffs[204]=0;
matrixinvcoeffs[205]=x107;
matrixinvcoeffs[206]=0;
matrixinvcoeffs[207]=((((-0.37429)*x83))+rxp1_2+(((-0.01)*x86)));
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=x90;
matrixinvcoeffs[216]=x93;
matrixinvcoeffs[217]=x94;
matrixinvcoeffs[218]=x96;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=x83;
matrixinvcoeffs[221]=0;
matrixinvcoeffs[222]=x107;
matrixinvcoeffs[223]=0;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=r20;
matrixinvcoeffs[227]=r10;
matrixinvcoeffs[228]=r00;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=0;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=x84;
matrixinvcoeffs[236]=0;
matrixinvcoeffs[237]=x108;
matrixinvcoeffs[238]=0;
matrixinvcoeffs[239]=((((-0.37429)*x84))+(((-0.01)*x89))+(((-1.0)*rxp0_2)));
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=r20;
matrixinvcoeffs[248]=r10;
matrixinvcoeffs[249]=r00;
matrixinvcoeffs[250]=npx;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=x84;
matrixinvcoeffs[253]=0;
matrixinvcoeffs[254]=x108;
matrixinvcoeffs[255]=0;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal op[72], zeror[48];
int numroots;;
IkReal x113=((0.138)*cj0);
IkReal x114=((0.138)*sj0);
IkReal x115=((1.0)*py);
IkReal x116=((-0.138)*sj0);
IkReal x117=((0.37429)*cj5*r12);
IkReal x118=((0.01)*r12*sj5);
IkReal x119=((((0.02)*npz*sj5))+(((0.74858)*cj5*npz)));
IkReal x120=(x117+x118);
IkReal x121=((-0.0524208923)+(((-1.0)*x119))+pp);
IkReal x122=((0.0481590277)+(((-1.0)*x119))+pp);
IkReal x123=((((-1.0)*x115))+x120+(((0.43342)*sj0)));
IkReal x124=((((-1.0)*x115))+x120+(((-0.29542)*sj0)));
op[0]=x123;
op[1]=0;
op[2]=x113;
op[3]=0;
op[4]=x123;
op[5]=0;
op[6]=x121;
op[7]=0;
op[8]=0;
op[9]=0;
op[10]=x121;
op[11]=0;
op[12]=0;
op[13]=x123;
op[14]=0;
op[15]=x113;
op[16]=0;
op[17]=x123;
op[18]=0;
op[19]=x121;
op[20]=0;
op[21]=0;
op[22]=0;
op[23]=x121;
op[24]=x116;
op[25]=0;
op[26]=0;
op[27]=0;
op[28]=x114;
op[29]=0;
op[30]=0.019044;
op[31]=0;
op[32]=0;
op[33]=0;
op[34]=-0.019044;
op[35]=0;
op[36]=0;
op[37]=x116;
op[38]=0;
op[39]=0;
op[40]=0;
op[41]=x114;
op[42]=0;
op[43]=0.019044;
op[44]=0;
op[45]=0;
op[46]=0;
op[47]=-0.019044;
op[48]=x124;
op[49]=0;
op[50]=x113;
op[51]=0;
op[52]=x124;
op[53]=0;
op[54]=x122;
op[55]=0;
op[56]=0;
op[57]=0;
op[58]=x122;
op[59]=0;
op[60]=0;
op[61]=x124;
op[62]=0;
op[63]=x113;
op[64]=0;
op[65]=x124;
op[66]=0;
op[67]=x122;
op[68]=0;
op[69]=0;
op[70]=0;
op[71]=x122;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x125=htj1*htj1;
CheckValue<IkReal> x126=IKPowWithIntegerCheck(((1.0)+x125),-1);
if(!x126.valid){
continue;
}
cj1array[numsolutions]=((x126.value)*(((1.0)+(((-1.0)*x125)))));
CheckValue<IkReal> x127=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x127.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x127.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x128=htj2*htj2;
CheckValue<IkReal> x129=IKPowWithIntegerCheck(((1.0)+x128),-1);
if(!x129.valid){
continue;
}
cj2array[numsolutions]=((x129.value)*(((1.0)+(((-1.0)*x128)))));
CheckValue<IkReal> x130=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x130.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x130.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x131=htj3*htj3;
CheckValue<IkReal> x132=IKPowWithIntegerCheck(((1.0)+x131),-1);
if(!x132.valid){
continue;
}
cj3array[numsolutions]=((x132.value)*(((1.0)+(((-1.0)*x131)))));
CheckValue<IkReal> x133=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x133.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x133.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j6eval[2];
IkReal x134=cj5*cj5;
IkReal x135=r21*r21;
IkReal x136=r20*r20;
IkReal x137=sj5*sj5;
IkReal x138=((37429.0)*sj5);
IkReal x139=((1000.0)*cj5);
IkReal x140=((74.858)*cj5*sj5);
IkReal x141=((1400.930041)*x137);
j6eval[0]=(((x136*x141))+((x135*x141))+((x134*x135))+((x134*x136))+(((-1.0)*x136*x140))+(((-1.0)*x135*x140)));
j6eval[1]=((IKabs(((((-1.0)*r21*x138))+((r21*x139)))))+(IKabs((((r20*x139))+(((-1.0)*r20*x138))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
evalcond[1]=((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x142=(py*r01);
IkReal x143=(px*r00);
IkReal x144=(pz*r00);
IkReal x145=((-1.0)*r01);
IkReal x146=(((px*r01))+((py*r00)));
IkReal x147=(pz*x145);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x145;
r11=r00;
npx=(x143+(((-1.0)*x142)));
npy=x146;
npz=(pz*r22);
rxp0_0=x147;
rxp0_1=((-1.0)*x144);
rxp0_2=x146;
rxp1_0=x144;
rxp1_1=x147;
rxp1_2=(x142+(((-1.0)*x143)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj5;
j4eval[2]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x148=(py*r01);
IkReal x149=(px*r00);
IkReal x150=(pz*r00);
IkReal x151=((-1.0)*r01);
IkReal x152=(((px*r01))+((py*r00)));
IkReal x153=(pz*x151);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x151;
r11=r00;
npx=(x149+(((-1.0)*x148)));
npy=x152;
npz=(pz*r22);
rxp0_0=x153;
rxp0_1=((-1.0)*x150);
rxp0_2=x152;
rxp1_0=x150;
rxp1_1=x153;
rxp1_2=(x148+(((-1.0)*x149)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj5;
j4eval[2]=cj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x154=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.37429)*r22))+(((-1.0)*pz))+(((-0.069)*x154))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((cj3*r22)));
evalcond[4]=((((-1.0)*x154))+(((-1.0)*r22*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
IkReal op[8+1], zeror[8];
int numroots;
IkReal x155=((0.01)*r00);
IkReal x156=((1.0)*py);
IkReal x157=((0.01)*r01);
IkReal x158=((1.0)*px);
IkReal x159=(cj2*sj1);
IkReal x160=((0.069)*x159);
IkReal x161=((((-1.0)*x156))+x155);
IkReal x162=((0.138)+(((-0.138)*x159)));
IkReal x163=((((-1.0)*x155))+(((-1.0)*x156)));
IkReal x164=((-0.069)+x160);
IkReal x165=(x160+x158);
IkReal x166=((0.069)+(((-1.0)*x165))+x157);
IkReal x167=((0.069)+(((-1.0)*x157))+(((-1.0)*x165)));
IkReal x168=((((-1.0)*x158))+x164+x157);
IkReal x169=((((-1.0)*x157))+(((-1.0)*x158))+x164);
IkReal gconst40=x161;
IkReal gconst41=x163;
IkReal gconst42=x166;
IkReal gconst43=x167;
IkReal gconst44=x161;
IkReal gconst45=x163;
IkReal gconst46=x166;
IkReal gconst47=x167;
IkReal gconst48=x162;
IkReal gconst49=x162;
IkReal gconst50=x162;
IkReal gconst51=x162;
IkReal gconst52=x161;
IkReal gconst53=x163;
IkReal gconst54=x168;
IkReal gconst55=x169;
IkReal gconst56=x161;
IkReal gconst57=x163;
IkReal gconst58=x168;
IkReal gconst59=x169;
IkReal x170=r00*r00;
IkReal x171=r01*r01;
IkReal x172=(gconst46*gconst49);
IkReal x173=(gconst53*gconst59);
IkReal x174=(gconst42*gconst50);
IkReal x175=(gconst43*gconst50);
IkReal x176=(gconst53*gconst58);
IkReal x177=(gconst55*gconst56);
IkReal x178=((1.0)*gconst47);
IkReal x179=(gconst43*gconst48);
IkReal x180=(gconst41*gconst47);
IkReal x181=(gconst50*gconst54);
IkReal x182=(gconst51*gconst58);
IkReal x183=(gconst40*gconst43);
IkReal x184=(gconst44*gconst54);
IkReal x185=(gconst48*gconst55);
IkReal x186=(gconst45*gconst46);
IkReal x187=(gconst40*gconst55);
IkReal x188=((1.0)*gconst59);
IkReal x189=(gconst43*gconst44);
IkReal x190=(gconst46*gconst51);
IkReal x191=(gconst49*gconst59);
IkReal x192=(r00*r01);
IkReal x193=(gconst41*gconst58);
IkReal x194=(gconst52*gconst55);
IkReal x195=(gconst45*gconst58);
IkReal x196=((1.0)*gconst42);
IkReal x197=(gconst46*gconst57);
IkReal x198=(gconst42*gconst44);
IkReal x199=(gconst47*gconst49);
IkReal x200=(gconst57*gconst58);
IkReal x201=((1.0)*gconst54);
IkReal x202=(gconst43*gconst56);
IkReal x203=((0.0004)*gconst55);
IkReal x204=(gconst54*gconst56);
IkReal x205=((0.0008)*gconst50);
IkReal x206=((0.0004)*gconst44);
IkReal x207=((0.0004)*gconst46);
IkReal x208=((0.0008)*gconst56);
IkReal x209=(gconst44*gconst55);
IkReal x210=(gconst49*gconst58);
IkReal x211=((0.0008)*gconst46);
IkReal x212=((0.0004)*gconst56);
IkReal x213=(gconst43*gconst52);
IkReal x214=((0.0004)*gconst50);
IkReal x215=(gconst47*gconst53);
IkReal x216=(gconst42*gconst56);
IkReal x217=(gconst41*gconst59);
IkReal x218=((0.0008)*gconst44);
IkReal x219=(gconst45*x196);
IkReal x220=(gconst52*x178);
IkReal x221=(gconst58*x171);
IkReal x222=(gconst49*x170);
IkReal x223=(gconst43*x171);
IkReal x224=(gconst41*x170);
IkReal x225=(gconst53*x170);
IkReal x226=((0.0008)*x225);
IkReal x227=(x212*x225);
IkReal x228=((0.0004)*x177*x192);
IkReal x229=(x203*x221);
IkReal x230=((0.0004)*x176*x192);
IkReal x231=((0.0004)*x192*x210);
IkReal x232=(gconst50*x192*x203);
IkReal x233=(x212*x222);
IkReal x234=(x214*x225);
IkReal x235=(gconst53*x192*x207);
IkReal x236=(x212*x224);
IkReal x237=((0.0004)*x192*x202);
IkReal x238=(x206*x225);
IkReal x239=(gconst44*x192*x203);
IkReal x240=(x214*x222);
IkReal x241=(gconst46*x171*x203);
IkReal x242=((0.0004)*x192*x193);
IkReal x243=((0.0004)*gconst43*x221);
IkReal x244=(x214*x224);
IkReal x245=(x206*x222);
IkReal x246=((0.0004)*x175*x192);
IkReal x247=((0.0004)*x172*x192);
IkReal x248=(x206*x224);
IkReal x249=(gconst41*x192*x207);
IkReal x250=((0.0004)*x189*x192);
IkReal x251=(x207*x223);
IkReal x252=(x229+x228+x227+x230);
IkReal x253=(x232+x233+x231+x234);
IkReal x254=(x250+x251+x249+x248);
IkReal x255=(x247+x246+x245+x244);
IkReal x256=(x238+x239+x236+x237+x235+x243+x242+x241+x240);
op[0]=(((x194*x200))+(((-1.0)*gconst57*x176*x201))+(((-1.0)*gconst52*x177*x188))+((x173*x204))+(((-1.0)*x252)));
op[1]=((((-1.0)*gconst49*x200*x201))+(((-1.0)*gconst48*x177*x188))+((x173*x181))+(((-1.0)*gconst50*x188*x194))+((x185*x200))+((x191*x204))+(((-1.0)*gconst51*x176*x201))+((x182*x194))+(((-1.0)*x253)));
op[2]=((((-1.0)*gconst57*x193*x201))+((x204*x215))+((x204*x217))+((x187*x200))+(((-1.0)*gconst49*x182*x201))+((x173*x184))+(((-1.0)*gconst40*x177*x188))+(((-1.0)*gconst44*x188*x194))+(((-1.0)*gconst53*x197*x201))+(((-1.0)*x208*x225))+(((-1.0)*gconst57*x176*x196))+(((-1.0)*gconst50*x185*x188))+((x173*x216))+(((-1.0)*gconst45*x176*x201))+((x194*x195))+((x194*x197))+(((-0.0008)*gconst55*x221))+(((-1.0)*gconst52*x188*x202))+(((-1.0)*x177*x220))+(((-0.0008)*x176*x192))+(((-0.0008)*x177*x192))+((x181*x191))+((x200*x213))+((x182*x185))+(((-1.0)*x256)));
op[3]=((((-1.0)*x205*x225))+((x191*x216))+(((-1.0)*gconst53*x190*x201))+(((-1.0)*gconst56*x179*x188))+(((-1.0)*gconst52*x175*x188))+((x181*x217))+((x181*x215))+((x182*x213))+(((-1.0)*gconst49*x196*x200))+((x173*x174))+((x184*x191))+(((-0.0008)*x192*x210))+(((-1.0)*gconst50*x187*x188))+((x185*x197))+((x185*x195))+(((-1.0)*x208*x222))+(((-1.0)*gconst49*x195*x201))+(((-1.0)*gconst41*x182*x201))+(((-1.0)*gconst57*x172*x201))+(((-1.0)*gconst48*x177*x178))+((x179*x200))+(((-1.0)*gconst51*x176*x196))+((x190*x194))+(((-1.0)*gconst44*x185*x188))+(((-1.0)*gconst50*x178*x194))+(((-1.0)*gconst55*x192*x205))+((x199*x204))+((x182*x187))+(((-1.0)*x255)));
op[4]=((((-1.0)*gconst45*x193*x201))+(((-1.0)*x205*x222))+((x184*x215))+((x184*x217))+(((-1.0)*gconst52*x188*x189))+(((-1.0)*gconst44*x187*x188))+((x180*x204))+((x186*x194))+((x197*x213))+(((-0.0008)*gconst43*x221))+(((-1.0)*gconst51*x172*x201))+((x187*x197))+((x187*x195))+(((-1.0)*gconst53*x192*x211))+(((-1.0)*gconst41*x197*x201))+((x173*x198))+((x216*x217))+((x179*x182))+(((-1.0)*gconst55*x171*x211))+((x215*x216))+((x174*x191))+((x185*x190))+(((-1.0)*x208*x224))+(((-1.0)*x176*x219))+(((-1.0)*gconst53*x186*x201))+(((-0.0008)*x192*x209))+(((-0.0008)*x192*x202))+(((-1.0)*x202*x220))+(((-1.0)*gconst56*x183*x188))+(((-1.0)*x218*x225))+(((-1.0)*gconst53*x196*x197))+(((-1.0)*gconst57*x193*x196))+(((-1.0)*gconst48*x175*x188))+((x183*x200))+(((-1.0)*gconst49*x182*x196))+(((-0.0008)*x192*x193))+(((-1.0)*gconst44*x178*x194))+((x181*x199))+(((-1.0)*gconst40*x177*x178))+(((-1.0)*gconst50*x178*x185))+((x195*x213))+(((-1.0)*x254))+(((-1.0)*x252)));
op[5]=((((-1.0)*gconst41*x190*x201))+(((-0.0008)*x172*x192))+((x190*x213))+(((-1.0)*x205*x224))+(((-0.0008)*x175*x192))+((x180*x181))+((x199*x216))+((x187*x190))+((x179*x197))+((x179*x195))+(((-1.0)*gconst53*x190*x196))+(((-1.0)*gconst40*x175*x188))+((x185*x186))+((x184*x199))+(((-1.0)*gconst41*x182*x196))+(((-1.0)*gconst57*x172*x196))+(((-1.0)*x218*x222))+((x191*x198))+(((-1.0)*x175*x220))+((x174*x217))+((x174*x215))+(((-1.0)*gconst45*x172*x201))+(((-1.0)*gconst56*x178*x179))+((x182*x183))+(((-1.0)*gconst50*x178*x187))+(((-1.0)*gconst44*x178*x185))+(((-1.0)*gconst44*x179*x188))+(((-1.0)*x253))+(((-1.0)*gconst49*x195*x196)));
op[6]=(((x186*x187))+((x180*x184))+((x179*x190))+(((-1.0)*gconst56*x178*x183))+(((-1.0)*gconst41*x192*x211))+(((-0.0008)*x189*x192))+(((-1.0)*gconst48*x175*x178))+(((-1.0)*x189*x220))+((x198*x215))+((x198*x217))+((x174*x199))+(((-1.0)*gconst41*x196*x197))+(((-1.0)*x218*x224))+(((-1.0)*gconst53*x186*x196))+((x186*x213))+((x180*x216))+(((-1.0)*x211*x223))+(((-1.0)*gconst51*x172*x196))+(((-1.0)*gconst44*x183*x188))+(((-1.0)*gconst41*x186*x201))+(((-1.0)*x193*x219))+((x183*x197))+((x183*x195))+(((-1.0)*gconst44*x178*x187))+(((-1.0)*x256)));
op[7]=((((-1.0)*gconst44*x178*x179))+((x198*x199))+((x179*x186))+((x174*x180))+(((-1.0)*gconst41*x190*x196))+(((-1.0)*x172*x219))+((x183*x190))+(((-1.0)*x255))+(((-1.0)*gconst40*x175*x178)));
op[8]=(((x180*x198))+(((-1.0)*gconst41*x186*x196))+((x183*x186))+(((-1.0)*gconst44*x178*x183))+(((-1.0)*x254)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x257=((100.0)*r00);
IkReal x258=(cj0*r01);
IkReal x259=((100.0)*r01);
IkReal x260=(r00*sj0);
IkReal x261=(cj0*r00);
IkReal x262=(r01*sj0);
IkReal x263=((6.9)*cj2*sj1);
if( IKabs(((((-1.0)*x262*x263))+(((6.9)*x262))+(((-6.9)*x261))+((px*x257))+(((-1.0)*py*x259))+((x261*x263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x258*x263))+((x260*x263))+((py*x257))+(((-6.9)*x260))+((px*x259))+(((-6.9)*x258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x262*x263))+(((6.9)*x262))+(((-6.9)*x261))+((px*x257))+(((-1.0)*py*x259))+((x261*x263))))+IKsqr((((x258*x263))+((x260*x263))+((py*x257))+(((-6.9)*x260))+((px*x259))+(((-6.9)*x258))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*x262*x263))+(((6.9)*x262))+(((-6.9)*x261))+((px*x257))+(((-1.0)*py*x259))+((x261*x263))), (((x258*x263))+((x260*x263))+((py*x257))+(((-6.9)*x260))+((px*x259))+(((-6.9)*x258))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x264=IKcos(j6);
IkReal x265=IKsin(j6);
IkReal x266=((0.069)*cj2*sj1);
IkReal x267=((0.01)*x264);
IkReal x268=((0.01)*x265);
evalcond[0]=((((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*cj0*x266))+((r00*x268))+((r01*x267)));
evalcond[1]=((((-1.0)*py))+(((0.069)*sj0))+(((-1.0)*r01*x268))+(((-1.0)*sj0*x266))+((r00*x267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x269=(cj2*sj0);
IkReal x270=(cj6*r00);
IkReal x271=((1.0)*sj6);
IkReal x272=(cj6*r01);
IkReal x273=(cj0*cj2);
if( IKabs((((x270*x273))+(((-1.0)*r00*x269*x271))+(((-1.0)*r01*x271*x273))+(((-1.0)*x269*x272)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x272*x273))+(((-1.0)*r01*x269*x271))+((r00*sj6*x273))+((x269*x270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x270*x273))+(((-1.0)*r00*x269*x271))+(((-1.0)*r01*x271*x273))+(((-1.0)*x269*x272))))+IKsqr((((x272*x273))+(((-1.0)*r01*x269*x271))+((r00*sj6*x273))+((x269*x270))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((((x270*x273))+(((-1.0)*r00*x269*x271))+(((-1.0)*r01*x271*x273))+(((-1.0)*x269*x272))), (((x272*x273))+(((-1.0)*r01*x269*x271))+((r00*sj6*x273))+((x269*x270))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x274=IKsin(j4);
IkReal x275=IKcos(j4);
IkReal x276=(r01*sj6);
IkReal x277=(r00*sj6);
IkReal x278=((1.0)*cj6);
IkReal x279=(cj6*r01);
IkReal x280=(sj3*x274);
IkReal x281=(cj3*x275);
IkReal x282=((1.0)*cj2*sj1);
IkReal x283=(sj3*x275);
IkReal x284=(cj3*x274);
IkReal x285=((1.0)*x275*x277);
IkReal x286=(r00*x275*x278);
evalcond[0]=(((x279*x280))+(((-1.0)*r00*x278*x283))+((x277*x280))+((x276*x283)));
evalcond[1]=((((-1.0)*r00*x274*x278))+((x274*x276))+((cj0*cj2))+(((-1.0)*r01*x275*x278))+(((-1.0)*x285)));
evalcond[2]=((((-1.0)*x274*x277))+((cj6*r00*x275))+(((-1.0)*cj2*sj0))+(((-1.0)*x275*x276))+(((-1.0)*r01*x274*x278)));
evalcond[3]=((((-1.0)*r01*x278*x283))+(((-1.0)*x277*x283))+(((-1.0)*r00*x278*x280))+((x276*x280)));
evalcond[4]=(((x279*x284))+(((-1.0)*sj0*x282))+(((-1.0)*r00*x278*x281))+((x277*x284))+((x276*x281)));
evalcond[5]=((((-1.0)*r01*x278*x281))+(((-1.0)*cj0*x282))+(((-1.0)*x277*x281))+(((-1.0)*r00*x278*x284))+((x276*x284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x287=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((-0.069)*x287))+(((-1.0)*pz))+(((-0.37429)*r22))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*cj3*r22))+sj1);
evalcond[4]=(((r22*sj3))+(((-1.0)*x287)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
IkReal op[8+1], zeror[8];
int numroots;
IkReal x288=((0.01)*r00);
IkReal x289=((1.0)*py);
IkReal x290=((0.01)*r01);
IkReal x291=((1.0)*px);
IkReal x292=(cj2*sj1);
IkReal x293=((0.069)*x292);
IkReal x294=(x288+(((-1.0)*x289)));
IkReal x295=((0.138)+(((-0.138)*x292)));
IkReal x296=((((-1.0)*x288))+(((-1.0)*x289)));
IkReal x297=((-0.069)+x293);
IkReal x298=(x291+x293);
IkReal x299=((0.069)+(((-1.0)*x298))+(((-1.0)*x290)));
IkReal x300=((0.069)+(((-1.0)*x298))+x290);
IkReal x301=((((-1.0)*x291))+(((-1.0)*x290))+x297);
IkReal x302=((((-1.0)*x291))+x290+x297);
IkReal gconst76=x296;
IkReal gconst77=x294;
IkReal gconst78=x299;
IkReal gconst79=x300;
IkReal gconst80=x296;
IkReal gconst81=x294;
IkReal gconst82=x299;
IkReal gconst83=x300;
IkReal gconst84=x295;
IkReal gconst85=x295;
IkReal gconst86=x295;
IkReal gconst87=x295;
IkReal gconst88=x296;
IkReal gconst89=x294;
IkReal gconst90=x301;
IkReal gconst91=x302;
IkReal gconst92=x296;
IkReal gconst93=x294;
IkReal gconst94=x301;
IkReal gconst95=x302;
IkReal x303=r00*r00;
IkReal x304=r01*r01;
IkReal x305=((1.0)*gconst85);
IkReal x306=(gconst90*gconst93);
IkReal x307=(gconst80*gconst83);
IkReal x308=(gconst78*gconst85);
IkReal x309=((0.0008)*gconst89);
IkReal x310=(gconst79*gconst81);
IkReal x311=(gconst84*gconst94);
IkReal x312=(gconst82*gconst88);
IkReal x313=(gconst77*gconst86);
IkReal x314=(gconst83*gconst90);
IkReal x315=((0.0008)*gconst77);
IkReal x316=(gconst78*gconst95);
IkReal x317=(gconst77*gconst92);
IkReal x318=((1.0)*gconst76);
IkReal x319=(gconst79*gconst95);
IkReal x320=((0.0004)*gconst89);
IkReal x321=(gconst78*gconst94);
IkReal x322=((0.0004)*gconst77);
IkReal x323=((0.0008)*gconst92);
IkReal x324=((1.0)*gconst89);
IkReal x325=(gconst81*gconst91);
IkReal x326=(gconst81*gconst82);
IkReal x327=(gconst83*gconst92);
IkReal x328=(gconst78*gconst89);
IkReal x329=((1.0)*gconst88);
IkReal x330=(gconst91*gconst93);
IkReal x331=(r00*r01);
IkReal x332=(gconst79*gconst80);
IkReal x333=(gconst82*gconst84);
IkReal x334=(gconst76*gconst82);
IkReal x335=(gconst89*gconst92);
IkReal x336=((1.0)*gconst84);
IkReal x337=(gconst78*gconst83);
IkReal x338=(gconst83*gconst86);
IkReal x339=((1.0)*gconst77);
IkReal x340=(gconst78*gconst82);
IkReal x341=((0.0008)*gconst86);
IkReal x342=(gconst79*gconst93);
IkReal x343=((0.0004)*gconst85);
IkReal x344=(gconst88*gconst94);
IkReal x345=(gconst87*gconst90);
IkReal x346=(gconst87*gconst91);
IkReal x347=(gconst89*gconst90);
IkReal x348=(gconst76*gconst94);
IkReal x349=(gconst79*gconst87);
IkReal x350=(gconst90*gconst95);
IkReal x351=(gconst86*gconst89);
IkReal x352=((0.0008)*gconst85);
IkReal x353=(gconst85*gconst86);
IkReal x354=((0.0004)*gconst91);
IkReal x355=(gconst86*gconst95);
IkReal x356=(gconst80*gconst95);
IkReal x357=((0.0004)*gconst86);
IkReal x358=((0.0008)*gconst82);
IkReal x359=(gconst85*gconst92);
IkReal x360=(gconst77*gconst80);
IkReal x361=((0.0004)*gconst92);
IkReal x362=(gconst94*x331);
IkReal x363=(gconst80*x303);
IkReal x364=(gconst85*x303);
IkReal x365=(gconst91*x356);
IkReal x366=(gconst86*x303);
IkReal x367=(gconst91*gconst92*gconst95);
IkReal x368=((0.0004)*x303);
IkReal x369=(gconst92*x303);
IkReal x370=(gconst81*gconst90*gconst94);
IkReal x371=(gconst91*x355);
IkReal x372=(gconst79*x304);
IkReal x373=(gconst91*gconst94*x304);
IkReal x374=((0.0004)*gconst82*x304);
IkReal x375=(gconst94*x304*x354);
IkReal x376=(gconst92*x331*x354);
IkReal x377=(x320*x362);
IkReal x378=(x320*x369);
IkReal x379=(x343*x369);
IkReal x380=(x343*x362);
IkReal x381=(x320*x366);
IkReal x382=(gconst86*x331*x354);
IkReal x383=(gconst82*x320*x331);
IkReal x384=(x320*x363);
IkReal x385=(gconst80*x331*x354);
IkReal x386=((0.0004)*gconst94*x372);
IkReal x387=(gconst79*x331*x361);
IkReal x388=(x322*x362);
IkReal x389=(gconst82*x304*x354);
IkReal x390=(x343*x366);
IkReal x391=(x317*x368);
IkReal x392=(x313*x368);
IkReal x393=(x343*x363);
IkReal x394=(gconst82*x331*x343);
IkReal x395=(gconst79*x331*x357);
IkReal x396=((0.0004)*gconst82*x372);
IkReal x397=(gconst82*x322*x331);
IkReal x398=(x322*x363);
IkReal x399=((0.0004)*x331*x332);
IkReal x400=(x397+x396+x399+x398);
IkReal x401=(x378+x377+x376+x375);
IkReal x402=(x395+x394+x393+x392);
IkReal x403=(x382+x380+x381+x379);
IkReal x404=(x386+x387+x384+x385+x383+x388+x389+x391+x390);
op[0]=(((x335*x350))+(((-1.0)*x329*x367))+((x330*x344))+(((-1.0)*gconst94*x306*x324))+(((-1.0)*x401)));
op[1]=((((-1.0)*gconst94*x324*x345))+((x311*x330))+((x344*x346))+((x347*x355))+((x350*x359))+(((-1.0)*x336*x367))+(((-1.0)*x329*x371))+(((-1.0)*gconst94*x305*x306))+(((-1.0)*x403)));
op[2]=((((-1.0)*gconst92*x319*x329))+((x325*x344))+((x311*x346))+(((-1.0)*x324*x370))+(((-1.0)*x318*x367))+(((-1.0)*gconst91*x327*x329))+((x316*x335))+((x347*x356))+(((-0.0008)*x373))+(((-1.0)*gconst82*x306*x324))+(((-1.0)*gconst94*x306*x339))+(((-1.0)*x329*x365))+((x350*x353))+((x314*x335))+((x317*x350))+(((-1.0)*x336*x371))+((x312*x330))+(((-1.0)*gconst91*x323*x331))+(((-1.0)*x309*x369))+(((-1.0)*x309*x362))+((x330*x348))+(((-1.0)*x404))+(((-1.0)*gconst93*x321*x324))+(((-1.0)*gconst94*x305*x345))+((x342*x344)));
op[3]=((((-1.0)*gconst87*x321*x324))+(((-1.0)*gconst91*x331*x341))+(((-1.0)*gconst91*x327*x336))+((x330*x333))+((x313*x350))+(((-1.0)*x352*x362))+((x311*x342))+(((-1.0)*gconst82*x324*x345))+(((-1.0)*gconst91*x329*x338))+((x344*x349))+((x312*x346))+(((-1.0)*x305*x370))+(((-1.0)*x318*x371))+(((-1.0)*gconst93*x305*x321))+((x314*x359))+((x314*x351))+(((-1.0)*gconst94*x339*x345))+((x316*x351))+((x346*x348))+(((-1.0)*gconst92*x319*x336))+(((-1.0)*x336*x365))+(((-1.0)*gconst82*x305*x306))+((gconst80*gconst85*x350))+((x311*x325))+(((-1.0)*gconst86*x319*x329))+(((-1.0)*x323*x364))+(((-1.0)*x309*x366))+(((-1.0)*x402))+((gconst92*gconst95*x308)));
op[4]=((((-1.0)*gconst82*x305*x345))+((x308*x355))+((gconst80*gconst89*x316))+((x330*x334))+((x325*x348))+(((-1.0)*gconst90*x324*x326))+((x350*x360))+(((-1.0)*gconst82*x309*x331))+((x327*x328))+(((-0.0008)*gconst94*x372))+(((-1.0)*gconst81*x321*x324))+(((-1.0)*gconst79*x323*x331))+(((-1.0)*gconst92*x318*x319))+((x311*x349))+((x312*x325))+(((-1.0)*gconst82*x306*x339))+(((-1.0)*x318*x365))+(((-1.0)*gconst91*x304*x358))+((x307*x347))+((x312*x342))+(((-1.0)*gconst87*x305*x321))+((x333*x346))+(((-1.0)*gconst91*x318*x327))+((x314*x353))+(((-1.0)*gconst93*x321*x339))+(((-0.0008)*gconst80*gconst91*x331))+(((-1.0)*gconst93*x324*x340))+(((-1.0)*gconst91*x307*x329))+((x310*x344))+(((-1.0)*gconst80*x319*x329))+(((-1.0)*gconst86*x319*x336))+(((-1.0)*x315*x362))+(((-1.0)*x315*x369))+(((-1.0)*x341*x364))+(((-1.0)*x309*x363))+((x314*x317))+(((-1.0)*gconst91*x336*x338))+(((-1.0)*gconst79*x327*x329))+(((-1.0)*x400))+(((-1.0)*x401))+((x316*x317))+((x342*x348))+(((-1.0)*x339*x370)));
op[5]=((((-1.0)*gconst79*x331*x341))+(((-1.0)*gconst93*x305*x340))+((x310*x311))+((x308*x356))+((x348*x349))+((x308*x327))+(((-1.0)*gconst90*x305*x326))+(((-1.0)*gconst80*x319*x336))+(((-1.0)*x352*x363))+(((-1.0)*gconst82*x339*x345))+(((-1.0)*gconst79*x327*x336))+((x312*x349))+((x333*x342))+(((-0.0008)*x303*x313))+(((-1.0)*gconst87*x324*x340))+((x328*x338))+((gconst85*gconst90*x307))+(((-1.0)*gconst79*x329*x338))+(((-1.0)*gconst86*x318*x319))+(((-1.0)*gconst87*x321*x339))+(((-1.0)*gconst82*x331*x352))+(((-1.0)*gconst91*x318*x338))+((x325*x333))+(((-1.0)*gconst91*x307*x336))+(((-1.0)*x403))+((x334*x346))+(((-1.0)*gconst81*x305*x321))+((x313*x314))+((x313*x316)));
op[6]=(((x310*x312))+(((-1.0)*gconst79*x336*x338))+(((-1.0)*gconst93*x339*x340))+((x316*x360))+(((-1.0)*gconst79*x307*x329))+(((-1.0)*gconst91*x307*x318))+(((-1.0)*gconst87*x305*x340))+(((-1.0)*x358*x372))+((gconst77*gconst90*x307))+((x308*x338))+((x317*x337))+((x333*x349))+(((-1.0)*gconst79*x318*x327))+(((-1.0)*gconst82*x315*x331))+(((-1.0)*gconst80*x318*x319))+((x310*x348))+(((-1.0)*gconst81*x321*x339))+(((-0.0008)*x331*x332))+(((-1.0)*gconst78*x324*x326))+((x325*x334))+(((-1.0)*x315*x363))+(((-1.0)*gconst90*x326*x339))+((x307*x328))+(((-1.0)*x404))+((x334*x342)));
op[7]=((((-1.0)*gconst87*x339*x340))+(((-1.0)*gconst79*x307*x336))+(((-1.0)*gconst78*x305*x326))+(((-1.0)*gconst79*x318*x338))+((x307*x308))+((x313*x337))+(((-1.0)*x402))+((x310*x333))+((x334*x349)));
op[8]=(((gconst77*gconst78*x307))+(((-1.0)*gconst78*x326*x339))+(((-1.0)*gconst79*x307*x318))+(((-1.0)*x400))+((x310*x334)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x405=((100.0)*r00);
IkReal x406=(cj0*r01);
IkReal x407=((100.0)*r01);
IkReal x408=(r00*sj0);
IkReal x409=(cj0*r00);
IkReal x410=(r01*sj0);
IkReal x411=((6.9)*cj2*sj1);
if( IKabs((((py*x407))+(((-1.0)*px*x405))+((x410*x411))+(((-6.9)*x410))+(((6.9)*x409))+(((-1.0)*x409*x411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x406*x411))+(((-1.0)*px*x407))+(((6.9)*x406))+(((6.9)*x408))+(((-1.0)*py*x405))+(((-1.0)*x408*x411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x407))+(((-1.0)*px*x405))+((x410*x411))+(((-6.9)*x410))+(((6.9)*x409))+(((-1.0)*x409*x411))))+IKsqr(((((-1.0)*x406*x411))+(((-1.0)*px*x407))+(((6.9)*x406))+(((6.9)*x408))+(((-1.0)*py*x405))+(((-1.0)*x408*x411))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((py*x407))+(((-1.0)*px*x405))+((x410*x411))+(((-6.9)*x410))+(((6.9)*x409))+(((-1.0)*x409*x411))), ((((-1.0)*x406*x411))+(((-1.0)*px*x407))+(((6.9)*x406))+(((6.9)*x408))+(((-1.0)*py*x405))+(((-1.0)*x408*x411))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x412=IKsin(j6);
IkReal x413=IKcos(j6);
IkReal x414=((0.01)*r01);
IkReal x415=((0.01)*r00);
IkReal x416=((0.069)*cj2*sj1);
evalcond[0]=((((-1.0)*x412*x415))+(((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*cj0*x416))+(((-1.0)*x413*x414)));
evalcond[1]=((((-1.0)*py))+(((0.069)*sj0))+((x412*x414))+(((-1.0)*sj0*x416))+(((-1.0)*x413*x415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x417=(cj2*cj6*sj0);
IkReal x418=(cj0*cj2*r01);
IkReal x419=(cj2*sj0*sj6);
IkReal x420=(cj0*cj2*r00);
if( IKabs(((((-1.0)*cj6*x420))+((r01*x417))+((sj6*x418))+((r00*x419)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*x418))+(((-1.0)*r01*x419))+((sj6*x420))+((r00*x417)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*x420))+((r01*x417))+((sj6*x418))+((r00*x419))))+IKsqr((((cj6*x418))+(((-1.0)*r01*x419))+((sj6*x420))+((r00*x417))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj6*x420))+((r01*x417))+((sj6*x418))+((r00*x419))), (((cj6*x418))+(((-1.0)*r01*x419))+((sj6*x420))+((r00*x417))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x421=IKsin(j4);
IkReal x422=IKcos(j4);
IkReal x423=(r01*sj3);
IkReal x424=(cj3*r00);
IkReal x425=(cj0*cj2);
IkReal x426=(r00*sj3);
IkReal x427=((1.0)*sj1);
IkReal x428=(cj2*sj0);
IkReal x429=(cj3*r01);
IkReal x430=((1.0)*r01);
IkReal x431=(cj6*x422);
IkReal x432=(cj6*x421);
IkReal x433=(sj6*x421);
IkReal x434=(sj6*x422);
IkReal x435=(r00*x434);
evalcond[0]=((((-1.0)*x430*x434))+(((-1.0)*x428))+((r00*x433))+((r00*x431))+((r01*x432)));
evalcond[1]=(((x426*x434))+(((-1.0)*x426*x432))+((x423*x431))+((x423*x433)));
evalcond[2]=(((x426*x433))+((x426*x431))+(((-1.0)*x423*x434))+((x423*x432)));
evalcond[3]=((((-1.0)*x430*x431))+(((-1.0)*x430*x433))+(((-1.0)*x435))+x425+((r00*x432)));
evalcond[4]=(((x429*x432))+((x424*x431))+((x424*x433))+(((-1.0)*x429*x434))+(((-1.0)*x427*x428)));
evalcond[5]=(((x429*x431))+((x429*x433))+((x424*x434))+(((-1.0)*x425*x427))+(((-1.0)*x424*x432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x436=(cj1*cj2);
IkReal x437=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((0.37429)*x437))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-0.069)*x436))+(((-0.36442)*sj1)));
evalcond[2]=((((-1.0)*x437))+(((-1.0)*x436)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x438=(py*r01);
IkReal x439=(px*r00);
IkReal x440=(pz*r00);
IkReal x441=((-1.0)*r01);
IkReal x442=(((px*r01))+((py*r00)));
IkReal x443=(pz*x441);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x441;
r11=r00;
npx=((((-1.0)*x438))+x439);
npy=x442;
npz=(pz*r22);
rxp0_0=x443;
rxp0_1=((-1.0)*x440);
rxp0_2=x442;
rxp1_0=x440;
rxp1_1=x443;
rxp1_2=((((-1.0)*x439))+x438);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x444=(r22*sj5);
j4eval[0]=x444;
j4eval[1]=((IKabs(sj1))+(IKabs((cj1*sj2))));
j4eval[2]=IKsign(x444);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x445 = IKatan2WithCheck(IkReal((cj1*sj2)),sj1,IKFAST_ATAN2_MAGTHRESH);
if(!x445.valid){
continue;
}
CheckValue<IkReal> x446=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x446.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x445.value)+(((1.5707963267949)*(x446.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x447=((1.0)*r22*sj5);
evalcond[0]=(sj1+(((-1.0)*x447*(IKcos(j4)))));
evalcond[1]=(((cj1*sj2))+(((-1.0)*x447*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x448=((1.0)*sj2);
IkReal x449=(r01*sj5);
IkReal x450=(cj2*sj1);
IkReal x451=(r00*sj5);
IkReal x452=((1.0)*x450);
IkReal x453=(sj2+(((-1.0)*x451)));
IkReal x454=((1.0)*x451);
IkReal x455=((1.0)*x449);
IkReal x456=((((-1.0)*x448))+x451);
IkReal x457=((((-1.0)*x452))+x449);
IkReal x458=(x449+x450);
IkReal x459=((((-1.0)*x455))+x450);
IkReal x460=((((-1.0)*x448))+(((-1.0)*x454)));
IkReal x461=((((-1.0)*x452))+(((-1.0)*x455)));
IkReal gconst112=x453;
IkReal gconst113=x457;
IkReal gconst114=x461;
IkReal gconst115=x453;
IkReal gconst116=x457;
IkReal gconst117=x461;
IkReal gconst118=x456;
IkReal gconst119=x460;
IkReal gconst120=x458;
IkReal gconst121=x459;
IkReal gconst122=x456;
IkReal gconst123=x460;
IkReal gconst124=x458;
IkReal gconst125=x459;
IkReal x462=sj5*sj5;
IkReal x463=r00*r00;
IkReal x464=r01*r01;
IkReal x465=sj2*sj2;
IkReal x466=sj5*sj5*sj5;
IkReal x467=sj2*sj2*sj2;
IkReal x468=r00*r00*r00;
IkReal x469=(cj2*sj1);
IkReal x470=(r00*sj5);
IkReal x471=(gconst112*gconst117);
IkReal x472=((2.0)*gconst119);
IkReal x473=(gconst123*gconst124);
IkReal x474=(gconst120*gconst125);
IkReal x475=(gconst114*gconst115);
IkReal x476=(gconst116*sj2);
IkReal x477=(gconst118*sj2);
IkReal x478=((2.0)*gconst121);
IkReal x479=(gconst120*sj2);
IkReal x480=(gconst118*gconst125);
IkReal x481=(gconst114*gconst117);
IkReal x482=((4.0)*gconst112);
IkReal x483=((2.0)*sj2);
IkReal x484=(gconst119*gconst122);
IkReal x485=(r00*r01);
IkReal x486=(gconst121*gconst122);
IkReal x487=(gconst112*gconst115);
IkReal x488=(gconst113*gconst116);
IkReal x489=((2.0)*gconst115);
IkReal x490=(sj2*x469);
IkReal x491=((2.0)*gconst114*gconst116);
IkReal x492=((2.0)*gconst112*gconst113);
IkReal x493=((2.0)*gconst122*gconst125);
IkReal x494=((2.0)*x465);
IkReal x495=((2.0)*x467);
IkReal x496=((4.0)*x462);
IkReal x497=(gconst114*x464);
IkReal x498=(gconst124*x464);
IkReal x499=((8.0)*x462);
IkReal x500=((4.0)*x465);
IkReal x501=((2.0)*gconst113*gconst117);
IkReal x502=(x466*x468);
IkReal x503=(x462*x463);
IkReal x504=(x463*x499);
IkReal x505=(x485*x499);
IkReal x506=(r01*x463*x466);
IkReal x507=(sj2*x505);
op[0]=((((-1.0)*gconst121*x496*x498))+(((-1.0)*x463*x484*x496))+(((-1.0)*gconst119*gconst124*x485*x496))+((x474*x484))+(((-1.0)*x480*x486))+(((-1.0)*gconst119*gconst120*x473))+((gconst118*gconst121*x473))+(((-1.0)*x485*x486*x496)));
op[1]=(((sj2*x472*x473))+((gconst119*x469*x504))+((gconst124*x469*x505))+((gconst122*x469*x504))+(((-1.0)*gconst122*gconst125*sj2*x472))+((gconst121*x469*x505))+((x469*x478*x480))+(((-1.0)*gconst122*x472*x479))+((gconst121*sj2*x464*x499))+(((2.0)*gconst120*x469*x473))+(((-1.0)*x469*x472*x474))+((gconst123*x472*x479))+((sj2*x498*x499))+((x477*x493))+((gconst122*gconst125*x469*x478))+((gconst119*x507))+((gconst120*gconst124*x469*x472))+(((-2.0)*gconst122*x469*x474))+((gconst122*x507))+(((-1.0)*gconst123*x477*x478))+(((-1.0)*gconst118*gconst124*x469*x478))+(((-1.0)*x469*x473*x478))+((gconst122*x477*x478))+(((-2.0)*x473*x477)));
op[2]=(((gconst112*gconst120*gconst122*gconst125))+(((-1.0)*gconst121*gconst122*gconst125*r00*sj5))+(((-1.0)*gconst117*gconst118*gconst121*gconst122))+(((-4.0)*gconst119*sj2*(r00*r00)*(sj5*sj5)))+(((-4.0)*cj2*gconst119*gconst124*sj1*sj2))+(((-1.0)*gconst113*gconst119*gconst123*gconst124))+(((4.0)*cj2*gconst121*gconst123*sj1*sj2))+(((-8.0)*gconst121*gconst122*r00*r01*(sj5*sj5)))+(((4.0)*gconst118*gconst123*(sj2*sj2)))+(((-8.0)*gconst119*gconst124*r00*r01*(sj5*sj5)))+(((-32.0)*cj2*r00*r01*sj1*sj2*(sj5*sj5)))+(((4.0)*gconst119*gconst122*(sj2*sj2)))+((gconst115*gconst118*gconst121*gconst124))+(((-4.0)*gconst114*gconst122*r00*r01*(sj5*sj5)))+(((-4.0)*gconst120*gconst124*(cj2*cj2)*(sj1*sj1)))+((gconst121*gconst123*gconst124*r00*sj5))+(((-4.0)*cj2*gconst118*gconst125*sj1*sj2))+(((-4.0)*gconst118*gconst122*(sj2*sj2)))+(((-4.0)*gconst119*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-1.0)*gconst112*gconst120*gconst123*gconst124))+(((-4.0)*gconst119*gconst123*(sj2*sj2)))+(((-1.0)*gconst114*gconst118*gconst122*gconst125))+(((-1.0)*gconst118*gconst121*gconst125*sj2))+(((-8.0)*gconst119*gconst122*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst121*gconst125*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst121*gconst124*(cj2*cj2)*(sj1*sj1)))+(((4.0)*cj2*gconst120*gconst122*sj1*sj2))+(((-1.0)*gconst115*gconst119*gconst120*gconst124))+(((-4.0)*gconst121*r01*(r00*r00)*(sj5*sj5*sj5)))+(((4.0)*cj2*gconst119*gconst125*sj1*sj2))+(((4.0)*cj2*gconst118*gconst124*sj1*sj2))+(((-4.0)*gconst114*gconst124*(r01*r01)*(sj5*sj5)))+(((-16.0)*(r01*r01)*(sj2*sj2)*(sj5*sj5)))+(((-4.0)*gconst116*gconst121*(r01*r01)*(sj5*sj5)))+(((-4.0)*gconst112*gconst122*(r00*r00)*(sj5*sj5)))+((gconst116*gconst118*gconst121*gconst123))+(((-4.0)*gconst112*gconst124*r00*r01*(sj5*sj5)))+(((-8.0)*gconst121*gconst124*(r01*r01)*(sj5*sj5)))+((gconst121*gconst123*gconst124*sj2))+(((-1.0)*gconst121*gconst122*gconst125*sj2))+((gconst119*gconst120*gconst125*sj2))+(((-4.0)*gconst116*gconst119*r00*r01*(sj5*sj5)))+(((4.0)*gconst120*gconst125*(cj2*cj2)*(sj1*sj1)))+((gconst117*gconst119*gconst120*gconst122))+(((-4.0)*cj2*gconst121*gconst122*sj1*sj2))+(((-4.0)*cj2*gconst120*gconst123*sj1*sj2))+(((-1.0)*gconst118*gconst121*gconst125*r00*sj5))+((gconst113*gconst119*gconst122*gconst125))+((gconst119*gconst120*gconst125*r00*sj5))+(((-16.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((-4.0)*gconst121*r00*r01*sj2*(sj5*sj5)))+((gconst114*gconst118*gconst123*gconst124))+(((-1.0)*gconst116*gconst119*gconst120*gconst123)));
op[3]=((((-2.0)*gconst115*gconst118*gconst121*sj2))+(((-2.0)*gconst121*gconst123*r00*sj2*sj5))+(((2.0)*gconst114*gconst118*gconst122*sj2))+(((-2.0)*gconst115*gconst118*gconst124*sj2))+(((-2.0)*cj2*gconst114*gconst118*gconst124*sj1))+(((2.0)*cj2*gconst115*gconst120*gconst124*sj1))+(((2.0)*cj2*gconst117*gconst118*gconst121*sj1))+(((-2.0)*gconst121*gconst123*(sj2*sj2)))+(((-2.0)*cj2*gconst112*gconst120*gconst125*sj1))+(((2.0)*cj2*gconst113*gconst119*gconst124*sj1))+(((2.0)*gconst113*gconst119*gconst123*sj2))+(((16.0)*gconst124*sj2*(r01*r01)*(sj5*sj5)))+(((2.0)*gconst118*gconst121*(sj2*sj2)))+(((16.0)*cj2*gconst124*r00*r01*sj1*(sj5*sj5)))+(((16.0)*cj2*gconst122*sj1*(r00*r00)*(sj5*sj5)))+(((-2.0)*cj2*gconst116*gconst121*gconst123*sj1))+(((-2.0)*gconst112*gconst122*gconst125*sj2))+(((4.0)*cj2*gconst121*gconst125*sj1*sj2))+(((16.0)*cj2*gconst121*r00*r01*sj1*(sj5*sj5)))+(((-2.0)*cj2*gconst120*gconst125*r00*sj1*sj5))+(((8.0)*cj2*sj1*sj2*(r00*r00)*(sj5*sj5)))+(((2.0)*gconst115*gconst119*gconst124*sj2))+(((-2.0)*gconst123*gconst124*r00*sj2*sj5))+(((-2.0)*gconst113*gconst119*gconst122*sj2))+(((2.0)*gconst115*gconst119*gconst120*sj2))+(((-2.0)*gconst116*gconst118*gconst123*sj2))+(((-2.0)*gconst119*gconst125*r00*sj2*sj5))+(((-2.0)*cj2*gconst121*gconst124*r00*sj1*sj5))+(((-2.0)*cj2*gconst121*gconst124*sj1*sj2))+(((-2.0)*gconst117*gconst119*gconst122*sj2))+(((2.0)*gconst112*gconst120*gconst123*sj2))+(((-2.0)*gconst123*gconst124*(sj2*sj2)))+(((-2.0)*cj2*gconst117*gconst119*gconst120*sj1))+(((2.0)*cj2*gconst116*gconst119*gconst120*sj1))+(((-2.0)*gconst112*gconst120*gconst122*sj2))+(((2.0)*gconst118*gconst125*(sj2*sj2)))+(((2.0)*cj2*gconst112*gconst120*gconst124*sj1))+(((16.0)*cj2*gconst119*sj1*(r00*r00)*(sj5*sj5)))+(((2.0)*gconst118*gconst121*r00*sj2*sj5))+(((8.0)*cj2*gconst112*sj1*(r00*r00)*(sj5*sj5)))+(((8.0)*r01*sj2*(r00*r00)*(sj5*sj5*sj5)))+(((8.0)*r00*r01*(sj2*sj2)*(sj5*sj5)))+(((8.0)*gconst114*sj2*(r01*r01)*(sj5*sj5)))+(((8.0)*cj2*sj1*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-2.0)*cj2*gconst114*gconst123*gconst124*sj1))+(((8.0)*gconst116*sj2*(r01*r01)*(sj5*sj5)))+(((2.0)*gconst112*gconst123*gconst124*sj2))+(((16.0)*gconst121*sj2*(r01*r01)*(sj5*sj5)))+(((-2.0)*cj2*gconst116*gconst118*gconst121*sj1))+(((16.0)*gconst119*r00*r01*sj2*(sj5*sj5)))+(((2.0)*cj2*gconst114*gconst122*gconst125*sj1))+(((-2.0)*gconst114*gconst118*gconst123*sj2))+(((2.0)*cj2*gconst117*gconst121*gconst122*sj1))+(((-2.0)*cj2*gconst120*gconst125*sj1*sj2))+(((-2.0)*cj2*gconst115*gconst121*gconst124*sj1))+(((-2.0)*cj2*gconst113*gconst122*gconst125*sj1))+(((2.0)*gconst122*gconst125*(sj2*sj2)))+(((-2.0)*gconst119*gconst120*r00*sj2*sj5))+(((8.0)*cj2*gconst116*r00*r01*sj1*(sj5*sj5)))+(((4.0)*cj2*gconst121*gconst125*r00*sj1*sj5))+(((2.0)*gconst121*gconst122*r00*sj2*sj5))+(((8.0)*cj2*gconst114*r00*r01*sj1*(sj5*sj5)))+(((-2.0)*cj2*gconst113*gconst119*gconst125*sj1))+(((2.0)*cj2*gconst114*gconst118*gconst125*sj1))+(((-2.0)*gconst119*gconst120*(sj2*sj2)))+(((2.0)*cj2*gconst113*gconst123*gconst124*sj1))+(((2.0)*gconst122*gconst125*r00*sj2*sj5))+(((2.0)*gconst116*gconst119*gconst123*sj2))+(((8.0)*gconst112*r00*r01*sj2*(sj5*sj5)))+(((-2.0)*gconst119*gconst125*(sj2*sj2)))+(((2.0)*gconst118*gconst125*r00*sj2*sj5))+(((2.0)*cj2*gconst116*gconst120*gconst123*sj1))+(((2.0)*gconst121*gconst122*(sj2*sj2)))+(((2.0)*gconst117*gconst118*gconst122*sj2))+(((16.0)*gconst122*r00*r01*sj2*(sj5*sj5)))+(((-2.0)*cj2*gconst117*gconst120*gconst122*sj1)));
op[4]=((((-4.0)*cj2*gconst125*r00*sj1*sj2*sj5))+(((-4.0)*gconst112*gconst123*(sj2*sj2)))+(((4.0)*cj2*gconst124*sj1*(sj2*sj2)))+(((-4.0)*cj2*gconst114*gconst122*sj1*sj2))+(((-4.0)*gconst114*r00*r01*sj2*(sj5*sj5)))+((gconst113*gconst119*gconst125*sj2))+(((-8.0)*gconst121*r00*r01*sj2*(sj5*sj5)))+(((-4.0)*gconst114*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-8.0)*gconst112*gconst124*r00*r01*(sj5*sj5)))+((gconst112*gconst113*gconst122*gconst125))+(((-1.0)*gconst114*gconst117*gconst118*gconst122))+(((4.0)*gconst117*gconst120*(cj2*cj2)*(sj1*sj1)))+((gconst113*gconst119*gconst125*r00*sj5))+((gconst115*gconst116*gconst118*gconst121))+(((-1.0)*gconst112*gconst116*gconst120*gconst123))+(((-4.0)*cj2*gconst112*gconst124*sj1*sj2))+(((-4.0)*gconst122*(sj2*sj2*sj2)))+(((-32.0)*(r01*r01)*(sj2*sj2)*(sj5*sj5)))+(((-4.0)*gconst121*gconst122*r00*r01*(sj5*sj5)))+(((-4.0)*gconst113*gconst124*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst119*(sj2*sj2*sj2)))+(((4.0)*cj2*gconst116*gconst118*sj1*sj2))+(((-1.0)*gconst117*gconst121*gconst122*r00*sj5))+(((-8.0)*gconst112*gconst122*(r00*r00)*(sj5*sj5)))+((gconst115*gconst121*gconst124*r00*sj5))+(((-1.0)*gconst114*gconst118*gconst125*r00*sj5))+(((-4.0)*cj2*gconst113*gconst123*sj1*sj2))+(((4.0)*gconst114*gconst124*(cj2*cj2)*(sj1*sj1)))+(((4.0)*cj2*gconst120*r00*sj1*sj2*sj5))+(((4.0)*gconst116*gconst121*(cj2*cj2)*(sj1*sj1)))+(((4.0)*cj2*gconst114*gconst123*sj1*sj2))+(((-1.0)*gconst112*gconst115*gconst120*gconst124))+(((4.0)*cj2*gconst117*gconst119*sj1*sj2))+(((-4.0)*gconst122*r00*sj5*(sj2*sj2)))+(((-1.0)*gconst114*gconst122*gconst125*sj2))+(((-8.0)*gconst119*sj2*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst112*gconst116*r00*r01*(sj5*sj5)))+((gconst115*gconst121*gconst124*sj2))+(((4.0)*cj2*gconst120*sj1*(sj2*sj2)))+(((4.0)*cj2*gconst113*gconst122*sj1*sj2))+(((4.0)*cj2*gconst112*gconst125*sj1*sj2))+((gconst112*gconst120*gconst125*r00*sj5))+(((-4.0)*cj2*gconst121*r00*sj1*sj2*sj5))+((gconst114*gconst123*gconst124*sj2))+(((-4.0)*gconst114*gconst116*(r01*r01)*(sj5*sj5)))+(((-1.0)*gconst114*gconst118*gconst125*sj2))+(((-4.0)*gconst112*sj2*(r00*r00)*(sj5*sj5)))+(((4.0)*gconst113*gconst125*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst119*gconst124*r00*r01*(sj5*sj5)))+(((-4.0)*gconst115*gconst119*(sj2*sj2)))+((gconst114*gconst123*gconst124*r00*sj5))+((gconst116*gconst121*gconst123*r00*sj5))+(((-4.0)*gconst119*gconst122*(r00*r00)*(sj5*sj5)))+(((-8.0)*gconst116*gconst119*r00*r01*(sj5*sj5)))+(((-4.0)*cj2*gconst117*gconst118*sj1*sj2))+(((4.0)*gconst123*(sj2*sj2*sj2)))+(((-1.0)*gconst113*gconst115*gconst119*gconst124))+(((-8.0)*gconst114*gconst124*(r01*r01)*(sj5*sj5)))+(((4.0)*gconst119*r00*sj5*(sj2*sj2)))+(((-8.0)*gconst114*gconst122*r00*r01*(sj5*sj5)))+(((-4.0)*gconst118*(sj2*sj2*sj2)))+((gconst117*gconst119*gconst120*r00*sj5))+(((-4.0)*gconst112*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-8.0)*gconst116*gconst121*(r01*r01)*(sj5*sj5)))+(((-64.0)*cj2*r00*r01*sj1*sj2*(sj5*sj5)))+(((4.0)*cj2*gconst124*r00*sj1*sj2*sj5))+(((-4.0)*gconst121*gconst124*(r01*r01)*(sj5*sj5)))+(((-4.0)*gconst117*gconst121*(cj2*cj2)*(sj1*sj1)))+((gconst114*gconst115*gconst118*gconst124))+((gconst112*gconst120*gconst125*sj2))+(((4.0)*gconst115*gconst118*(sj2*sj2)))+(((4.0)*gconst112*gconst122*(sj2*sj2)))+(((-1.0)*gconst115*gconst116*gconst119*gconst120))+(((-4.0)*cj2*gconst116*gconst119*sj1*sj2))+((gconst114*gconst116*gconst118*gconst123))+(((-4.0)*cj2*gconst121*sj1*(sj2*sj2)))+(((-4.0)*gconst114*gconst125*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst117*gconst118*gconst121*r00*sj5))+(((-2.0)*gconst121*gconst125*r00*sj2*sj5))+((gconst117*gconst119*gconst120*sj2))+(((-8.0)*gconst119*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-1.0)*gconst121*gconst125*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst116*gconst120*(cj2*cj2)*(sj1*sj1)))+(((-8.0)*gconst121*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-1.0)*gconst113*gconst116*gconst119*gconst123))+(((-1.0)*gconst112*gconst113*gconst123*gconst124))+(((-1.0)*gconst121*gconst125*(sj2*sj2)))+(((-32.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+((gconst112*gconst117*gconst120*gconst122))+(((-1.0)*gconst117*gconst121*gconst122*sj2))+(((-4.0)*cj2*gconst115*gconst120*sj1*sj2))+(((-1.0)*gconst114*gconst122*gconst125*r00*sj5))+(((-1.0)*gconst117*gconst118*gconst121*sj2))+((gconst113*gconst117*gconst119*gconst122))+(((4.0)*gconst123*r00*sj5*(sj2*sj2)))+(((4.0)*cj2*gconst115*gconst121*sj1*sj2))+(((-4.0)*gconst118*r00*sj5*(sj2*sj2)))+(((-4.0)*cj2*gconst125*sj1*(sj2*sj2)))+((gconst116*gconst121*gconst123*sj2)));
op[5]=((((2.0)*gconst114*gconst118*(sj2*sj2)))+(((-2.0)*cj2*gconst117*gconst120*r00*sj1*sj5))+(((2.0)*gconst114*gconst118*r00*sj2*sj5))+(((16.0)*cj2*gconst116*r00*r01*sj1*(sj5*sj5)))+(((-2.0)*gconst114*gconst123*r00*sj2*sj5))+(((2.0)*cj2*gconst112*gconst116*gconst120*sj1))+(((-2.0)*cj2*gconst117*gconst120*sj1*sj2))+(((-2.0)*gconst114*gconst123*(sj2*sj2)))+(((2.0)*cj2*gconst115*gconst116*gconst120*sj1))+(((-2.0)*cj2*gconst113*gconst117*gconst119*sj1))+(((-2.0)*gconst115*gconst124*(sj2*sj2)))+(((2.0)*gconst115*gconst116*gconst119*sj2))+(((-2.0)*cj2*gconst113*gconst125*r00*sj1*sj5))+(((2.0)*cj2*gconst114*gconst117*gconst118*sj1))+(((2.0)*cj2*gconst113*gconst116*gconst119*sj1))+(((-2.0)*cj2*gconst114*gconst116*gconst118*sj1))+(((8.0)*cj2*gconst121*r00*r01*sj1*(sj5*sj5)))+(((8.0)*cj2*gconst119*sj1*(r00*r00)*(sj5*sj5)))+(((2.0)*cj2*gconst113*gconst115*gconst124*sj1))+(((2.0)*cj2*gconst112*gconst113*gconst124*sj1))+(((-2.0)*cj2*gconst113*gconst125*sj1*sj2))+(((-2.0)*cj2*gconst114*gconst124*r00*sj1*sj5))+(((-2.0)*gconst116*gconst123*(sj2*sj2)))+(((-2.0)*gconst112*gconst125*r00*sj2*sj5))+(((2.0)*gconst112*gconst115*gconst124*sj2))+(((-2.0)*cj2*gconst115*gconst116*gconst121*sj1))+(((-2.0)*gconst114*gconst115*gconst118*sj2))+(((-2.0)*gconst115*gconst116*gconst118*sj2))+(((-2.0)*gconst113*gconst119*(sj2*sj2)))+(((2.0)*gconst117*gconst122*r00*sj2*sj5))+(((2.0)*gconst112*gconst116*gconst123*sj2))+(((16.0)*gconst114*sj2*(r01*r01)*(sj5*sj5)))+(((16.0)*cj2*sj1*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-2.0)*gconst115*gconst121*r00*sj2*sj5))+(((2.0)*gconst112*gconst113*gconst123*sj2))+(((-2.0)*gconst116*gconst123*r00*sj2*sj5))+(((4.0)*cj2*gconst117*gconst121*sj1*sj2))+(((2.0)*gconst125*(sj2*sj2*sj2)))+(((2.0)*gconst117*gconst118*r00*sj2*sj5))+(((2.0)*gconst121*(sj2*sj2*sj2)))+(((16.0)*cj2*sj1*sj2*(r00*r00)*(sj5*sj5)))+(((16.0)*gconst116*sj2*(r01*r01)*(sj5*sj5)))+(((-2.0)*gconst112*gconst120*(sj2*sj2)))+(((2.0)*gconst125*sj2*(r00*r00)*(sj5*sj5)))+(((4.0)*cj2*gconst117*gconst121*r00*sj1*sj5))+(((16.0)*cj2*gconst114*r00*r01*sj1*(sj5*sj5)))+(((8.0)*gconst122*r00*r01*sj2*(sj5*sj5)))+(((-2.0)*cj2*gconst112*gconst113*gconst125*sj1))+(((-2.0)*gconst115*gconst121*(sj2*sj2)))+(((-2.0)*cj2*gconst114*gconst124*sj1*sj2))+(((2.0)*gconst121*sj2*(r00*r00)*(sj5*sj5)))+(((2.0)*gconst114*gconst122*r00*sj2*sj5))+(((4.0)*cj2*gconst114*gconst125*sj1*sj2))+(((2.0)*gconst117*gconst122*(sj2*sj2)))+(((-2.0)*gconst112*gconst117*gconst122*sj2))+(((8.0)*cj2*gconst122*sj1*(r00*r00)*(sj5*sj5)))+(((2.0)*gconst114*gconst122*(sj2*sj2)))+(((8.0)*gconst119*r00*r01*sj2*(sj5*sj5)))+(((4.0)*gconst121*r00*sj5*(sj2*sj2)))+(((4.0)*cj2*gconst114*gconst125*r00*sj1*sj5))+(((-2.0)*cj2*gconst114*gconst116*gconst123*sj1))+(((-2.0)*gconst117*gconst119*(sj2*sj2)))+(((2.0)*gconst112*gconst115*gconst120*sj2))+(((-2.0)*gconst113*gconst119*r00*sj2*sj5))+(((4.0)*gconst125*r00*sj5*(sj2*sj2)))+(((8.0)*gconst121*sj2*(r01*r01)*(sj5*sj5)))+(((2.0)*gconst117*gconst118*(sj2*sj2)))+(((-2.0)*gconst112*gconst120*r00*sj2*sj5))+(((-2.0)*cj2*gconst114*gconst115*gconst124*sj1))+(((16.0)*cj2*gconst112*sj1*(r00*r00)*(sj5*sj5)))+(((-2.0)*gconst117*gconst119*r00*sj2*sj5))+(((16.0)*r01*sj2*(r00*r00)*(sj5*sj5*sj5)))+(((-2.0)*gconst115*gconst124*r00*sj2*sj5))+(((2.0)*cj2*gconst113*gconst116*gconst123*sj1))+(((8.0)*gconst124*sj2*(r01*r01)*(sj5*sj5)))+(((16.0)*gconst112*r00*r01*sj2*(sj5*sj5)))+(((8.0)*cj2*gconst124*r00*r01*sj1*(sj5*sj5)))+(((2.0)*cj2*gconst114*gconst117*gconst122*sj1))+(((-2.0)*cj2*gconst112*gconst117*gconst120*sj1))+(((-2.0)*cj2*gconst116*gconst121*sj1*sj2))+(((-2.0)*gconst112*gconst113*gconst122*sj2))+(((-2.0)*gconst112*gconst125*(sj2*sj2)))+(((-2.0)*cj2*gconst116*gconst121*r00*sj1*sj5))+(((16.0)*r00*r01*(sj2*sj2)*(sj5*sj5)))+(((-2.0)*cj2*gconst113*gconst117*gconst122*sj1))+(((2.0)*gconst113*gconst115*gconst119*sj2)));
op[6]=((((-4.0)*gconst119*sj2*(r00*r00)*(sj5*sj5)))+((gconst113*gconst117*gconst119*sj2))+(((4.0)*cj2*gconst116*r00*sj1*sj2*sj5))+((gconst115*gconst116*gconst121*r00*sj5))+(((-8.0)*gconst112*sj2*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst112*gconst115*gconst116*gconst120))+(((-4.0)*cj2*gconst117*sj1*(sj2*sj2)))+((gconst114*gconst116*gconst123*sj2))+(((-2.0)*gconst114*gconst125*r00*sj2*sj5))+(((4.0)*gconst114*gconst116*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst114*gconst125*(sj2*sj2)))+(((-4.0)*(sj2*sj2*sj2*sj2)))+(((-1.0)*gconst114*gconst125*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst113*gconst115*gconst116*gconst119))+(((-4.0)*gconst112*gconst115*(sj2*sj2)))+(((-32.0)*cj2*r00*r01*sj1*sj2*(sj5*sj5)))+(((-8.0)*gconst112*gconst116*r00*r01*(sj5*sj5)))+(((-4.0)*cj2*gconst114*r00*sj1*sj2*sj5))+(((-8.0)*gconst114*r01*(r00*r00)*(sj5*sj5*sj5)))+((gconst112*gconst117*gconst120*sj2))+((gconst112*gconst117*gconst120*r00*sj5))+(((4.0)*cj2*gconst112*gconst117*sj1*sj2))+(((-4.0)*gconst114*gconst122*r00*r01*(sj5*sj5)))+((gconst114*gconst115*gconst124*sj2))+(((-1.0)*gconst114*gconst117*gconst122*r00*sj5))+((gconst112*gconst113*gconst125*r00*sj5))+((gconst114*gconst115*gconst116*gconst118))+(((-1.0)*gconst112*gconst113*gconst116*gconst123))+(((4.0)*gconst112*r00*sj5*(sj2*sj2)))+(((-8.0)*gconst114*gconst116*(r01*r01)*(sj5*sj5)))+(((-4.0)*(r00*r00)*(sj2*sj2)*(sj5*sj5)))+(((-4.0)*gconst119*(r00*r00*r00)*(sj5*sj5*sj5)))+(((4.0)*gconst113*gconst117*(cj2*cj2)*(sj1*sj1)))+(((-2.0)*gconst117*gconst121*r00*sj2*sj5))+((gconst112*gconst113*gconst125*sj2))+(((4.0)*cj2*gconst116*sj1*(sj2*sj2)))+(((4.0)*gconst115*(sj2*sj2*sj2)))+(((-1.0)*gconst117*gconst121*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst114*gconst117*gconst122*sj2))+(((-1.0)*gconst117*gconst121*(sj2*sj2)))+(((4.0)*gconst112*(sj2*sj2*sj2)))+(((-8.0)*r00*sj5*(sj2*sj2*sj2)))+(((-4.0)*cj2*gconst117*r00*sj1*sj2*sj5))+(((-4.0)*gconst121*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*cj2*gconst114*sj1*(sj2*sj2)))+((gconst112*gconst113*gconst117*gconst122))+(((-4.0)*gconst114*gconst124*(r01*r01)*(sj5*sj5)))+(((-1.0)*gconst112*gconst113*gconst115*gconst124))+(((-16.0)*(r01*r01)*(sj2*sj2)*(sj5*sj5)))+(((-4.0)*gconst116*gconst121*(r01*r01)*(sj5*sj5)))+(((4.0)*cj2*gconst114*gconst115*sj1*sj2))+(((-4.0)*gconst112*gconst122*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst112*gconst124*r00*r01*(sj5*sj5)))+(((-8.0)*gconst112*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*cj2*gconst112*gconst116*sj1*sj2))+(((-4.0)*cj2*gconst113*gconst115*sj1*sj2))+(((-4.0)*gconst116*gconst119*r00*r01*(sj5*sj5)))+(((-1.0)*gconst114*gconst117*gconst118*sj2))+((gconst115*gconst116*gconst121*sj2))+(((-4.0)*gconst113*gconst116*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst115*r00*sj5*(sj2*sj2)))+(((-16.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((-1.0)*gconst114*gconst117*gconst118*r00*sj5))+(((-4.0)*gconst121*r00*r01*sj2*(sj5*sj5)))+((gconst114*gconst115*gconst124*r00*sj5))+((gconst113*gconst117*gconst119*r00*sj5))+(((-8.0)*gconst114*r00*r01*sj2*(sj5*sj5)))+(((4.0)*cj2*gconst113*sj1*(sj2*sj2)))+(((4.0)*cj2*gconst113*r00*sj1*sj2*sj5))+(((-4.0)*gconst114*gconst117*(cj2*cj2)*(sj1*sj1)))+((gconst114*gconst116*gconst123*r00*sj5)));
op[7]=(((gconst117*x495))+((gconst114*x495))+((x469*x488*x489))+((sj2*x497*x499))+((x464*x476*x499))+(((2.0)*x476*x487))+(((-1.0)*x470*x475*x483))+(((8.0)*sj2*x506))+((gconst114*x470*x500))+(((-2.0)*gconst113*x469*x471))+(((-1.0)*x465*x492))+(((-1.0)*gconst116*x465*x489))+(((-1.0)*x469*x470*x501))+(((-1.0)*gconst113*gconst117*x469*x483))+(((-1.0)*gconst112*gconst113*x470*x483))+((gconst116*x469*x505))+((gconst112*x507))+((x490*x504))+(((8.0)*x469*x502))+((gconst114*x483*x503))+(((-1.0)*x469*x470*x491))+((gconst112*x469*x504))+(((-1.0)*x470*x471*x483))+(((2.0)*gconst112*x469*x488))+(((-2.0)*gconst114*x469*x476))+((x465*x505))+((gconst117*x470*x500))+(((-2.0)*gconst116*x469*x475))+(((4.0)*x469*x470*x481))+((gconst114*x469*x505))+(((4.0)*x481*x490))+((gconst113*x483*x487))+(((-1.0)*x470*x476*x489))+((gconst117*x483*x503))+(((-1.0)*x475*x494))+(((-1.0)*x471*x494)));
op[8]=((((-1.0)*sj2*x482*x503))+(((-1.0)*x482*x502))+((gconst113*sj2*x471))+(((-1.0)*gconst116*x462*x482*x485))+(((-1.0)*x487*x488))+((gconst113*x470*x471))+((gconst116*x470*x475))+(((-1.0)*gconst116*x496*x497))+(((-4.0)*gconst114*x506))+(((-1.0)*x481*x503))+(((-1.0)*x465*x481))+((x475*x476))+(((-1.0)*gconst114*sj2*x485*x496))+(((-1.0)*x470*x481*x483)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[3];
IkReal x508=(py*r01);
IkReal x509=(px*r00);
IkReal x510=(pz*r00);
IkReal x511=((-1.0)*r01);
IkReal x512=(((px*r01))+((py*r00)));
IkReal x513=(pz*x511);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x511;
r11=r00;
npx=(x509+(((-1.0)*x508)));
npy=x512;
npz=(pz*r22);
rxp0_0=x513;
rxp0_1=((-1.0)*x510);
rxp0_2=x512;
rxp1_0=x510;
rxp1_1=x513;
rxp1_2=(x508+(((-1.0)*x509)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x514=cj2*cj2;
IkReal x515=sj1*sj1;
IkReal x516=sj0*sj0;
IkReal x517=cj0*cj0;
IkReal x518=sj2*sj2;
IkReal x519=(x514*x515);
j6eval[0]=sj5;
j6eval[1]=(((x517*x518))+((x517*x519))+((x516*x519))+((x516*x518)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x520=(py*r01);
IkReal x521=(px*r00);
IkReal x522=(pz*r00);
IkReal x523=((-1.0)*r01);
IkReal x524=(((px*r01))+((py*r00)));
IkReal x525=(pz*x523);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x523;
r11=r00;
npx=((((-1.0)*x520))+x521);
npy=x524;
npz=(pz*r22);
rxp0_0=x525;
rxp0_1=((-1.0)*x522);
rxp0_2=x524;
rxp1_0=x522;
rxp1_1=x525;
rxp1_2=((((-1.0)*x521))+x520);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x526=(sj4*sj5);
j6eval[0]=x526;
j6eval[1]=IKsign(x526);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x527=(py*r01);
IkReal x528=(px*r00);
IkReal x529=(pz*r00);
IkReal x530=((-1.0)*r01);
IkReal x531=(((px*r01))+((py*r00)));
IkReal x532=(pz*x530);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x530;
r11=r00;
npx=((((-1.0)*x527))+x528);
npy=x531;
npz=(pz*r22);
rxp0_0=x532;
rxp0_1=((-1.0)*x529);
rxp0_2=x531;
rxp1_0=x529;
rxp1_1=x532;
rxp1_2=((((-1.0)*x528))+x527);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x533=(cj4*cj5*sj5);
j6eval[0]=x533;
j6eval[1]=IKsign(x533);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x534=(r01*sj4);
IkReal x535=(cj4*cj5);
IkReal x536=(r00*sj4);
IkReal x537=((1.0)*cj0*sj2);
IkReal x538=(cj2*sj0*sj1);
IkReal x539=(cj0*cj1*sj5);
CheckValue<IkReal> x540 = IKatan2WithCheck(IkReal((((r01*x535*x538))+(((-1.0)*r01*x535*x537))+((x536*x538))+(((-1.0)*x536*x537))+((r00*x539)))),((((-1.0)*x534*x537))+((cj0*r00*sj2*x535))+((x534*x538))+(((-1.0)*r00*x535*x538))+((r01*x539))),IKFAST_ATAN2_MAGTHRESH);
if(!x540.valid){
continue;
}
CheckValue<IkReal> x541=IKPowWithIntegerCheck(IKsign((sj5*x535)),-1);
if(!x541.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x540.value)+(((-1.5707963267949)*(x541.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x542=IKcos(j6);
IkReal x543=IKsin(j6);
IkReal x544=((0.01)*r00);
IkReal x545=((0.36442)*cj1);
IkReal x546=((0.069)*cj0);
IkReal x547=((1.0)*cj0);
IkReal x548=(cj0*sj2);
IkReal x549=(cj2*sj1);
IkReal x550=((1.0)*sj0);
IkReal x551=(r01*sj4);
IkReal x552=((0.069)*sj0);
IkReal x553=((0.01)*r01);
IkReal x554=(r01*sj5);
IkReal x555=((1.0)*cj4);
IkReal x556=(cj5*x542);
IkReal x557=(r01*x555);
IkReal x558=((1.0)*r00*sj4);
IkReal x559=(r00*x543);
IkReal x560=(cj5*x543);
IkReal x561=(r00*sj5*x542);
evalcond[0]=(x548+x561+(((-1.0)*x549*x550))+(((-1.0)*x543*x554)));
evalcond[1]=(((x542*x554))+((sj5*x559))+(((-1.0)*sj2*x550))+(((-1.0)*x547*x549)));
evalcond[2]=(((sj4*x559))+((x542*x551))+((cj4*r01*x560))+(((-1.0)*cj1*x550))+(((-1.0)*r00*x555*x556)));
evalcond[3]=((((-1.0)*x556*x557))+(((-1.0)*cj1*x547))+(((-1.0)*cj5*x555*x559))+((x543*x551))+(((-1.0)*x542*x558)));
evalcond[4]=((((-1.0)*x555*x559))+(((-1.0)*x556*x558))+((x551*x560))+((cj0*cj2))+((sj0*sj1*sj2))+(((-1.0)*x542*x557)));
evalcond[5]=(((sj1*x548))+(((-1.0)*x558*x560))+(((-1.0)*cj2*x550))+((cj4*r00*x542))+(((-1.0)*x551*x556))+(((-1.0)*x543*x557)));
evalcond[6]=((((-0.37429)*sj5*x559))+((cj0*x545))+(((-1.0)*sj2*x552))+(((-1.0)*px))+x546+((x544*x560))+(((-0.37429)*x542*x554))+((x553*x556))+(((-1.0)*x546*x549)));
evalcond[7]=((((0.37429)*x543*x554))+((sj0*x545))+((x544*x556))+((sj2*x546))+(((-1.0)*py))+x552+(((-1.0)*x549*x552))+(((-0.37429)*x561))+(((-1.0)*x553*x560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x562=(cj0*sj2);
IkReal x563=(r01*sj4);
IkReal x564=(r00*sj4);
IkReal x565=(cj4*cj5*r00);
IkReal x566=(cj2*sj0*sj1);
IkReal x567=(cj1*sj0*sj5);
IkReal x568=(cj4*cj5*r01);
CheckValue<IkReal> x569 = IKatan2WithCheck(IkReal((((x565*x566))+((r00*x567))+((x562*x563))+(((-1.0)*x563*x566))+(((-1.0)*x562*x565)))),(((x566*x568))+((x564*x566))+((r01*x567))+(((-1.0)*x562*x564))+(((-1.0)*x562*x568))),IKFAST_ATAN2_MAGTHRESH);
if(!x569.valid){
continue;
}
CheckValue<IkReal> x570=IKPowWithIntegerCheck(IKsign((sj4*sj5)),-1);
if(!x570.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x569.value)+(((1.5707963267949)*(x570.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x571=IKcos(j6);
IkReal x572=IKsin(j6);
IkReal x573=((0.01)*r00);
IkReal x574=((0.36442)*cj1);
IkReal x575=((0.069)*cj0);
IkReal x576=((1.0)*cj0);
IkReal x577=(cj0*sj2);
IkReal x578=(cj2*sj1);
IkReal x579=((1.0)*sj0);
IkReal x580=(r01*sj4);
IkReal x581=((0.069)*sj0);
IkReal x582=((0.01)*r01);
IkReal x583=(r01*sj5);
IkReal x584=((1.0)*cj4);
IkReal x585=(cj5*x571);
IkReal x586=(r01*x584);
IkReal x587=((1.0)*r00*sj4);
IkReal x588=(r00*x572);
IkReal x589=(cj5*x572);
IkReal x590=(r00*sj5*x571);
evalcond[0]=((((-1.0)*x578*x579))+(((-1.0)*x572*x583))+x577+x590);
evalcond[1]=((((-1.0)*sj2*x579))+((sj5*x588))+(((-1.0)*x576*x578))+((x571*x583)));
evalcond[2]=((((-1.0)*r00*x584*x585))+(((-1.0)*cj1*x579))+((x571*x580))+((sj4*x588))+((cj4*r01*x589)));
evalcond[3]=((((-1.0)*cj1*x576))+(((-1.0)*x585*x586))+(((-1.0)*x571*x587))+(((-1.0)*cj5*x584*x588))+((x572*x580)));
evalcond[4]=(((x580*x589))+(((-1.0)*x584*x588))+((cj0*cj2))+(((-1.0)*x585*x587))+(((-1.0)*x571*x586))+((sj0*sj1*sj2)));
evalcond[5]=(((sj1*x577))+(((-1.0)*cj2*x579))+(((-1.0)*x572*x586))+(((-1.0)*x580*x585))+(((-1.0)*x587*x589))+((cj4*r00*x571)));
evalcond[6]=((((-1.0)*sj2*x581))+(((-0.37429)*x571*x583))+(((-0.37429)*sj5*x588))+((x582*x585))+((cj0*x574))+(((-1.0)*px))+(((-1.0)*x575*x578))+((x573*x589))+x575);
evalcond[7]=((((-0.37429)*x590))+(((-1.0)*x582*x589))+(((-1.0)*x578*x581))+(((-1.0)*py))+((sj2*x575))+((x573*x585))+x581+(((0.37429)*x572*x583))+((sj0*x574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x591=(cj0*r01);
IkReal x592=(cj2*sj1);
IkReal x593=(r01*sj0);
IkReal x594=(r00*sj2);
CheckValue<IkReal> x595 = IKatan2WithCheck(IkReal(((((-1.0)*x592*x593))+((cj0*r00*x592))+((sj0*x594))+((sj2*x591)))),(((r00*sj0*x592))+(((-1.0)*cj0*x594))+((sj2*x593))+((x591*x592))),IKFAST_ATAN2_MAGTHRESH);
if(!x595.valid){
continue;
}
CheckValue<IkReal> x596=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x596.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x595.value)+(((1.5707963267949)*(x596.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x597=IKcos(j6);
IkReal x598=IKsin(j6);
IkReal x599=((0.01)*r00);
IkReal x600=((0.36442)*cj1);
IkReal x601=((0.069)*cj0);
IkReal x602=((1.0)*cj0);
IkReal x603=(cj0*sj2);
IkReal x604=(cj2*sj1);
IkReal x605=((1.0)*sj0);
IkReal x606=(r01*sj4);
IkReal x607=((0.069)*sj0);
IkReal x608=((0.01)*r01);
IkReal x609=(r01*sj5);
IkReal x610=((1.0)*cj4);
IkReal x611=(cj5*x597);
IkReal x612=(r01*x610);
IkReal x613=((1.0)*r00*sj4);
IkReal x614=(r00*x598);
IkReal x615=(cj5*x598);
IkReal x616=(r00*sj5*x597);
evalcond[0]=((((-1.0)*x604*x605))+x603+x616+(((-1.0)*x598*x609)));
evalcond[1]=((((-1.0)*x602*x604))+(((-1.0)*sj2*x605))+((x597*x609))+((sj5*x614)));
evalcond[2]=(((sj4*x614))+((cj4*r01*x615))+(((-1.0)*cj1*x605))+((x597*x606))+(((-1.0)*r00*x610*x611)));
evalcond[3]=((((-1.0)*cj5*x610*x614))+(((-1.0)*x611*x612))+(((-1.0)*x597*x613))+(((-1.0)*cj1*x602))+((x598*x606)));
evalcond[4]=((((-1.0)*x610*x614))+(((-1.0)*x611*x613))+(((-1.0)*x597*x612))+((cj0*cj2))+((x606*x615))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*x606*x611))+((sj1*x603))+((cj4*r00*x597))+(((-1.0)*cj2*x605))+(((-1.0)*x598*x612))+(((-1.0)*x613*x615)));
evalcond[6]=((((-0.37429)*sj5*x614))+((x608*x611))+(((-1.0)*sj2*x607))+(((-1.0)*px))+x601+((x599*x615))+(((-0.37429)*x597*x609))+((cj0*x600))+(((-1.0)*x601*x604)));
evalcond[7]=(((sj0*x600))+(((-1.0)*x604*x607))+(((-0.37429)*x616))+(((-1.0)*py))+(((0.37429)*x598*x609))+x607+((x599*x611))+((sj2*x601))+(((-1.0)*x608*x615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x617=(cj5*r22);
IkReal x618=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((0.01)*r22*sj5))+(((0.37429)*x617))+(((-1.0)*pz))+(((-0.069)*x618))+(((-0.36442)*sj1)));
evalcond[2]=((((-1.0)*x618))+x617);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x619=(py*r01);
IkReal x620=(px*r00);
IkReal x621=(pz*r00);
IkReal x622=((-1.0)*r01);
IkReal x623=(((px*r01))+((py*r00)));
IkReal x624=(pz*x622);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x622;
r11=r00;
npx=((((-1.0)*x619))+x620);
npy=x623;
npz=(pz*r22);
rxp0_0=x624;
rxp0_1=((-1.0)*x621);
rxp0_2=x623;
rxp1_0=x621;
rxp1_1=x624;
rxp1_2=(x619+(((-1.0)*x620)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x625=(r22*sj5);
j4eval[0]=x625;
j4eval[1]=((IKabs(sj1))+(IKabs((cj1*sj2))));
j4eval[2]=IKsign(x625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x626 = IKatan2WithCheck(IkReal((cj1*sj2)),((-1.0)*sj1),IKFAST_ATAN2_MAGTHRESH);
if(!x626.valid){
continue;
}
CheckValue<IkReal> x627=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x626.value)+(((1.5707963267949)*(x627.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x628=(r22*sj5);
evalcond[0]=(sj1+((x628*(IKcos(j4)))));
evalcond[1]=(((cj1*sj2))+(((-1.0)*x628*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x629=((1.0)*sj2);
IkReal x630=(cj2*sj1);
IkReal x631=(r01*sj5);
IkReal x632=(r00*sj5);
IkReal x633=((1.0)*x630);
IkReal x634=(sj2+(((-1.0)*x632)));
IkReal x635=((1.0)*x632);
IkReal x636=((1.0)*x631);
IkReal x637=((((-1.0)*x629))+x632);
IkReal x638=((((-1.0)*x633))+x631);
IkReal x639=((((-1.0)*x636))+x630);
IkReal x640=(x630+x631);
IkReal x641=((((-1.0)*x629))+(((-1.0)*x635)));
IkReal x642=((((-1.0)*x636))+(((-1.0)*x633)));
IkReal gconst142=x634;
IkReal gconst143=x642;
IkReal gconst144=x638;
IkReal gconst145=x634;
IkReal gconst146=x642;
IkReal gconst147=x638;
IkReal gconst148=x641;
IkReal gconst149=x637;
IkReal gconst150=x639;
IkReal gconst151=x640;
IkReal gconst152=x641;
IkReal gconst153=x637;
IkReal gconst154=x639;
IkReal gconst155=x640;
IkReal x643=sj5*sj5;
IkReal x644=r01*r01;
IkReal x645=r00*r00;
IkReal x646=sj2*sj2;
IkReal x647=sj5*sj5*sj5;
IkReal x648=sj2*sj2*sj2;
IkReal x649=r00*r00*r00;
IkReal x650=((2.0)*gconst143);
IkReal x651=(gconst152*gconst155);
IkReal x652=(gconst149*gconst150);
IkReal x653=((8.0)*gconst144);
IkReal x654=(gconst142*gconst144);
IkReal x655=(gconst145*sj2);
IkReal x656=(gconst148*gconst151);
IkReal x657=(gconst145*gconst147);
IkReal x658=((2.0)*sj2);
IkReal x659=(cj2*sj1);
IkReal x660=((1.0)*gconst146);
IkReal x661=(gconst153*gconst154);
IkReal x662=((4.0)*gconst143);
IkReal x663=((2.0)*gconst142);
IkReal x664=((4.0)*r00);
IkReal x665=(gconst146*r01);
IkReal x666=((4.0)*gconst154);
IkReal x667=(r00*sj5);
IkReal x668=(gconst144*gconst146);
IkReal x669=((4.0)*gconst152);
IkReal x670=((2.0)*gconst146);
IkReal x671=(gconst146*sj2);
IkReal x672=(sj2*x643);
IkReal x673=(gconst146*x667);
IkReal x674=((2.0)*x659);
IkReal x675=((8.0)*x659);
IkReal x676=(gconst145*x643);
IkReal x677=(gconst143*x646);
IkReal x678=(gconst151*x644);
IkReal x679=((2.0)*x646);
IkReal x680=((8.0)*r00*r01);
IkReal x681=((8.0)*x644);
IkReal x682=((4.0)*x645);
IkReal x683=(x647*x649);
IkReal x684=(r00*r01*x643);
IkReal x685=(x643*x645);
IkReal x686=(gconst149*x685);
op[0]=((((-1.0)*x643*x666*x678))+((x656*x661))+((x651*x652))+(((-1.0)*x652*x661))+(((-1.0)*x651*x656))+(((-1.0)*gconst151*gconst152*r01*x643*x664))+(((-1.0)*x669*x686))+(((-1.0)*gconst149*gconst154*r01*x643*x664)));
op[1]=(((gconst152*x656*x658))+(((-1.0)*gconst155*x652*x674))+((gconst148*x651*x658))+(((-1.0)*gconst150*x651*x674))+((gconst152*x672*x680))+((gconst154*x672*x681))+(((-1.0)*gconst154*x656*x674))+(((-1.0)*gconst149*x651*x658))+((gconst150*x661*x674))+(((-1.0)*gconst151*x661*x674))+((gconst153*x652*x658))+(((-1.0)*gconst148*x658*x661))+((gconst154*x652*x674))+((gconst151*x675*x684))+((gconst154*x675*x684))+((gconst155*x656*x674))+((gconst149*x658*x661))+(((-1.0)*gconst153*x656*x658))+((x675*x686))+(((-1.0)*gconst152*x652*x658))+(((8.0)*x672*x678))+((gconst152*x675*x685))+((gconst151*x651*x674))+((gconst149*x672*x680)));
op[2]=((((-1.0)*gconst145*gconst148*gconst151*gconst155))+(((-1.0)*gconst143*gconst149*gconst153*gconst154))+(((-4.0)*gconst145*gconst151*r00*r01*(sj5*sj5)))+(((-8.0)*gconst151*gconst154*(r01*r01)*(sj5*sj5)))+(((-1.0)*gconst150*gconst153*gconst154*sj2))+(((-4.0)*gconst146*gconst151*(r01*r01)*(sj5*sj5)))+(((-1.0)*gconst144*gconst148*gconst152*gconst155))+(((-1.0)*gconst149*gconst150*gconst154*sj2))+((gconst148*gconst151*gconst154*r00*sj5))+(((-32.0)*cj2*r00*r01*sj1*sj2*(sj5*sj5)))+(((-1.0)*gconst142*gconst151*gconst152*gconst155))+(((4.0)*cj2*gconst149*gconst155*sj1*sj2))+(((-4.0)*gconst151*gconst155*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst144*gconst152*r00*r01*(sj5*sj5)))+((gconst147*gconst149*gconst150*gconst152))+(((-4.0)*cj2*gconst150*gconst153*sj1*sj2))+(((-4.0)*gconst150*gconst154*(cj2*cj2)*(sj1*sj1)))+(((-8.0)*gconst149*gconst152*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst152*(r00*r00*r00)*(sj5*sj5*sj5)))+((gconst143*gconst149*gconst152*gconst155))+(((-4.0)*gconst148*gconst152*(sj2*sj2)))+(((-1.0)*gconst149*gconst150*gconst154*r00*sj5))+(((-1.0)*gconst147*gconst148*gconst151*gconst152))+(((4.0)*cj2*gconst148*gconst154*sj1*sj2))+(((4.0)*gconst149*gconst152*(sj2*sj2)))+((gconst144*gconst148*gconst153*gconst154))+(((-4.0)*gconst145*gconst149*(r00*r00)*(sj5*sj5)))+((gconst142*gconst151*gconst153*gconst154))+(((-4.0)*cj2*gconst151*gconst152*sj1*sj2))+(((4.0)*gconst151*gconst154*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst154*r00*r01*sj2*(sj5*sj5)))+(((-8.0)*gconst149*gconst154*r00*r01*(sj5*sj5)))+((gconst148*gconst151*gconst154*sj2))+((gconst150*gconst152*gconst155*r00*sj5))+((gconst150*gconst152*gconst155*sj2))+(((-4.0)*cj2*gconst148*gconst155*sj1*sj2))+(((-4.0)*gconst154*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-16.0)*(r01*r01)*(sj2*sj2)*(sj5*sj5)))+(((4.0)*cj2*gconst150*gconst152*sj1*sj2))+((gconst146*gconst148*gconst151*gconst153))+(((-1.0)*gconst150*gconst153*gconst154*r00*sj5))+(((-8.0)*gconst151*gconst152*r00*r01*(sj5*sj5)))+(((-4.0)*gconst144*gconst154*(r01*r01)*(sj5*sj5)))+(((4.0)*gconst150*gconst155*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*cj2*gconst149*gconst154*sj1*sj2))+(((4.0)*gconst148*gconst153*(sj2*sj2)))+(((-4.0)*gconst149*gconst153*(sj2*sj2)))+(((-4.0)*gconst146*gconst149*r00*r01*(sj5*sj5)))+(((4.0)*cj2*gconst151*gconst153*sj1*sj2))+(((-16.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((-1.0)*gconst146*gconst149*gconst150*gconst153))+((gconst145*gconst149*gconst150*gconst155))+(((-4.0)*gconst152*sj2*(r00*r00)*(sj5*sj5))));
op[3]=((((-2.0)*gconst145*gconst149*gconst150*sj2))+(((16.0)*gconst149*r00*r01*sj2*(sj5*sj5)))+(((2.0)*gconst149*gconst150*r00*sj2*sj5))+(((-2.0)*cj2*gconst151*gconst154*r00*sj1*sj5))+(((2.0)*cj2*gconst143*gconst149*gconst154*sj1))+(((-2.0)*cj2*gconst144*gconst153*gconst154*sj1))+(((2.0)*gconst142*gconst151*gconst152*sj2))+(((8.0)*gconst146*sj2*(r01*r01)*(sj5*sj5)))+(((2.0)*gconst144*gconst148*gconst152*sj2))+(((-2.0)*gconst142*gconst153*gconst154*sj2))+(((-2.0)*gconst150*gconst152*(sj2*sj2)))+(((-2.0)*cj2*gconst143*gconst152*gconst155*sj1))+(((2.0)*gconst153*gconst154*r00*sj2*sj5))+(((8.0)*gconst144*sj2*(r01*r01)*(sj5*sj5)))+(((2.0)*gconst153*gconst154*(sj2*sj2)))+(((16.0)*gconst152*r00*r01*sj2*(sj5*sj5)))+(((16.0)*cj2*gconst154*r00*r01*sj1*(sj5*sj5)))+(((2.0)*gconst145*gconst148*gconst151*sj2))+(((2.0)*gconst149*gconst154*r00*sj2*sj5))+(((16.0)*cj2*gconst151*r00*r01*sj1*(sj5*sj5)))+(((2.0)*cj2*gconst146*gconst149*gconst150*sj1))+(((2.0)*gconst149*gconst154*(sj2*sj2)))+(((8.0)*cj2*sj1*sj2*(r00*r00)*(sj5*sj5)))+(((-2.0)*cj2*gconst150*gconst155*sj1*sj2))+(((2.0)*cj2*gconst147*gconst151*gconst152*sj1))+(((2.0)*cj2*gconst144*gconst152*gconst155*sj1))+(((2.0)*gconst147*gconst148*gconst152*sj2))+(((2.0)*gconst150*gconst153*r00*sj2*sj5))+(((2.0)*gconst145*gconst148*gconst155*sj2))+(((8.0)*gconst145*r00*r01*sj2*(sj5*sj5)))+(((2.0)*cj2*gconst147*gconst148*gconst151*sj1))+(((-2.0)*cj2*gconst147*gconst150*gconst152*sj1))+(((-2.0)*gconst147*gconst149*gconst152*sj2))+(((8.0)*cj2*gconst146*r00*r01*sj1*(sj5*sj5)))+(((2.0)*cj2*gconst145*gconst151*gconst155*sj1))+(((8.0)*r01*sj2*(r00*r00)*(sj5*sj5*sj5)))+(((8.0)*r00*r01*(sj2*sj2)*(sj5*sj5)))+(((2.0)*cj2*gconst142*gconst151*gconst155*sj1))+(((2.0)*cj2*gconst144*gconst148*gconst155*sj1))+(((16.0)*gconst151*sj2*(r01*r01)*(sj5*sj5)))+(((8.0)*cj2*sj1*(r00*r00*r00)*(sj5*sj5*sj5)))+(((16.0)*cj2*gconst149*sj1*(r00*r00)*(sj5*sj5)))+(((8.0)*cj2*gconst145*sj1*(r00*r00)*(sj5*sj5)))+(((2.0)*cj2*gconst146*gconst150*gconst153*sj1))+(((-2.0)*cj2*gconst146*gconst148*gconst151*sj1))+(((8.0)*cj2*gconst144*r00*r01*sj1*(sj5*sj5)))+(((-2.0)*cj2*gconst147*gconst149*gconst150*sj1))+(((-2.0)*gconst145*gconst149*gconst155*sj2))+(((-2.0)*gconst152*gconst155*r00*sj2*sj5))+(((-2.0)*cj2*gconst146*gconst151*gconst153*sj1))+(((-2.0)*cj2*gconst145*gconst150*gconst155*sj1))+(((-2.0)*gconst144*gconst148*gconst153*sj2))+(((16.0)*gconst154*sj2*(r01*r01)*(sj5*sj5)))+(((4.0)*cj2*gconst150*gconst154*sj1*sj2))+(((-2.0)*cj2*gconst150*gconst155*r00*sj1*sj5))+(((-2.0)*cj2*gconst142*gconst151*gconst154*sj1))+(((-2.0)*gconst148*gconst151*r00*sj2*sj5))+(((2.0)*gconst142*gconst152*gconst155*sj2))+(((2.0)*gconst150*gconst153*(sj2*sj2)))+(((16.0)*cj2*gconst152*sj1*(r00*r00)*(sj5*sj5)))+(((-2.0)*gconst148*gconst151*(sj2*sj2)))+(((-2.0)*cj2*gconst144*gconst148*gconst154*sj1))+(((2.0)*cj2*gconst143*gconst153*gconst154*sj1))+(((-2.0)*gconst152*gconst155*(sj2*sj2)))+(((-2.0)*gconst148*gconst154*r00*sj2*sj5))+(((4.0)*cj2*gconst150*gconst154*r00*sj1*sj5))+(((2.0)*gconst143*gconst149*gconst153*sj2))+(((-2.0)*gconst143*gconst149*gconst152*sj2))+(((2.0)*gconst149*gconst150*(sj2*sj2)))+(((-2.0)*gconst142*gconst151*gconst153*sj2))+(((2.0)*gconst146*gconst149*gconst153*sj2))+(((-2.0)*gconst146*gconst148*gconst153*sj2))+(((-2.0)*cj2*gconst143*gconst149*gconst155*sj1))+(((-2.0)*gconst150*gconst152*r00*sj2*sj5))+(((-2.0)*gconst148*gconst154*(sj2*sj2)))+(((-2.0)*cj2*gconst151*gconst154*sj1*sj2)));
op[4]=((((4.0)*gconst148*r00*sj5*(sj2*sj2)))+((gconst145*gconst150*gconst155*sj2))+(((-4.0)*cj2*gconst154*r00*sj1*sj2*sj5))+(((-1.0)*gconst143*gconst149*gconst154*r00*sj5))+(((-4.0)*gconst145*gconst148*(sj2*sj2)))+(((-8.0)*gconst146*gconst149*r00*r01*(sj5*sj5)))+(((4.0)*cj2*gconst151*r00*sj1*sj2*sj5))+((gconst143*gconst152*gconst155*sj2))+(((-32.0)*(r01*r01)*(sj2*sj2)*(sj5*sj5)))+(((-1.0)*gconst143*gconst153*gconst154*sj2))+(((-1.0)*gconst150*gconst154*(sj2*sj2)))+((gconst143*gconst145*gconst149*gconst155))+(((4.0)*cj2*gconst155*sj1*(sj2*sj2)))+(((-4.0)*gconst146*gconst150*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst151*gconst154*(r01*r01)*(sj5*sj5)))+(((-4.0)*gconst147*gconst151*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst144*gconst155*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*cj2*gconst146*gconst149*sj1*sj2))+((gconst142*gconst151*gconst154*sj2))+(((-4.0)*gconst151*gconst152*r00*r01*(sj5*sj5)))+(((-4.0)*cj2*gconst142*gconst155*sj1*sj2))+(((-8.0)*gconst145*gconst151*r00*r01*(sj5*sj5)))+(((4.0)*cj2*gconst143*gconst152*sj1*sj2))+(((-4.0)*cj2*gconst147*gconst148*sj1*sj2))+(((-8.0)*gconst152*sj2*(r00*r00)*(sj5*sj5)))+(((-4.0)*cj2*gconst154*sj1*(sj2*sj2)))+(((-4.0)*gconst144*gconst145*r00*r01*(sj5*sj5)))+((gconst146*gconst148*gconst151*sj2))+(((4.0)*gconst144*gconst154*(cj2*cj2)*(sj1*sj1)))+(((4.0)*gconst148*(sj2*sj2*sj2)))+((gconst143*gconst152*gconst155*r00*sj5))+((gconst144*gconst148*gconst154*sj2))+(((4.0)*gconst145*gconst149*(sj2*sj2)))+(((-4.0)*gconst149*gconst154*r00*r01*(sj5*sj5)))+(((4.0)*cj2*gconst145*gconst150*sj1*sj2))+(((-8.0)*gconst145*gconst149*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst145*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*gconst145*sj2*(r00*r00)*(sj5*sj5)))+(((-8.0)*gconst154*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-2.0)*gconst150*gconst154*r00*sj2*sj5))+(((-4.0)*gconst142*gconst152*(sj2*sj2)))+(((4.0)*cj2*gconst142*gconst154*sj1*sj2))+(((-1.0)*gconst150*gconst154*(r00*r00)*(sj5*sj5)))+((gconst146*gconst148*gconst151*r00*sj5))+(((-1.0)*gconst146*gconst150*gconst153*r00*sj5))+(((-1.0)*gconst143*gconst153*gconst154*r00*sj5))+(((-1.0)*gconst142*gconst147*gconst151*gconst152))+(((-8.0)*gconst144*gconst154*(r01*r01)*(sj5*sj5)))+(((-8.0)*gconst154*r00*r01*sj2*(sj5*sj5)))+((gconst142*gconst144*gconst153*gconst154))+((gconst145*gconst150*gconst155*r00*sj5))+(((-4.0)*gconst149*r00*sj5*(sj2*sj2)))+(((4.0)*gconst146*gconst151*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*gconst153*(sj2*sj2*sj2)))+((gconst142*gconst151*gconst154*r00*sj5))+(((-4.0)*gconst153*r00*sj5*(sj2*sj2)))+((gconst145*gconst147*gconst149*gconst150))+(((4.0)*cj2*gconst151*sj1*(sj2*sj2)))+((gconst147*gconst150*gconst152*r00*sj5))+(((4.0)*cj2*gconst146*gconst148*sj1*sj2))+(((-8.0)*gconst146*gconst151*(r01*r01)*(sj5*sj5)))+(((-1.0)*gconst146*gconst149*gconst150*sj2))+(((-4.0)*cj2*gconst144*gconst152*sj1*sj2))+(((4.0)*gconst147*gconst150*(cj2*cj2)*(sj1*sj1)))+((gconst147*gconst150*gconst152*sj2))+(((-1.0)*gconst145*gconst147*gconst148*gconst151))+(((-1.0)*gconst146*gconst150*gconst153*sj2))+(((-4.0)*gconst149*(sj2*sj2*sj2)))+(((-1.0)*gconst146*gconst149*gconst150*r00*sj5))+(((4.0)*gconst152*(sj2*sj2*sj2)))+(((-64.0)*cj2*r00*r01*sj1*sj2*(sj5*sj5)))+(((4.0)*gconst143*gconst155*(cj2*cj2)*(sj1*sj1)))+(((-4.0)*cj2*gconst150*sj1*(sj2*sj2)))+(((-1.0)*gconst143*gconst146*gconst149*gconst153))+(((4.0)*gconst152*r00*sj5*(sj2*sj2)))+(((-4.0)*gconst144*gconst146*(r01*r01)*(sj5*sj5)))+(((-8.0)*gconst144*gconst152*r00*r01*(sj5*sj5)))+(((-1.0)*gconst143*gconst149*gconst154*sj2))+(((-4.0)*gconst149*gconst152*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst144*gconst147*gconst148*gconst152))+(((-4.0)*gconst146*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*gconst146*r00*r01*sj2*(sj5*sj5)))+(((-4.0)*cj2*gconst143*gconst153*sj1*sj2))+(((-4.0)*gconst143*gconst154*(cj2*cj2)*(sj1*sj1)))+(((4.0)*cj2*gconst155*r00*sj1*sj2*sj5))+(((-1.0)*gconst142*gconst145*gconst151*gconst155))+(((-32.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((4.0)*cj2*gconst147*gconst149*sj1*sj2))+(((-8.0)*gconst152*(r00*r00*r00)*(sj5*sj5*sj5)))+(((4.0)*cj2*gconst144*gconst153*sj1*sj2))+((gconst144*gconst148*gconst154*r00*sj5))+(((-1.0)*gconst144*gconst145*gconst148*gconst155))+((gconst144*gconst146*gconst148*gconst153))+((gconst142*gconst146*gconst151*gconst153))+(((4.0)*gconst142*gconst153*(sj2*sj2)))+(((-1.0)*gconst142*gconst144*gconst152*gconst155))+(((-4.0)*cj2*gconst145*gconst151*sj1*sj2))+((gconst143*gconst147*gconst149*gconst152))+(((-4.0)*cj2*gconst150*r00*sj1*sj2*sj5)));
op[5]=((((8.0)*cj2*gconst151*r00*r01*sj1*(sj5*sj5)))+(((2.0)*gconst150*sj2*(r00*r00)*(sj5*sj5)))+(((16.0)*cj2*gconst146*r00*r01*sj1*(sj5*sj5)))+(((4.0)*cj2*gconst146*gconst150*r00*sj1*sj5))+(((-2.0)*cj2*gconst142*gconst146*gconst151*sj1))+(((2.0)*gconst154*sj2*(r00*r00)*(sj5*sj5)))+(((4.0)*cj2*gconst143*gconst154*r00*sj1*sj5))+(((8.0)*gconst154*sj2*(r01*r01)*(sj5*sj5)))+(((-2.0)*cj2*gconst143*gconst155*sj1*sj2))+(((2.0)*gconst145*gconst147*gconst148*sj2))+(((-2.0)*gconst147*gconst152*(sj2*sj2)))+(((2.0)*gconst143*gconst149*(sj2*sj2)))+(((-2.0)*gconst145*gconst150*(sj2*sj2)))+(((16.0)*cj2*gconst144*r00*r01*sj1*(sj5*sj5)))+(((8.0)*gconst152*r00*r01*sj2*(sj5*sj5)))+(((8.0)*gconst151*sj2*(r01*r01)*(sj5*sj5)))+(((4.0)*gconst154*r00*sj5*(sj2*sj2)))+(((2.0)*gconst144*gconst145*gconst148*sj2))+(((-2.0)*cj2*gconst142*gconst144*gconst154*sj1))+(((2.0)*cj2*gconst143*gconst146*gconst153*sj1))+(((2.0)*cj2*gconst145*gconst147*gconst151*sj1))+(((-2.0)*cj2*gconst146*gconst151*sj1*sj2))+(((8.0)*cj2*gconst152*sj1*(r00*r00)*(sj5*sj5)))+(((8.0)*gconst149*r00*r01*sj2*(sj5*sj5)))+(((2.0)*gconst143*gconst153*(sj2*sj2)))+(((2.0)*gconst146*gconst149*r00*sj2*sj5))+(((4.0)*cj2*gconst146*gconst150*sj1*sj2))+(((16.0)*cj2*sj1*(r00*r00*r00)*(sj5*sj5*sj5)))+(((4.0)*gconst150*r00*sj5*(sj2*sj2)))+(((2.0)*gconst142*gconst145*gconst155*sj2))+(((2.0)*gconst154*(sj2*sj2*sj2)))+(((-2.0)*cj2*gconst146*gconst151*r00*sj1*sj5))+(((-2.0)*gconst142*gconst146*gconst153*sj2))+(((2.0)*gconst142*gconst144*gconst152*sj2))+(((-2.0)*gconst142*gconst144*gconst153*sj2))+(((16.0)*cj2*sj1*sj2*(r00*r00)*(sj5*sj5)))+(((-2.0)*cj2*gconst145*gconst147*gconst150*sj1))+(((-2.0)*gconst145*gconst155*r00*sj2*sj5))+(((16.0)*cj2*gconst145*sj1*(r00*r00)*(sj5*sj5)))+(((16.0)*gconst144*sj2*(r01*r01)*(sj5*sj5)))+(((-2.0)*gconst144*gconst148*r00*sj2*sj5))+(((-2.0)*cj2*gconst143*gconst147*gconst149*sj1))+(((-2.0)*cj2*gconst143*gconst155*r00*sj1*sj5))+(((-2.0)*gconst146*gconst148*(sj2*sj2)))+(((16.0)*gconst146*sj2*(r01*r01)*(sj5*sj5)))+(((-2.0)*gconst142*gconst154*r00*sj2*sj5))+(((-2.0)*gconst144*gconst148*(sj2*sj2)))+(((2.0)*cj2*gconst143*gconst146*gconst149*sj1))+(((-2.0)*gconst147*gconst152*r00*sj2*sj5))+(((2.0)*gconst146*gconst149*(sj2*sj2)))+(((-2.0)*cj2*gconst144*gconst146*gconst148*sj1))+(((-2.0)*cj2*gconst147*gconst150*r00*sj1*sj5))+(((2.0)*gconst142*gconst147*gconst152*sj2))+(((2.0)*cj2*gconst142*gconst147*gconst151*sj1))+(((2.0)*cj2*gconst142*gconst144*gconst155*sj1))+(((4.0)*cj2*gconst143*gconst154*sj1*sj2))+(((-2.0)*gconst142*gconst151*r00*sj2*sj5))+(((-2.0)*gconst143*gconst152*r00*sj2*sj5))+(((-2.0)*gconst143*gconst145*gconst149*sj2))+(((2.0)*gconst150*(sj2*sj2*sj2)))+(((-2.0)*gconst145*gconst155*(sj2*sj2)))+(((2.0)*gconst146*gconst153*r00*sj2*sj5))+(((2.0)*cj2*gconst144*gconst145*gconst155*sj1))+(((2.0)*cj2*gconst144*gconst147*gconst148*sj1))+(((16.0)*gconst145*r00*r01*sj2*(sj5*sj5)))+(((2.0)*gconst143*gconst153*r00*sj2*sj5))+(((2.0)*gconst146*gconst153*(sj2*sj2)))+(((16.0)*r01*sj2*(r00*r00)*(sj5*sj5*sj5)))+(((-2.0)*cj2*gconst144*gconst146*gconst153*sj1))+(((-2.0)*gconst142*gconst154*(sj2*sj2)))+(((2.0)*cj2*gconst144*gconst147*gconst152*sj1))+(((2.0)*gconst143*gconst149*r00*sj2*sj5))+(((8.0)*cj2*gconst154*r00*r01*sj1*(sj5*sj5)))+(((-2.0)*cj2*gconst144*gconst154*r00*sj1*sj5))+(((-2.0)*cj2*gconst147*gconst150*sj1*sj2))+(((-2.0)*cj2*gconst143*gconst147*gconst152*sj1))+(((-2.0)*gconst142*gconst151*(sj2*sj2)))+(((-2.0)*gconst145*gconst147*gconst149*sj2))+(((-2.0)*gconst146*gconst148*r00*sj2*sj5))+(((-2.0)*gconst143*gconst152*(sj2*sj2)))+(((-2.0)*cj2*gconst143*gconst145*gconst155*sj1))+(((16.0)*r00*r01*(sj2*sj2)*(sj5*sj5)))+(((2.0)*gconst142*gconst145*gconst151*sj2))+(((-2.0)*cj2*gconst144*gconst154*sj1*sj2))+(((8.0)*cj2*gconst149*sj1*(r00*r00)*(sj5*sj5)))+(((-2.0)*gconst145*gconst150*r00*sj2*sj5)));
op[6]=((((4.0)*cj2*gconst143*gconst145*sj1*sj2))+(((4.0)*gconst143*gconst147*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst143*gconst146*gconst153*sj2))+(((-8.0)*gconst145*sj2*(r00*r00)*(sj5*sj5)))+(((-4.0)*gconst145*gconst151*r00*r01*(sj5*sj5)))+(((-1.0)*gconst144*gconst145*gconst147*gconst148))+(((-4.0)*gconst146*gconst151*(r01*r01)*(sj5*sj5)))+(((-4.0)*gconst143*gconst146*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst146*gconst150*(r00*r00)*(sj5*sj5)))+(((-4.0)*(sj2*sj2*sj2*sj2)))+(((4.0)*cj2*gconst144*r00*sj1*sj2*sj5))+(((4.0)*cj2*gconst144*sj1*(sj2*sj2)))+((gconst143*gconst147*gconst152*r00*sj5))+(((-32.0)*cj2*r00*r01*sj1*sj2*(sj5*sj5)))+(((-8.0)*gconst145*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*gconst144*gconst152*r00*r01*(sj5*sj5)))+((gconst144*gconst146*gconst148*sj2))+((gconst143*gconst145*gconst155*r00*sj5))+(((-1.0)*gconst143*gconst146*gconst149*r00*sj5))+((gconst145*gconst147*gconst150*r00*sj5))+(((-4.0)*gconst152*(r00*r00*r00)*(sj5*sj5*sj5)))+(((-1.0)*gconst142*gconst144*gconst145*gconst155))+(((4.0)*gconst144*gconst146*(cj2*cj2)*(sj1*sj1)))+(((-1.0)*gconst143*gconst146*gconst153*r00*sj5))+(((-1.0)*gconst143*gconst154*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst142*gconst144*gconst147*gconst152))+(((4.0)*gconst145*r00*sj5*(sj2*sj2)))+(((-4.0)*cj2*gconst146*sj1*(sj2*sj2)))+((gconst143*gconst145*gconst155*sj2))+(((-8.0)*gconst144*gconst146*(r01*r01)*(sj5*sj5)))+((gconst142*gconst144*gconst146*gconst153))+(((-2.0)*gconst146*gconst150*r00*sj2*sj5))+(((4.0)*cj2*gconst147*sj1*(sj2*sj2)))+((gconst142*gconst144*gconst154*r00*sj5))+(((-4.0)*(r00*r00)*(sj2*sj2)*(sj5*sj5)))+(((-4.0)*cj2*gconst143*r00*sj1*sj2*sj5))+(((-4.0)*cj2*gconst144*gconst145*sj1*sj2))+((gconst142*gconst146*gconst151*sj2))+(((-4.0)*gconst144*gconst147*(cj2*cj2)*(sj1*sj1)))+((gconst143*gconst147*gconst152*sj2))+(((-4.0)*gconst145*gconst149*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst146*gconst150*(sj2*sj2)))+((gconst142*gconst144*gconst154*sj2))+(((-8.0)*r00*sj5*(sj2*sj2*sj2)))+(((-4.0)*gconst154*r00*r01*sj2*(sj5*sj5)))+((gconst143*gconst145*gconst147*gconst149))+(((4.0)*gconst142*(sj2*sj2*sj2)))+(((-1.0)*gconst142*gconst145*gconst147*gconst151))+(((-4.0)*gconst142*gconst145*(sj2*sj2)))+(((4.0)*gconst145*(sj2*sj2*sj2)))+(((-4.0)*gconst154*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-16.0)*(r01*r01)*(sj2*sj2)*(sj5*sj5)))+((gconst142*gconst146*gconst151*r00*sj5))+(((4.0)*gconst142*r00*sj5*(sj2*sj2)))+(((4.0)*cj2*gconst142*gconst146*sj1*sj2))+(((4.0)*cj2*gconst147*r00*sj1*sj2*sj5))+(((-4.0)*cj2*gconst143*sj1*(sj2*sj2)))+(((-4.0)*gconst144*gconst154*(r01*r01)*(sj5*sj5)))+((gconst145*gconst147*gconst150*sj2))+(((-8.0)*gconst146*r01*(r00*r00)*(sj5*sj5*sj5)))+(((-4.0)*cj2*gconst146*r00*sj1*sj2*sj5))+((gconst144*gconst146*gconst148*r00*sj5))+(((-1.0)*gconst143*gconst146*gconst149*sj2))+(((-8.0)*gconst146*r00*r01*sj2*(sj5*sj5)))+(((-4.0)*gconst146*gconst149*r00*r01*(sj5*sj5)))+(((-2.0)*gconst143*gconst154*r00*sj2*sj5))+(((-16.0)*(cj2*cj2)*(r00*r00)*(sj1*sj1)*(sj5*sj5)))+(((-4.0)*cj2*gconst142*gconst147*sj1*sj2))+(((-8.0)*gconst144*gconst145*r00*r01*(sj5*sj5)))+(((-4.0)*gconst152*sj2*(r00*r00)*(sj5*sj5)))+(((-1.0)*gconst143*gconst154*(sj2*sj2))));
op[7]=(((x653*x659*x684))+(((-1.0)*gconst146*x646*x663))+((gconst147*x655*x663))+((x643*x671*x681))+(((-1.0)*x657*x679))+(((2.0)*x654*x655))+(((-1.0)*x658*x659*x668))+((x643*x646*x680))+((x645*x672*x675))+(((-1.0)*gconst145*x646*x650))+(((-1.0)*x654*x679))+((x644*x653*x672))+((x643*x655*x680))+(((8.0)*r01*sj2*x645*x647))+((gconst147*x654*x674))+((x646*x662*x667))+((gconst146*sj5*x646*x664))+(((-1.0)*x650*x655*x667))+((x648*x650))+(((-1.0)*gconst142*x658*x673))+((x645*x650*x672))+((x645*x675*x676))+((gconst144*x657*x674))+(((-1.0)*gconst147*sj2*x650*x659))+((x648*x670))+(((-1.0)*gconst147*x650*x659*x667))+(((-1.0)*x650*x657*x659))+(((-1.0)*x667*x668*x674))+((gconst146*x658*x685))+((x675*x683))+(((-1.0)*x654*x659*x670))+(((-1.0)*x654*x658*x667))+(((-2.0)*gconst147*x655*x667))+((x659*x662*x671))+((x659*x662*x673))+((r00*x643*x665*x675)));
op[8]=((((-1.0)*x647*x665*x682))+(((-1.0)*gconst144*r01*x664*x676))+(((-4.0)*x643*x644*x668))+(((-1.0)*x660*x677))+(((-1.0)*gconst143*x660*x685))+(((-1.0)*x664*x665*x672))+(((-1.0)*x650*x667*x671))+(((-1.0)*x643*x655*x682))+((gconst143*gconst147*x655))+((gconst143*x657*x667))+((x654*x671))+((x654*x673))+(((-4.0)*gconst145*x683))+(((-1.0)*x654*x657)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[3];
IkReal x687=(py*r01);
IkReal x688=(px*r00);
IkReal x689=(pz*r00);
IkReal x690=((-1.0)*r01);
IkReal x691=(((px*r01))+((py*r00)));
IkReal x692=(pz*x690);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x690;
r11=r00;
npx=(x688+(((-1.0)*x687)));
npy=x691;
npz=(pz*r22);
rxp0_0=x692;
rxp0_1=((-1.0)*x689);
rxp0_2=x691;
rxp1_0=x689;
rxp1_1=x692;
rxp1_2=(x687+(((-1.0)*x688)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x693=cj2*cj2;
IkReal x694=sj1*sj1;
IkReal x695=sj0*sj0;
IkReal x696=cj0*cj0;
IkReal x697=sj2*sj2;
IkReal x698=(x693*x694);
j6eval[0]=sj5;
j6eval[1]=(((x695*x697))+((x695*x698))+((x696*x697))+((x696*x698)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x699=(py*r01);
IkReal x700=(px*r00);
IkReal x701=(pz*r00);
IkReal x702=((-1.0)*r01);
IkReal x703=(((px*r01))+((py*r00)));
IkReal x704=(pz*x702);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x702;
r11=r00;
npx=(x700+(((-1.0)*x699)));
npy=x703;
npz=(pz*r22);
rxp0_0=x704;
rxp0_1=((-1.0)*x701);
rxp0_2=x703;
rxp1_0=x701;
rxp1_1=x704;
rxp1_2=((((-1.0)*x700))+x699);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x705=(cj4*cj5*sj5);
j6eval[0]=x705;
j6eval[1]=IKsign(x705);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x706=(py*r01);
IkReal x707=(px*r00);
IkReal x708=(pz*r00);
IkReal x709=((-1.0)*r01);
IkReal x710=(((px*r01))+((py*r00)));
IkReal x711=(pz*x709);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x709;
r11=r00;
npx=((((-1.0)*x706))+x707);
npy=x710;
npz=(pz*r22);
rxp0_0=x711;
rxp0_1=((-1.0)*x708);
rxp0_2=x710;
rxp1_0=x708;
rxp1_1=x711;
rxp1_2=((((-1.0)*x707))+x706);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x712=(sj4*sj5);
j6eval[0]=x712;
j6eval[1]=IKsign(x712);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x713=(cj0*sj2);
IkReal x714=(r01*sj4);
IkReal x715=(r00*sj4);
IkReal x716=(cj4*cj5*r00);
IkReal x717=(cj2*sj0*sj1);
IkReal x718=(cj1*sj0*sj5);
IkReal x719=(cj4*cj5*r01);
CheckValue<IkReal> x720=IKPowWithIntegerCheck(IKsign((sj4*sj5)),-1);
if(!x720.valid){
continue;
}
CheckValue<IkReal> x721 = IKatan2WithCheck(IkReal((((r00*x718))+(((-1.0)*x714*x717))+(((-1.0)*x713*x716))+((x716*x717))+((x713*x714)))),(((x715*x717))+((r01*x718))+((x717*x719))+(((-1.0)*x713*x715))+(((-1.0)*x713*x719))),IKFAST_ATAN2_MAGTHRESH);
if(!x721.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x720.value)))+(x721.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x722=IKsin(j6);
IkReal x723=IKcos(j6);
IkReal x724=(cj5*r00);
IkReal x725=(cj4*r01);
IkReal x726=(cj1*sj0);
IkReal x727=((0.069)*cj0);
IkReal x728=((1.0)*cj0);
IkReal x729=(cj0*sj2);
IkReal x730=(cj2*sj1);
IkReal x731=((1.0)*sj0);
IkReal x732=(r01*sj5);
IkReal x733=(cj5*r01);
IkReal x734=((0.069)*sj0);
IkReal x735=(r00*sj5);
IkReal x736=((0.01)*x723);
IkReal x737=((1.0)*x723);
IkReal x738=(cj4*x722);
IkReal x739=(cj4*x723);
IkReal x740=((0.37429)*x723);
IkReal x741=((0.37429)*x722);
IkReal x742=((0.01)*x722);
IkReal x743=((1.0)*x722);
IkReal x744=(sj4*x743);
evalcond[0]=((((-1.0)*x735*x737))+((x722*x732))+(((-1.0)*x730*x731))+x729);
evalcond[1]=((((-1.0)*x732*x737))+(((-1.0)*sj2*x731))+(((-1.0)*x728*x730))+(((-1.0)*x735*x743)));
evalcond[2]=(((r00*sj4*x723))+(((-1.0)*cj1*x728))+(((-1.0)*r01*x744))+((x724*x738))+((cj5*x723*x725)));
evalcond[3]=((((-1.0)*cj5*x725*x743))+(((-1.0)*r01*sj4*x737))+(((-1.0)*x726))+(((-1.0)*r00*x744))+((x724*x739)));
evalcond[4]=(((sj4*x722*x733))+((cj0*cj2))+(((-1.0)*x725*x737))+(((-1.0)*sj4*x724*x737))+(((-1.0)*r00*x738))+((sj0*sj1*sj2)));
evalcond[5]=((((-1.0)*cj2*x731))+((r00*x739))+(((-1.0)*x725*x743))+((sj1*x729))+(((-1.0)*sj4*x733*x737))+(((-1.0)*x724*x744)));
evalcond[6]=((((-1.0)*x727*x730))+((x724*x742))+(((-1.0)*x732*x740))+(((0.36442)*cj0*cj1))+(((-1.0)*px))+((x733*x736))+(((-1.0)*sj2*x734))+x727+(((-1.0)*x735*x741)));
evalcond[7]=(((sj2*x727))+(((-1.0)*py))+((x732*x741))+(((-1.0)*x730*x734))+((x724*x736))+(((-1.0)*x733*x742))+x734+(((-1.0)*x735*x740))+(((0.36442)*x726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x745=(r01*sj4);
IkReal x746=(cj4*cj5);
IkReal x747=(r00*sj4);
IkReal x748=((1.0)*cj0*sj2);
IkReal x749=(cj2*sj0*sj1);
IkReal x750=(cj0*cj1*sj5);
CheckValue<IkReal> x751 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x746*x748))+((x747*x749))+((r01*x746*x749))+(((-1.0)*x747*x748))+((r00*x750)))),(((x745*x749))+((cj0*r00*sj2*x746))+(((-1.0)*x745*x748))+((r01*x750))+(((-1.0)*r00*x746*x749))),IKFAST_ATAN2_MAGTHRESH);
if(!x751.valid){
continue;
}
CheckValue<IkReal> x752=IKPowWithIntegerCheck(IKsign((sj5*x746)),-1);
if(!x752.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x751.value)+(((1.5707963267949)*(x752.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x753=IKsin(j6);
IkReal x754=IKcos(j6);
IkReal x755=(cj5*r00);
IkReal x756=(cj4*r01);
IkReal x757=(cj1*sj0);
IkReal x758=((0.069)*cj0);
IkReal x759=((1.0)*cj0);
IkReal x760=(cj0*sj2);
IkReal x761=(cj2*sj1);
IkReal x762=((1.0)*sj0);
IkReal x763=(r01*sj5);
IkReal x764=(cj5*r01);
IkReal x765=((0.069)*sj0);
IkReal x766=(r00*sj5);
IkReal x767=((0.01)*x754);
IkReal x768=((1.0)*x754);
IkReal x769=(cj4*x753);
IkReal x770=(cj4*x754);
IkReal x771=((0.37429)*x754);
IkReal x772=((0.37429)*x753);
IkReal x773=((0.01)*x753);
IkReal x774=((1.0)*x753);
IkReal x775=(sj4*x774);
evalcond[0]=((((-1.0)*x766*x768))+x760+((x753*x763))+(((-1.0)*x761*x762)));
evalcond[1]=((((-1.0)*x763*x768))+(((-1.0)*x766*x774))+(((-1.0)*x759*x761))+(((-1.0)*sj2*x762)));
evalcond[2]=(((r00*sj4*x754))+((cj5*x754*x756))+(((-1.0)*r01*x775))+(((-1.0)*cj1*x759))+((x755*x769)));
evalcond[3]=((((-1.0)*cj5*x756*x774))+(((-1.0)*r01*sj4*x768))+(((-1.0)*x757))+(((-1.0)*r00*x775))+((x755*x770)));
evalcond[4]=((((-1.0)*x756*x768))+(((-1.0)*r00*x769))+((sj4*x753*x764))+((cj0*cj2))+((sj0*sj1*sj2))+(((-1.0)*sj4*x755*x768)));
evalcond[5]=(((sj1*x760))+(((-1.0)*x755*x775))+(((-1.0)*cj2*x762))+(((-1.0)*x756*x774))+(((-1.0)*sj4*x764*x768))+((r00*x770)));
evalcond[6]=((((-1.0)*x758*x761))+(((0.36442)*cj0*cj1))+(((-1.0)*px))+(((-1.0)*x766*x772))+x758+(((-1.0)*x763*x771))+((x755*x773))+((x764*x767))+(((-1.0)*sj2*x765)));
evalcond[7]=((((-1.0)*x764*x773))+(((-1.0)*py))+(((0.36442)*x757))+(((-1.0)*x766*x771))+((x763*x772))+x765+((sj2*x758))+((x755*x767))+(((-1.0)*x761*x765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x776=(r00*sj2);
IkReal x777=((1.0)*sj0);
IkReal x778=(r01*sj2);
IkReal x779=(cj2*sj1);
IkReal x780=((1.0)*cj0);
CheckValue<IkReal> x781=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x781.valid){
continue;
}
CheckValue<IkReal> x782 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x779*x780))+((r01*sj0*x779))+(((-1.0)*x776*x777))+(((-1.0)*x778*x780)))),((((-1.0)*r01*x779*x780))+(((-1.0)*r00*x777*x779))+((cj0*x776))+(((-1.0)*x777*x778))),IKFAST_ATAN2_MAGTHRESH);
if(!x782.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x781.value)))+(x782.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x783=IKsin(j6);
IkReal x784=IKcos(j6);
IkReal x785=(cj5*r00);
IkReal x786=(cj4*r01);
IkReal x787=(cj1*sj0);
IkReal x788=((0.069)*cj0);
IkReal x789=((1.0)*cj0);
IkReal x790=(cj0*sj2);
IkReal x791=(cj2*sj1);
IkReal x792=((1.0)*sj0);
IkReal x793=(r01*sj5);
IkReal x794=(cj5*r01);
IkReal x795=((0.069)*sj0);
IkReal x796=(r00*sj5);
IkReal x797=((0.01)*x784);
IkReal x798=((1.0)*x784);
IkReal x799=(cj4*x783);
IkReal x800=(cj4*x784);
IkReal x801=((0.37429)*x784);
IkReal x802=((0.37429)*x783);
IkReal x803=((0.01)*x783);
IkReal x804=((1.0)*x783);
IkReal x805=(sj4*x804);
evalcond[0]=((((-1.0)*x796*x798))+((x783*x793))+(((-1.0)*x791*x792))+x790);
evalcond[1]=((((-1.0)*x796*x804))+(((-1.0)*x793*x798))+(((-1.0)*x789*x791))+(((-1.0)*sj2*x792)));
evalcond[2]=(((r00*sj4*x784))+((x785*x799))+(((-1.0)*r01*x805))+((cj5*x784*x786))+(((-1.0)*cj1*x789)));
evalcond[3]=(((x785*x800))+(((-1.0)*r00*x805))+(((-1.0)*r01*sj4*x798))+(((-1.0)*x787))+(((-1.0)*cj5*x786*x804)));
evalcond[4]=((((-1.0)*sj4*x785*x798))+(((-1.0)*r00*x799))+((sj4*x783*x794))+((cj0*cj2))+((sj0*sj1*sj2))+(((-1.0)*x786*x798)));
evalcond[5]=((((-1.0)*x785*x805))+(((-1.0)*x786*x804))+(((-1.0)*cj2*x792))+((sj1*x790))+(((-1.0)*sj4*x794*x798))+((r00*x800)));
evalcond[6]=((((-1.0)*x796*x802))+((x785*x803))+(((-1.0)*x788*x791))+(((0.36442)*cj0*cj1))+(((-1.0)*x793*x801))+(((-1.0)*px))+x788+((x794*x797))+(((-1.0)*sj2*x795)));
evalcond[7]=(((sj2*x788))+(((-1.0)*x796*x801))+((x793*x802))+((x785*x797))+(((-1.0)*x791*x795))+(((-1.0)*py))+(((0.36442)*x787))+x795+(((-1.0)*x794*x803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x806=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*x806))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)));
evalcond[2]=(sj1+x806);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x807=(py*r01);
IkReal x808=(px*r00);
IkReal x809=(pz*r00);
IkReal x810=((-1.0)*r01);
IkReal x811=(((px*r01))+((py*r00)));
IkReal x812=(pz*x810);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x810;
r11=r00;
npx=((((-1.0)*x807))+x808);
npy=x811;
npz=(pz*r22);
rxp0_0=x812;
rxp0_1=((-1.0)*x809);
rxp0_2=x811;
rxp1_0=x809;
rxp1_1=x812;
rxp1_2=((((-1.0)*x808))+x807);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x813=(r22*sj5);
j4eval[0]=x813;
j4eval[1]=((IKabs((cj1*sj2)))+(IKabs((cj1*cj2))));
j4eval[2]=IKsign(x813);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x814=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x814.valid){
continue;
}
CheckValue<IkReal> x815 = IKatan2WithCheck(IkReal((cj1*sj2)),((-1.0)*cj1*cj2),IKFAST_ATAN2_MAGTHRESH);
if(!x815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x814.value)))+(x815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x816=((1.0)*r22*sj5);
evalcond[0]=(((cj1*sj2))+(((-1.0)*x816*(IKsin(j4)))));
evalcond[1]=((((-1.0)*cj1*cj2))+(((-1.0)*x816*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
IkReal x817=(py*r01);
IkReal x818=(px*r00);
IkReal x819=(pz*r00);
IkReal x820=((-1.0)*r01);
IkReal x821=(((px*r01))+((py*r00)));
IkReal x822=(pz*x820);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x820;
r11=r00;
npx=((((-1.0)*x817))+x818);
npy=x821;
npz=(pz*r22);
rxp0_0=x822;
rxp0_1=((-1.0)*x819);
rxp0_2=x821;
rxp1_0=x819;
rxp1_1=x822;
rxp1_2=((((-1.0)*x818))+x817);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x823=r01*r01;
IkReal x824=r00*r00;
IkReal x825=((0.552)*sj2);
IkReal x826=((1.104)*sj2);
IkReal x827=((2.95484)*cj1);
IkReal x828=((12.0)*px);
IkReal x829=((4.0)*px);
IkReal x830=((0.276)*cj2*sj1);
IkReal x831=(cj4*sj5*x823);
IkReal x832=(cj4*sj5*x824);
IkReal x833=((0.04)*cj1*cj4*cj5);
IkReal x834=((0.276)*x832);
IkReal x835=((0.276)*x831);
IkReal x836=(x827*x831);
IkReal x837=(x827*x832);
IkReal x838=(x823*x833);
IkReal x839=(x828*x832);
IkReal x840=(x828*x831);
IkReal x841=(x824*x833);
IkReal x842=(x830*x832);
IkReal x843=(x830*x831);
IkReal x844=(x839+x840);
IkReal x845=(x834+x835+x836+x837);
IkReal x846=(x838+x841+x843+x842);
j0eval[0]=((((0.5)*(IKabs(((((-1.0)*x826*x831))+(((-1.0)*x826*x832)))))))+(IKabs(((((-1.0)*x825*x832))+(((-1.0)*x825*x831)))))+(((0.5)*(IKabs(((((-1.0)*x844))+(((-1.0)*x845))+x846)))))+(((0.5)*(IKabs(((((-1.0)*x844))+(((-1.0)*x846))+x845)))))+(((0.5)*(IKabs(((((-1.0)*x845))+x846+(((-1.0)*x829*x831))+(((-1.0)*x829*x832))))))));
if( IKabs(j0eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j0evalpoly[1];
IkReal x847=r01*r01;
IkReal x848=r00*r00;
IkReal x849=((0.552)*sj2);
IkReal x850=((1.104)*sj2);
IkReal x851=((2.95484)*cj1);
IkReal x852=((12.0)*px);
IkReal x853=((4.0)*px);
IkReal x854=((0.276)*cj2*sj1);
IkReal x855=(cj4*sj5*x847);
IkReal x856=(cj4*sj5*x848);
IkReal x857=((0.04)*cj1*cj4*cj5);
IkReal x858=((0.276)*x856);
IkReal x859=((0.276)*x855);
IkReal x860=(x851*x855);
IkReal x861=(x851*x856);
IkReal x862=(x847*x857);
IkReal x863=(x852*x856);
IkReal x864=(x852*x855);
IkReal x865=(x848*x857);
IkReal x866=(x853*x856);
IkReal x867=(x853*x855);
IkReal x868=(x854*x856);
IkReal x869=(x854*x855);
IkReal x870=((((-1.0)*x849*x855))+(((-1.0)*x849*x856)));
IkReal x871=(x864+x863);
IkReal x872=(x867+x866);
IkReal x873=(x858+x859+x861+x860);
IkReal x874=(x869+x868+x865+x862);
op[0]=(x874+(((-1.0)*x872))+(((-1.0)*x873)));
op[1]=x870;
op[2]=(x874+(((-1.0)*x871))+(((-1.0)*x873)));
op[3]=((((-1.0)*x850*x855))+(((-1.0)*x850*x856)));
op[4]=(x873+(((-1.0)*x871))+(((-1.0)*x874)));
op[5]=x870;
op[6]=(x873+(((-1.0)*x872))+(((-1.0)*x874)));
polyroots6(op,zeror,numroots);
IkReal j0array[6], cj0array[6], sj0array[6], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[6]={true,true,true,true,true,true};
_nj0 = 6;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

IkReal x875=r01*r01;
IkReal x876=r00*r00;
IkReal x877=(sj2*sj5);
IkReal x878=((0.276)*sj5);
IkReal x879=(sj4*x875);
IkReal x880=((0.04)*cj1*cj5);
IkReal x881=((12.0)*px*sj5);
IkReal x882=(sj4*x876);
IkReal x883=((2.95484)*cj1*sj5);
IkReal x884=((4.0)*px*sj5);
IkReal x885=(cj2*sj1*x878);
IkReal x886=(x878*x879);
IkReal x887=(x878*x882);
IkReal x888=(x879*x880);
IkReal x889=(x881*x882);
IkReal x890=(x879*x881);
IkReal x891=(x880*x882);
IkReal x892=(x882*x883);
IkReal x893=(x879*x883);
IkReal x894=(x882*x884);
IkReal x895=(x879*x884);
IkReal x896=(x882*x885);
IkReal x897=(x879*x885);
IkReal x898=((((0.552)*x877*x879))+(((0.552)*x877*x882)));
IkReal x899=(x894+x895);
IkReal x900=(x889+x890);
IkReal x901=(x887+x886+x892+x893);
IkReal x902=(x888+x896+x897+x891);
j0evalpoly[0]=(((htj0*x898))+((x898*(htj0*htj0*htj0*htj0*htj0)))+(((-1.0)*x901))+(((htj0*htj0*htj0)*(((((1.104)*x877*x882))+(((1.104)*x877*x879))))))+(((htj0*htj0)*(((((-1.0)*x901))+x900+x902))))+(((htj0*htj0*htj0*htj0)*(((((-1.0)*x902))+x900+x901))))+(((htj0*htj0*htj0*htj0*htj0*htj0)*(((((-1.0)*x902))+x899+x901))))+x899+x902);
if( IKabs(j0evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[4];
IkReal x903=(py*r01);
IkReal x904=(px*r00);
IkReal x905=(pz*r00);
IkReal x906=((-1.0)*r01);
IkReal x907=(((px*r01))+((py*r00)));
IkReal x908=(pz*x906);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x906;
r11=r00;
npx=((((-1.0)*x903))+x904);
npy=x907;
npz=(pz*r22);
rxp0_0=x908;
rxp0_1=((-1.0)*x905);
rxp0_2=x907;
rxp1_0=x905;
rxp1_1=x908;
rxp1_2=((((-1.0)*x904))+x903);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j6eval[0]=sj5;
j6eval[1]=cj1;
j6eval[2]=((cj0*cj0)+(sj0*sj0));
j6eval[3]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  || IKabs(j6eval[3]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x909=(py*r01);
IkReal x910=(px*r00);
IkReal x911=(pz*r00);
IkReal x912=((-1.0)*r01);
IkReal x913=(((px*r01))+((py*r00)));
IkReal x914=(pz*x912);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x912;
r11=r00;
npx=((((-1.0)*x909))+x910);
npy=x913;
npz=(pz*r22);
rxp0_0=x914;
rxp0_1=((-1.0)*x911);
rxp0_2=x913;
rxp1_0=x911;
rxp1_1=x914;
rxp1_2=((((-1.0)*x910))+x909);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x915=(sj4*sj5);
IkReal x916=(cj1*sj0);
IkReal x917=((1.0)*r00);
IkReal x918=(cj4*cj5);
IkReal x919=((1.0)*r01);
IkReal x920=(cj0*sj2*sj5);
IkReal x921=(cj2*sj0*sj1*sj5);
j6eval[0]=x915;
j6eval[1]=IKsign(x915);
j6eval[2]=((IKabs(((((-1.0)*x916*x917*x918))+((r00*x921))+(((-1.0)*x917*x920))+((r01*sj4*x916)))))+(IKabs(((((-1.0)*sj4*x916*x917))+(((-1.0)*x919*x920))+((r01*x921))+(((-1.0)*x916*x918*x919))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x922=(py*r01);
IkReal x923=(px*r00);
IkReal x924=(pz*r00);
IkReal x925=((-1.0)*r01);
IkReal x926=(((px*r01))+((py*r00)));
IkReal x927=(pz*x925);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x925;
r11=r00;
npx=((((-1.0)*x922))+x923);
npy=x926;
npz=(pz*r22);
rxp0_0=x927;
rxp0_1=((-1.0)*x924);
rxp0_2=x926;
rxp1_0=x924;
rxp1_1=x927;
rxp1_2=((((-1.0)*x923))+x922);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x928=(cj0*r01);
IkReal x929=(sj2*sj5);
IkReal x930=(cj4*cj5);
IkReal x931=(sj5*x930);
IkReal x932=(cj0*cj1*r00);
IkReal x933=(cj2*sj0*sj1*sj5);
j6eval[0]=x931;
j6eval[1]=IKsign(x931);
j6eval[2]=((IKabs(((((-1.0)*cj0*r00*x929))+((cj1*x928*x930))+((sj4*x932))+((r00*x933)))))+(IKabs(((((-1.0)*cj1*sj4*x928))+((x928*x929))+((x930*x932))+(((-1.0)*r01*x933))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x934=(cj0*r01);
IkReal x935=(sj2*sj5);
IkReal x936=(cj4*cj5);
IkReal x937=(cj0*cj1*r00);
IkReal x938=(cj2*sj0*sj1*sj5);
CheckValue<IkReal> x939 = IKatan2WithCheck(IkReal((((x936*x937))+(((-1.0)*cj1*sj4*x934))+(((-1.0)*r01*x938))+((x934*x935)))),((((-1.0)*cj0*r00*x935))+((sj4*x937))+((cj1*x934*x936))+((r00*x938))),IKFAST_ATAN2_MAGTHRESH);
if(!x939.valid){
continue;
}
CheckValue<IkReal> x940=IKPowWithIntegerCheck(IKsign((sj5*x936)),-1);
if(!x940.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x939.value)+(((-1.5707963267949)*(x940.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x941=IKsin(j6);
IkReal x942=IKcos(j6);
IkReal x943=((0.01)*r00);
IkReal x944=((0.36442)*cj1);
IkReal x945=((0.069)*cj0);
IkReal x946=((1.0)*cj0);
IkReal x947=(cj0*sj2);
IkReal x948=((1.0)*sj0);
IkReal x949=(cj2*sj1);
IkReal x950=(r01*sj5);
IkReal x951=((0.069)*sj0);
IkReal x952=(r00*sj5);
IkReal x953=(r01*sj4);
IkReal x954=((1.0)*cj4);
IkReal x955=(cj5*x942);
IkReal x956=(r01*x954);
IkReal x957=((1.0)*r00*sj4);
IkReal x958=((0.37429)*x942);
IkReal x959=((1.0)*x942);
IkReal x960=(r00*x941);
IkReal x961=(cj5*x941);
IkReal x962=(r01*x961);
evalcond[0]=((((-1.0)*cj1*x948))+((x941*x950))+(((-1.0)*x952*x959)));
evalcond[1]=((((-1.0)*cj1*x946))+(((-1.0)*x941*x952))+(((-1.0)*x950*x959)));
evalcond[2]=(((sj4*x960))+(((-1.0)*x948*x949))+((x942*x953))+(((-1.0)*r00*x954*x955))+x947+((cj4*x962)));
evalcond[3]=(((cj0*cj2))+(((-1.0)*x942*x956))+((sj0*sj1*sj2))+(((-1.0)*x955*x957))+(((-1.0)*x954*x960))+((x953*x961)));
evalcond[4]=((((-1.0)*cj2*x948))+((sj1*x947))+(((-1.0)*x941*x956))+(((-1.0)*x957*x961))+(((-1.0)*x953*x955))+((cj4*r00*x942)));
evalcond[5]=((((-1.0)*cj5*x954*x960))+(((-1.0)*x946*x949))+(((-1.0)*x942*x957))+((x941*x953))+(((-1.0)*x955*x956))+(((-1.0)*sj2*x948)));
evalcond[6]=(((cj0*x944))+(((-1.0)*x945*x949))+((x943*x961))+(((-1.0)*px))+(((0.01)*r01*x955))+(((-1.0)*sj2*x951))+(((-1.0)*x950*x958))+x945+(((-0.37429)*x941*x952)));
evalcond[7]=(((sj2*x945))+((sj0*x944))+((x943*x955))+(((-1.0)*py))+(((0.37429)*x941*x950))+(((-1.0)*x949*x951))+(((-0.01)*x962))+(((-1.0)*x952*x958))+x951);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x963=(cj1*sj0);
IkReal x964=((1.0)*r00);
IkReal x965=(cj4*cj5);
IkReal x966=((1.0)*r01);
IkReal x967=(cj0*sj2*sj5);
IkReal x968=(cj2*sj0*sj1*sj5);
CheckValue<IkReal> x969 = IKatan2WithCheck(IkReal(((((-1.0)*x964*x967))+((r00*x968))+(((-1.0)*x963*x964*x965))+((r01*sj4*x963)))),((((-1.0)*sj4*x963*x964))+(((-1.0)*x963*x965*x966))+(((-1.0)*x966*x967))+((r01*x968))),IKFAST_ATAN2_MAGTHRESH);
if(!x969.valid){
continue;
}
CheckValue<IkReal> x970=IKPowWithIntegerCheck(IKsign((sj4*sj5)),-1);
if(!x970.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x969.value)+(((1.5707963267949)*(x970.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x971=IKsin(j6);
IkReal x972=IKcos(j6);
IkReal x973=((0.01)*r00);
IkReal x974=((0.36442)*cj1);
IkReal x975=((0.069)*cj0);
IkReal x976=((1.0)*cj0);
IkReal x977=(cj0*sj2);
IkReal x978=((1.0)*sj0);
IkReal x979=(cj2*sj1);
IkReal x980=(r01*sj5);
IkReal x981=((0.069)*sj0);
IkReal x982=(r00*sj5);
IkReal x983=(r01*sj4);
IkReal x984=((1.0)*cj4);
IkReal x985=(cj5*x972);
IkReal x986=(r01*x984);
IkReal x987=((1.0)*r00*sj4);
IkReal x988=((0.37429)*x972);
IkReal x989=((1.0)*x972);
IkReal x990=(r00*x971);
IkReal x991=(cj5*x971);
IkReal x992=(r01*x991);
evalcond[0]=((((-1.0)*cj1*x978))+(((-1.0)*x982*x989))+((x971*x980)));
evalcond[1]=((((-1.0)*cj1*x976))+(((-1.0)*x971*x982))+(((-1.0)*x980*x989)));
evalcond[2]=(((x972*x983))+((sj4*x990))+((cj4*x992))+(((-1.0)*r00*x984*x985))+(((-1.0)*x978*x979))+x977);
evalcond[3]=(((cj0*cj2))+((x983*x991))+(((-1.0)*x984*x990))+((sj0*sj1*sj2))+(((-1.0)*x972*x986))+(((-1.0)*x985*x987)));
evalcond[4]=((((-1.0)*cj2*x978))+(((-1.0)*x971*x986))+((sj1*x977))+(((-1.0)*x983*x985))+((cj4*r00*x972))+(((-1.0)*x987*x991)));
evalcond[5]=((((-1.0)*cj5*x984*x990))+(((-1.0)*x972*x987))+(((-1.0)*x976*x979))+((x971*x983))+(((-1.0)*sj2*x978))+(((-1.0)*x985*x986)));
evalcond[6]=((((0.01)*r01*x985))+(((-1.0)*px))+(((-0.37429)*x971*x982))+(((-1.0)*sj2*x981))+(((-1.0)*x980*x988))+x975+((cj0*x974))+((x973*x991))+(((-1.0)*x975*x979)));
evalcond[7]=((((-0.01)*x992))+((sj0*x974))+((x973*x985))+(((-1.0)*x982*x988))+(((-1.0)*py))+((sj2*x975))+(((-1.0)*x979*x981))+x981+(((0.37429)*x971*x980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x993=(cj1*r01);
IkReal x994=((1.0)*cj1*r00);
CheckValue<IkReal> x995=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x995.valid){
continue;
}
CheckValue<IkReal> x996 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x994))+((sj0*x993)))),((((-1.0)*cj0*x993))+(((-1.0)*sj0*x994))),IKFAST_ATAN2_MAGTHRESH);
if(!x996.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x995.value)))+(x996.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x997=IKsin(j6);
IkReal x998=IKcos(j6);
IkReal x999=((0.01)*r00);
IkReal x1000=((0.36442)*cj1);
IkReal x1001=((0.069)*cj0);
IkReal x1002=((1.0)*cj0);
IkReal x1003=(cj0*sj2);
IkReal x1004=((1.0)*sj0);
IkReal x1005=(cj2*sj1);
IkReal x1006=(r01*sj5);
IkReal x1007=((0.069)*sj0);
IkReal x1008=(r00*sj5);
IkReal x1009=(r01*sj4);
IkReal x1010=((1.0)*cj4);
IkReal x1011=(cj5*x998);
IkReal x1012=(r01*x1010);
IkReal x1013=((1.0)*r00*sj4);
IkReal x1014=((0.37429)*x998);
IkReal x1015=((1.0)*x998);
IkReal x1016=(r00*x997);
IkReal x1017=(cj5*x997);
IkReal x1018=(r01*x1017);
evalcond[0]=((((-1.0)*x1008*x1015))+(((-1.0)*cj1*x1004))+((x1006*x997)));
evalcond[1]=((((-1.0)*x1006*x1015))+(((-1.0)*cj1*x1002))+(((-1.0)*x1008*x997)));
evalcond[2]=(x1003+((sj4*x1016))+(((-1.0)*r00*x1010*x1011))+((x1009*x998))+(((-1.0)*x1004*x1005))+((cj4*x1018)));
evalcond[3]=((((-1.0)*x1012*x998))+(((-1.0)*x1011*x1013))+(((-1.0)*x1010*x1016))+((x1009*x1017))+((cj0*cj2))+((sj0*sj1*sj2)));
evalcond[4]=((((-1.0)*x1012*x997))+(((-1.0)*x1009*x1011))+((sj1*x1003))+((cj4*r00*x998))+(((-1.0)*cj2*x1004))+(((-1.0)*x1013*x1017)));
evalcond[5]=((((-1.0)*x1011*x1012))+((x1009*x997))+(((-1.0)*cj5*x1010*x1016))+(((-1.0)*x1013*x998))+(((-1.0)*sj2*x1004))+(((-1.0)*x1002*x1005)));
evalcond[6]=(x1001+(((-1.0)*x1006*x1014))+(((-0.37429)*x1008*x997))+(((-1.0)*px))+((cj0*x1000))+(((0.01)*r01*x1011))+(((-1.0)*sj2*x1007))+(((-1.0)*x1001*x1005))+((x1017*x999)));
evalcond[7]=(x1007+((x1011*x999))+(((-0.01)*x1018))+(((-1.0)*x1008*x1014))+((sj0*x1000))+(((0.37429)*x1006*x997))+(((-1.0)*py))+(((-1.0)*x1005*x1007))+((sj2*x1001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1019=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=((((0.37429)*x1019))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)));
evalcond[2]=(sj1+(((-1.0)*x1019)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1020=(py*r01);
IkReal x1021=(px*r00);
IkReal x1022=(pz*r00);
IkReal x1023=((-1.0)*r01);
IkReal x1024=(((px*r01))+((py*r00)));
IkReal x1025=(pz*x1023);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1023;
r11=r00;
npx=(x1021+(((-1.0)*x1020)));
npy=x1024;
npz=(pz*r22);
rxp0_0=x1025;
rxp0_1=((-1.0)*x1022);
rxp0_2=x1024;
rxp1_0=x1022;
rxp1_1=x1025;
rxp1_2=(x1020+(((-1.0)*x1021)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1026=(r22*sj5);
j4eval[0]=x1026;
j4eval[1]=((IKabs((cj1*sj2)))+(IKabs((cj1*cj2))));
j4eval[2]=IKsign(x1026);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1027 = IKatan2WithCheck(IkReal((cj1*sj2)),(cj1*cj2),IKFAST_ATAN2_MAGTHRESH);
if(!x1027.valid){
continue;
}
CheckValue<IkReal> x1028=IKPowWithIntegerCheck(IKsign((r22*sj5)),-1);
if(!x1028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1027.value)+(((1.5707963267949)*(x1028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1029=(r22*sj5);
evalcond[0]=((((-1.0)*x1029*(IKsin(j4))))+((cj1*sj2)));
evalcond[1]=((((-1.0)*cj1*cj2))+((x1029*(IKcos(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
IkReal x1030=(py*r01);
IkReal x1031=(px*r00);
IkReal x1032=(pz*r00);
IkReal x1033=((-1.0)*r01);
IkReal x1034=(((px*r01))+((py*r00)));
IkReal x1035=(pz*x1033);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1033;
r11=r00;
npx=(x1031+(((-1.0)*x1030)));
npy=x1034;
npz=(pz*r22);
rxp0_0=x1035;
rxp0_1=((-1.0)*x1032);
rxp0_2=x1034;
rxp1_0=x1032;
rxp1_1=x1035;
rxp1_2=(x1030+(((-1.0)*x1031)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1036=r01*r01;
IkReal x1037=r00*r00;
IkReal x1038=((0.552)*sj2);
IkReal x1039=((1.104)*sj2);
IkReal x1040=((12.0)*px);
IkReal x1041=((4.0)*px);
IkReal x1042=((0.276)*cj2*sj1);
IkReal x1043=((0.03948)*cj1*cj4*sj5);
IkReal x1044=(cj4*sj5*x1036);
IkReal x1045=(cj4*sj5*x1037);
IkReal x1046=((0.04)*cj1*cj4*cj5);
IkReal x1047=((0.276)*x1045);
IkReal x1048=((0.276)*x1044);
IkReal x1049=(x1036*x1046);
IkReal x1050=(x1037*x1046);
IkReal x1051=(x1040*x1045);
IkReal x1052=(x1040*x1044);
IkReal x1053=(x1037*x1043);
IkReal x1054=(x1036*x1043);
IkReal x1055=(x1042*x1045);
IkReal x1056=(x1042*x1044);
IkReal x1057=(x1051+x1052);
IkReal x1058=(x1050+x1047+x1049+x1048);
IkReal x1059=(x1053+x1054+x1055+x1056);
j0eval[0]=((IKabs((((x1038*x1044))+((x1038*x1045)))))+(((0.5)*(IKabs(((((-1.0)*x1059))+x1058+((x1041*x1044))+((x1041*x1045)))))))+(((0.5)*(IKabs(((((-1.0)*x1059))+x1057+x1058)))))+(((0.5)*(IKabs((((x1039*x1045))+((x1039*x1044)))))))+(((0.5)*(IKabs(((((-1.0)*x1058))+x1057+x1059))))));
if( IKabs(j0eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j0evalpoly[1];
IkReal x1060=r00*r00;
IkReal x1061=r01*r01;
IkReal x1062=(cj4*sj5);
IkReal x1063=((0.03948)*cj1);
IkReal x1064=(cj2*sj1);
IkReal x1065=((0.276)*x1061);
IkReal x1066=(sj2*x1061);
IkReal x1067=(sj2*x1060);
IkReal x1068=(px*x1060);
IkReal x1069=(px*x1061);
IkReal x1070=((0.276)*x1060);
IkReal x1071=((0.04)*cj1*cj4*cj5);
IkReal x1072=(x1062*x1070);
IkReal x1073=(x1062*x1065);
IkReal x1074=(x1061*x1071);
IkReal x1075=(x1060*x1071);
IkReal x1076=((12.0)*x1062*x1068);
IkReal x1077=((12.0)*x1062*x1069);
IkReal x1078=(x1060*x1062*x1063);
IkReal x1079=(x1061*x1062*x1063);
IkReal x1080=((4.0)*x1062*x1068);
IkReal x1081=((4.0)*x1062*x1069);
IkReal x1082=(x1064*x1072);
IkReal x1083=(x1064*x1073);
IkReal x1084=((((0.552)*x1062*x1066))+(((0.552)*x1062*x1067)));
IkReal x1085=(x1081+x1080);
IkReal x1086=(x1076+x1077);
IkReal x1087=(x1074+x1075+x1072+x1073);
IkReal x1088=(x1078+x1079+x1083+x1082);
op[0]=(x1087+x1085+(((-1.0)*x1088)));
op[1]=x1084;
op[2]=(x1087+x1086+(((-1.0)*x1088)));
op[3]=((((1.104)*x1062*x1067))+(((1.104)*x1062*x1066)));
op[4]=(x1086+x1088+(((-1.0)*x1087)));
op[5]=x1084;
op[6]=(x1085+x1088+(((-1.0)*x1087)));
polyroots6(op,zeror,numroots);
IkReal j0array[6], cj0array[6], sj0array[6], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[6]={true,true,true,true,true,true};
_nj0 = 6;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

IkReal x1089=r00*r00;
IkReal x1090=r01*r01;
IkReal x1091=(sj2*sj5);
IkReal x1092=((0.276)*sj5);
IkReal x1093=(sj4*x1090);
IkReal x1094=((0.04)*cj1*cj5);
IkReal x1095=((12.0)*px*sj5);
IkReal x1096=(sj4*x1089);
IkReal x1097=((0.03948)*cj1*sj5);
IkReal x1098=((4.0)*px*sj5);
IkReal x1099=(cj2*sj1*x1092);
IkReal x1100=(x1092*x1093);
IkReal x1101=(x1092*x1096);
IkReal x1102=(x1096*x1098);
IkReal x1103=(x1093*x1094);
IkReal x1104=(x1094*x1096);
IkReal x1105=(x1093*x1097);
IkReal x1106=(x1096*x1097);
IkReal x1107=(x1095*x1096);
IkReal x1108=(x1093*x1095);
IkReal x1109=(x1093*x1098);
IkReal x1110=(x1096*x1099);
IkReal x1111=(x1093*x1099);
IkReal x1112=((((0.552)*x1091*x1093))+(((0.552)*x1091*x1096)));
IkReal x1113=(x1102+x1109);
IkReal x1114=(x1107+x1108);
IkReal x1115=(x1104+x1103+x1100+x1101);
IkReal x1116=(x1106+x1105+x1111+x1110);
j0evalpoly[0]=((((htj0*htj0)*((x1114+x1116+(((-1.0)*x1115))))))+x1113+x1116+((htj0*x1112))+(((htj0*htj0*htj0)*(((((1.104)*x1091*x1096))+(((1.104)*x1091*x1093))))))+(((htj0*htj0*htj0*htj0*htj0*htj0)*((x1113+x1115+(((-1.0)*x1116))))))+(((htj0*htj0*htj0*htj0)*((x1115+x1114+(((-1.0)*x1116))))))+((x1112*(htj0*htj0*htj0*htj0*htj0)))+(((-1.0)*x1115)));
if( IKabs(j0evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[4];
IkReal x1117=(py*r01);
IkReal x1118=(px*r00);
IkReal x1119=(pz*r00);
IkReal x1120=((-1.0)*r01);
IkReal x1121=(((px*r01))+((py*r00)));
IkReal x1122=(pz*x1120);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1120;
r11=r00;
npx=(x1118+(((-1.0)*x1117)));
npy=x1121;
npz=(pz*r22);
rxp0_0=x1122;
rxp0_1=((-1.0)*x1119);
rxp0_2=x1121;
rxp1_0=x1119;
rxp1_1=x1122;
rxp1_2=(x1117+(((-1.0)*x1118)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j6eval[0]=sj5;
j6eval[1]=cj1;
j6eval[2]=((cj0*cj0)+(sj0*sj0));
j6eval[3]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  || IKabs(j6eval[3]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x1123=(py*r01);
IkReal x1124=(px*r00);
IkReal x1125=(pz*r00);
IkReal x1126=((-1.0)*r01);
IkReal x1127=(((px*r01))+((py*r00)));
IkReal x1128=(pz*x1126);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1126;
r11=r00;
npx=(x1124+(((-1.0)*x1123)));
npy=x1127;
npz=(pz*r22);
rxp0_0=x1128;
rxp0_1=((-1.0)*x1125);
rxp0_2=x1127;
rxp1_0=x1125;
rxp1_1=x1128;
rxp1_2=(x1123+(((-1.0)*x1124)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1129=(sj4*sj5);
IkReal x1130=(cj4*cj5);
IkReal x1131=(cj0*r01);
IkReal x1132=(cj0*cj1*r00);
IkReal x1133=(sj0*sj2*sj5);
IkReal x1134=(cj2*sj1*sj5);
j6eval[0]=x1129;
j6eval[1]=((IKabs((((r00*x1133))+((cj0*r00*x1134))+(((-1.0)*x1130*x1132))+((cj1*sj4*x1131)))))+(IKabs((((cj1*x1130*x1131))+(((-1.0)*x1131*x1134))+((sj4*x1132))+(((-1.0)*r01*x1133))))));
j6eval[2]=IKsign(x1129);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
IkReal x1135=(py*r01);
IkReal x1136=(px*r00);
IkReal x1137=(pz*r00);
IkReal x1138=((-1.0)*r01);
IkReal x1139=(((px*r01))+((py*r00)));
IkReal x1140=(pz*x1138);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1138;
r11=r00;
npx=(x1136+(((-1.0)*x1135)));
npy=x1139;
npz=(pz*r22);
rxp0_0=x1140;
rxp0_1=((-1.0)*x1137);
rxp0_2=x1139;
rxp1_0=x1137;
rxp1_1=x1140;
rxp1_2=(x1135+(((-1.0)*x1136)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x1141=(cj4*sj5);
IkReal x1142=(r01*sj5);
IkReal x1143=(cj2*sj0);
IkReal x1144=(cj5*sj4);
IkReal x1145=(r00*sj5);
IkReal x1146=(cj0*cj1*r00);
IkReal x1147=(cj0*cj1*r01);
IkReal x1148=(cj0*sj1*sj2);
j6eval[0]=x1141;
j6eval[1]=((IKabs((((x1143*x1145))+((x1144*x1146))+((cj4*x1147))+(((-1.0)*x1145*x1148)))))+(IKabs(((((-1.0)*x1144*x1147))+((x1142*x1148))+(((-1.0)*x1142*x1143))+((cj4*x1146))))));
j6eval[2]=IKsign(x1141);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1149=(r01*sj5);
IkReal x1150=(cj2*sj0);
IkReal x1151=(cj5*sj4);
IkReal x1152=(r00*sj5);
IkReal x1153=(cj0*cj1*r00);
IkReal x1154=(cj0*sj1*sj2);
IkReal x1155=(cj0*cj1*r01);
CheckValue<IkReal> x1156 = IKatan2WithCheck(IkReal((((x1149*x1154))+(((-1.0)*x1149*x1150))+((cj4*x1153))+(((-1.0)*x1151*x1155)))),((((-1.0)*x1152*x1154))+((x1150*x1152))+((x1151*x1153))+((cj4*x1155))),IKFAST_ATAN2_MAGTHRESH);
if(!x1156.valid){
continue;
}
CheckValue<IkReal> x1157=IKPowWithIntegerCheck(IKsign((cj4*sj5)),-1);
if(!x1157.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1156.value)+(((1.5707963267949)*(x1157.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1158=IKcos(j6);
IkReal x1159=IKsin(j6);
IkReal x1160=(cj5*r00);
IkReal x1161=(cj4*r01);
IkReal x1162=(cj1*sj0);
IkReal x1163=((0.069)*cj0);
IkReal x1164=((1.0)*sj4);
IkReal x1165=((1.0)*cj0);
IkReal x1166=(cj0*sj2);
IkReal x1167=(cj2*sj1);
IkReal x1168=((1.0)*sj0);
IkReal x1169=(cj5*r01);
IkReal x1170=((0.069)*sj0);
IkReal x1171=(r01*sj5);
IkReal x1172=((0.01)*x1158);
IkReal x1173=((1.0)*x1158);
IkReal x1174=(r00*x1159);
IkReal x1175=(cj4*x1158);
IkReal x1176=((0.01)*x1159);
IkReal x1177=((1.0)*x1159);
IkReal x1178=(r00*sj5*x1158);
evalcond[0]=((((-1.0)*cj1*x1165))+((x1158*x1171))+((sj5*x1174)));
evalcond[1]=(x1178+(((-1.0)*x1171*x1177))+(((-1.0)*x1162)));
evalcond[2]=(((cj0*cj2))+((sj4*x1159*x1169))+(((-1.0)*cj4*x1174))+(((-1.0)*x1158*x1160*x1164))+((sj0*sj1*sj2))+(((-1.0)*x1161*x1173)));
evalcond[3]=(((r00*sj4*x1158))+((cj4*x1159*x1160))+(((-1.0)*sj2*x1168))+(((-1.0)*r01*x1159*x1164))+((cj5*x1158*x1161))+(((-1.0)*x1165*x1167)));
evalcond[4]=(((sj1*x1166))+(((-1.0)*x1159*x1160*x1164))+((r00*x1175))+(((-1.0)*x1158*x1164*x1169))+(((-1.0)*cj2*x1168))+(((-1.0)*x1161*x1177)));
evalcond[5]=(x1166+(((-1.0)*cj5*x1161*x1177))+(((-1.0)*r01*x1158*x1164))+(((-1.0)*x1167*x1168))+(((-1.0)*x1164*x1174))+((x1160*x1175)));
evalcond[6]=(x1163+(((-1.0)*x1163*x1167))+(((-1.0)*sj2*x1170))+(((0.36442)*cj0*cj1))+(((-1.0)*px))+(((-0.37429)*x1158*x1171))+((x1160*x1176))+(((-0.37429)*sj5*x1174))+((x1169*x1172)));
evalcond[7]=(((sj2*x1163))+x1170+(((0.37429)*x1159*x1171))+(((0.36442)*x1162))+(((-1.0)*py))+(((-1.0)*x1167*x1170))+(((-1.0)*x1169*x1176))+((x1160*x1172))+(((-0.37429)*x1178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1179=((1.0)*r01);
IkReal x1180=(sj0*sj2*sj5);
IkReal x1181=(cj0*cj1*sj4);
IkReal x1182=(cj0*cj1*cj4*cj5);
IkReal x1183=(cj0*cj2*sj1*sj5);
CheckValue<IkReal> x1184=IKPowWithIntegerCheck(IKsign((sj4*sj5)),-1);
if(!x1184.valid){
continue;
}
CheckValue<IkReal> x1185 = IKatan2WithCheck(IkReal((((r00*x1181))+((r01*x1182))+(((-1.0)*x1179*x1183))+(((-1.0)*x1179*x1180)))),(((r00*x1180))+((r00*x1183))+((r01*x1181))+(((-1.0)*r00*x1182))),IKFAST_ATAN2_MAGTHRESH);
if(!x1185.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1184.value)))+(x1185.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1186=IKcos(j6);
IkReal x1187=IKsin(j6);
IkReal x1188=(cj5*r00);
IkReal x1189=(cj4*r01);
IkReal x1190=(cj1*sj0);
IkReal x1191=((0.069)*cj0);
IkReal x1192=((1.0)*sj4);
IkReal x1193=((1.0)*cj0);
IkReal x1194=(cj0*sj2);
IkReal x1195=(cj2*sj1);
IkReal x1196=((1.0)*sj0);
IkReal x1197=(cj5*r01);
IkReal x1198=((0.069)*sj0);
IkReal x1199=(r01*sj5);
IkReal x1200=((0.01)*x1186);
IkReal x1201=((1.0)*x1186);
IkReal x1202=(r00*x1187);
IkReal x1203=(cj4*x1186);
IkReal x1204=((0.01)*x1187);
IkReal x1205=((1.0)*x1187);
IkReal x1206=(r00*sj5*x1186);
evalcond[0]=(((x1186*x1199))+(((-1.0)*cj1*x1193))+((sj5*x1202)));
evalcond[1]=((((-1.0)*x1199*x1205))+x1206+(((-1.0)*x1190)));
evalcond[2]=(((cj0*cj2))+(((-1.0)*x1189*x1201))+(((-1.0)*cj4*x1202))+(((-1.0)*x1186*x1188*x1192))+((sj4*x1187*x1197))+((sj0*sj1*sj2)));
evalcond[3]=((((-1.0)*sj2*x1196))+(((-1.0)*x1193*x1195))+((cj4*x1187*x1188))+((cj5*x1186*x1189))+(((-1.0)*r01*x1187*x1192))+((r00*sj4*x1186)));
evalcond[4]=((((-1.0)*x1186*x1192*x1197))+(((-1.0)*x1187*x1188*x1192))+(((-1.0)*x1189*x1205))+((sj1*x1194))+(((-1.0)*cj2*x1196))+((r00*x1203)));
evalcond[5]=(x1194+(((-1.0)*cj5*x1189*x1205))+(((-1.0)*x1195*x1196))+(((-1.0)*r01*x1186*x1192))+(((-1.0)*x1192*x1202))+((x1188*x1203)));
evalcond[6]=((((-1.0)*sj2*x1198))+x1191+(((-1.0)*x1191*x1195))+(((-0.37429)*sj5*x1202))+(((0.36442)*cj0*cj1))+(((-1.0)*px))+((x1197*x1200))+(((-0.37429)*x1186*x1199))+((x1188*x1204)));
evalcond[7]=((((0.37429)*x1187*x1199))+x1198+(((-1.0)*x1195*x1198))+(((-1.0)*py))+((sj2*x1191))+(((-0.37429)*x1206))+(((0.36442)*x1190))+(((-1.0)*x1197*x1204))+((x1188*x1200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1207=(cj1*r00);
IkReal x1208=(cj1*r01);
CheckValue<IkReal> x1209=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x1209.valid){
continue;
}
CheckValue<IkReal> x1210 = IKatan2WithCheck(IkReal((((cj0*x1207))+(((-1.0)*sj0*x1208)))),(((cj0*x1208))+((sj0*x1207))),IKFAST_ATAN2_MAGTHRESH);
if(!x1210.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1209.value)))+(x1210.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1211=IKcos(j6);
IkReal x1212=IKsin(j6);
IkReal x1213=(cj5*r00);
IkReal x1214=(cj4*r01);
IkReal x1215=(cj1*sj0);
IkReal x1216=((0.069)*cj0);
IkReal x1217=((1.0)*sj4);
IkReal x1218=((1.0)*cj0);
IkReal x1219=(cj0*sj2);
IkReal x1220=(cj2*sj1);
IkReal x1221=((1.0)*sj0);
IkReal x1222=(cj5*r01);
IkReal x1223=((0.069)*sj0);
IkReal x1224=(r01*sj5);
IkReal x1225=((0.01)*x1211);
IkReal x1226=((1.0)*x1211);
IkReal x1227=(r00*x1212);
IkReal x1228=(cj4*x1211);
IkReal x1229=((0.01)*x1212);
IkReal x1230=((1.0)*x1212);
IkReal x1231=(r00*sj5*x1211);
evalcond[0]=(((x1211*x1224))+((sj5*x1227))+(((-1.0)*cj1*x1218)));
evalcond[1]=(x1231+(((-1.0)*x1224*x1230))+(((-1.0)*x1215)));
evalcond[2]=(((sj4*x1212*x1222))+(((-1.0)*x1214*x1226))+((cj0*cj2))+(((-1.0)*x1211*x1213*x1217))+((sj0*sj1*sj2))+(((-1.0)*cj4*x1227)));
evalcond[3]=(((r00*sj4*x1211))+(((-1.0)*x1218*x1220))+((cj5*x1211*x1214))+((cj4*x1212*x1213))+(((-1.0)*sj2*x1221))+(((-1.0)*r01*x1212*x1217)));
evalcond[4]=(((r00*x1228))+(((-1.0)*x1214*x1230))+(((-1.0)*x1211*x1217*x1222))+(((-1.0)*x1212*x1213*x1217))+((sj1*x1219))+(((-1.0)*cj2*x1221)));
evalcond[5]=((((-1.0)*r01*x1211*x1217))+x1219+(((-1.0)*x1220*x1221))+(((-1.0)*cj5*x1214*x1230))+(((-1.0)*x1217*x1227))+((x1213*x1228)));
evalcond[6]=((((-0.37429)*sj5*x1227))+x1216+(((0.36442)*cj0*cj1))+(((-1.0)*px))+((x1222*x1225))+(((-1.0)*x1216*x1220))+(((-0.37429)*x1211*x1224))+((x1213*x1229))+(((-1.0)*sj2*x1223)));
evalcond[7]=(x1223+(((-0.37429)*x1231))+(((0.36442)*x1215))+(((0.37429)*x1212*x1224))+(((-1.0)*x1220*x1223))+(((-1.0)*x1222*x1229))+(((-1.0)*py))+((sj2*x1216))+((x1213*x1225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1235=IKPowWithIntegerCheck(r22,-1);
if(!x1235.valid){
continue;
}
IkReal x1232=x1235.value;
CheckValue<IkReal> x1236=IKPowWithIntegerCheck(sj5,-1);
if(!x1236.valid){
continue;
}
IkReal x1233=x1236.value;
IkReal x1234=(x1232*x1233);
CheckValue<IkReal> x1237=IKPowWithIntegerCheck(cj3,-1);
if(!x1237.valid){
continue;
}
if( IKabs((cj1*sj2*x1234)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1234*(x1237.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*cj5*r22*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*sj2*x1234))+IKsqr((x1234*(x1237.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*cj5*r22*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*sj2*x1234), (x1234*(x1237.value)*(((((-1.0)*cj1*cj2))+(((-1.0)*cj5*r22*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1238=IKcos(j4);
IkReal x1239=(cj3*r22);
IkReal x1240=((1.0)*sj5);
IkReal x1241=(r22*sj3);
evalcond[0]=(((cj1*sj2))+(((-1.0)*r22*x1240*(IKsin(j4)))));
evalcond[1]=(sj1+(((-1.0)*x1238*x1240*x1241))+((cj5*x1239)));
evalcond[2]=((((-1.0)*x1238*x1239*x1240))+(((-1.0)*cj1*cj2))+(((-1.0)*cj5*x1241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x1242=(sj1*sj2);
IkReal x1243=(cj4*r01);
IkReal x1244=((1.0)*cj2);
IkReal x1245=(cj4*r00);
IkReal x1246=((1.0)*r00);
IkReal x1247=(cj5*sj4);
IkReal x1248=((2.0)*r00);
IkReal x1249=((1.0)*x1243);
IkReal x1250=(r00*x1247);
IkReal x1251=(r01*x1247);
IkReal x1252=((1.0)*x1245);
IkReal x1253=((1.0)*x1242);
IkReal x1254=(x1246*x1247);
IkReal x1255=((1.0)*x1251);
IkReal x1256=(x1243+x1250);
IkReal x1257=((((-2.0)*x1245))+(((2.0)*x1251)));
IkReal x1258=(x1256+cj2);
IkReal x1259=(x1256+(((-1.0)*x1244)));
IkReal x1260=((((-1.0)*x1254))+cj2+(((-1.0)*x1249)));
IkReal x1261=((((-1.0)*x1255))+x1242+x1245);
IkReal x1262=((((-2.0)*x1243))+(((-1.0)*x1247*x1248)));
IkReal x1263=((((-1.0)*x1252))+x1242+x1251);
IkReal x1264=(x1249+x1254);
IkReal x1265=((((-1.0)*x1253))+(((-1.0)*x1255))+x1245);
IkReal x1266=((((-1.0)*x1253))+(((-1.0)*x1252))+x1251);
IkReal x1267=((((-1.0)*x1244))+(((-1.0)*x1264)));
IkReal gconst0=x1260;
IkReal gconst1=x1257;
IkReal gconst2=x1258;
IkReal gconst3=x1261;
IkReal gconst4=x1262;
IkReal gconst5=x1263;
IkReal gconst6=x1260;
IkReal gconst7=x1257;
IkReal gconst8=x1258;
IkReal gconst9=x1261;
IkReal gconst10=x1262;
IkReal gconst11=x1263;
IkReal gconst12=x1267;
IkReal gconst13=x1257;
IkReal gconst14=x1259;
IkReal gconst15=x1265;
IkReal gconst16=x1262;
IkReal gconst17=x1266;
IkReal gconst18=x1267;
IkReal gconst19=x1257;
IkReal gconst20=x1259;
IkReal gconst21=x1265;
IkReal gconst22=x1262;
IkReal gconst23=x1266;
IkReal x1268=sj1*sj1;
IkReal x1269=sj2*sj2;
IkReal x1270=cj2*cj2;
IkReal x1271=((1.0)*gconst21);
IkReal x1272=(gconst15*gconst20);
IkReal x1273=(gconst13*gconst19);
IkReal x1274=((2.0)*gconst21);
IkReal x1275=(gconst23*gconst6);
IkReal x1276=(gconst2*gconst3);
IkReal x1277=(gconst2*gconst9);
IkReal x1278=(gconst19*gconst4);
IkReal x1279=(gconst11*gconst6);
IkReal x1280=(sj1*sj2);
IkReal x1281=((4.0)*cj2);
IkReal x1282=(gconst4*gconst7);
IkReal x1283=(gconst15*gconst18);
IkReal x1284=((2.0)*cj2);
IkReal x1285=(gconst12*gconst20);
IkReal x1286=(gconst17*gconst21);
IkReal x1287=(gconst0*gconst20);
IkReal x1288=(gconst14*gconst20);
IkReal x1289=((1.0)*gconst8);
IkReal x1290=(gconst5*gconst6);
IkReal x1291=(gconst3*gconst9);
IkReal x1292=((1.0)*gconst9);
IkReal x1293=(gconst1*gconst17);
IkReal x1294=((2.0)*gconst5);
IkReal x1295=(gconst0*gconst11);
IkReal x1296=(gconst21*gconst5);
IkReal x1297=(gconst16*gconst22);
IkReal x1298=(gconst5*gconst8);
IkReal x1299=(gconst2*gconst6);
IkReal x1300=(gconst14*gconst18);
IkReal x1301=(gconst13*gconst22);
IkReal x1302=(gconst1*gconst5);
IkReal x1303=(gconst16*gconst7);
IkReal x1304=(gconst5*gconst9);
IkReal x1305=(gconst1*gconst10);
IkReal x1306=(gconst14*gconst15);
IkReal x1307=((2.0)*gconst23);
IkReal x1308=((2.0)*gconst9);
IkReal x1309=(gconst1*gconst7);
IkReal x1310=(gconst0*gconst8);
IkReal x1311=(gconst12*gconst23);
IkReal x1312=(gconst10*gconst6);
IkReal x1313=(gconst0*gconst9);
IkReal x1314=(gconst17*gconst18);
IkReal x1315=((2.0)*gconst4);
IkReal x1316=(gconst13*gconst7);
IkReal x1317=(gconst11*gconst18);
IkReal x1318=((1.0)*gconst0);
IkReal x1319=((1.0)*gconst10);
IkReal x1320=(gconst10*gconst13);
IkReal x1321=(gconst16*gconst19);
IkReal x1322=((1.0)*gconst12);
IkReal x1323=(gconst18*gconst5);
IkReal x1324=(gconst12*gconst17);
IkReal x1325=(gconst14*gconst21);
IkReal x1326=(gconst17*gconst20);
IkReal x1327=((1.0)*gconst14);
IkReal x1328=(gconst18*gconst2);
IkReal x1329=(gconst14*gconst23);
IkReal x1330=(gconst5*x1318);
IkReal x1331=(gconst9*x1310);
IkReal x1332=(gconst17*x1301);
IkReal x1333=((4.0)*x1270);
IkReal x1334=(gconst21*x1321);
IkReal x1335=((1.0)*gconst22*gconst4);
IkReal x1336=(gconst14*x1321);
IkReal x1337=((4.0)*x1268*x1269);
op[0]=(((x1285*x1286))+(((-1.0)*gconst17*x1271*x1273))+((x1283*x1329))+(((-1.0)*gconst14*x1271*x1272))+(((-1.0)*x1297*x1300))+(((-1.0)*x1311*x1314))+((x1321*x1325))+((x1301*x1314)));
op[1]=((((-1.0)*x1284*x1336))+(((-1.0)*gconst18*x1284*x1301))+((x1274*x1280*x1326))+((x1274*x1280*x1321))+((x1274*x1280*x1324))+(((2.0)*x1280*x1332))+(((-2.0)*gconst14*x1280*x1297))+(((-1.0)*x1272*x1274*x1280))+((gconst12*x1284*x1314))+((gconst18*x1284*x1311))+(((-2.0)*gconst18*x1280*x1297))+((cj2*x1274*x1288))+((cj2*x1273*x1274))+(((-1.0)*gconst17*x1284*x1285))+((x1280*x1283*x1307))+(((-1.0)*x1280*x1307*x1324))+(((-1.0)*gconst23*x1284*x1300))+(((-1.0)*x1280*x1307*x1314))+(((-1.0)*gconst14*x1283*x1284))+((gconst17*x1273*x1284))+(((-1.0)*cj2*x1274*x1285))+((x1280*x1306*x1307))+((gconst14*x1272*x1284))+(((-1.0)*x1274*x1280*x1306)));
op[2]=(((gconst18*gconst22*x1293))+(((-1.0)*gconst23*x1314*x1318))+(((-1.0)*gconst2*x1271*x1272))+(((-1.0)*gconst12*gconst18*x1333))+(((-1.0)*gconst8*x1271*x1306))+(((-1.0)*gconst17*x1275*x1322))+((gconst6*x1332))+((gconst17*gconst9*x1285))+((gconst11*gconst14*x1283))+(((-1.0)*x1297*x1337))+(((-1.0)*gconst15*gconst21*x1337))+((x1314*x1320))+(((-1.0)*x1280*x1281*x1283))+((gconst2*x1334))+((x1286*x1337))+((x1300*x1333))+(((-1.0)*x1280*x1281*x1329))+(((-1.0)*x1280*x1281*x1321))+(((-1.0)*x1280*x1281*x1326))+(((-1.0)*gconst19*x1271*x1293))+(((-1.0)*gconst3*x1271*x1288))+(((-1.0)*gconst17*x1273*x1292))+(((-1.0)*gconst17*x1271*x1316))+(((-1.0)*gconst5*x1271*x1273))+(((-1.0)*x1273*x1333))+((x1285*x1296))+((x1275*x1306))+(((-1.0)*x1280*x1281*x1301))+((gconst12*gconst8*x1286))+(((-1.0)*gconst16*x1300*x1319))+((gconst23*gconst3*x1300))+((x1303*x1325))+(((-1.0)*gconst17*gconst23*x1337))+((x1286*x1287))+(((-1.0)*gconst6*x1297*x1327))+((x1272*x1280*x1281))+(((-1.0)*x1288*x1333))+((gconst2*gconst23*x1283))+(((-1.0)*x1297*x1328))+(((-1.0)*gconst12*gconst21*x1280*x1281))+((x1285*x1333))+(((-1.0)*x1300*x1335))+((x1301*x1323))+(((-1.0)*x1311*x1323))+((x1280*x1281*x1325))+(((-1.0)*gconst14*x1272*x1292))+((x1278*x1325))+((x1280*x1281*x1311))+((x1280*x1281*x1314))+((gconst15*gconst23*x1337))+((gconst9*x1336))+(((-1.0)*gconst11*x1314*x1322)));
op[3]=((((2.0)*cj2*gconst1*gconst17*gconst19))+(((2.0)*cj2*gconst14*gconst21*gconst8))+(((-2.0)*gconst12*gconst23*gconst5*sj1*sj2))+(((-2.0)*gconst16*gconst2*gconst22*sj1*sj2))+(((2.0)*gconst17*gconst21*gconst8*sj1*sj2))+(((-2.0)*cj2*gconst16*gconst19*gconst2))+(((2.0)*cj2*gconst12*gconst18*gconst5))+(((2.0)*gconst1*gconst17*gconst22*sj1*sj2))+(((-2.0)*gconst15*gconst20*gconst9*sj1*sj2))+(((2.0)*cj2*gconst14*gconst20*gconst9))+(((2.0)*cj2*gconst14*gconst20*gconst3))+(((2.0)*cj2*gconst1*gconst19*gconst21))+(((-2.0)*gconst18*gconst22*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst17*gconst20))+(((-2.0)*cj2*gconst15*gconst18*gconst2))+(((-2.0)*cj2*gconst13*gconst22*gconst6))+(((2.0)*gconst10*gconst13*gconst17*sj1*sj2))+(((-2.0)*gconst14*gconst22*gconst4*sj1*sj2))+(((-2.0)*gconst18*gconst23*gconst5*sj1*sj2))+(((2.0)*gconst15*gconst23*gconst6*sj1*sj2))+(((-2.0)*gconst14*gconst21*gconst3*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst21*gconst8))+(((-2.0)*cj2*gconst12*gconst17*gconst8))+(((-2.0)*gconst10*gconst14*gconst16*sj1*sj2))+(((-2.0)*gconst15*gconst2*gconst21*sj1*sj2))+(((-2.0)*gconst11*gconst12*gconst17*sj1*sj2))+(((-2.0)*gconst11*gconst17*gconst18*sj1*sj2))+(((-2.0)*gconst14*gconst15*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst18*sj1*sj2))+(((2.0)*cj2*gconst12*gconst17*gconst6))+(((2.0)*gconst13*gconst22*gconst5*sj1*sj2))+(((2.0)*cj2*gconst0*gconst18*gconst23))+(((2.0)*gconst0*gconst17*gconst21*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst20*gconst9))+(((-2.0)*cj2*gconst12*gconst20*gconst5))+(((-2.0)*cj2*gconst10*gconst13*gconst18))+(((2.0)*gconst12*gconst17*gconst9*sj1*sj2))+(((2.0)*cj2*gconst13*gconst17*gconst7))+(((2.0)*cj2*gconst15*gconst2*gconst20))+(((2.0)*gconst11*gconst14*gconst15*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst16*gconst7))+(((2.0)*cj2*gconst12*gconst23*gconst6))+(((-2.0)*gconst17*gconst23*gconst6*sj1*sj2))+(((2.0)*gconst18*gconst23*gconst3*sj1*sj2))+(((-2.0)*gconst15*gconst21*gconst8*sj1*sj2))+(((2.0)*cj2*gconst13*gconst19*gconst5))+(((2.0)*cj2*gconst13*gconst19*gconst9))+(((-2.0)*gconst0*gconst17*gconst23*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst23*gconst6))+(((-2.0)*cj2*gconst11*gconst14*gconst18))+(((-2.0)*cj2*gconst1*gconst18*gconst22))+(((2.0)*cj2*gconst11*gconst12*gconst18))+(((2.0)*gconst19*gconst21*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst19*gconst4))+(((2.0)*cj2*gconst14*gconst15*gconst8))+(((-2.0)*cj2*gconst14*gconst18*gconst3))+(((2.0)*gconst16*gconst21*gconst7*sj1*sj2))+(((2.0)*gconst16*gconst19*gconst9*sj1*sj2))+(((2.0)*cj2*gconst0*gconst17*gconst18))+(((-2.0)*cj2*gconst18*gconst2*gconst23))+(((-2.0)*gconst20*gconst21*gconst3*sj1*sj2))+(((2.0)*gconst17*gconst20*gconst9*sj1*sj2))+(((2.0)*gconst14*gconst23*gconst3*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst15*gconst6))+(((2.0)*cj2*gconst2*gconst20*gconst21))+(((2.0)*gconst20*gconst21*gconst5*sj1*sj2))+(((2.0)*gconst15*gconst2*gconst23*sj1*sj2))+(((2.0)*cj2*gconst13*gconst21*gconst7))+(((2.0)*gconst12*gconst21*gconst5*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst18*sj1*sj2))+(((-2.0)*gconst16*gconst22*gconst6*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst20*gconst21)));
op[4]=((((4.0)*gconst21*gconst5*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst16*gconst2*gconst22*gconst6))+((gconst14*gconst21*gconst4*gconst7))+(((-1.0)*gconst11*gconst12*gconst18*gconst5))+(((-4.0)*gconst11*gconst17*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*gconst12*gconst6*(cj2*cj2)))+(((-1.0)*gconst12*gconst23*gconst5*gconst6))+(((4.0)*gconst18*gconst2*(cj2*cj2)))+(((-1.0)*gconst1*gconst17*gconst19*gconst9))+((gconst14*gconst23*gconst3*gconst6))+(((-1.0)*gconst0*gconst17*gconst23*gconst6))+(((4.0)*cj2*gconst17*gconst6*sj1*sj2))+((gconst1*gconst10*gconst17*gconst18))+(((-1.0)*gconst11*gconst12*gconst17*gconst6))+(((-4.0)*cj2*gconst10*gconst13*sj1*sj2))+(((-4.0)*cj2*gconst2*gconst23*sj1*sj2))+((gconst13*gconst22*gconst5*gconst6))+((gconst12*gconst20*gconst5*gconst9))+(((-4.0)*cj2*gconst12*gconst9*sj1*sj2))+(((4.0)*cj2*gconst11*gconst12*sj1*sj2))+(((4.0)*gconst11*gconst15*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst15*gconst2*gconst21*gconst8))+((gconst0*gconst20*gconst21*gconst5))+(((-4.0)*cj2*gconst17*gconst8*sj1*sj2))+((gconst15*gconst2*gconst23*gconst6))+((gconst1*gconst18*gconst22*gconst5))+(((-4.0)*gconst15*gconst9*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*cj2*gconst1*gconst22*sj1*sj2))+(((4.0)*cj2*gconst14*gconst9*sj1*sj2))+(((-1.0)*gconst13*gconst17*gconst7*gconst9))+((gconst14*gconst16*gconst7*gconst9))+(((-4.0)*gconst21*gconst3*(sj1*sj1)*(sj2*sj2)))+((gconst19*gconst2*gconst21*gconst4))+(((-1.0)*gconst0*gconst11*gconst17*gconst18))+(((-4.0)*gconst23*gconst5*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*gconst22*gconst4*(sj1*sj1)*(sj2*sj2)))+(((4.0)*gconst0*gconst20*(cj2*cj2)))+(((-4.0)*cj2*gconst11*gconst14*sj1*sj2))+((gconst12*gconst21*gconst5*gconst8))+((gconst11*gconst15*gconst18*gconst2))+((gconst1*gconst17*gconst22*gconst6))+((gconst10*gconst13*gconst17*gconst6))+(((-4.0)*cj2*gconst18*gconst3*sj1*sj2))+(((-4.0)*gconst10*gconst16*(sj1*sj1)*(sj2*sj2)))+((gconst16*gconst19*gconst2*gconst9))+((gconst18*gconst2*gconst23*gconst3))+(((-1.0)*gconst15*gconst2*gconst20*gconst9))+(((-1.0)*gconst1*gconst19*gconst21*gconst5))+(((-4.0)*gconst1*gconst19*(cj2*cj2)))+((gconst16*gconst2*gconst21*gconst7))+(((-1.0)*gconst14*gconst15*gconst8*gconst9))+(((-1.0)*gconst10*gconst14*gconst18*gconst4))+(((-1.0)*gconst2*gconst20*gconst21*gconst3))+(((-4.0)*gconst13*gconst7*(cj2*cj2)))+(((4.0)*cj2*gconst15*gconst8*sj1*sj2))+(((-4.0)*cj2*gconst19*gconst4*sj1*sj2))+(((-1.0)*gconst13*gconst21*gconst5*gconst7))+(((-4.0)*cj2*gconst20*gconst5*sj1*sj2))+((gconst10*gconst13*gconst18*gconst5))+(((-1.0)*gconst14*gconst22*gconst4*gconst6))+(((-1.0)*gconst13*gconst19*gconst5*gconst9))+(((-4.0)*cj2*gconst16*gconst7*sj1*sj2))+(((-4.0)*cj2*gconst15*gconst6*sj1*sj2))+(((4.0)*cj2*gconst0*gconst23*sj1*sj2))+(((-1.0)*gconst10*gconst14*gconst16*gconst6))+(((4.0)*gconst17*gconst9*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst18*gconst2*gconst22*gconst4))+(((-4.0)*gconst0*gconst18*(cj2*cj2)))+(((-4.0)*gconst14*gconst8*(cj2*cj2)))+(((4.0)*cj2*gconst18*gconst5*sj1*sj2))+((gconst11*gconst14*gconst15*gconst6))+((gconst12*gconst17*gconst8*gconst9))+(((-4.0)*gconst2*gconst20*(cj2*cj2)))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+((gconst14*gconst19*gconst4*gconst9))+((gconst11*gconst14*gconst18*gconst3))+(((4.0)*gconst14*gconst6*(cj2*cj2)))+((gconst0*gconst17*gconst20*gconst9))+(((4.0)*gconst12*gconst8*(cj2*cj2)))+(((-1.0)*gconst14*gconst21*gconst3*gconst8))+(((4.0)*gconst23*gconst3*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst1*gconst17*gconst21*gconst7))+(((-1.0)*gconst10*gconst16*gconst18*gconst2))+(((-4.0)*cj2*gconst0*gconst21*sj1*sj2))+(((-1.0)*gconst14*gconst20*gconst3*gconst9))+(((4.0)*cj2*gconst2*gconst21*sj1*sj2))+((gconst0*gconst17*gconst21*gconst8))+(((4.0)*cj2*gconst20*gconst3*sj1*sj2)));
op[5]=((((2.0)*gconst23*gconst3*gconst6*sj1*sj2))+(((-2.0)*gconst11*gconst18*gconst5*sj1*sj2))+(((2.0)*gconst0*gconst17*gconst9*sj1*sj2))+(((2.0)*cj2*gconst14*gconst3*gconst8))+(((-2.0)*gconst0*gconst23*gconst5*sj1*sj2))+(((-2.0)*gconst22*gconst4*gconst6*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst6*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst2*sj1*sj2))+(((-2.0)*cj2*gconst19*gconst2*gconst4))+(((-2.0)*cj2*gconst12*gconst5*gconst8))+(((2.0)*gconst1*gconst22*gconst5*sj1*sj2))+(((2.0)*gconst0*gconst21*gconst5*sj1*sj2))+(((-2.0)*gconst14*gconst3*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst2*sj1*sj2))+(((-2.0)*cj2*gconst11*gconst14*gconst6))+(((-2.0)*cj2*gconst14*gconst4*gconst7))+(((-2.0)*cj2*gconst1*gconst22*gconst6))+(((-2.0)*cj2*gconst14*gconst3*gconst6))+(((2.0)*gconst17*gconst8*gconst9*sj1*sj2))+(((2.0)*gconst21*gconst4*gconst7*sj1*sj2))+(((-2.0)*gconst0*gconst11*gconst17*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst8*gconst9))+(((-2.0)*gconst15*gconst2*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst1*gconst10*gconst18))+(((-2.0)*cj2*gconst0*gconst17*gconst8))+(((2.0)*gconst2*gconst23*gconst3*sj1*sj2))+(((2.0)*gconst21*gconst5*gconst8*sj1*sj2))+(((-2.0)*gconst23*gconst5*gconst6*sj1*sj2))+(((2.0)*gconst10*gconst13*gconst5*sj1*sj2))+(((2.0)*gconst1*gconst10*gconst17*sj1*sj2))+(((-2.0)*gconst20*gconst3*gconst9*sj1*sj2))+(((2.0)*cj2*gconst0*gconst11*gconst18))+(((-2.0)*gconst11*gconst17*gconst6*sj1*sj2))+(((2.0)*cj2*gconst1*gconst17*gconst7))+(((2.0)*gconst11*gconst14*gconst3*sj1*sj2))+(((2.0)*cj2*gconst2*gconst20*gconst3))+(((2.0)*cj2*gconst2*gconst20*gconst9))+(((2.0)*cj2*gconst1*gconst19*gconst5))+(((2.0)*cj2*gconst1*gconst19*gconst9))+(((-2.0)*gconst21*gconst3*gconst8*sj1*sj2))+(((2.0)*gconst16*gconst7*gconst9*sj1*sj2))+(((-2.0)*gconst2*gconst21*gconst3*sj1*sj2))+(((2.0)*cj2*gconst0*gconst17*gconst6))+(((2.0)*cj2*gconst13*gconst5*gconst7))+(((2.0)*cj2*gconst1*gconst21*gconst7))+(((2.0)*cj2*gconst14*gconst8*gconst9))+(((2.0)*cj2*gconst0*gconst23*gconst6))+(((2.0)*cj2*gconst2*gconst21*gconst8))+(((2.0)*cj2*gconst13*gconst7*gconst9))+(((-2.0)*gconst2*gconst22*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst21*gconst8))+(((2.0)*cj2*gconst11*gconst12*gconst6))+(((2.0)*gconst12*gconst5*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst20*gconst5))+(((-2.0)*cj2*gconst0*gconst20*gconst9))+(((-2.0)*cj2*gconst15*gconst2*gconst6))+(((-2.0)*cj2*gconst2*gconst23*gconst6))+(((2.0)*gconst19*gconst4*gconst9*sj1*sj2))+(((-2.0)*gconst15*gconst8*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst11*gconst18*gconst2))+(((2.0)*gconst20*gconst5*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst14*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst16*gconst2*gconst7))+(((-2.0)*gconst10*gconst18*gconst4*sj1*sj2))+(((2.0)*gconst11*gconst18*gconst3*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst6*sj1*sj2))+(((-2.0)*cj2*gconst10*gconst13*gconst6))+(((-2.0)*gconst11*gconst12*gconst5*sj1*sj2))+(((2.0)*cj2*gconst0*gconst18*gconst5))+(((2.0)*cj2*gconst15*gconst2*gconst8))+(((2.0)*cj2*gconst12*gconst5*gconst6))+(((-2.0)*cj2*gconst18*gconst2*gconst3)));
op[6]=((((-1.0)*gconst10*gconst4*x1337))+(((-1.0)*gconst16*x1299*x1319))+(((-1.0)*x1275*x1330))+((gconst2*gconst21*x1282))+(((-1.0)*gconst14*x1289*x1291))+((x1275*x1276))+((x1277*x1278))+((x1277*x1303))+((x1299*x1333))+(((-1.0)*gconst11*gconst2*x1280*x1281))+(((-1.0)*x1295*x1323))+(((-1.0)*x1291*x1337))+((x1276*x1317))+(((-1.0)*x1280*x1281*x1282))+(((-1.0)*gconst5*x1292*x1316))+(((-1.0)*x1280*x1281*x1313))+((gconst14*gconst3*x1279))+(((-1.0)*x1299*x1335))+((x1290*x1320))+((x1293*x1312))+((gconst15*gconst2*x1279))+((x1304*x1337))+(((-1.0)*gconst0*gconst6*x1333))+((x1287*x1304))+((gconst1*gconst22*x1290))+(((-1.0)*gconst5*x1279*x1322))+(((-1.0)*gconst19*x1292*x1302))+((gconst3*gconst8*x1280*x1281))+((gconst17*x1331))+(((-1.0)*x1280*x1281*x1305))+(((-1.0)*gconst11*gconst5*x1337))+((gconst14*gconst9*x1282))+((x1296*x1310))+(((-1.0)*gconst7*x1292*x1293))+((gconst11*gconst3*x1337))+(((-1.0)*gconst3*gconst6*x1280*x1281))+(((-1.0)*gconst8*x1271*x1276))+(((-1.0)*gconst4*x1319*x1328))+((x1280*x1281*x1295))+((x1280*x1281*x1290))+(((-1.0)*gconst2*gconst8*x1333))+(((-1.0)*gconst4*x1312*x1327))+(((-1.0)*gconst7*x1271*x1302))+((x1310*x1333))+(((-1.0)*gconst17*x1279*x1318))+((x1277*x1280*x1281))+((gconst12*gconst9*x1298))+(((-1.0)*x1309*x1333))+(((-1.0)*x1280*x1281*x1298))+(((-1.0)*gconst20*x1276*x1292))+(((-1.0)*gconst15*x1277*x1289))+((gconst10*gconst18*x1302)));
op[7]=((((-1.0)*gconst6*x1284*x1305))+(((-1.0)*x1284*x1331))+(((2.0)*gconst3*x1279*x1280))+(((-1.0)*gconst6*x1276*x1284))+(((-1.0)*gconst2*x1282*x1284))+((gconst8*gconst9*x1280*x1294))+(((-1.0)*x1280*x1294*x1295))+(((-1.0)*gconst10*gconst2*x1280*x1315))+(((-1.0)*gconst0*x1284*x1298))+(((-1.0)*x1276*x1280*x1308))+((gconst8*x1277*x1284))+(((-1.0)*gconst2*x1279*x1284))+((x1280*x1282*x1308))+((x1280*x1294*x1313))+((gconst9*x1284*x1309))+((gconst0*x1279*x1284))+((x1280*x1294*x1305))+((gconst0*x1284*x1290))+(((-1.0)*x1280*x1312*x1315))+(((2.0)*gconst11*x1276*x1280))+(((-2.0)*gconst8*x1280*x1291))+((gconst8*x1276*x1284))+(((-1.0)*x1279*x1280*x1294))+((gconst7*x1284*x1302)));
op[8]=(((x1298*x1313))+(((-1.0)*gconst4*x1299*x1319))+((x1276*x1279))+(((-1.0)*gconst9*x1276*x1289))+(((-1.0)*x1279*x1330))+((x1290*x1305))+((x1277*x1282))+(((-1.0)*gconst7*x1292*x1302)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[2];
IkReal x1338=(py*r01);
IkReal x1339=(px*r00);
IkReal x1340=(pz*r00);
IkReal x1341=((-1.0)*r01);
IkReal x1342=(((px*r01))+((py*r00)));
IkReal x1343=(pz*x1341);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1341;
r11=r00;
npx=(x1339+(((-1.0)*x1338)));
npy=x1342;
npz=(pz*r22);
rxp0_0=x1343;
rxp0_1=((-1.0)*x1340);
rxp0_2=x1342;
rxp1_0=x1340;
rxp1_1=x1343;
rxp1_2=(x1338+(((-1.0)*x1339)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1344=cj4*cj4;
IkReal x1345=cj5*cj5;
IkReal x1346=(x1344+x1345+(((-1.0)*x1344*x1345)));
j6eval[0]=x1346;
j6eval[1]=IKsign(x1346);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1347=(py*r01);
IkReal x1348=(px*r00);
IkReal x1349=(pz*r00);
IkReal x1350=((-1.0)*r01);
IkReal x1351=(((px*r01))+((py*r00)));
IkReal x1352=(pz*x1350);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1350;
r11=r00;
npx=(x1348+(((-1.0)*x1347)));
npy=x1351;
npz=(pz*r22);
rxp0_0=x1352;
rxp0_1=((-1.0)*x1349);
rxp0_2=x1351;
rxp1_0=x1349;
rxp1_1=x1352;
rxp1_2=(x1347+(((-1.0)*x1348)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1353=((((-1.0)*cj5*sj3))+(((-1.0)*cj3*cj4*sj5)));
j6eval[0]=x1353;
j6eval[1]=IKsign(x1353);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1354=(py*r01);
IkReal x1355=(px*r00);
IkReal x1356=(pz*r00);
IkReal x1357=((-1.0)*r01);
IkReal x1358=(((px*r01))+((py*r00)));
IkReal x1359=(pz*x1357);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1357;
r11=r00;
npx=(x1355+(((-1.0)*x1354)));
npy=x1358;
npz=(pz*r22);
rxp0_0=x1359;
rxp0_1=((-1.0)*x1356);
rxp0_2=x1358;
rxp1_0=x1356;
rxp1_1=x1359;
rxp1_2=(x1354+(((-1.0)*x1355)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1360=((1.0)*sj4);
IkReal x1361=(cj4*sj3);
IkReal x1362=(((sj4*x1361))+(((-1.0)*cj3*cj5*sj5*x1360))+(((-1.0)*x1360*x1361*(cj5*cj5))));
j6eval[0]=x1362;
j6eval[1]=IKsign(x1362);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1363=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.37429)*r22))+(((-0.069)*x1363))+(((-1.0)*pz))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((cj3*r22)));
evalcond[4]=((((-1.0)*x1363))+(((-1.0)*r22*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1364=((100.0)*r00);
IkReal x1365=(cj0*r01);
IkReal x1366=((100.0)*r01);
IkReal x1367=(r00*sj0);
IkReal x1368=(cj0*r00);
IkReal x1369=(r01*sj0);
IkReal x1370=((6.9)*cj2*sj1);
if( IKabs((((px*x1364))+(((6.9)*x1369))+((x1368*x1370))+(((-6.9)*x1368))+(((-1.0)*x1369*x1370))+(((-1.0)*py*x1366)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1365*x1370))+((x1367*x1370))+((px*x1366))+(((-6.9)*x1365))+(((-6.9)*x1367))+((py*x1364)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x1364))+(((6.9)*x1369))+((x1368*x1370))+(((-6.9)*x1368))+(((-1.0)*x1369*x1370))+(((-1.0)*py*x1366))))+IKsqr((((x1365*x1370))+((x1367*x1370))+((px*x1366))+(((-6.9)*x1365))+(((-6.9)*x1367))+((py*x1364))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((px*x1364))+(((6.9)*x1369))+((x1368*x1370))+(((-6.9)*x1368))+(((-1.0)*x1369*x1370))+(((-1.0)*py*x1366))), (((x1365*x1370))+((x1367*x1370))+((px*x1366))+(((-6.9)*x1365))+(((-6.9)*x1367))+((py*x1364))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1371=IKcos(j6);
IkReal x1372=IKsin(j6);
IkReal x1373=(r00*sj3);
IkReal x1374=((0.069)*cj0);
IkReal x1375=((0.01)*r01);
IkReal x1376=((1.0)*r00);
IkReal x1377=(cj2*sj1);
IkReal x1378=(r01*sj3);
IkReal x1379=((0.069)*sj0);
IkReal x1380=(cj3*r01);
IkReal x1381=(cj3*r00);
IkReal x1382=((1.0)*sj0);
IkReal x1383=((1.0)*r01);
IkReal x1384=(sj4*x1372);
IkReal x1385=(cj4*x1372);
IkReal x1386=(sj4*x1371);
IkReal x1387=(r00*x1371);
IkReal x1388=((1.0)*cj4*x1371);
evalcond[0]=(x1374+(((-1.0)*x1374*x1377))+(((-1.0)*px))+((x1371*x1375))+(((0.01)*r00*x1372)));
evalcond[1]=(x1379+(((-1.0)*x1372*x1375))+(((-1.0)*py))+(((0.01)*x1387))+(((-1.0)*x1377*x1379)));
evalcond[2]=((((-1.0)*x1373*x1388))+((x1373*x1384))+((x1378*x1386))+((x1378*x1385)));
evalcond[3]=((((-1.0)*x1376*x1385))+(((-1.0)*x1376*x1386))+((cj0*cj2))+(((-1.0)*cj4*x1371*x1383))+((r01*x1384)));
evalcond[4]=((((-1.0)*x1383*x1386))+(((-1.0)*x1383*x1385))+(((-1.0)*x1376*x1384))+((cj4*x1387))+(((-1.0)*cj2*x1382)));
evalcond[5]=((((-1.0)*x1373*x1385))+(((-1.0)*x1373*x1386))+(((-1.0)*x1378*x1388))+((x1378*x1384)));
evalcond[6]=(((x1380*x1386))+((x1380*x1385))+((x1381*x1384))+(((-1.0)*x1377*x1382))+(((-1.0)*cj3*cj4*x1371*x1376)));
evalcond[7]=(((x1380*x1384))+(((-1.0)*cj0*x1377))+(((-1.0)*x1380*x1388))+(((-1.0)*cj3*x1376*x1386))+(((-1.0)*cj3*x1376*x1385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1389=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((-0.069)*x1389))+(((-1.0)*pz))+(((-0.37429)*r22))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*cj3*r22))+sj1);
evalcond[4]=(((r22*sj3))+(((-1.0)*x1389)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1390=((100.0)*r00);
IkReal x1391=(cj0*r01);
IkReal x1392=((100.0)*r01);
IkReal x1393=(r00*sj0);
IkReal x1394=(cj0*r00);
IkReal x1395=(r01*sj0);
IkReal x1396=((6.9)*cj2*sj1);
if( IKabs(((((-6.9)*x1395))+(((-1.0)*x1394*x1396))+((py*x1392))+((x1395*x1396))+(((-1.0)*px*x1390))+(((6.9)*x1394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1391*x1396))+(((-1.0)*x1393*x1396))+(((-1.0)*px*x1392))+(((-1.0)*py*x1390))+(((6.9)*x1393))+(((6.9)*x1391)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-6.9)*x1395))+(((-1.0)*x1394*x1396))+((py*x1392))+((x1395*x1396))+(((-1.0)*px*x1390))+(((6.9)*x1394))))+IKsqr(((((-1.0)*x1391*x1396))+(((-1.0)*x1393*x1396))+(((-1.0)*px*x1392))+(((-1.0)*py*x1390))+(((6.9)*x1393))+(((6.9)*x1391))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-6.9)*x1395))+(((-1.0)*x1394*x1396))+((py*x1392))+((x1395*x1396))+(((-1.0)*px*x1390))+(((6.9)*x1394))), ((((-1.0)*x1391*x1396))+(((-1.0)*x1393*x1396))+(((-1.0)*px*x1392))+(((-1.0)*py*x1390))+(((6.9)*x1393))+(((6.9)*x1391))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1397=IKsin(j6);
IkReal x1398=IKcos(j6);
IkReal x1399=((1.0)*r01);
IkReal x1400=((0.069)*cj0);
IkReal x1401=(r00*sj3);
IkReal x1402=(cj3*r00);
IkReal x1403=(r01*sj3);
IkReal x1404=(cj2*sj1);
IkReal x1405=((1.0)*sj0);
IkReal x1406=((0.069)*sj0);
IkReal x1407=(cj3*r01);
IkReal x1408=(cj4*x1398);
IkReal x1409=(sj4*x1397);
IkReal x1410=(r01*x1398);
IkReal x1411=(sj4*x1398);
IkReal x1412=(cj4*x1397);
IkReal x1413=((0.01)*x1397);
evalcond[0]=((((-0.01)*x1410))+(((-1.0)*px))+(((-1.0)*r00*x1413))+x1400+(((-1.0)*x1400*x1404)));
evalcond[1]=((((-1.0)*py))+((r01*x1413))+(((-1.0)*x1404*x1406))+x1406+(((-0.01)*r00*x1398)));
evalcond[2]=((((-1.0)*cj2*x1405))+(((-1.0)*x1399*x1412))+((r00*x1408))+((r00*x1409))+((sj4*x1410)));
evalcond[3]=(((x1401*x1412))+(((-1.0)*x1401*x1411))+((x1403*x1408))+((x1403*x1409)));
evalcond[4]=((((-1.0)*sj3*x1399*x1412))+((x1401*x1409))+((x1401*x1408))+((x1403*x1411)));
evalcond[5]=((((-1.0)*x1399*x1408))+(((-1.0)*x1399*x1409))+((cj0*cj2))+((r00*x1411))+(((-1.0)*r00*x1412)));
evalcond[6]=(((x1407*x1411))+(((-1.0)*cj3*x1399*x1412))+(((-1.0)*x1404*x1405))+((x1402*x1409))+((x1402*x1408)));
evalcond[7]=(((x1402*x1412))+(((-1.0)*x1402*x1411))+(((-1.0)*cj0*x1404))+((x1407*x1408))+((x1407*x1409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1414=(cj5*r22);
IkReal x1415=((1.0)*sj3);
IkReal x1416=(r22*sj5);
IkReal x1417=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.01)*x1416))+(((-1.0)*pz))+(((-0.069)*x1417))+(((0.37429)*x1414))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*x1415*x1416))+sj1+((cj3*x1414)));
evalcond[4]=((((-1.0)*x1414*x1415))+(((-1.0)*cj3*x1416))+(((-1.0)*x1417)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1418=(cj2*r01);
IkReal x1419=(cj2*r00);
if( IKabs(((((-1.0)*sj0*x1418))+((cj0*x1419)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj0*x1418))+((sj0*x1419)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x1418))+((cj0*x1419))))+IKsqr((((cj0*x1418))+((sj0*x1419))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*sj0*x1418))+((cj0*x1419))), (((cj0*x1418))+((sj0*x1419))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1420=IKcos(j6);
IkReal x1421=IKsin(j6);
IkReal x1422=((0.01)*cj5);
IkReal x1423=((0.069)*cj0);
IkReal x1424=((1.0)*cj5);
IkReal x1425=(cj3*sj5);
IkReal x1426=((0.37429)*sj5);
IkReal x1427=((0.069)*sj0);
IkReal x1428=(cj2*sj1);
IkReal x1429=(sj3*sj5);
IkReal x1430=(r00*x1420);
IkReal x1431=(r00*x1421);
IkReal x1432=(r01*x1420);
IkReal x1433=(r01*x1421);
IkReal x1434=((1.0)*x1428);
evalcond[0]=((((-1.0)*x1431))+(((-1.0)*x1432))+((cj0*cj2)));
evalcond[1]=((((-1.0)*x1433))+(((-1.0)*cj2*sj0))+x1430);
evalcond[2]=((((-1.0)*sj3*x1424*x1430))+((x1425*x1433))+(((-1.0)*x1425*x1430))+((cj5*sj3*x1433)));
evalcond[3]=((((-1.0)*sj3*x1424*x1432))+(((-1.0)*sj3*x1424*x1431))+(((-1.0)*x1425*x1432))+(((-1.0)*x1425*x1431)));
evalcond[4]=(((x1429*x1430))+(((-1.0)*sj0*x1434))+(((-1.0)*x1429*x1433))+((cj3*cj5*x1433))+(((-1.0)*cj3*x1424*x1430)));
evalcond[5]=(((x1429*x1432))+((x1429*x1431))+(((-1.0)*cj3*x1424*x1431))+(((-1.0)*cj3*x1424*x1432))+(((-1.0)*cj0*x1434)));
evalcond[6]=((((-1.0)*x1423*x1428))+(((-1.0)*px))+x1423+(((-1.0)*x1426*x1432))+(((-1.0)*x1426*x1431))+((x1422*x1432))+((x1422*x1431)));
evalcond[7]=((((-1.0)*x1427*x1428))+(((-1.0)*x1422*x1433))+(((-1.0)*py))+((x1426*x1433))+x1427+(((-1.0)*x1426*x1430))+((x1422*x1430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1435=(r22*sj3);
IkReal x1436=(cj1*cj2);
IkReal x1437=(cj5*r22);
IkReal x1438=(r22*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.37429)*x1437))+(((-1.0)*pz))+(((-0.069)*x1436))+(((0.01)*x1438))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((sj5*x1435))+((cj3*x1437)));
evalcond[4]=((((-1.0)*cj5*x1435))+(((-1.0)*x1436))+((cj3*x1438)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1439=(cj2*sj0);
IkReal x1440=((1.0)*r00);
IkReal x1441=(cj0*cj2);
if( IKabs((((r01*x1439))+(((-1.0)*x1440*x1441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1439*x1440))+(((-1.0)*r01*x1441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1439))+(((-1.0)*x1440*x1441))))+IKsqr(((((-1.0)*x1439*x1440))+(((-1.0)*r01*x1441))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((r01*x1439))+(((-1.0)*x1440*x1441))), ((((-1.0)*x1439*x1440))+(((-1.0)*r01*x1441))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1442=IKsin(j6);
IkReal x1443=IKcos(j6);
IkReal x1444=((0.069)*cj0);
IkReal x1445=((1.0)*cj3);
IkReal x1446=(cj0*cj2);
IkReal x1447=(cj5*sj3);
IkReal x1448=((1.0)*sj1);
IkReal x1449=(cj2*sj0);
IkReal x1450=((0.01)*cj5);
IkReal x1451=(sj3*sj5);
IkReal x1452=((0.37429)*sj5);
IkReal x1453=(cj3*cj5);
IkReal x1454=(r01*x1442);
IkReal x1455=(r01*x1443);
IkReal x1456=(r00*x1443);
IkReal x1457=(r00*x1442);
IkReal x1458=(cj5*x1456);
IkReal x1459=(sj5*x1455);
IkReal x1460=(sj5*x1457);
evalcond[0]=(x1455+x1457+x1446);
evalcond[1]=((((-1.0)*x1456))+(((-1.0)*x1449))+x1454);
evalcond[2]=(((x1447*x1455))+((x1447*x1457))+(((-1.0)*x1445*x1459))+(((-1.0)*x1445*x1460)));
evalcond[3]=((((-1.0)*x1447*x1454))+((x1447*x1456))+(((-1.0)*sj5*x1445*x1456))+((cj3*sj5*x1454)));
evalcond[4]=((((-1.0)*x1446*x1448))+((x1453*x1455))+((x1453*x1457))+((x1451*x1455))+((x1451*x1457)));
evalcond[5]=((((-1.0)*cj5*x1445*x1454))+(((-1.0)*x1451*x1454))+((x1453*x1456))+(((-1.0)*x1448*x1449))+((x1451*x1456)));
evalcond[6]=((((-1.0)*cj2*sj1*x1444))+((x1450*x1455))+((x1450*x1457))+(((-1.0)*px))+x1444+(((-1.0)*x1452*x1455))+(((-1.0)*x1452*x1457)));
evalcond[7]=((((-0.069)*sj1*x1449))+((x1450*x1456))+(((-1.0)*py))+(((0.069)*sj0))+(((-1.0)*x1452*x1456))+((x1452*x1454))+(((-1.0)*x1450*x1454)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1461=(cj1*cj2);
IkReal x1462=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r22)));
evalcond[2]=((((-1.0)*pz))+(((-0.069)*x1461))+(((0.01)*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((cj0*cj2))+((sj0*x1462)));
evalcond[4]=(((cj0*x1462))+(((-1.0)*cj2*sj0)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1461);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1463=((0.184349034171364)*cj0);
IkReal x1464=((2.67172513291833)*r00);
IkReal x1465=(r01*sj2);
IkReal x1466=((0.184349034171364)*sj0);
IkReal x1467=(r00*sj2);
IkReal x1468=((2.67172513291833)*r01);
if( IKabs((((py*x1468))+(((-1.0)*x1466*x1467))+((r00*x1463))+(((-1.0)*x1463*x1465))+(((-1.0)*r01*x1466))+(((-1.0)*px*x1464)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*py*x1464))+((x1463*x1467))+((r01*x1463))+((r00*x1466))+(((-1.0)*px*x1468))+(((-1.0)*x1465*x1466)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x1468))+(((-1.0)*x1466*x1467))+((r00*x1463))+(((-1.0)*x1463*x1465))+(((-1.0)*r01*x1466))+(((-1.0)*px*x1464))))+IKsqr(((((-1.0)*py*x1464))+((x1463*x1467))+((r01*x1463))+((r00*x1466))+(((-1.0)*px*x1468))+(((-1.0)*x1465*x1466))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((py*x1468))+(((-1.0)*x1466*x1467))+((r00*x1463))+(((-1.0)*x1463*x1465))+(((-1.0)*r01*x1466))+(((-1.0)*px*x1464))), ((((-1.0)*py*x1464))+((x1463*x1467))+((r01*x1463))+((r00*x1466))+(((-1.0)*px*x1468))+(((-1.0)*x1465*x1466))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1469=IKsin(j6);
IkReal x1470=IKcos(j6);
IkReal x1471=((1.0)*r01);
IkReal x1472=((0.069)*sj2);
IkReal x1473=((0.37429)*r01);
IkReal x1474=((1.0)*r00);
IkReal x1475=((0.37429)*r00);
IkReal x1476=(cj3*x1470);
IkReal x1477=(sj3*x1469);
IkReal x1478=(sj3*x1470);
IkReal x1479=(cj3*r00*x1469);
IkReal x1480=(x1474*x1476);
IkReal x1481=(((cj3*r01*x1469))+((r01*x1478))+((r00*x1477)));
evalcond[0]=((((-1.0)*x1470*x1473))+(((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*x1469*x1475))+(((-1.0)*sj0*x1472)));
evalcond[1]=((((-1.0)*x1470*x1475))+(((-1.0)*py))+(((0.069)*sj0))+((cj0*x1472))+((x1469*x1473)));
evalcond[2]=((((-1.0)*x1480))+x1481);
evalcond[3]=((((-1.0)*x1471*x1476))+(((-1.0)*x1474*x1478))+(((-1.0)*cj3*x1469*x1474))+((r01*x1477)));
evalcond[4]=((((-1.0)*x1471*x1477))+x1479+((r01*x1476))+((r00*x1478))+((cj0*sj2)));
evalcond[5]=((((-1.0)*x1480))+x1481+(((-1.0)*sj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1482=(cj1*cj2);
IkReal x1483=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+r22);
evalcond[2]=((((-1.0)*pz))+(((-0.069)*x1482))+(((0.01)*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((sj0*x1483))+((cj0*cj2)));
evalcond[4]=((((-1.0)*cj2*sj0))+((cj0*x1483)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1482);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1484=((0.184349034171364)*cj0);
IkReal x1485=((2.67172513291833)*r00);
IkReal x1486=(r01*sj2);
IkReal x1487=((0.184349034171364)*sj0);
IkReal x1488=(r00*sj2);
IkReal x1489=((2.67172513291833)*r01);
if( IKabs(((((-1.0)*x1487*x1488))+(((-1.0)*r01*x1487))+((r00*x1484))+((py*x1489))+(((-1.0)*x1484*x1486))+(((-1.0)*px*x1485)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x1484))+((r00*x1487))+(((-1.0)*px*x1489))+(((-1.0)*x1486*x1487))+((x1484*x1488))+(((-1.0)*py*x1485)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1487*x1488))+(((-1.0)*r01*x1487))+((r00*x1484))+((py*x1489))+(((-1.0)*x1484*x1486))+(((-1.0)*px*x1485))))+IKsqr((((r01*x1484))+((r00*x1487))+(((-1.0)*px*x1489))+(((-1.0)*x1486*x1487))+((x1484*x1488))+(((-1.0)*py*x1485))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*x1487*x1488))+(((-1.0)*r01*x1487))+((r00*x1484))+((py*x1489))+(((-1.0)*x1484*x1486))+(((-1.0)*px*x1485))), (((r01*x1484))+((r00*x1487))+(((-1.0)*px*x1489))+(((-1.0)*x1486*x1487))+((x1484*x1488))+(((-1.0)*py*x1485))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1490=IKsin(j6);
IkReal x1491=IKcos(j6);
IkReal x1492=((1.0)*r01);
IkReal x1493=((0.069)*sj2);
IkReal x1494=((1.0)*r00);
IkReal x1495=((0.37429)*r01);
IkReal x1496=(cj3*x1491);
IkReal x1497=(r00*x1491);
IkReal x1498=(sj3*x1490);
IkReal x1499=(sj3*x1491);
IkReal x1500=(cj3*x1490);
IkReal x1501=(sj3*x1497);
IkReal x1502=(((x1494*x1500))+((x1492*x1496))+((x1492*x1498)));
evalcond[0]=((((0.069)*cj0))+(((-0.37429)*r00*x1490))+(((-1.0)*px))+(((-1.0)*x1491*x1495))+(((-1.0)*sj0*x1493)));
evalcond[1]=((((-0.37429)*x1497))+(((-1.0)*py))+(((0.069)*sj0))+((cj0*x1493))+((x1490*x1495)));
evalcond[2]=((((-1.0)*x1502))+x1501);
evalcond[3]=((((-1.0)*x1494*x1498))+(((-1.0)*x1494*x1496))+(((-1.0)*x1492*x1499))+((r01*x1500)));
evalcond[4]=(((r00*x1496))+((r00*x1498))+((r01*x1499))+(((-1.0)*sj0*sj2))+(((-1.0)*x1492*x1500)));
evalcond[5]=((((-1.0)*x1502))+x1501+((cj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1503=(cj1*cj2);
IkReal x1504=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+r22);
evalcond[2]=((((-0.069)*x1503))+(((-1.0)*pz))+(((-0.01)*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((cj0*cj2))+((sj0*x1504)));
evalcond[4]=(((cj0*x1504))+(((-1.0)*cj2*sj0)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1503);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1505=((0.184349034171364)*cj0);
IkReal x1506=((2.67172513291833)*r00);
IkReal x1507=(r01*sj2);
IkReal x1508=((0.184349034171364)*sj0);
IkReal x1509=(r00*sj2);
IkReal x1510=((2.67172513291833)*r01);
if( IKabs((((x1508*x1509))+(((-1.0)*r00*x1505))+((r01*x1508))+(((-1.0)*py*x1510))+((px*x1506))+((x1505*x1507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1505))+((x1507*x1508))+(((-1.0)*r00*x1508))+((py*x1506))+((px*x1510))+(((-1.0)*x1505*x1509)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1508*x1509))+(((-1.0)*r00*x1505))+((r01*x1508))+(((-1.0)*py*x1510))+((px*x1506))+((x1505*x1507))))+IKsqr(((((-1.0)*r01*x1505))+((x1507*x1508))+(((-1.0)*r00*x1508))+((py*x1506))+((px*x1510))+(((-1.0)*x1505*x1509))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((x1508*x1509))+(((-1.0)*r00*x1505))+((r01*x1508))+(((-1.0)*py*x1510))+((px*x1506))+((x1505*x1507))), ((((-1.0)*r01*x1505))+((x1507*x1508))+(((-1.0)*r00*x1508))+((py*x1506))+((px*x1510))+(((-1.0)*x1505*x1509))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1511=IKcos(j6);
IkReal x1512=IKsin(j6);
IkReal x1513=((0.069)*cj0);
IkReal x1514=((0.069)*sj0);
IkReal x1515=(cj3*r00);
IkReal x1516=(r01*sj3);
IkReal x1517=(cj3*r01);
IkReal x1518=((0.37429)*r00);
IkReal x1519=((0.37429)*r01);
IkReal x1520=((1.0)*x1511);
IkReal x1521=(x1511*x1517);
IkReal x1522=(x1512*x1516);
IkReal x1523=(x1512*x1515);
IkReal x1524=(r00*sj3*x1512);
IkReal x1525=(r00*sj3*x1520);
IkReal x1526=(x1521+x1522+x1523);
evalcond[0]=((((-1.0)*px))+x1513+((x1511*x1519))+((x1512*x1518))+(((-1.0)*sj2*x1514)));
evalcond[1]=(((sj2*x1513))+(((-1.0)*py))+x1514+(((-1.0)*x1512*x1519))+((x1511*x1518)));
evalcond[2]=((((-1.0)*x1525))+x1526);
evalcond[3]=(x1524+(((-1.0)*x1512*x1517))+((x1511*x1515))+((x1511*x1516)));
evalcond[4]=((((-1.0)*x1525))+x1526+((cj0*sj2)));
evalcond[5]=((((-1.0)*x1515*x1520))+(((-1.0)*sj0*sj2))+(((-1.0)*x1516*x1520))+((x1512*x1517))+(((-1.0)*x1524)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1527=(cj1*cj2);
IkReal x1528=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r22)));
evalcond[2]=((((-0.069)*x1527))+(((-1.0)*pz))+(((-0.01)*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((sj0*x1528))+((cj0*cj2)));
evalcond[4]=(((cj0*x1528))+(((-1.0)*cj2*sj0)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1527);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1529=((0.184349034171364)*cj0);
IkReal x1530=((2.67172513291833)*r00);
IkReal x1531=(r01*sj2);
IkReal x1532=((0.184349034171364)*sj0);
IkReal x1533=(r00*sj2);
IkReal x1534=((2.67172513291833)*r01);
if( IKabs(((((-1.0)*r00*x1529))+((r01*x1532))+((x1532*x1533))+((x1529*x1531))+((px*x1530))+(((-1.0)*py*x1534)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1529*x1533))+(((-1.0)*r00*x1532))+(((-1.0)*r01*x1529))+((x1531*x1532))+((px*x1534))+((py*x1530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1529))+((r01*x1532))+((x1532*x1533))+((x1529*x1531))+((px*x1530))+(((-1.0)*py*x1534))))+IKsqr(((((-1.0)*x1529*x1533))+(((-1.0)*r00*x1532))+(((-1.0)*r01*x1529))+((x1531*x1532))+((px*x1534))+((py*x1530))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*r00*x1529))+((r01*x1532))+((x1532*x1533))+((x1529*x1531))+((px*x1530))+(((-1.0)*py*x1534))), ((((-1.0)*x1529*x1533))+(((-1.0)*r00*x1532))+(((-1.0)*r01*x1529))+((x1531*x1532))+((px*x1534))+((py*x1530))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1535=IKcos(j6);
IkReal x1536=IKsin(j6);
IkReal x1537=((0.069)*cj0);
IkReal x1538=((0.069)*sj0);
IkReal x1539=(cj3*x1535);
IkReal x1540=(r00*x1535);
IkReal x1541=(r01*x1536);
IkReal x1542=(r00*x1539);
IkReal x1543=((1.0)*sj3*x1536);
IkReal x1544=((1.0)*r01*x1535);
IkReal x1545=(cj3*r00*x1536);
IkReal x1546=(r00*x1543);
IkReal x1547=(sj3*x1544);
IkReal x1548=((1.0)*cj3*x1541);
IkReal x1549=(x1546+x1547+x1548);
evalcond[0]=((((-1.0)*sj2*x1538))+(((0.37429)*r01*x1535))+(((0.37429)*r00*x1536))+(((-1.0)*px))+x1537);
evalcond[1]=(((sj2*x1537))+(((0.37429)*x1540))+(((-0.37429)*x1541))+(((-1.0)*py))+x1538);
evalcond[2]=(((r01*x1539))+x1545+(((-1.0)*sj3*x1541))+((sj3*x1540)));
evalcond[3]=(x1542+(((-1.0)*x1549)));
evalcond[4]=((((-1.0)*x1545))+(((-1.0)*r01*x1539))+(((-1.0)*sj3*x1540))+((cj0*sj2))+((sj3*x1541)));
evalcond[5]=(x1542+(((-1.0)*sj0*sj2))+(((-1.0)*x1549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1550=((1.0)*r01);
IkReal x1551=(cj4*r00);
IkReal x1552=(cj1*sj0);
IkReal x1553=(cj4*r01);
IkReal x1554=(sj3*sj4);
IkReal x1555=(cj3*sj5);
IkReal x1556=((1.0)*cj5);
IkReal x1557=(r00*sj4);
IkReal x1558=((1.0)*r00);
IkReal x1559=(cj2*sj0);
IkReal x1560=(sj3*x1559);
IkReal x1561=(cj0*sj1*sj2);
CheckValue<IkReal> x1562 = IKatan2WithCheck(IkReal((((x1551*x1552))+((cj5*x1551*x1560))+(((-1.0)*cj5*sj4*x1550*x1552))+(((-1.0)*sj3*x1551*x1556*x1561))+((r00*x1555*x1559))+((r01*x1554*x1561))+(((-1.0)*x1555*x1558*x1561))+(((-1.0)*x1550*x1554*x1559)))),((((-1.0)*x1554*x1558*x1561))+((r01*x1555*x1559))+((x1552*x1553))+((r00*x1554*x1559))+((cj5*x1553*x1560))+(((-1.0)*cj4*cj5*sj3*x1550*x1561))+(((-1.0)*x1550*x1555*x1561))+((cj5*x1552*x1557))),IKFAST_ATAN2_MAGTHRESH);
if(!x1562.valid){
continue;
}
CheckValue<IkReal> x1563=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*cj5*x1554*x1556))+(((-1.0)*sj4*x1555*x1556))+((cj4*x1554)))),-1);
if(!x1563.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1562.value)+(((1.5707963267949)*(x1563.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1564=IKcos(j6);
IkReal x1565=IKsin(j6);
IkReal x1566=((1.0)*cj4);
IkReal x1567=((0.36442)*cj1);
IkReal x1568=((0.069)*cj0);
IkReal x1569=(r00*sj4);
IkReal x1570=(sj3*sj5);
IkReal x1571=((1.0)*cj0);
IkReal x1572=(cj0*sj2);
IkReal x1573=((1.0)*sj4);
IkReal x1574=((1.0)*cj3);
IkReal x1575=(r01*sj4);
IkReal x1576=(cj2*sj1);
IkReal x1577=((0.37429)*sj5);
IkReal x1578=((0.069)*sj0);
IkReal x1579=(r01*sj5);
IkReal x1580=((1.0)*sj0);
IkReal x1581=(r01*x1564);
IkReal x1582=(sj3*x1565);
IkReal x1583=(cj4*cj5*r01);
IkReal x1584=(cj5*x1565);
IkReal x1585=(cj3*x1565);
IkReal x1586=(r00*x1565);
IkReal x1587=(r00*x1564);
IkReal x1588=(r01*x1565);
IkReal x1589=(cj5*x1587);
evalcond[0]=((((-1.0)*cj5*x1564*x1569))+((cj0*cj2))+((x1575*x1584))+(((-1.0)*x1566*x1581))+(((-1.0)*x1566*x1586))+((sj0*sj1*sj2)));
evalcond[1]=(((cj4*x1587))+(((-1.0)*cj2*x1580))+((sj1*x1572))+(((-1.0)*x1566*x1588))+(((-1.0)*x1569*x1584))+(((-1.0)*cj5*x1573*x1581)));
evalcond[2]=((((-1.0)*sj2*x1578))+(((-1.0)*x1577*x1586))+(((-1.0)*x1577*x1581))+(((0.01)*r00*x1584))+(((0.01)*cj5*x1581))+(((-1.0)*px))+(((-1.0)*x1568*x1576))+x1568+((cj0*x1567)));
evalcond[3]=((((-1.0)*x1576*x1578))+(((-1.0)*x1577*x1587))+(((0.01)*x1589))+(((-1.0)*py))+((sj0*x1567))+x1578+(((-0.01)*r01*x1584))+((x1577*x1588))+((sj2*x1568)));
evalcond[4]=(((sj3*x1564*x1575))+((x1582*x1583))+(((-1.0)*sj5*x1574*x1587))+(((-1.0)*cj1*x1580))+(((-1.0)*sj3*x1566*x1589))+((x1579*x1585))+((x1569*x1582)));
evalcond[5]=((((-1.0)*sj3*x1564*x1569))+((x1575*x1582))+(((-1.0)*x1564*x1574*x1579))+(((-1.0)*sj5*x1574*x1586))+(((-1.0)*cj5*sj3*x1566*x1581))+(((-1.0)*cj1*x1571))+(((-1.0)*cj5*r00*x1566*x1582)));
evalcond[6]=(((x1570*x1587))+((cj3*x1564*x1575))+(((-1.0)*x1570*x1588))+((x1583*x1585))+x1572+(((-1.0)*cj3*x1566*x1589))+(((-1.0)*x1576*x1580))+((x1569*x1585)));
evalcond[7]=(((x1570*x1586))+((x1570*x1581))+(((-1.0)*x1571*x1576))+((x1575*x1585))+(((-1.0)*cj3*cj5*x1566*x1581))+(((-1.0)*cj3*r00*x1566*x1584))+(((-1.0)*sj2*x1580))+(((-1.0)*x1564*x1569*x1574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1590=(sj1*sj2);
IkReal x1591=(r01*sj0);
IkReal x1592=(sj3*sj4);
IkReal x1593=(cj0*cj2);
IkReal x1594=((1.0)*cj5*sj3);
IkReal x1595=(cj4*r00*sj0);
IkReal x1596=((1.0)*cj3*sj5);
IkReal x1597=((1.0)*r00*sj0);
IkReal x1598=(cj1*cj5*sj4);
CheckValue<IkReal> x1599 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj0*x1590*x1596))+(((-1.0)*x1590*x1594*x1595))+(((-1.0)*cj4*r00*x1593*x1594))+((x1590*x1591*x1592))+(((-1.0)*r00*x1593*x1596))+(((-1.0)*cj1*cj4*x1591))+((r01*x1592*x1593))+(((-1.0)*x1597*x1598)))),((((-1.0)*x1590*x1591*x1596))+(((-1.0)*r00*x1592*x1593))+((cj1*x1595))+(((-1.0)*cj4*x1590*x1591*x1594))+(((-1.0)*cj4*r01*x1593*x1594))+(((-1.0)*r01*x1593*x1596))+(((-1.0)*x1590*x1592*x1597))+(((-1.0)*x1591*x1598))),IKFAST_ATAN2_MAGTHRESH);
if(!x1599.valid){
continue;
}
CheckValue<IkReal> x1600=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1594))+(((-1.0)*cj4*x1596)))),-1);
if(!x1600.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1599.value)+(((1.5707963267949)*(x1600.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1601=IKcos(j6);
IkReal x1602=IKsin(j6);
IkReal x1603=((1.0)*cj4);
IkReal x1604=((0.36442)*cj1);
IkReal x1605=((0.069)*cj0);
IkReal x1606=(r00*sj4);
IkReal x1607=(sj3*sj5);
IkReal x1608=((1.0)*cj0);
IkReal x1609=(cj0*sj2);
IkReal x1610=((1.0)*sj4);
IkReal x1611=((1.0)*cj3);
IkReal x1612=(r01*sj4);
IkReal x1613=(cj2*sj1);
IkReal x1614=((0.37429)*sj5);
IkReal x1615=((0.069)*sj0);
IkReal x1616=(r01*sj5);
IkReal x1617=((1.0)*sj0);
IkReal x1618=(r01*x1601);
IkReal x1619=(sj3*x1602);
IkReal x1620=(cj4*cj5*r01);
IkReal x1621=(cj5*x1602);
IkReal x1622=(cj3*x1602);
IkReal x1623=(r00*x1602);
IkReal x1624=(r00*x1601);
IkReal x1625=(r01*x1602);
IkReal x1626=(cj5*x1624);
evalcond[0]=((((-1.0)*cj5*x1601*x1606))+((cj0*cj2))+(((-1.0)*x1603*x1623))+(((-1.0)*x1603*x1618))+((sj0*sj1*sj2))+((x1612*x1621)));
evalcond[1]=(((cj4*x1624))+((sj1*x1609))+(((-1.0)*x1603*x1625))+(((-1.0)*x1606*x1621))+(((-1.0)*cj5*x1610*x1618))+(((-1.0)*cj2*x1617)));
evalcond[2]=((((0.01)*r00*x1621))+x1605+(((0.01)*cj5*x1618))+((cj0*x1604))+(((-1.0)*px))+(((-1.0)*x1614*x1623))+(((-1.0)*x1605*x1613))+(((-1.0)*x1614*x1618))+(((-1.0)*sj2*x1615)));
evalcond[3]=(((sj2*x1605))+(((-0.01)*r01*x1621))+x1615+((x1614*x1625))+((sj0*x1604))+(((-1.0)*py))+(((0.01)*x1626))+(((-1.0)*x1614*x1624))+(((-1.0)*x1613*x1615)));
evalcond[4]=((((-1.0)*sj3*x1603*x1626))+(((-1.0)*sj5*x1611*x1624))+((sj3*x1601*x1612))+((x1616*x1622))+((x1619*x1620))+((x1606*x1619))+(((-1.0)*cj1*x1617)));
evalcond[5]=((((-1.0)*cj1*x1608))+(((-1.0)*sj5*x1611*x1623))+(((-1.0)*sj3*x1601*x1606))+(((-1.0)*cj5*r00*x1603*x1619))+(((-1.0)*x1601*x1611*x1616))+((x1612*x1619))+(((-1.0)*cj5*sj3*x1603*x1618)));
evalcond[6]=(((x1620*x1622))+(((-1.0)*cj3*x1603*x1626))+x1609+((cj3*x1601*x1612))+((x1607*x1624))+((x1606*x1622))+(((-1.0)*x1613*x1617))+(((-1.0)*x1607*x1625)));
evalcond[7]=((((-1.0)*cj3*cj5*x1603*x1618))+((x1607*x1618))+(((-1.0)*x1601*x1606*x1611))+((x1607*x1623))+(((-1.0)*x1608*x1613))+((x1612*x1622))+(((-1.0)*cj3*r00*x1603*x1621))+(((-1.0)*sj2*x1617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1627=cj4*cj4;
IkReal x1628=cj5*cj5;
IkReal x1629=(cj5*sj4);
IkReal x1630=((1.0)*r00);
IkReal x1631=(cj2*sj0);
IkReal x1632=(cj4*r01);
IkReal x1633=(cj4*r00);
IkReal x1634=(cj0*cj2);
IkReal x1635=((1.0)*r01);
IkReal x1636=(cj0*sj1*sj2);
IkReal x1637=(sj0*sj1*sj2);
CheckValue<IkReal> x1638 = IKatan2WithCheck(IkReal((((r00*x1629*x1636))+(((-1.0)*x1629*x1635*x1637))+(((-1.0)*x1629*x1630*x1631))+((x1632*x1636))+((x1633*x1634))+((x1633*x1637))+(((-1.0)*x1631*x1632))+(((-1.0)*x1629*x1634*x1635)))),((((-1.0)*x1629*x1631*x1635))+((r01*x1629*x1636))+((r00*x1629*x1634))+((r00*x1629*x1637))+(((-1.0)*cj4*x1630*x1636))+((x1632*x1637))+((x1632*x1634))+((x1631*x1633))),IKFAST_ATAN2_MAGTHRESH);
if(!x1638.valid){
continue;
}
CheckValue<IkReal> x1639=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1627*x1628))+x1627+x1628)),-1);
if(!x1639.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x1638.value)+(((1.5707963267949)*(x1639.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1640=IKcos(j6);
IkReal x1641=IKsin(j6);
IkReal x1642=((1.0)*cj4);
IkReal x1643=((0.36442)*cj1);
IkReal x1644=((0.069)*cj0);
IkReal x1645=(r00*sj4);
IkReal x1646=(sj3*sj5);
IkReal x1647=((1.0)*cj0);
IkReal x1648=(cj0*sj2);
IkReal x1649=((1.0)*sj4);
IkReal x1650=((1.0)*cj3);
IkReal x1651=(r01*sj4);
IkReal x1652=(cj2*sj1);
IkReal x1653=((0.37429)*sj5);
IkReal x1654=((0.069)*sj0);
IkReal x1655=(r01*sj5);
IkReal x1656=((1.0)*sj0);
IkReal x1657=(r01*x1640);
IkReal x1658=(sj3*x1641);
IkReal x1659=(cj4*cj5*r01);
IkReal x1660=(cj5*x1641);
IkReal x1661=(cj3*x1641);
IkReal x1662=(r00*x1641);
IkReal x1663=(r00*x1640);
IkReal x1664=(r01*x1641);
IkReal x1665=(cj5*x1663);
evalcond[0]=(((cj0*cj2))+(((-1.0)*x1642*x1657))+(((-1.0)*x1642*x1662))+((sj0*sj1*sj2))+((x1651*x1660))+(((-1.0)*cj5*x1640*x1645)));
evalcond[1]=(((cj4*x1663))+((sj1*x1648))+(((-1.0)*x1645*x1660))+(((-1.0)*x1642*x1664))+(((-1.0)*cj2*x1656))+(((-1.0)*cj5*x1649*x1657)));
evalcond[2]=((((-1.0)*x1644*x1652))+x1644+(((-1.0)*sj2*x1654))+(((-1.0)*x1653*x1662))+(((-1.0)*x1653*x1657))+(((-1.0)*px))+(((0.01)*cj5*x1657))+(((0.01)*r00*x1660))+((cj0*x1643)));
evalcond[3]=((((-1.0)*x1652*x1654))+((sj0*x1643))+x1654+(((-1.0)*x1653*x1663))+((sj2*x1644))+(((-0.01)*r01*x1660))+(((-1.0)*py))+(((0.01)*x1665))+((x1653*x1664)));
evalcond[4]=(((x1655*x1661))+(((-1.0)*cj1*x1656))+((x1645*x1658))+(((-1.0)*sj3*x1642*x1665))+((x1658*x1659))+(((-1.0)*sj5*x1650*x1663))+((sj3*x1640*x1651)));
evalcond[5]=((((-1.0)*sj3*x1640*x1645))+(((-1.0)*cj5*sj3*x1642*x1657))+(((-1.0)*cj1*x1647))+(((-1.0)*cj5*r00*x1642*x1658))+((x1651*x1658))+(((-1.0)*sj5*x1650*x1662))+(((-1.0)*x1640*x1650*x1655)));
evalcond[6]=((((-1.0)*x1652*x1656))+x1648+((cj3*x1640*x1651))+((x1645*x1661))+(((-1.0)*cj3*x1642*x1665))+((x1646*x1663))+(((-1.0)*x1646*x1664))+((x1659*x1661)));
evalcond[7]=((((-1.0)*x1640*x1645*x1650))+(((-1.0)*cj3*r00*x1642*x1660))+(((-1.0)*cj3*cj5*x1642*x1657))+(((-1.0)*x1647*x1652))+(((-1.0)*sj2*x1656))+((x1646*x1657))+((x1646*x1662))+((x1651*x1661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x1669=IKPowWithIntegerCheck(r22,-1);
if(!x1669.valid){
continue;
}
IkReal x1666=x1669.value;
CheckValue<IkReal> x1670=IKPowWithIntegerCheck(sj5,-1);
if(!x1670.valid){
continue;
}
IkReal x1667=x1670.value;
IkReal x1668=(x1666*x1667);
CheckValue<IkReal> x1671=IKPowWithIntegerCheck(sj3,-1);
if(!x1671.valid){
continue;
}
if( IKabs((cj1*sj2*x1668)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1668*(x1671.value)*((sj1+((cj3*cj5*r22)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj1*sj2*x1668))+IKsqr((x1668*(x1671.value)*((sj1+((cj3*cj5*r22))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((cj1*sj2*x1668), (x1668*(x1671.value)*((sj1+((cj3*cj5*r22))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1672=IKcos(j4);
IkReal x1673=(cj3*r22);
IkReal x1674=((1.0)*sj5);
IkReal x1675=(r22*sj3);
evalcond[0]=(((cj1*sj2))+(((-1.0)*r22*x1674*(IKsin(j4)))));
evalcond[1]=(sj1+(((-1.0)*x1672*x1674*x1675))+((cj5*x1673)));
evalcond[2]=((((-1.0)*cj1*cj2))+(((-1.0)*x1672*x1673*x1674))+(((-1.0)*cj5*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

IkReal op[8+1], zeror[8];
int numroots;
IkReal x1676=(sj1*sj2);
IkReal x1677=(cj4*r01);
IkReal x1678=((1.0)*cj2);
IkReal x1679=(cj4*r00);
IkReal x1680=((1.0)*r00);
IkReal x1681=(cj5*sj4);
IkReal x1682=((2.0)*r00);
IkReal x1683=((1.0)*x1677);
IkReal x1684=(r00*x1681);
IkReal x1685=(r01*x1681);
IkReal x1686=((1.0)*x1679);
IkReal x1687=((1.0)*x1676);
IkReal x1688=(x1680*x1681);
IkReal x1689=((1.0)*x1685);
IkReal x1690=(x1677+x1684);
IkReal x1691=((((2.0)*x1685))+(((-2.0)*x1679)));
IkReal x1692=(cj2+x1690);
IkReal x1693=(x1690+(((-1.0)*x1678)));
IkReal x1694=((((-1.0)*x1683))+(((-1.0)*x1688))+cj2);
IkReal x1695=((((-1.0)*x1689))+x1679+x1676);
IkReal x1696=((((-1.0)*x1681*x1682))+(((-2.0)*x1677)));
IkReal x1697=((((-1.0)*x1686))+x1676+x1685);
IkReal x1698=(x1683+x1688);
IkReal x1699=((((-1.0)*x1687))+(((-1.0)*x1689))+x1679);
IkReal x1700=((((-1.0)*x1687))+(((-1.0)*x1686))+x1685);
IkReal x1701=((((-1.0)*x1698))+(((-1.0)*x1678)));
IkReal gconst0=x1694;
IkReal gconst1=x1691;
IkReal gconst2=x1692;
IkReal gconst3=x1695;
IkReal gconst4=x1696;
IkReal gconst5=x1697;
IkReal gconst6=x1694;
IkReal gconst7=x1691;
IkReal gconst8=x1692;
IkReal gconst9=x1695;
IkReal gconst10=x1696;
IkReal gconst11=x1697;
IkReal gconst12=x1701;
IkReal gconst13=x1691;
IkReal gconst14=x1693;
IkReal gconst15=x1699;
IkReal gconst16=x1696;
IkReal gconst17=x1700;
IkReal gconst18=x1701;
IkReal gconst19=x1691;
IkReal gconst20=x1693;
IkReal gconst21=x1699;
IkReal gconst22=x1696;
IkReal gconst23=x1700;
IkReal x1702=sj1*sj1;
IkReal x1703=sj2*sj2;
IkReal x1704=cj2*cj2;
IkReal x1705=((1.0)*gconst21);
IkReal x1706=(gconst15*gconst20);
IkReal x1707=(gconst13*gconst19);
IkReal x1708=((2.0)*gconst21);
IkReal x1709=(gconst23*gconst6);
IkReal x1710=(gconst2*gconst3);
IkReal x1711=(gconst2*gconst9);
IkReal x1712=(gconst19*gconst4);
IkReal x1713=(gconst11*gconst6);
IkReal x1714=(sj1*sj2);
IkReal x1715=((4.0)*cj2);
IkReal x1716=(gconst4*gconst7);
IkReal x1717=(gconst15*gconst18);
IkReal x1718=((2.0)*cj2);
IkReal x1719=(gconst12*gconst20);
IkReal x1720=(gconst17*gconst21);
IkReal x1721=(gconst0*gconst20);
IkReal x1722=(gconst14*gconst20);
IkReal x1723=((1.0)*gconst8);
IkReal x1724=(gconst5*gconst6);
IkReal x1725=(gconst3*gconst9);
IkReal x1726=((1.0)*gconst9);
IkReal x1727=(gconst1*gconst17);
IkReal x1728=((2.0)*gconst5);
IkReal x1729=(gconst0*gconst11);
IkReal x1730=(gconst21*gconst5);
IkReal x1731=(gconst16*gconst22);
IkReal x1732=(gconst5*gconst8);
IkReal x1733=(gconst2*gconst6);
IkReal x1734=(gconst14*gconst18);
IkReal x1735=(gconst13*gconst22);
IkReal x1736=(gconst1*gconst5);
IkReal x1737=(gconst16*gconst7);
IkReal x1738=(gconst5*gconst9);
IkReal x1739=(gconst1*gconst10);
IkReal x1740=(gconst14*gconst15);
IkReal x1741=((2.0)*gconst23);
IkReal x1742=((2.0)*gconst9);
IkReal x1743=(gconst1*gconst7);
IkReal x1744=(gconst0*gconst8);
IkReal x1745=(gconst12*gconst23);
IkReal x1746=(gconst10*gconst6);
IkReal x1747=(gconst0*gconst9);
IkReal x1748=(gconst17*gconst18);
IkReal x1749=((2.0)*gconst4);
IkReal x1750=(gconst13*gconst7);
IkReal x1751=(gconst11*gconst18);
IkReal x1752=((1.0)*gconst0);
IkReal x1753=((1.0)*gconst10);
IkReal x1754=(gconst10*gconst13);
IkReal x1755=(gconst16*gconst19);
IkReal x1756=((1.0)*gconst12);
IkReal x1757=(gconst18*gconst5);
IkReal x1758=(gconst12*gconst17);
IkReal x1759=(gconst14*gconst21);
IkReal x1760=(gconst17*gconst20);
IkReal x1761=((1.0)*gconst14);
IkReal x1762=(gconst18*gconst2);
IkReal x1763=(gconst14*gconst23);
IkReal x1764=(gconst5*x1752);
IkReal x1765=(gconst9*x1744);
IkReal x1766=(gconst17*x1735);
IkReal x1767=((4.0)*x1704);
IkReal x1768=(gconst21*x1755);
IkReal x1769=((1.0)*gconst22*gconst4);
IkReal x1770=(gconst14*x1755);
IkReal x1771=((4.0)*x1702*x1703);
op[0]=(((x1717*x1763))+(((-1.0)*gconst14*x1705*x1706))+(((-1.0)*x1731*x1734))+((x1735*x1748))+(((-1.0)*gconst17*x1705*x1707))+((x1719*x1720))+(((-1.0)*x1745*x1748))+((x1755*x1759)));
op[1]=(((x1714*x1717*x1741))+(((-1.0)*x1714*x1741*x1758))+((x1708*x1714*x1760))+(((-1.0)*gconst14*x1717*x1718))+((cj2*x1707*x1708))+(((-1.0)*gconst18*x1718*x1735))+(((-1.0)*x1714*x1741*x1748))+((x1714*x1740*x1741))+(((-2.0)*gconst18*x1714*x1731))+(((-1.0)*x1708*x1714*x1740))+(((-1.0)*gconst17*x1718*x1719))+(((-1.0)*x1706*x1708*x1714))+((gconst17*x1707*x1718))+(((-1.0)*x1718*x1770))+((cj2*x1708*x1722))+(((-1.0)*cj2*x1708*x1719))+((x1708*x1714*x1755))+((x1708*x1714*x1758))+(((-1.0)*gconst23*x1718*x1734))+((gconst12*x1718*x1748))+((gconst18*x1718*x1745))+(((2.0)*x1714*x1766))+((gconst14*x1706*x1718))+(((-2.0)*gconst14*x1714*x1731)));
op[2]=(((x1737*x1759))+((gconst15*gconst23*x1771))+((gconst23*gconst3*x1734))+(((-1.0)*gconst6*x1731*x1761))+(((-1.0)*gconst11*x1748*x1756))+(((-1.0)*gconst14*x1706*x1726))+(((-1.0)*x1707*x1767))+(((-1.0)*gconst17*x1705*x1750))+(((-1.0)*gconst16*x1734*x1753))+(((-1.0)*gconst8*x1705*x1740))+(((-1.0)*x1714*x1715*x1717))+(((-1.0)*gconst17*gconst23*x1771))+((gconst2*x1768))+(((-1.0)*gconst3*x1705*x1722))+(((-1.0)*gconst17*x1707*x1726))+(((-1.0)*gconst2*x1705*x1706))+((x1709*x1740))+((gconst12*gconst8*x1720))+((gconst9*x1770))+((gconst18*gconst22*x1727))+((x1712*x1759))+((x1714*x1715*x1759))+(((-1.0)*x1731*x1771))+(((-1.0)*x1731*x1762))+(((-1.0)*gconst19*x1705*x1727))+((x1706*x1714*x1715))+(((-1.0)*gconst23*x1748*x1752))+((gconst6*x1766))+((x1720*x1721))+((x1714*x1715*x1748))+((x1714*x1715*x1745))+(((-1.0)*x1714*x1715*x1760))+(((-1.0)*x1714*x1715*x1763))+((x1748*x1754))+((gconst11*gconst14*x1717))+((x1719*x1767))+((gconst17*gconst9*x1719))+(((-1.0)*gconst15*gconst21*x1771))+((x1735*x1757))+(((-1.0)*gconst12*gconst21*x1714*x1715))+((x1734*x1767))+(((-1.0)*gconst5*x1705*x1707))+((x1720*x1771))+(((-1.0)*gconst12*gconst18*x1767))+(((-1.0)*gconst17*x1709*x1756))+(((-1.0)*x1745*x1757))+(((-1.0)*x1714*x1715*x1735))+((x1719*x1730))+(((-1.0)*x1714*x1715*x1755))+(((-1.0)*x1722*x1767))+(((-1.0)*x1734*x1769))+((gconst2*gconst23*x1717)));
op[3]=((((2.0)*cj2*gconst1*gconst17*gconst19))+(((2.0)*cj2*gconst14*gconst21*gconst8))+(((-2.0)*gconst12*gconst23*gconst5*sj1*sj2))+(((-2.0)*gconst16*gconst2*gconst22*sj1*sj2))+(((2.0)*gconst17*gconst21*gconst8*sj1*sj2))+(((-2.0)*cj2*gconst16*gconst19*gconst2))+(((2.0)*cj2*gconst12*gconst18*gconst5))+(((2.0)*gconst1*gconst17*gconst22*sj1*sj2))+(((-2.0)*gconst15*gconst20*gconst9*sj1*sj2))+(((2.0)*cj2*gconst14*gconst20*gconst9))+(((2.0)*cj2*gconst14*gconst20*gconst3))+(((2.0)*cj2*gconst1*gconst19*gconst21))+(((-2.0)*gconst18*gconst22*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst17*gconst20))+(((-2.0)*cj2*gconst15*gconst18*gconst2))+(((-2.0)*cj2*gconst13*gconst22*gconst6))+(((2.0)*gconst10*gconst13*gconst17*sj1*sj2))+(((-2.0)*gconst14*gconst22*gconst4*sj1*sj2))+(((-2.0)*gconst18*gconst23*gconst5*sj1*sj2))+(((2.0)*gconst15*gconst23*gconst6*sj1*sj2))+(((-2.0)*gconst14*gconst21*gconst3*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst21*gconst8))+(((-2.0)*cj2*gconst12*gconst17*gconst8))+(((-2.0)*gconst10*gconst14*gconst16*sj1*sj2))+(((-2.0)*gconst15*gconst2*gconst21*sj1*sj2))+(((-2.0)*gconst11*gconst12*gconst17*sj1*sj2))+(((-2.0)*gconst11*gconst17*gconst18*sj1*sj2))+(((-2.0)*gconst14*gconst15*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst18*sj1*sj2))+(((2.0)*cj2*gconst12*gconst17*gconst6))+(((2.0)*gconst13*gconst22*gconst5*sj1*sj2))+(((2.0)*cj2*gconst0*gconst18*gconst23))+(((2.0)*gconst0*gconst17*gconst21*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst20*gconst9))+(((-2.0)*cj2*gconst12*gconst20*gconst5))+(((-2.0)*cj2*gconst10*gconst13*gconst18))+(((2.0)*gconst12*gconst17*gconst9*sj1*sj2))+(((2.0)*cj2*gconst13*gconst17*gconst7))+(((2.0)*cj2*gconst15*gconst2*gconst20))+(((2.0)*gconst11*gconst14*gconst15*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst16*gconst7))+(((2.0)*cj2*gconst12*gconst23*gconst6))+(((-2.0)*gconst17*gconst23*gconst6*sj1*sj2))+(((2.0)*gconst18*gconst23*gconst3*sj1*sj2))+(((-2.0)*gconst15*gconst21*gconst8*sj1*sj2))+(((2.0)*cj2*gconst13*gconst19*gconst5))+(((2.0)*cj2*gconst13*gconst19*gconst9))+(((-2.0)*gconst0*gconst17*gconst23*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst23*gconst6))+(((-2.0)*cj2*gconst11*gconst14*gconst18))+(((-2.0)*cj2*gconst1*gconst18*gconst22))+(((2.0)*cj2*gconst11*gconst12*gconst18))+(((2.0)*gconst19*gconst21*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst19*gconst4))+(((2.0)*cj2*gconst14*gconst15*gconst8))+(((-2.0)*cj2*gconst14*gconst18*gconst3))+(((2.0)*gconst16*gconst21*gconst7*sj1*sj2))+(((2.0)*gconst16*gconst19*gconst9*sj1*sj2))+(((2.0)*cj2*gconst0*gconst17*gconst18))+(((-2.0)*cj2*gconst18*gconst2*gconst23))+(((-2.0)*gconst20*gconst21*gconst3*sj1*sj2))+(((2.0)*gconst17*gconst20*gconst9*sj1*sj2))+(((2.0)*gconst14*gconst23*gconst3*sj1*sj2))+(((-2.0)*cj2*gconst14*gconst15*gconst6))+(((2.0)*cj2*gconst2*gconst20*gconst21))+(((2.0)*gconst20*gconst21*gconst5*sj1*sj2))+(((2.0)*gconst15*gconst2*gconst23*sj1*sj2))+(((2.0)*cj2*gconst13*gconst21*gconst7))+(((2.0)*gconst12*gconst21*gconst5*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst18*sj1*sj2))+(((-2.0)*gconst16*gconst22*gconst6*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst20*gconst21)));
op[4]=((((4.0)*gconst21*gconst5*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst16*gconst2*gconst22*gconst6))+((gconst14*gconst21*gconst4*gconst7))+(((-1.0)*gconst11*gconst12*gconst18*gconst5))+(((-4.0)*gconst11*gconst17*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*gconst12*gconst6*(cj2*cj2)))+(((-1.0)*gconst12*gconst23*gconst5*gconst6))+(((4.0)*gconst18*gconst2*(cj2*cj2)))+(((-1.0)*gconst1*gconst17*gconst19*gconst9))+((gconst14*gconst23*gconst3*gconst6))+(((-1.0)*gconst0*gconst17*gconst23*gconst6))+(((4.0)*cj2*gconst17*gconst6*sj1*sj2))+((gconst1*gconst10*gconst17*gconst18))+(((-1.0)*gconst11*gconst12*gconst17*gconst6))+(((-4.0)*cj2*gconst10*gconst13*sj1*sj2))+(((-4.0)*cj2*gconst2*gconst23*sj1*sj2))+((gconst13*gconst22*gconst5*gconst6))+((gconst12*gconst20*gconst5*gconst9))+(((-4.0)*cj2*gconst12*gconst9*sj1*sj2))+(((4.0)*cj2*gconst11*gconst12*sj1*sj2))+(((4.0)*gconst11*gconst15*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst15*gconst2*gconst21*gconst8))+((gconst0*gconst20*gconst21*gconst5))+(((-4.0)*cj2*gconst17*gconst8*sj1*sj2))+((gconst15*gconst2*gconst23*gconst6))+((gconst1*gconst18*gconst22*gconst5))+(((-4.0)*gconst15*gconst9*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*cj2*gconst1*gconst22*sj1*sj2))+(((4.0)*cj2*gconst14*gconst9*sj1*sj2))+(((-1.0)*gconst13*gconst17*gconst7*gconst9))+((gconst14*gconst16*gconst7*gconst9))+(((-4.0)*gconst21*gconst3*(sj1*sj1)*(sj2*sj2)))+((gconst19*gconst2*gconst21*gconst4))+(((-1.0)*gconst0*gconst11*gconst17*gconst18))+(((-4.0)*gconst23*gconst5*(sj1*sj1)*(sj2*sj2)))+(((-4.0)*gconst22*gconst4*(sj1*sj1)*(sj2*sj2)))+(((4.0)*gconst0*gconst20*(cj2*cj2)))+(((-4.0)*cj2*gconst11*gconst14*sj1*sj2))+((gconst12*gconst21*gconst5*gconst8))+((gconst11*gconst15*gconst18*gconst2))+((gconst1*gconst17*gconst22*gconst6))+((gconst10*gconst13*gconst17*gconst6))+(((-4.0)*cj2*gconst18*gconst3*sj1*sj2))+(((-4.0)*gconst10*gconst16*(sj1*sj1)*(sj2*sj2)))+((gconst16*gconst19*gconst2*gconst9))+((gconst18*gconst2*gconst23*gconst3))+(((-1.0)*gconst15*gconst2*gconst20*gconst9))+(((-1.0)*gconst1*gconst19*gconst21*gconst5))+(((-4.0)*gconst1*gconst19*(cj2*cj2)))+((gconst16*gconst2*gconst21*gconst7))+(((-1.0)*gconst14*gconst15*gconst8*gconst9))+(((-1.0)*gconst10*gconst14*gconst18*gconst4))+(((-1.0)*gconst2*gconst20*gconst21*gconst3))+(((-4.0)*gconst13*gconst7*(cj2*cj2)))+(((4.0)*cj2*gconst15*gconst8*sj1*sj2))+(((-4.0)*cj2*gconst19*gconst4*sj1*sj2))+(((-1.0)*gconst13*gconst21*gconst5*gconst7))+(((-4.0)*cj2*gconst20*gconst5*sj1*sj2))+((gconst10*gconst13*gconst18*gconst5))+(((-1.0)*gconst14*gconst22*gconst4*gconst6))+(((-1.0)*gconst13*gconst19*gconst5*gconst9))+(((-4.0)*cj2*gconst16*gconst7*sj1*sj2))+(((-4.0)*cj2*gconst15*gconst6*sj1*sj2))+(((4.0)*cj2*gconst0*gconst23*sj1*sj2))+(((-1.0)*gconst10*gconst14*gconst16*gconst6))+(((4.0)*gconst17*gconst9*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst18*gconst2*gconst22*gconst4))+(((-4.0)*gconst0*gconst18*(cj2*cj2)))+(((-4.0)*gconst14*gconst8*(cj2*cj2)))+(((4.0)*cj2*gconst18*gconst5*sj1*sj2))+((gconst11*gconst14*gconst15*gconst6))+((gconst12*gconst17*gconst8*gconst9))+(((-4.0)*gconst2*gconst20*(cj2*cj2)))+(((-1.0)*gconst0*gconst18*gconst23*gconst5))+((gconst14*gconst19*gconst4*gconst9))+((gconst11*gconst14*gconst18*gconst3))+(((4.0)*gconst14*gconst6*(cj2*cj2)))+((gconst0*gconst17*gconst20*gconst9))+(((4.0)*gconst12*gconst8*(cj2*cj2)))+(((-1.0)*gconst14*gconst21*gconst3*gconst8))+(((4.0)*gconst23*gconst3*(sj1*sj1)*(sj2*sj2)))+(((-1.0)*gconst1*gconst17*gconst21*gconst7))+(((-1.0)*gconst10*gconst16*gconst18*gconst2))+(((-4.0)*cj2*gconst0*gconst21*sj1*sj2))+(((-1.0)*gconst14*gconst20*gconst3*gconst9))+(((4.0)*cj2*gconst2*gconst21*sj1*sj2))+((gconst0*gconst17*gconst21*gconst8))+(((4.0)*cj2*gconst20*gconst3*sj1*sj2)));
op[5]=((((2.0)*gconst23*gconst3*gconst6*sj1*sj2))+(((-2.0)*gconst11*gconst18*gconst5*sj1*sj2))+(((2.0)*gconst0*gconst17*gconst9*sj1*sj2))+(((2.0)*cj2*gconst14*gconst3*gconst8))+(((-2.0)*gconst0*gconst23*gconst5*sj1*sj2))+(((-2.0)*gconst22*gconst4*gconst6*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst6*sj1*sj2))+(((2.0)*gconst11*gconst15*gconst2*sj1*sj2))+(((-2.0)*cj2*gconst19*gconst2*gconst4))+(((-2.0)*cj2*gconst12*gconst5*gconst8))+(((2.0)*gconst1*gconst22*gconst5*sj1*sj2))+(((2.0)*gconst0*gconst21*gconst5*sj1*sj2))+(((-2.0)*gconst14*gconst3*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst2*sj1*sj2))+(((-2.0)*cj2*gconst11*gconst14*gconst6))+(((-2.0)*cj2*gconst14*gconst4*gconst7))+(((-2.0)*cj2*gconst1*gconst22*gconst6))+(((-2.0)*cj2*gconst14*gconst3*gconst6))+(((2.0)*gconst17*gconst8*gconst9*sj1*sj2))+(((2.0)*gconst21*gconst4*gconst7*sj1*sj2))+(((-2.0)*gconst0*gconst11*gconst17*sj1*sj2))+(((-2.0)*cj2*gconst12*gconst8*gconst9))+(((-2.0)*gconst15*gconst2*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst1*gconst10*gconst18))+(((-2.0)*cj2*gconst0*gconst17*gconst8))+(((2.0)*gconst2*gconst23*gconst3*sj1*sj2))+(((2.0)*gconst21*gconst5*gconst8*sj1*sj2))+(((-2.0)*gconst23*gconst5*gconst6*sj1*sj2))+(((2.0)*gconst10*gconst13*gconst5*sj1*sj2))+(((2.0)*gconst1*gconst10*gconst17*sj1*sj2))+(((-2.0)*gconst20*gconst3*gconst9*sj1*sj2))+(((2.0)*cj2*gconst0*gconst11*gconst18))+(((-2.0)*gconst11*gconst17*gconst6*sj1*sj2))+(((2.0)*cj2*gconst1*gconst17*gconst7))+(((2.0)*gconst11*gconst14*gconst3*sj1*sj2))+(((2.0)*cj2*gconst2*gconst20*gconst3))+(((2.0)*cj2*gconst2*gconst20*gconst9))+(((2.0)*cj2*gconst1*gconst19*gconst5))+(((2.0)*cj2*gconst1*gconst19*gconst9))+(((-2.0)*gconst21*gconst3*gconst8*sj1*sj2))+(((2.0)*gconst16*gconst7*gconst9*sj1*sj2))+(((-2.0)*gconst2*gconst21*gconst3*sj1*sj2))+(((2.0)*cj2*gconst0*gconst17*gconst6))+(((2.0)*cj2*gconst13*gconst5*gconst7))+(((2.0)*cj2*gconst1*gconst21*gconst7))+(((2.0)*cj2*gconst14*gconst8*gconst9))+(((2.0)*cj2*gconst0*gconst23*gconst6))+(((2.0)*cj2*gconst2*gconst21*gconst8))+(((2.0)*cj2*gconst13*gconst7*gconst9))+(((-2.0)*gconst2*gconst22*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst21*gconst8))+(((2.0)*cj2*gconst11*gconst12*gconst6))+(((2.0)*gconst12*gconst5*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst0*gconst20*gconst5))+(((-2.0)*cj2*gconst0*gconst20*gconst9))+(((-2.0)*cj2*gconst15*gconst2*gconst6))+(((-2.0)*cj2*gconst2*gconst23*gconst6))+(((2.0)*gconst19*gconst4*gconst9*sj1*sj2))+(((-2.0)*gconst15*gconst8*gconst9*sj1*sj2))+(((-2.0)*cj2*gconst11*gconst18*gconst2))+(((2.0)*gconst20*gconst5*gconst9*sj1*sj2))+(((-2.0)*gconst10*gconst14*gconst4*sj1*sj2))+(((-2.0)*cj2*gconst16*gconst2*gconst7))+(((-2.0)*gconst10*gconst18*gconst4*sj1*sj2))+(((2.0)*gconst11*gconst18*gconst3*sj1*sj2))+(((-2.0)*gconst10*gconst16*gconst6*sj1*sj2))+(((-2.0)*cj2*gconst10*gconst13*gconst6))+(((-2.0)*gconst11*gconst12*gconst5*sj1*sj2))+(((2.0)*cj2*gconst0*gconst18*gconst5))+(((2.0)*cj2*gconst15*gconst2*gconst8))+(((2.0)*cj2*gconst12*gconst5*gconst6))+(((-2.0)*cj2*gconst18*gconst2*gconst3)));
op[6]=(((gconst17*x1765))+((gconst2*gconst21*x1716))+(((-1.0)*gconst11*gconst2*x1714*x1715))+((x1730*x1744))+((x1727*x1746))+((x1711*x1714*x1715))+(((-1.0)*x1709*x1764))+((x1711*x1737))+(((-1.0)*gconst5*x1713*x1756))+((x1714*x1715*x1724))+((x1714*x1715*x1729))+((x1709*x1710))+(((-1.0)*gconst2*gconst8*x1767))+(((-1.0)*x1729*x1757))+(((-1.0)*x1714*x1715*x1716))+(((-1.0)*gconst11*gconst5*x1771))+((x1721*x1738))+(((-1.0)*x1725*x1771))+((gconst10*gconst18*x1736))+(((-1.0)*gconst7*x1705*x1736))+((gconst12*gconst9*x1732))+((gconst3*gconst8*x1714*x1715))+(((-1.0)*gconst0*gconst6*x1767))+(((-1.0)*x1743*x1767))+(((-1.0)*gconst10*gconst4*x1771))+(((-1.0)*gconst16*x1733*x1753))+((x1733*x1767))+(((-1.0)*gconst19*x1726*x1736))+(((-1.0)*gconst4*x1753*x1762))+(((-1.0)*gconst15*x1711*x1723))+((gconst14*gconst3*x1713))+(((-1.0)*gconst8*x1705*x1710))+((x1711*x1712))+(((-1.0)*gconst3*gconst6*x1714*x1715))+((gconst11*gconst3*x1771))+(((-1.0)*x1733*x1769))+(((-1.0)*gconst14*x1723*x1725))+((x1744*x1767))+((gconst1*gconst22*x1724))+(((-1.0)*gconst20*x1710*x1726))+(((-1.0)*gconst7*x1726*x1727))+((gconst14*gconst9*x1716))+((x1710*x1751))+(((-1.0)*gconst4*x1746*x1761))+(((-1.0)*gconst17*x1713*x1752))+(((-1.0)*gconst5*x1726*x1750))+((x1724*x1754))+(((-1.0)*x1714*x1715*x1732))+(((-1.0)*x1714*x1715*x1739))+(((-1.0)*x1714*x1715*x1747))+((x1738*x1771))+((gconst15*gconst2*x1713)));
op[7]=(((gconst8*x1710*x1718))+(((-1.0)*gconst6*x1718*x1739))+(((-1.0)*x1718*x1765))+((x1714*x1728*x1739))+(((-1.0)*x1713*x1714*x1728))+((x1714*x1716*x1742))+((gconst8*x1711*x1718))+(((-1.0)*gconst10*gconst2*x1714*x1749))+((gconst8*gconst9*x1714*x1728))+(((-1.0)*gconst2*x1716*x1718))+((gconst0*x1718*x1724))+(((2.0)*gconst11*x1710*x1714))+(((-1.0)*gconst2*x1713*x1718))+(((2.0)*gconst3*x1713*x1714))+(((-1.0)*x1714*x1746*x1749))+((gconst0*x1713*x1718))+(((-1.0)*gconst0*x1718*x1732))+((x1714*x1728*x1747))+(((-1.0)*x1714*x1728*x1729))+(((-2.0)*gconst8*x1714*x1725))+((gconst9*x1718*x1743))+(((-1.0)*x1710*x1714*x1742))+(((-1.0)*gconst6*x1710*x1718))+((gconst7*x1718*x1736)));
op[8]=((((-1.0)*gconst4*x1733*x1753))+((x1710*x1713))+((x1724*x1739))+(((-1.0)*x1713*x1764))+((x1711*x1716))+(((-1.0)*gconst7*x1726*x1736))+(((-1.0)*gconst9*x1710*x1723))+((x1732*x1747)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j6eval[2];
IkReal x1772=(py*r01);
IkReal x1773=(px*r00);
IkReal x1774=(pz*r00);
IkReal x1775=((-1.0)*r01);
IkReal x1776=(((px*r01))+((py*r00)));
IkReal x1777=(pz*x1775);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1775;
r11=r00;
npx=((((-1.0)*x1772))+x1773);
npy=x1776;
npz=(pz*r22);
rxp0_0=x1777;
rxp0_1=((-1.0)*x1774);
rxp0_2=x1776;
rxp1_0=x1774;
rxp1_1=x1777;
rxp1_2=((((-1.0)*x1773))+x1772);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1778=cj4*cj4;
IkReal x1779=cj5*cj5;
IkReal x1780=(x1779+x1778+(((-1.0)*x1778*x1779)));
j6eval[0]=x1780;
j6eval[1]=IKsign(x1780);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1781=(py*r01);
IkReal x1782=(px*r00);
IkReal x1783=(pz*r00);
IkReal x1784=((-1.0)*r01);
IkReal x1785=(((px*r01))+((py*r00)));
IkReal x1786=(pz*x1784);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1784;
r11=r00;
npx=(x1782+(((-1.0)*x1781)));
npy=x1785;
npz=(pz*r22);
rxp0_0=x1786;
rxp0_1=((-1.0)*x1783);
rxp0_2=x1785;
rxp1_0=x1783;
rxp1_1=x1786;
rxp1_2=(x1781+(((-1.0)*x1782)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1787=((((-1.0)*cj5*sj3))+(((-1.0)*cj3*cj4*sj5)));
j6eval[0]=x1787;
j6eval[1]=IKsign(x1787);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x1788=(py*r01);
IkReal x1789=(px*r00);
IkReal x1790=(pz*r00);
IkReal x1791=((-1.0)*r01);
IkReal x1792=(((px*r01))+((py*r00)));
IkReal x1793=(pz*x1791);
r20=0;
r21=0;
r02=0;
r12=0;
r10=x1791;
r11=r00;
npx=(x1789+(((-1.0)*x1788)));
npy=x1792;
npz=(pz*r22);
rxp0_0=x1793;
rxp0_1=((-1.0)*x1790);
rxp0_2=x1792;
rxp1_0=x1790;
rxp1_1=x1793;
rxp1_2=(x1788+(((-1.0)*x1789)));
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x1794=((1.0)*sj4);
IkReal x1795=(cj4*sj3);
IkReal x1796=((((-1.0)*cj3*cj5*sj5*x1794))+((sj4*x1795))+(((-1.0)*x1794*x1795*(cj5*cj5))));
j6eval[0]=x1796;
j6eval[1]=IKsign(x1796);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x1797=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.37429)*r22))+(((-1.0)*pz))+(((-0.069)*x1797))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((cj3*r22)));
evalcond[4]=((((-1.0)*x1797))+(((-1.0)*r22*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1798=((100.0)*r00);
IkReal x1799=(cj0*r01);
IkReal x1800=((100.0)*r01);
IkReal x1801=(r00*sj0);
IkReal x1802=(cj0*r00);
IkReal x1803=(r01*sj0);
IkReal x1804=((6.9)*cj2*sj1);
if( IKabs((((x1802*x1804))+(((-6.9)*x1802))+(((-1.0)*py*x1800))+(((6.9)*x1803))+(((-1.0)*x1803*x1804))+((px*x1798)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-6.9)*x1799))+((x1799*x1804))+((x1801*x1804))+((py*x1798))+(((-6.9)*x1801))+((px*x1800)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1802*x1804))+(((-6.9)*x1802))+(((-1.0)*py*x1800))+(((6.9)*x1803))+(((-1.0)*x1803*x1804))+((px*x1798))))+IKsqr(((((-6.9)*x1799))+((x1799*x1804))+((x1801*x1804))+((py*x1798))+(((-6.9)*x1801))+((px*x1800))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((x1802*x1804))+(((-6.9)*x1802))+(((-1.0)*py*x1800))+(((6.9)*x1803))+(((-1.0)*x1803*x1804))+((px*x1798))), ((((-6.9)*x1799))+((x1799*x1804))+((x1801*x1804))+((py*x1798))+(((-6.9)*x1801))+((px*x1800))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1805=IKcos(j6);
IkReal x1806=IKsin(j6);
IkReal x1807=(r00*sj3);
IkReal x1808=((0.069)*cj0);
IkReal x1809=((0.01)*r01);
IkReal x1810=((1.0)*r00);
IkReal x1811=(cj2*sj1);
IkReal x1812=(r01*sj3);
IkReal x1813=((0.069)*sj0);
IkReal x1814=(cj3*r01);
IkReal x1815=(cj3*r00);
IkReal x1816=((1.0)*sj0);
IkReal x1817=((1.0)*r01);
IkReal x1818=(sj4*x1806);
IkReal x1819=(cj4*x1806);
IkReal x1820=(sj4*x1805);
IkReal x1821=(r00*x1805);
IkReal x1822=((1.0)*cj4*x1805);
evalcond[0]=((((0.01)*r00*x1806))+(((-1.0)*x1808*x1811))+(((-1.0)*px))+x1808+((x1805*x1809)));
evalcond[1]=((((-1.0)*x1811*x1813))+(((0.01)*x1821))+(((-1.0)*py))+x1813+(((-1.0)*x1806*x1809)));
evalcond[2]=(((x1812*x1820))+((x1812*x1819))+((x1807*x1818))+(((-1.0)*x1807*x1822)));
evalcond[3]=((((-1.0)*x1810*x1820))+((cj0*cj2))+(((-1.0)*x1810*x1819))+((r01*x1818))+(((-1.0)*cj4*x1805*x1817)));
evalcond[4]=(((cj4*x1821))+(((-1.0)*cj2*x1816))+(((-1.0)*x1817*x1820))+(((-1.0)*x1810*x1818))+(((-1.0)*x1817*x1819)));
evalcond[5]=((((-1.0)*x1812*x1822))+((x1812*x1818))+(((-1.0)*x1807*x1819))+(((-1.0)*x1807*x1820)));
evalcond[6]=((((-1.0)*x1811*x1816))+((x1815*x1818))+((x1814*x1819))+(((-1.0)*cj3*cj4*x1805*x1810))+((x1814*x1820)));
evalcond[7]=((((-1.0)*cj0*x1811))+(((-1.0)*cj3*x1810*x1820))+((x1814*x1818))+(((-1.0)*x1814*x1822))+(((-1.0)*cj3*x1810*x1819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1823=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((-1.0)*pz))+(((-0.37429)*r22))+(((-0.069)*x1823))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*cj3*r22))+sj1);
evalcond[4]=((((-1.0)*x1823))+((r22*sj3)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1824=((100.0)*r00);
IkReal x1825=(cj0*r01);
IkReal x1826=((100.0)*r01);
IkReal x1827=(r00*sj0);
IkReal x1828=(cj0*r00);
IkReal x1829=(r01*sj0);
IkReal x1830=((6.9)*cj2*sj1);
if( IKabs((((py*x1826))+((x1829*x1830))+(((-1.0)*x1828*x1830))+(((-6.9)*x1829))+(((6.9)*x1828))+(((-1.0)*px*x1824)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1825*x1830))+(((-1.0)*py*x1824))+(((-1.0)*x1827*x1830))+(((6.9)*x1825))+(((6.9)*x1827))+(((-1.0)*px*x1826)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((py*x1826))+((x1829*x1830))+(((-1.0)*x1828*x1830))+(((-6.9)*x1829))+(((6.9)*x1828))+(((-1.0)*px*x1824))))+IKsqr(((((-1.0)*x1825*x1830))+(((-1.0)*py*x1824))+(((-1.0)*x1827*x1830))+(((6.9)*x1825))+(((6.9)*x1827))+(((-1.0)*px*x1826))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((py*x1826))+((x1829*x1830))+(((-1.0)*x1828*x1830))+(((-6.9)*x1829))+(((6.9)*x1828))+(((-1.0)*px*x1824))), ((((-1.0)*x1825*x1830))+(((-1.0)*py*x1824))+(((-1.0)*x1827*x1830))+(((6.9)*x1825))+(((6.9)*x1827))+(((-1.0)*px*x1826))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1831=IKsin(j6);
IkReal x1832=IKcos(j6);
IkReal x1833=((1.0)*r01);
IkReal x1834=((0.069)*cj0);
IkReal x1835=(r00*sj3);
IkReal x1836=(cj3*r00);
IkReal x1837=(r01*sj3);
IkReal x1838=(cj2*sj1);
IkReal x1839=((1.0)*sj0);
IkReal x1840=((0.069)*sj0);
IkReal x1841=(cj3*r01);
IkReal x1842=(cj4*x1832);
IkReal x1843=(sj4*x1831);
IkReal x1844=(r01*x1832);
IkReal x1845=(sj4*x1832);
IkReal x1846=(cj4*x1831);
IkReal x1847=((0.01)*x1831);
evalcond[0]=((((-1.0)*x1834*x1838))+(((-1.0)*r00*x1847))+(((-1.0)*px))+x1834+(((-0.01)*x1844)));
evalcond[1]=((((-1.0)*py))+((r01*x1847))+x1840+(((-1.0)*x1838*x1840))+(((-0.01)*r00*x1832)));
evalcond[2]=(((r00*x1842))+((r00*x1843))+((sj4*x1844))+(((-1.0)*cj2*x1839))+(((-1.0)*x1833*x1846)));
evalcond[3]=(((x1837*x1843))+((x1837*x1842))+(((-1.0)*x1835*x1845))+((x1835*x1846)));
evalcond[4]=(((x1837*x1845))+(((-1.0)*sj3*x1833*x1846))+((x1835*x1843))+((x1835*x1842)));
evalcond[5]=((((-1.0)*r00*x1846))+((cj0*cj2))+((r00*x1845))+(((-1.0)*x1833*x1843))+(((-1.0)*x1833*x1842)));
evalcond[6]=(((x1836*x1843))+((x1836*x1842))+(((-1.0)*x1838*x1839))+((x1841*x1845))+(((-1.0)*cj3*x1833*x1846)));
evalcond[7]=((((-1.0)*x1836*x1845))+((x1836*x1846))+(((-1.0)*cj0*x1838))+((x1841*x1843))+((x1841*x1842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1848=(cj5*r22);
IkReal x1849=((1.0)*sj3);
IkReal x1850=(r22*sj5);
IkReal x1851=(cj1*cj2);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.01)*x1850))+(((-1.0)*pz))+(((0.37429)*x1848))+(((-0.069)*x1851))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*x1849*x1850))+((cj3*x1848)));
evalcond[4]=((((-1.0)*cj3*x1850))+(((-1.0)*x1851))+(((-1.0)*x1848*x1849)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1852=(cj2*r01);
IkReal x1853=(cj2*r00);
if( IKabs(((((-1.0)*sj0*x1852))+((cj0*x1853)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj0*x1853))+((cj0*x1852)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x1852))+((cj0*x1853))))+IKsqr((((sj0*x1853))+((cj0*x1852))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*sj0*x1852))+((cj0*x1853))), (((sj0*x1853))+((cj0*x1852))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1854=IKcos(j6);
IkReal x1855=IKsin(j6);
IkReal x1856=((0.01)*cj5);
IkReal x1857=((0.069)*cj0);
IkReal x1858=((1.0)*cj5);
IkReal x1859=(cj3*sj5);
IkReal x1860=((0.37429)*sj5);
IkReal x1861=((0.069)*sj0);
IkReal x1862=(cj2*sj1);
IkReal x1863=(sj3*sj5);
IkReal x1864=(r00*x1854);
IkReal x1865=(r00*x1855);
IkReal x1866=(r01*x1854);
IkReal x1867=(r01*x1855);
IkReal x1868=((1.0)*x1862);
evalcond[0]=(((cj0*cj2))+(((-1.0)*x1866))+(((-1.0)*x1865)));
evalcond[1]=((((-1.0)*cj2*sj0))+x1864+(((-1.0)*x1867)));
evalcond[2]=((((-1.0)*x1859*x1864))+(((-1.0)*sj3*x1858*x1864))+((cj5*sj3*x1867))+((x1859*x1867)));
evalcond[3]=((((-1.0)*x1859*x1865))+(((-1.0)*x1859*x1866))+(((-1.0)*sj3*x1858*x1865))+(((-1.0)*sj3*x1858*x1866)));
evalcond[4]=(((x1863*x1864))+(((-1.0)*cj3*x1858*x1864))+((cj3*cj5*x1867))+(((-1.0)*sj0*x1868))+(((-1.0)*x1863*x1867)));
evalcond[5]=((((-1.0)*cj0*x1868))+((x1863*x1866))+((x1863*x1865))+(((-1.0)*cj3*x1858*x1865))+(((-1.0)*cj3*x1858*x1866)));
evalcond[6]=((((-1.0)*x1860*x1865))+(((-1.0)*x1860*x1866))+(((-1.0)*px))+((x1856*x1866))+((x1856*x1865))+x1857+(((-1.0)*x1857*x1862)));
evalcond[7]=((((-1.0)*x1856*x1867))+(((-1.0)*x1860*x1864))+((x1860*x1867))+(((-1.0)*py))+((x1856*x1864))+x1861+(((-1.0)*x1861*x1862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1869=(r22*sj3);
IkReal x1870=(cj1*cj2);
IkReal x1871=(cj5*r22);
IkReal x1872=(r22*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=(cj1*sj2);
evalcond[2]=((((0.01)*x1872))+(((0.37429)*x1871))+(((-1.0)*pz))+(((-0.069)*x1870))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((sj5*x1869))+((cj3*x1871)));
evalcond[4]=(((cj3*x1872))+(((-1.0)*x1870))+(((-1.0)*cj5*x1869)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1873=(cj2*sj0);
IkReal x1874=((1.0)*r00);
IkReal x1875=(cj0*cj2);
if( IKabs(((((-1.0)*x1874*x1875))+((r01*x1873)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1873*x1874))+(((-1.0)*r01*x1875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1874*x1875))+((r01*x1873))))+IKsqr(((((-1.0)*x1873*x1874))+(((-1.0)*r01*x1875))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*x1874*x1875))+((r01*x1873))), ((((-1.0)*x1873*x1874))+(((-1.0)*r01*x1875))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1876=IKsin(j6);
IkReal x1877=IKcos(j6);
IkReal x1878=((0.069)*cj0);
IkReal x1879=((1.0)*cj3);
IkReal x1880=(cj0*cj2);
IkReal x1881=(cj5*sj3);
IkReal x1882=((1.0)*sj1);
IkReal x1883=(cj2*sj0);
IkReal x1884=((0.01)*cj5);
IkReal x1885=(sj3*sj5);
IkReal x1886=((0.37429)*sj5);
IkReal x1887=(cj3*cj5);
IkReal x1888=(r01*x1876);
IkReal x1889=(r01*x1877);
IkReal x1890=(r00*x1877);
IkReal x1891=(r00*x1876);
IkReal x1892=(cj5*x1890);
IkReal x1893=(sj5*x1889);
IkReal x1894=(sj5*x1891);
evalcond[0]=(x1891+x1889+x1880);
evalcond[1]=((((-1.0)*x1890))+x1888+(((-1.0)*x1883)));
evalcond[2]=(((x1881*x1889))+((x1881*x1891))+(((-1.0)*x1879*x1893))+(((-1.0)*x1879*x1894)));
evalcond[3]=((((-1.0)*x1881*x1888))+((x1881*x1890))+((cj3*sj5*x1888))+(((-1.0)*sj5*x1879*x1890)));
evalcond[4]=(((x1885*x1891))+((x1887*x1889))+(((-1.0)*x1880*x1882))+((x1885*x1889))+((x1887*x1891)));
evalcond[5]=((((-1.0)*x1882*x1883))+((x1885*x1890))+(((-1.0)*x1885*x1888))+(((-1.0)*cj5*x1879*x1888))+((x1887*x1890)));
evalcond[6]=(((x1884*x1891))+(((-1.0)*px))+(((-1.0)*cj2*sj1*x1878))+(((-1.0)*x1886*x1891))+x1878+(((-1.0)*x1886*x1889))+((x1884*x1889)));
evalcond[7]=(((x1884*x1890))+(((-0.069)*sj1*x1883))+(((-1.0)*py))+(((-1.0)*x1886*x1890))+(((-1.0)*x1884*x1888))+(((0.069)*sj0))+((x1886*x1888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1895=(cj1*cj2);
IkReal x1896=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r22)));
evalcond[2]=((((-0.069)*x1895))+(((-1.0)*pz))+(((0.01)*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((cj0*cj2))+((sj0*x1896)));
evalcond[4]=((((-1.0)*cj2*sj0))+((cj0*x1896)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1895);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1897=((0.184349034171364)*cj0);
IkReal x1898=((2.67172513291833)*r00);
IkReal x1899=(r01*sj2);
IkReal x1900=((0.184349034171364)*sj0);
IkReal x1901=(r00*sj2);
IkReal x1902=((2.67172513291833)*r01);
if( IKabs(((((-1.0)*x1897*x1899))+(((-1.0)*px*x1898))+((r00*x1897))+(((-1.0)*x1900*x1901))+((py*x1902))+(((-1.0)*r01*x1900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1899*x1900))+((r00*x1900))+((r01*x1897))+(((-1.0)*px*x1902))+((x1897*x1901))+(((-1.0)*py*x1898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1897*x1899))+(((-1.0)*px*x1898))+((r00*x1897))+(((-1.0)*x1900*x1901))+((py*x1902))+(((-1.0)*r01*x1900))))+IKsqr(((((-1.0)*x1899*x1900))+((r00*x1900))+((r01*x1897))+(((-1.0)*px*x1902))+((x1897*x1901))+(((-1.0)*py*x1898))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*x1897*x1899))+(((-1.0)*px*x1898))+((r00*x1897))+(((-1.0)*x1900*x1901))+((py*x1902))+(((-1.0)*r01*x1900))), ((((-1.0)*x1899*x1900))+((r00*x1900))+((r01*x1897))+(((-1.0)*px*x1902))+((x1897*x1901))+(((-1.0)*py*x1898))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1903=IKsin(j6);
IkReal x1904=IKcos(j6);
IkReal x1905=((1.0)*r01);
IkReal x1906=((0.069)*sj2);
IkReal x1907=((0.37429)*r01);
IkReal x1908=((1.0)*r00);
IkReal x1909=((0.37429)*r00);
IkReal x1910=(cj3*x1904);
IkReal x1911=(sj3*x1903);
IkReal x1912=(sj3*x1904);
IkReal x1913=(cj3*r00*x1903);
IkReal x1914=(x1908*x1910);
IkReal x1915=(((r00*x1911))+((r01*x1912))+((cj3*r01*x1903)));
evalcond[0]=((((-1.0)*x1903*x1909))+(((0.069)*cj0))+(((-1.0)*x1904*x1907))+(((-1.0)*px))+(((-1.0)*sj0*x1906)));
evalcond[1]=(((x1903*x1907))+(((-1.0)*x1904*x1909))+(((-1.0)*py))+((cj0*x1906))+(((0.069)*sj0)));
evalcond[2]=(x1915+(((-1.0)*x1914)));
evalcond[3]=((((-1.0)*x1905*x1910))+((r01*x1911))+(((-1.0)*cj3*x1903*x1908))+(((-1.0)*x1908*x1912)));
evalcond[4]=(((r00*x1912))+(((-1.0)*x1905*x1911))+((r01*x1910))+x1913+((cj0*sj2)));
evalcond[5]=(x1915+(((-1.0)*sj0*sj2))+(((-1.0)*x1914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1916=(cj1*cj2);
IkReal x1917=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+r22);
evalcond[2]=((((-1.0)*pz))+(((0.01)*r22))+(((-0.069)*x1916))+(((-0.36442)*sj1)));
evalcond[3]=(((cj0*cj2))+((sj0*x1917)));
evalcond[4]=((((-1.0)*cj2*sj0))+((cj0*x1917)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1916);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1918=((0.184349034171364)*cj0);
IkReal x1919=((2.67172513291833)*r00);
IkReal x1920=(r01*sj2);
IkReal x1921=((0.184349034171364)*sj0);
IkReal x1922=(r00*sj2);
IkReal x1923=((2.67172513291833)*r01);
if( IKabs(((((-1.0)*x1918*x1920))+((r00*x1918))+(((-1.0)*px*x1919))+(((-1.0)*r01*x1921))+(((-1.0)*x1921*x1922))+((py*x1923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x1921))+(((-1.0)*py*x1919))+((x1918*x1922))+((r01*x1918))+(((-1.0)*px*x1923))+(((-1.0)*x1920*x1921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1918*x1920))+((r00*x1918))+(((-1.0)*px*x1919))+(((-1.0)*r01*x1921))+(((-1.0)*x1921*x1922))+((py*x1923))))+IKsqr((((r00*x1921))+(((-1.0)*py*x1919))+((x1918*x1922))+((r01*x1918))+(((-1.0)*px*x1923))+(((-1.0)*x1920*x1921))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*x1918*x1920))+((r00*x1918))+(((-1.0)*px*x1919))+(((-1.0)*r01*x1921))+(((-1.0)*x1921*x1922))+((py*x1923))), (((r00*x1921))+(((-1.0)*py*x1919))+((x1918*x1922))+((r01*x1918))+(((-1.0)*px*x1923))+(((-1.0)*x1920*x1921))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1924=IKsin(j6);
IkReal x1925=IKcos(j6);
IkReal x1926=((1.0)*r01);
IkReal x1927=((0.069)*sj2);
IkReal x1928=((1.0)*r00);
IkReal x1929=((0.37429)*r01);
IkReal x1930=(cj3*x1925);
IkReal x1931=(r00*x1925);
IkReal x1932=(sj3*x1924);
IkReal x1933=(sj3*x1925);
IkReal x1934=(cj3*x1924);
IkReal x1935=(sj3*x1931);
IkReal x1936=(((x1926*x1932))+((x1926*x1930))+((x1928*x1934)));
evalcond[0]=((((-1.0)*sj0*x1927))+(((0.069)*cj0))+(((-1.0)*px))+(((-1.0)*x1925*x1929))+(((-0.37429)*r00*x1924)));
evalcond[1]=(((cj0*x1927))+(((-1.0)*py))+(((-0.37429)*x1931))+(((0.069)*sj0))+((x1924*x1929)));
evalcond[2]=(x1935+(((-1.0)*x1936)));
evalcond[3]=((((-1.0)*x1928*x1930))+(((-1.0)*x1928*x1932))+((r01*x1934))+(((-1.0)*x1926*x1933)));
evalcond[4]=(((r00*x1930))+((r00*x1932))+((r01*x1933))+(((-1.0)*x1926*x1934))+(((-1.0)*sj0*sj2)));
evalcond[5]=(x1935+((cj0*sj2))+(((-1.0)*x1936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1937=(cj1*cj2);
IkReal x1938=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j4), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+r22);
evalcond[2]=((((-1.0)*pz))+(((-0.01)*r22))+(((-0.069)*x1937))+(((-0.36442)*sj1)));
evalcond[3]=(((cj0*cj2))+((sj0*x1938)));
evalcond[4]=((((-1.0)*cj2*sj0))+((cj0*x1938)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1937);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1939=((0.184349034171364)*cj0);
IkReal x1940=((2.67172513291833)*r00);
IkReal x1941=(r01*sj2);
IkReal x1942=((0.184349034171364)*sj0);
IkReal x1943=(r00*sj2);
IkReal x1944=((2.67172513291833)*r01);
if( IKabs((((x1939*x1941))+((px*x1940))+(((-1.0)*py*x1944))+((x1942*x1943))+((r01*x1942))+(((-1.0)*r00*x1939)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x1939))+((py*x1940))+((px*x1944))+((x1941*x1942))+(((-1.0)*r00*x1942))+(((-1.0)*x1939*x1943)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1939*x1941))+((px*x1940))+(((-1.0)*py*x1944))+((x1942*x1943))+((r01*x1942))+(((-1.0)*r00*x1939))))+IKsqr(((((-1.0)*r01*x1939))+((py*x1940))+((px*x1944))+((x1941*x1942))+(((-1.0)*r00*x1942))+(((-1.0)*x1939*x1943))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((x1939*x1941))+((px*x1940))+(((-1.0)*py*x1944))+((x1942*x1943))+((r01*x1942))+(((-1.0)*r00*x1939))), ((((-1.0)*r01*x1939))+((py*x1940))+((px*x1944))+((x1941*x1942))+(((-1.0)*r00*x1942))+(((-1.0)*x1939*x1943))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1945=IKcos(j6);
IkReal x1946=IKsin(j6);
IkReal x1947=((0.069)*cj0);
IkReal x1948=((0.069)*sj0);
IkReal x1949=(cj3*r00);
IkReal x1950=(r01*sj3);
IkReal x1951=(cj3*r01);
IkReal x1952=((0.37429)*r00);
IkReal x1953=((0.37429)*r01);
IkReal x1954=((1.0)*x1945);
IkReal x1955=(x1945*x1951);
IkReal x1956=(x1946*x1950);
IkReal x1957=(x1946*x1949);
IkReal x1958=(r00*sj3*x1946);
IkReal x1959=(r00*sj3*x1954);
IkReal x1960=(x1955+x1957+x1956);
evalcond[0]=(((x1945*x1953))+(((-1.0)*sj2*x1948))+((x1946*x1952))+(((-1.0)*px))+x1947);
evalcond[1]=(((sj2*x1947))+((x1945*x1952))+(((-1.0)*py))+x1948+(((-1.0)*x1946*x1953)));
evalcond[2]=((((-1.0)*x1959))+x1960);
evalcond[3]=(((x1945*x1949))+((x1945*x1950))+x1958+(((-1.0)*x1946*x1951)));
evalcond[4]=((((-1.0)*x1959))+x1960+((cj0*sj2)));
evalcond[5]=((((-1.0)*x1949*x1954))+(((-1.0)*x1950*x1954))+((x1946*x1951))+(((-1.0)*x1958))+(((-1.0)*sj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1961=(cj1*cj2);
IkReal x1962=(sj1*sj2);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j4), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j5), 6.28318530717959))))));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r22)));
evalcond[2]=((((-1.0)*pz))+(((-0.01)*r22))+(((-0.069)*x1961))+(((-0.36442)*sj1)));
evalcond[3]=(((cj0*cj2))+((sj0*x1962)));
evalcond[4]=(((cj0*x1962))+(((-1.0)*cj2*sj0)));
evalcond[5]=sj1;
evalcond[6]=((-1.0)*x1961);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1963=((0.184349034171364)*cj0);
IkReal x1964=((2.67172513291833)*r00);
IkReal x1965=(r01*sj2);
IkReal x1966=((0.184349034171364)*sj0);
IkReal x1967=(r00*sj2);
IkReal x1968=((2.67172513291833)*r01);
if( IKabs((((px*x1964))+(((-1.0)*r00*x1963))+((r01*x1966))+((x1966*x1967))+(((-1.0)*py*x1968))+((x1963*x1965)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((px*x1968))+(((-1.0)*r00*x1966))+(((-1.0)*r01*x1963))+((py*x1964))+((x1965*x1966))+(((-1.0)*x1963*x1967)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((px*x1964))+(((-1.0)*r00*x1963))+((r01*x1966))+((x1966*x1967))+(((-1.0)*py*x1968))+((x1963*x1965))))+IKsqr((((px*x1968))+(((-1.0)*r00*x1966))+(((-1.0)*r01*x1963))+((py*x1964))+((x1965*x1966))+(((-1.0)*x1963*x1967))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((px*x1964))+(((-1.0)*r00*x1963))+((r01*x1966))+((x1966*x1967))+(((-1.0)*py*x1968))+((x1963*x1965))), (((px*x1968))+(((-1.0)*r00*x1966))+(((-1.0)*r01*x1963))+((py*x1964))+((x1965*x1966))+(((-1.0)*x1963*x1967))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x1969=IKcos(j6);
IkReal x1970=IKsin(j6);
IkReal x1971=((0.069)*cj0);
IkReal x1972=((0.069)*sj0);
IkReal x1973=(cj3*x1969);
IkReal x1974=(r00*x1969);
IkReal x1975=(r01*x1970);
IkReal x1976=(r00*x1973);
IkReal x1977=((1.0)*sj3*x1970);
IkReal x1978=((1.0)*r01*x1969);
IkReal x1979=(cj3*r00*x1970);
IkReal x1980=(r00*x1977);
IkReal x1981=(sj3*x1978);
IkReal x1982=((1.0)*cj3*x1975);
IkReal x1983=(x1982+x1980+x1981);
evalcond[0]=((((0.37429)*r01*x1969))+(((-1.0)*sj2*x1972))+(((0.37429)*r00*x1970))+(((-1.0)*px))+x1971);
evalcond[1]=(((sj2*x1971))+(((-0.37429)*x1975))+(((-1.0)*py))+x1972+(((0.37429)*x1974)));
evalcond[2]=(((sj3*x1974))+x1979+((r01*x1973))+(((-1.0)*sj3*x1975)));
evalcond[3]=((((-1.0)*x1983))+x1976);
evalcond[4]=(((sj3*x1975))+(((-1.0)*x1979))+(((-1.0)*r01*x1973))+((cj0*sj2))+(((-1.0)*sj3*x1974)));
evalcond[5]=((((-1.0)*x1983))+x1976+(((-1.0)*sj0*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x1984=((1.0)*r01);
IkReal x1985=(cj4*r00);
IkReal x1986=(cj1*sj0);
IkReal x1987=(cj4*r01);
IkReal x1988=(sj3*sj4);
IkReal x1989=(cj3*sj5);
IkReal x1990=((1.0)*cj5);
IkReal x1991=(r00*sj4);
IkReal x1992=((1.0)*r00);
IkReal x1993=(cj2*sj0);
IkReal x1994=(sj3*x1993);
IkReal x1995=(cj0*sj1*sj2);
CheckValue<IkReal> x1996=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*cj5*x1988*x1990))+((cj4*x1988))+(((-1.0)*sj4*x1989*x1990)))),-1);
if(!x1996.valid){
continue;
}
CheckValue<IkReal> x1997 = IKatan2WithCheck(IkReal((((r00*x1989*x1993))+(((-1.0)*x1984*x1988*x1993))+(((-1.0)*sj3*x1985*x1990*x1995))+((cj5*x1985*x1994))+(((-1.0)*cj5*sj4*x1984*x1986))+(((-1.0)*x1989*x1992*x1995))+((x1985*x1986))+((r01*x1988*x1995)))),((((-1.0)*cj4*cj5*sj3*x1984*x1995))+((r00*x1988*x1993))+((cj5*x1986*x1991))+(((-1.0)*x1984*x1989*x1995))+((r01*x1989*x1993))+(((-1.0)*x1988*x1992*x1995))+((x1986*x1987))+((cj5*x1987*x1994))),IKFAST_ATAN2_MAGTHRESH);
if(!x1997.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1996.value)))+(x1997.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x1998=IKcos(j6);
IkReal x1999=IKsin(j6);
IkReal x2000=((1.0)*cj4);
IkReal x2001=((0.36442)*cj1);
IkReal x2002=((0.069)*cj0);
IkReal x2003=(r00*sj4);
IkReal x2004=(sj3*sj5);
IkReal x2005=((1.0)*cj0);
IkReal x2006=(cj0*sj2);
IkReal x2007=((1.0)*sj4);
IkReal x2008=((1.0)*cj3);
IkReal x2009=(r01*sj4);
IkReal x2010=(cj2*sj1);
IkReal x2011=((0.37429)*sj5);
IkReal x2012=((0.069)*sj0);
IkReal x2013=(r01*sj5);
IkReal x2014=((1.0)*sj0);
IkReal x2015=(r01*x1998);
IkReal x2016=(sj3*x1999);
IkReal x2017=(cj4*cj5*r01);
IkReal x2018=(cj5*x1999);
IkReal x2019=(cj3*x1999);
IkReal x2020=(r00*x1999);
IkReal x2021=(r00*x1998);
IkReal x2022=(r01*x1999);
IkReal x2023=(cj5*x2021);
evalcond[0]=((((-1.0)*cj5*x1998*x2003))+((cj0*cj2))+((x2009*x2018))+(((-1.0)*x2000*x2020))+((sj0*sj1*sj2))+(((-1.0)*x2000*x2015)));
evalcond[1]=((((-1.0)*cj5*x2007*x2015))+((cj4*x2021))+((sj1*x2006))+(((-1.0)*x2003*x2018))+(((-1.0)*x2000*x2022))+(((-1.0)*cj2*x2014)));
evalcond[2]=((((-1.0)*x2011*x2020))+x2002+(((0.01)*r00*x2018))+(((-1.0)*x2002*x2010))+(((-1.0)*px))+((cj0*x2001))+(((-1.0)*x2011*x2015))+(((-1.0)*sj2*x2012))+(((0.01)*cj5*x2015)));
evalcond[3]=((((-1.0)*x2010*x2012))+((sj2*x2002))+(((-1.0)*x2011*x2021))+(((-0.01)*r01*x2018))+(((0.01)*x2023))+x2012+(((-1.0)*py))+((sj0*x2001))+((x2011*x2022)));
evalcond[4]=((((-1.0)*sj5*x2008*x2021))+((x2016*x2017))+(((-1.0)*cj1*x2014))+((sj3*x1998*x2009))+((x2003*x2016))+(((-1.0)*sj3*x2000*x2023))+((x2013*x2019)));
evalcond[5]=((((-1.0)*sj5*x2008*x2020))+(((-1.0)*cj5*r00*x2000*x2016))+(((-1.0)*cj1*x2005))+(((-1.0)*x1998*x2008*x2013))+((x2009*x2016))+(((-1.0)*cj5*sj3*x2000*x2015))+(((-1.0)*sj3*x1998*x2003)));
evalcond[6]=((((-1.0)*x2010*x2014))+x2006+(((-1.0)*x2004*x2022))+((x2003*x2019))+((x2004*x2021))+((cj3*x1998*x2009))+((x2017*x2019))+(((-1.0)*cj3*x2000*x2023)));
evalcond[7]=((((-1.0)*cj3*r00*x2000*x2018))+(((-1.0)*cj3*cj5*x2000*x2015))+(((-1.0)*x1998*x2003*x2008))+((x2004*x2015))+(((-1.0)*x2005*x2010))+((x2009*x2019))+((x2004*x2020))+(((-1.0)*sj2*x2014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2024=(sj1*sj2);
IkReal x2025=(r01*sj0);
IkReal x2026=(sj3*sj4);
IkReal x2027=(cj0*cj2);
IkReal x2028=((1.0)*cj5*sj3);
IkReal x2029=(cj4*r00*sj0);
IkReal x2030=((1.0)*cj3*sj5);
IkReal x2031=((1.0)*r00*sj0);
IkReal x2032=(cj1*cj5*sj4);
CheckValue<IkReal> x2033 = IKatan2WithCheck(IkReal((((x2024*x2025*x2026))+(((-1.0)*r00*sj0*x2024*x2030))+(((-1.0)*cj1*cj4*x2025))+(((-1.0)*r00*x2027*x2030))+(((-1.0)*cj4*r00*x2027*x2028))+(((-1.0)*x2031*x2032))+((r01*x2026*x2027))+(((-1.0)*x2024*x2028*x2029)))),((((-1.0)*cj4*r01*x2027*x2028))+(((-1.0)*r00*x2026*x2027))+(((-1.0)*x2024*x2026*x2031))+(((-1.0)*x2024*x2025*x2030))+(((-1.0)*r01*x2027*x2030))+(((-1.0)*cj4*x2024*x2025*x2028))+((cj1*x2029))+(((-1.0)*x2025*x2032))),IKFAST_ATAN2_MAGTHRESH);
if(!x2033.valid){
continue;
}
CheckValue<IkReal> x2034=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*x2030))+(((-1.0)*x2028)))),-1);
if(!x2034.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2033.value)+(((1.5707963267949)*(x2034.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2035=IKcos(j6);
IkReal x2036=IKsin(j6);
IkReal x2037=((1.0)*cj4);
IkReal x2038=((0.36442)*cj1);
IkReal x2039=((0.069)*cj0);
IkReal x2040=(r00*sj4);
IkReal x2041=(sj3*sj5);
IkReal x2042=((1.0)*cj0);
IkReal x2043=(cj0*sj2);
IkReal x2044=((1.0)*sj4);
IkReal x2045=((1.0)*cj3);
IkReal x2046=(r01*sj4);
IkReal x2047=(cj2*sj1);
IkReal x2048=((0.37429)*sj5);
IkReal x2049=((0.069)*sj0);
IkReal x2050=(r01*sj5);
IkReal x2051=((1.0)*sj0);
IkReal x2052=(r01*x2035);
IkReal x2053=(sj3*x2036);
IkReal x2054=(cj4*cj5*r01);
IkReal x2055=(cj5*x2036);
IkReal x2056=(cj3*x2036);
IkReal x2057=(r00*x2036);
IkReal x2058=(r00*x2035);
IkReal x2059=(r01*x2036);
IkReal x2060=(cj5*x2058);
evalcond[0]=(((cj0*cj2))+(((-1.0)*cj5*x2035*x2040))+((sj0*sj1*sj2))+((x2046*x2055))+(((-1.0)*x2037*x2057))+(((-1.0)*x2037*x2052)));
evalcond[1]=((((-1.0)*cj2*x2051))+((cj4*x2058))+(((-1.0)*x2040*x2055))+((sj1*x2043))+(((-1.0)*x2037*x2059))+(((-1.0)*cj5*x2044*x2052)));
evalcond[2]=(x2039+(((-1.0)*x2039*x2047))+(((-1.0)*sj2*x2049))+(((-1.0)*px))+(((-1.0)*x2048*x2052))+(((-1.0)*x2048*x2057))+((cj0*x2038))+(((0.01)*r00*x2055))+(((0.01)*cj5*x2052)));
evalcond[3]=((((0.01)*x2060))+((sj2*x2039))+x2049+(((-1.0)*py))+(((-1.0)*x2048*x2058))+(((-1.0)*x2047*x2049))+((x2048*x2059))+((sj0*x2038))+(((-0.01)*r01*x2055)));
evalcond[4]=(((sj3*x2035*x2046))+((x2053*x2054))+((x2040*x2053))+(((-1.0)*cj1*x2051))+(((-1.0)*sj5*x2045*x2058))+(((-1.0)*sj3*x2037*x2060))+((x2050*x2056)));
evalcond[5]=((((-1.0)*x2035*x2045*x2050))+(((-1.0)*cj5*r00*x2037*x2053))+(((-1.0)*sj5*x2045*x2057))+(((-1.0)*cj5*sj3*x2037*x2052))+((x2046*x2053))+(((-1.0)*sj3*x2035*x2040))+(((-1.0)*cj1*x2042)));
evalcond[6]=(((x2040*x2056))+x2043+((x2054*x2056))+((x2041*x2058))+(((-1.0)*cj3*x2037*x2060))+(((-1.0)*x2041*x2059))+((cj3*x2035*x2046))+(((-1.0)*x2047*x2051)));
evalcond[7]=(((x2041*x2052))+((x2041*x2057))+(((-1.0)*cj3*r00*x2037*x2055))+(((-1.0)*sj2*x2051))+(((-1.0)*cj3*cj5*x2037*x2052))+((x2046*x2056))+(((-1.0)*x2042*x2047))+(((-1.0)*x2035*x2040*x2045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2061=cj4*cj4;
IkReal x2062=cj5*cj5;
IkReal x2063=(cj5*sj4);
IkReal x2064=((1.0)*r00);
IkReal x2065=(cj2*sj0);
IkReal x2066=(cj4*r01);
IkReal x2067=(cj4*r00);
IkReal x2068=(cj0*cj2);
IkReal x2069=((1.0)*r01);
IkReal x2070=(cj0*sj1*sj2);
IkReal x2071=(sj0*sj1*sj2);
CheckValue<IkReal> x2072 = IKatan2WithCheck(IkReal((((x2067*x2068))+((x2066*x2070))+((r00*x2063*x2070))+(((-1.0)*x2063*x2064*x2065))+(((-1.0)*x2065*x2066))+(((-1.0)*x2063*x2068*x2069))+(((-1.0)*x2063*x2069*x2071))+((x2067*x2071)))),(((x2066*x2068))+((x2066*x2071))+(((-1.0)*cj4*x2064*x2070))+((r00*x2063*x2068))+((r00*x2063*x2071))+(((-1.0)*x2063*x2065*x2069))+((r01*x2063*x2070))+((x2065*x2067))),IKFAST_ATAN2_MAGTHRESH);
if(!x2072.valid){
continue;
}
CheckValue<IkReal> x2073=IKPowWithIntegerCheck(IKsign((x2061+x2062+(((-1.0)*x2061*x2062)))),-1);
if(!x2073.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2072.value)+(((1.5707963267949)*(x2073.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x2074=IKcos(j6);
IkReal x2075=IKsin(j6);
IkReal x2076=((1.0)*cj4);
IkReal x2077=((0.36442)*cj1);
IkReal x2078=((0.069)*cj0);
IkReal x2079=(r00*sj4);
IkReal x2080=(sj3*sj5);
IkReal x2081=((1.0)*cj0);
IkReal x2082=(cj0*sj2);
IkReal x2083=((1.0)*sj4);
IkReal x2084=((1.0)*cj3);
IkReal x2085=(r01*sj4);
IkReal x2086=(cj2*sj1);
IkReal x2087=((0.37429)*sj5);
IkReal x2088=((0.069)*sj0);
IkReal x2089=(r01*sj5);
IkReal x2090=((1.0)*sj0);
IkReal x2091=(r01*x2074);
IkReal x2092=(sj3*x2075);
IkReal x2093=(cj4*cj5*r01);
IkReal x2094=(cj5*x2075);
IkReal x2095=(cj3*x2075);
IkReal x2096=(r00*x2075);
IkReal x2097=(r00*x2074);
IkReal x2098=(r01*x2075);
IkReal x2099=(cj5*x2097);
evalcond[0]=((((-1.0)*x2076*x2096))+(((-1.0)*x2076*x2091))+(((-1.0)*cj5*x2074*x2079))+((cj0*cj2))+((sj0*sj1*sj2))+((x2085*x2094)));
evalcond[1]=((((-1.0)*x2076*x2098))+((sj1*x2082))+(((-1.0)*cj5*x2083*x2091))+(((-1.0)*cj2*x2090))+((cj4*x2097))+(((-1.0)*x2079*x2094)));
evalcond[2]=((((-1.0)*x2078*x2086))+(((-1.0)*sj2*x2088))+(((0.01)*r00*x2094))+x2078+(((-1.0)*px))+(((-1.0)*x2087*x2096))+(((-1.0)*x2087*x2091))+((cj0*x2077))+(((0.01)*cj5*x2091)));
evalcond[3]=(((sj2*x2078))+x2088+((x2087*x2098))+(((-0.01)*r01*x2094))+(((-1.0)*x2086*x2088))+(((-1.0)*py))+(((0.01)*x2099))+(((-1.0)*x2087*x2097))+((sj0*x2077)));
evalcond[4]=((((-1.0)*sj3*x2076*x2099))+((sj3*x2074*x2085))+((x2089*x2095))+((x2092*x2093))+(((-1.0)*cj1*x2090))+((x2079*x2092))+(((-1.0)*sj5*x2084*x2097)));
evalcond[5]=((((-1.0)*cj1*x2081))+(((-1.0)*cj5*sj3*x2076*x2091))+(((-1.0)*x2074*x2084*x2089))+(((-1.0)*cj5*r00*x2076*x2092))+(((-1.0)*sj3*x2074*x2079))+(((-1.0)*sj5*x2084*x2096))+((x2085*x2092)));
evalcond[6]=(((x2080*x2097))+((cj3*x2074*x2085))+(((-1.0)*cj3*x2076*x2099))+x2082+(((-1.0)*x2086*x2090))+(((-1.0)*x2080*x2098))+((x2079*x2095))+((x2093*x2095)));
evalcond[7]=((((-1.0)*cj3*r00*x2076*x2094))+((x2080*x2091))+((x2080*x2096))+(((-1.0)*x2081*x2086))+(((-1.0)*cj3*cj5*x2076*x2091))+(((-1.0)*x2074*x2079*x2084))+(((-1.0)*sj2*x2090))+((x2085*x2095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x2100=((0.37429)*sj5);
IkReal x2101=((0.01)*cj5);
IkReal x2102=(((r21*x2101))+(((-1.0)*r21*x2100)));
IkReal x2103=(((r20*x2101))+(((-1.0)*r20*x2100)));
CheckValue<IkReal> x2106 = IKatan2WithCheck(IkReal(x2102),x2103,IKFAST_ATAN2_MAGTHRESH);
if(!x2106.valid){
continue;
}
IkReal x2104=((1.0)*(x2106.value));
if((((x2102*x2102)+(x2103*x2103))) < -0.00001)
continue;
CheckValue<IkReal> x2107=IKPowWithIntegerCheck(IKabs(IKsqrt(((x2102*x2102)+(x2103*x2103)))),-1);
if(!x2107.valid){
continue;
}
if( (((x2107.value)*(((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)))))) < -1-IKFAST_SINCOS_THRESH || (((x2107.value)*(((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2105=IKasin(((x2107.value)*(((((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1))))));
j6array[0]=((((-1.0)*x2104))+(((-1.0)*x2105)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((3.14159265358979)+(((-1.0)*x2104))+x2105);
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j4eval[2];
IkReal x2108=cj6*cj6;
IkReal x2109=cj5*cj5;
IkReal x2110=r21*r21;
IkReal x2111=r22*r22;
IkReal x2112=r20*r20;
IkReal x2113=(cj6*r21);
IkReal x2114=(sj3*x2110);
IkReal x2115=(cj5*r22*sj5);
IkReal x2116=(sj3*x2111);
IkReal x2117=((1.0)*x2109);
IkReal x2118=((2.0)*r20*sj3*sj6);
IkReal x2119=(sj3*x2108*x2112);
IkReal x2120=(((x2109*x2119))+((x2109*x2116))+(((-1.0)*sj3*x2112*x2117))+(((-2.0)*sj3*x2113*x2115))+(((-1.0)*x2108*x2114*x2117))+(((-1.0)*x2109*x2113*x2118))+(((-1.0)*x2116))+(((-1.0)*x2114))+(((-1.0)*x2119))+((x2113*x2118))+(((-1.0)*x2115*x2118))+((x2108*x2114)));
j4eval[0]=x2120;
j4eval[1]=IKsign(x2120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2121=cj5*cj5;
IkReal x2122=cj6*cj6;
IkReal x2123=r22*r22;
IkReal x2124=r20*r20;
IkReal x2125=r21*r21;
IkReal x2126=((1.0)*cj3);
IkReal x2127=(cj6*r21);
IkReal x2128=(r20*sj6);
IkReal x2129=(cj3*x2122);
IkReal x2130=((1.0)*x2124);
IkReal x2131=(cj3*x2121);
IkReal x2132=((2.0)*cj3*cj5*r22*sj5);
IkReal x2133=(((x2125*x2129))+(((-1.0)*x2121*x2122*x2125*x2126))+(((-1.0)*x2122*x2124*x2126))+(((-2.0)*x2127*x2128*x2131))+(((-1.0)*x2125*x2126))+(((-1.0)*x2121*x2124*x2126))+(((-1.0)*x2127*x2132))+(((-1.0)*x2128*x2132))+(((2.0)*cj3*x2127*x2128))+((x2123*x2131))+((x2121*x2124*x2129))+(((-1.0)*x2123*x2126)));
j4eval[0]=x2133;
j4eval[1]=IKsign(x2133);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x2134=cj1*cj1;
IkReal x2135=cj2*cj2;
IkReal x2136=(cj2*sj1);
IkReal x2137=((50289.96)*cj1);
IkReal x2138=((10.5628985507246)*cj1);
IkReal x2139=(x2134*x2135);
j0eval[0]=((2.0)+(((27.8937064482252)*x2134))+x2138+(((-2.0)*x2136))+(((-1.0)*x2136*x2138))+(((-1.0)*x2139)));
j0eval[1]=IKsign(((9522.0)+x2137+(((-4761.0)*x2139))+(((-9522.0)*x2136))+(((-1.0)*x2136*x2137))+(((132801.9364)*x2134))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
IkReal x2140=(cj1*cj2);
IkReal x2141=(r20*sj6);
IkReal x2142=((0.01)*cj5);
IkReal x2143=(cj5*r22);
IkReal x2144=(cj6*r21);
IkReal x2145=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x2144*x2145))+((x2142*x2144))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*x2143))+((x2141*x2142))+(((-0.069)*x2140))+(((-1.0)*x2141*x2145))+(((-0.36442)*sj1)));
evalcond[2]=((((-1.0)*x2140))+(((-1.0)*x2143))+((sj5*x2144))+((sj5*x2141)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2146=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x2146;
j0eval[1]=IKsign(x2146);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2147=cj5*cj5;
IkReal x2148=cj6*cj6;
IkReal x2149=r20*r20;
IkReal x2150=r21*r21;
IkReal x2151=r22*r22;
IkReal x2152=(r22*sj5);
IkReal x2153=(cj6*r20);
IkReal x2154=(cj1*sj2);
IkReal x2155=(cj6*r21);
IkReal x2156=(cj5*sj1);
IkReal x2157=(r20*sj6);
IkReal x2158=(r21*sj6);
IkReal x2159=((2.0)*x2157);
IkReal x2160=((1.0)*x2147);
IkReal x2161=(x2148*x2149);
IkReal x2162=(x2148*x2150);
IkReal x2163=((((-1.0)*x2160*x2161))+(((-1.0)*x2151*x2160))+x2161+x2150+x2151+(((2.0)*cj5*x2152*x2155))+((x2147*x2162))+(((-2.0)*x2153*x2158))+((cj5*x2152*x2159))+(((-1.0)*x2162))+(((2.0)*x2147*x2153*x2158))+((x2147*x2149)));
j4eval[0]=x2163;
j4eval[1]=((IKabs((((x2154*x2158))+((x2155*x2156))+((x2156*x2157))+((sj1*x2152))+(((-1.0)*x2153*x2154)))))+(IKabs((((cj5*x2154*x2155))+((cj5*x2154*x2157))+((x2152*x2154))+(((-1.0)*sj1*x2158))+((sj1*x2153))))));
j4eval[2]=IKsign(x2163);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2164=cj1*cj1;
IkReal x2165=cj2*cj2;
IkReal x2166=(cj2*sj1);
IkReal x2167=(x2164*x2165);
j0eval[0]=((-1.0)+x2167+x2166+(((5.28144927536232)*cj1*x2166)));
j0eval[1]=IKsign(((-69.0)+(((364.42)*cj1*x2166))+(((69.0)*x2167))+(((69.0)*x2166))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x2168=(cj6*sj5);
IkReal x2169=(sj5*sj6);
IkReal x2170=((0.01)*cj5);
IkReal x2171=(cj5*r22);
IkReal x2172=((1.0)*cj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((-0.069)+((cj6*r21*x2170))+((r20*sj6*x2170))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*x2171))+(((-0.37429)*r21*x2168))+(((-0.37429)*r20*x2169)));
evalcond[2]=((-1.0)+((r21*x2168))+((r20*x2169))+(((-1.0)*x2171)));
evalcond[3]=(((r10*x2169))+((r11*x2168))+(((-1.0)*r12*x2172)));
evalcond[4]=(((r00*x2169))+((r01*x2168))+(((-1.0)*r02*x2172)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2173=(r10*sj6);
IkReal x2174=((0.863573439158322)*sj5);
IkReal x2175=((0.0230723086152)*cj5);
IkReal x2176=(cj6*r11);
IkReal x2177=(r00*sj6);
IkReal x2178=((0.0230723086152)*sj5);
IkReal x2179=((0.863573439158322)*cj5);
IkReal x2180=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+((x2173*x2174))+((x2174*x2176))+(((-1.0)*x2175*x2176))+(((-1.0)*x2173*x2175))+(((-1.0)*r12*x2179))+(((-1.0)*r12*x2178)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+(((-1.0)*x2175*x2180))+((x2174*x2177))+((x2174*x2180))+(((-1.0)*r02*x2178))+(((-1.0)*r02*x2179))+(((-1.0)*x2175*x2177)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+((x2173*x2174))+((x2174*x2176))+(((-1.0)*x2175*x2176))+(((-1.0)*x2173*x2175))+(((-1.0)*r12*x2179))+(((-1.0)*r12*x2178))))+IKsqr(((((2.30723086152)*px))+(((-1.0)*x2175*x2180))+((x2174*x2177))+((x2174*x2180))+(((-1.0)*r02*x2178))+(((-1.0)*r02*x2179))+(((-1.0)*x2175*x2177))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+((x2173*x2174))+((x2174*x2176))+(((-1.0)*x2175*x2176))+(((-1.0)*x2173*x2175))+(((-1.0)*r12*x2179))+(((-1.0)*r12*x2178))), ((((2.30723086152)*px))+(((-1.0)*x2175*x2180))+((x2174*x2177))+((x2174*x2180))+(((-1.0)*r02*x2178))+(((-1.0)*r02*x2179))+(((-1.0)*x2175*x2177))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2181=((0.01)*cj5);
IkReal x2182=(cj6*r01);
IkReal x2183=((0.37429)*sj5);
IkReal x2184=(cj6*r11);
IkReal x2185=((0.01)*sj5);
IkReal x2186=(r00*sj6);
IkReal x2187=((0.37429)*cj5);
IkReal x2188=(r10*sj6);
evalcond[0]=((((-1.0)*px))+((x2181*x2186))+((x2181*x2182))+((r02*x2187))+((r02*x2185))+(((-1.0)*x2183*x2186))+(((-1.0)*x2182*x2183))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=((((0.43342)*(IKsin(j0))))+((r12*x2185))+((r12*x2187))+(((-1.0)*py))+((x2181*x2188))+((x2181*x2184))+(((-1.0)*x2183*x2184))+(((-1.0)*x2183*x2188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2189=(cj0*sj6);
IkReal x2190=(cj0*cj6);
IkReal x2191=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x2191;
j4eval[1]=((IKabs((((cj5*r21*x2190))+((cj5*r20*x2189))+((cj0*r22*sj5)))))+(IKabs((((r20*x2190))+(((-1.0)*r21*x2189))))));
j4eval[2]=IKsign(x2191);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2192=(r21*sj0);
IkReal x2193=(r20*sj0);
IkReal x2194=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x2194;
j4eval[1]=((IKabs((((cj6*x2193))+(((-1.0)*sj6*x2192)))))+(IKabs((((cj5*sj6*x2193))+((r22*sj0*sj5))+((cj5*cj6*x2192))))));
j4eval[2]=IKsign(x2194);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x2195=cj6*cj6;
IkReal x2196=cj5*cj5;
IkReal x2197=(r02*r22);
IkReal x2198=(r22*sj5);
IkReal x2199=(r00*r20);
IkReal x2200=((1.0)*r21);
IkReal x2201=(r20*sj6);
IkReal x2202=(cj6*r01);
IkReal x2203=(cj0*cj5);
IkReal x2204=(r00*sj6);
IkReal x2205=((1.0)*cj5);
IkReal x2206=(cj6*r21);
IkReal x2207=(cj5*r02*sj5);
IkReal x2208=((1.0)*x2196);
IkReal x2209=(x2195*x2196);
IkReal x2210=(((x2196*x2197))+(((-1.0)*x2198*x2202*x2205))+((r01*r21*x2195))+(((-1.0)*x2195*x2199))+(((-1.0)*x2197))+(((-1.0)*x2198*x2204*x2205))+((x2201*x2202))+(((-1.0)*r02*sj5*x2201*x2205))+(((-1.0)*cj6*x2196*x2200*x2204))+((x2204*x2206))+(((-1.0)*x2199*x2208))+((x2199*x2209))+(((-1.0)*cj6*x2200*x2207))+(((-1.0)*x2201*x2202*x2208))+(((-1.0)*r01*x2200*x2209))+(((-1.0)*r01*x2200)));
j4eval[0]=x2210;
j4eval[1]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x2200)))))+(IKabs((((x2203*x2206))+((x2201*x2203))+((cj0*x2198))))));
j4eval[2]=IKsign(x2210);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2211=((1.0)*cj5);
IkReal x2212=((0.01)*cj5);
IkReal x2213=(cj6*r11);
IkReal x2214=(r20*sj6);
IkReal x2215=((0.01)*sj5);
IkReal x2216=(cj6*r01);
IkReal x2217=((0.37429)*cj5);
IkReal x2218=((0.37429)*sj5);
IkReal x2219=(cj6*r21);
IkReal x2220=(r10*sj5*sj6);
IkReal x2221=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x2214*x2218))+(((-1.0)*x2218*x2219))+(((-1.0)*pz))+((x2212*x2219))+((x2212*x2214))+((r22*x2217))+((r22*x2215)));
evalcond[2]=(((r00*sj6*x2212))+(((-1.0)*px))+(((-1.0)*x2216*x2218))+((x2212*x2216))+(((-1.0)*r00*sj6*x2218))+((r02*x2215))+((r02*x2217)));
evalcond[3]=((0.43342)+(((-1.0)*r10*sj6*x2218))+((r12*x2217))+((r12*x2215))+(((-1.0)*py))+(((-1.0)*x2213*x2218))+((x2212*x2213))+((r10*sj6*x2212)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x2211))+((sj5*x2219))+((sj5*x2214)));
evalcond[5]=(x2220+(((-1.0)*r12*x2211))+((sj5*x2213)));
evalcond[6]=(x2221+(((-1.0)*r02*x2211))+((sj5*x2216)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2222=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x2222;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2222);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2223=((1.0)*sj5);
IkReal x2224=((((-1.0)*cj6*r21*x2223))+((cj5*r22))+(((-1.0)*r20*sj6*x2223)));
j4eval[0]=x2224;
j4eval[1]=IKsign(x2224);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2225=cj6*cj6;
IkReal x2226=cj5*cj5;
IkReal x2227=r10*r10;
IkReal x2228=r11*r11;
IkReal x2229=r12*r12;
IkReal x2230=(r10*sj6);
IkReal x2231=(r12*sj5);
IkReal x2232=((2.0)*cj6*r11);
IkReal x2233=((1.0)*x2227);
IkReal x2234=(x2225*x2228);
IkReal x2235=(((x2226*x2229))+((x2225*x2226*x2227))+x2234+(((-1.0)*x2226*x2233))+(((-1.0)*x2225*x2233))+(((-1.0)*x2228))+(((-1.0)*x2229))+((x2230*x2232))+(((-1.0)*x2226*x2230*x2232))+(((-2.0)*cj5*x2230*x2231))+(((-1.0)*cj5*x2231*x2232))+(((-1.0)*x2226*x2234)));
j4eval[0]=x2235;
j4eval[1]=((IKabs((x2231+((cj5*x2230))+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2235);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2236=cj6*cj6;
IkReal x2237=cj5*cj5;
IkReal x2238=r10*r10;
IkReal x2239=r11*r11;
IkReal x2240=r12*r12;
IkReal x2241=(r10*sj6);
IkReal x2242=(r12*sj5);
IkReal x2243=((2.0)*cj6*r11);
IkReal x2244=(x2236*x2239);
IkReal x2245=(x2237*x2238);
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x2242+((cj5*cj6*r11))+((cj5*x2241))),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
CheckValue<IkReal> x2247=IKPowWithIntegerCheck(IKsign((((x2241*x2243))+((x2236*x2245))+x2244+(((-1.0)*x2240))+(((-1.0)*x2245))+(((-1.0)*cj5*x2242*x2243))+(((-2.0)*cj5*x2241*x2242))+(((-1.0)*x2237*x2244))+(((-1.0)*x2239))+(((-1.0)*x2237*x2241*x2243))+(((-1.0)*x2236*x2238))+((x2237*x2240)))),-1);
if(!x2247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2246.value)+(((1.5707963267949)*(x2247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2248=IKsin(j4);
IkReal x2249=IKcos(j4);
IkReal x2250=(cj5*cj6);
IkReal x2251=(r11*sj6);
IkReal x2252=(cj6*r20);
IkReal x2253=(cj6*r10);
IkReal x2254=(cj5*sj6);
IkReal x2255=(r01*sj6);
IkReal x2256=(r21*sj6);
IkReal x2257=(cj6*r00);
IkReal x2258=((1.0)*x2249);
IkReal x2259=((1.0)*x2248);
IkReal x2260=(sj5*x2259);
evalcond[0]=((((-1.0)*r21*x2250*x2259))+(((-1.0)*r20*x2254*x2259))+(((-1.0)*x2256*x2258))+((x2249*x2252))+(((-1.0)*r22*x2260)));
evalcond[1]=((((-1.0)*r11*x2250*x2259))+((x2249*x2253))+(((-1.0)*r10*x2254*x2259))+(((-1.0)*x2251*x2258))+(((-1.0)*r12*x2260)));
evalcond[2]=((((-1.0)*r21*x2250*x2258))+(((-1.0)*r22*sj5*x2258))+(((-1.0)*r20*x2254*x2258))+(((-1.0)*x2252*x2259))+((x2248*x2256)));
evalcond[3]=((((-1.0)*x2257*x2259))+(((-1.0)*r02*sj5*x2258))+((x2248*x2255))+(((-1.0)*r00*x2254*x2258))+(((-1.0)*r01*x2250*x2258)));
evalcond[4]=((-1.0)+(((-1.0)*x2255*x2258))+((x2249*x2257))+(((-1.0)*r02*x2260))+(((-1.0)*r00*x2254*x2259))+(((-1.0)*r01*x2250*x2259)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x2250*x2258))+(((-1.0)*x2253*x2259))+(((-1.0)*r10*x2254*x2258))+(((-1.0)*r12*sj5*x2258))+((x2248*x2251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2261=((1.0)*sj5);
CheckValue<IkReal> x2262 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2262.valid){
continue;
}
CheckValue<IkReal> x2263=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x2261))+(((-1.0)*cj6*r21*x2261)))),-1);
if(!x2263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2262.value)+(((1.5707963267949)*(x2263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2264=IKsin(j4);
IkReal x2265=IKcos(j4);
IkReal x2266=(cj5*cj6);
IkReal x2267=(r11*sj6);
IkReal x2268=(cj6*r20);
IkReal x2269=(cj6*r10);
IkReal x2270=(cj5*sj6);
IkReal x2271=(r01*sj6);
IkReal x2272=(r21*sj6);
IkReal x2273=(cj6*r00);
IkReal x2274=((1.0)*x2265);
IkReal x2275=((1.0)*x2264);
IkReal x2276=(sj5*x2275);
evalcond[0]=((((-1.0)*r22*x2276))+(((-1.0)*r21*x2266*x2275))+(((-1.0)*r20*x2270*x2275))+((x2265*x2268))+(((-1.0)*x2272*x2274)));
evalcond[1]=((((-1.0)*r10*x2270*x2275))+((x2265*x2269))+(((-1.0)*r12*x2276))+(((-1.0)*r11*x2266*x2275))+(((-1.0)*x2267*x2274)));
evalcond[2]=((((-1.0)*r22*sj5*x2274))+(((-1.0)*r21*x2266*x2274))+(((-1.0)*r20*x2270*x2274))+(((-1.0)*x2268*x2275))+((x2264*x2272)));
evalcond[3]=((((-1.0)*x2273*x2275))+(((-1.0)*r01*x2266*x2274))+((x2264*x2271))+(((-1.0)*r00*x2270*x2274))+(((-1.0)*r02*sj5*x2274)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x2266*x2275))+(((-1.0)*r02*x2276))+((x2265*x2273))+(((-1.0)*r00*x2270*x2275))+(((-1.0)*x2271*x2274)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x2274))+(((-1.0)*r10*x2270*x2274))+(((-1.0)*x2269*x2275))+((x2264*x2267))+(((-1.0)*r11*x2266*x2274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2277 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2277.valid){
continue;
}
CheckValue<IkReal> x2278=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x2278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2277.value)+(((1.5707963267949)*(x2278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2279=IKsin(j4);
IkReal x2280=IKcos(j4);
IkReal x2281=(cj5*cj6);
IkReal x2282=(r11*sj6);
IkReal x2283=(cj6*r20);
IkReal x2284=(cj6*r10);
IkReal x2285=(cj5*sj6);
IkReal x2286=(r01*sj6);
IkReal x2287=(r21*sj6);
IkReal x2288=(cj6*r00);
IkReal x2289=((1.0)*x2280);
IkReal x2290=((1.0)*x2279);
IkReal x2291=(sj5*x2290);
evalcond[0]=(((x2280*x2283))+(((-1.0)*r21*x2281*x2290))+(((-1.0)*x2287*x2289))+(((-1.0)*r20*x2285*x2290))+(((-1.0)*r22*x2291)));
evalcond[1]=((((-1.0)*x2282*x2289))+((x2280*x2284))+(((-1.0)*r11*x2281*x2290))+(((-1.0)*r10*x2285*x2290))+(((-1.0)*r12*x2291)));
evalcond[2]=((((-1.0)*x2283*x2290))+(((-1.0)*r22*sj5*x2289))+((x2279*x2287))+(((-1.0)*r20*x2285*x2289))+(((-1.0)*r21*x2281*x2289)));
evalcond[3]=((((-1.0)*r01*x2281*x2289))+((x2279*x2286))+(((-1.0)*r02*sj5*x2289))+(((-1.0)*x2288*x2290))+(((-1.0)*r00*x2285*x2289)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x2281*x2290))+(((-1.0)*r02*x2291))+((x2280*x2288))+(((-1.0)*x2286*x2289))+(((-1.0)*r00*x2285*x2290)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x2281*x2289))+(((-1.0)*r12*sj5*x2289))+((x2279*x2282))+(((-1.0)*x2284*x2290))+(((-1.0)*r10*x2285*x2289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2292=((1.0)*cj5);
IkReal x2293=((0.01)*cj5);
IkReal x2294=(cj6*r11);
IkReal x2295=(r20*sj6);
IkReal x2296=((0.01)*sj5);
IkReal x2297=(cj6*r01);
IkReal x2298=((0.37429)*cj5);
IkReal x2299=((0.37429)*sj5);
IkReal x2300=(cj6*r21);
IkReal x2301=(r10*sj5*sj6);
IkReal x2302=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x2293*x2300))+((r22*x2298))+((r22*x2296))+(((-1.0)*pz))+(((-1.0)*x2299*x2300))+(((-1.0)*x2295*x2299))+((x2293*x2295)));
evalcond[2]=((((-1.0)*r00*sj6*x2299))+((r02*x2298))+((r02*x2296))+(((-1.0)*px))+(((-1.0)*x2297*x2299))+((r00*sj6*x2293))+((x2293*x2297)));
evalcond[3]=((-0.43342)+((r10*sj6*x2293))+(((-1.0)*r10*sj6*x2299))+(((-1.0)*py))+((x2293*x2294))+((r12*x2296))+((r12*x2298))+(((-1.0)*x2294*x2299)));
evalcond[4]=((-1.0)+((sj5*x2300))+((sj5*x2295))+(((-1.0)*r22*x2292)));
evalcond[5]=(x2301+((sj5*x2294))+(((-1.0)*r12*x2292)));
evalcond[6]=(x2302+(((-1.0)*r02*x2292))+((sj5*x2297)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2303=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x2303;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2304=((1.0)*sj6);
IkReal x2305=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x2304)));
j4eval[0]=x2305;
j4eval[1]=IKsign(x2305);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x2304))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2306=r11*r11;
IkReal x2307=cj5*cj5;
IkReal x2308=cj6*cj6;
IkReal x2309=r10*r10;
IkReal x2310=r12*r12;
IkReal x2311=(r12*sj5);
IkReal x2312=(cj6*r10);
IkReal x2313=((1.0)*x2308);
IkReal x2314=(cj5*cj6*r11);
IkReal x2315=(cj5*r10*sj6);
IkReal x2316=((2.0)*r11*sj6);
IkReal x2317=(x2307*x2309);
IkReal x2318=(((x2308*x2309))+x2317+x2310+x2306+(((-1.0)*x2312*x2316))+((x2306*x2307*x2308))+(((-1.0)*x2313*x2317))+((x2307*x2312*x2316))+(((-1.0)*x2306*x2313))+(((2.0)*x2311*x2315))+(((2.0)*x2311*x2314))+(((-1.0)*x2307*x2310)));
j4eval[0]=x2318;
j4eval[1]=IKsign(x2318);
j4eval[2]=((IKabs((x2314+x2315+x2311)))+(IKabs((x2312+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2319=r11*r11;
IkReal x2320=cj5*cj5;
IkReal x2321=cj6*cj6;
IkReal x2322=r10*r10;
IkReal x2323=r12*r12;
IkReal x2324=(r10*sj6);
IkReal x2325=(r12*sj5);
IkReal x2326=((1.0)*x2321);
IkReal x2327=(cj5*cj6*r11);
IkReal x2328=((2.0)*cj6*r11);
IkReal x2329=(x2320*x2322);
CheckValue<IkReal> x2330 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x2327+x2325+((cj5*x2324))),IKFAST_ATAN2_MAGTHRESH);
if(!x2330.valid){
continue;
}
CheckValue<IkReal> x2331=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2324*x2328))+(((2.0)*x2325*x2327))+x2323+x2329+x2319+(((-1.0)*x2320*x2323))+((x2321*x2322))+(((-1.0)*x2319*x2326))+(((-1.0)*x2326*x2329))+(((2.0)*cj5*x2324*x2325))+((x2319*x2320*x2321))+((x2320*x2324*x2328)))),-1);
if(!x2331.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2330.value)+(((1.5707963267949)*(x2331.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2332=IKsin(j4);
IkReal x2333=IKcos(j4);
IkReal x2334=(cj5*cj6);
IkReal x2335=(r11*sj6);
IkReal x2336=(cj6*r20);
IkReal x2337=(cj6*r10);
IkReal x2338=(cj5*sj6);
IkReal x2339=(r01*sj6);
IkReal x2340=(r21*sj6);
IkReal x2341=(cj6*r00);
IkReal x2342=((1.0)*x2333);
IkReal x2343=((1.0)*x2332);
IkReal x2344=(sj5*x2343);
evalcond[0]=((((-1.0)*x2340*x2342))+((x2333*x2336))+(((-1.0)*r22*x2344))+(((-1.0)*r20*x2338*x2343))+(((-1.0)*r21*x2334*x2343)));
evalcond[1]=((((-1.0)*r10*x2338*x2343))+((x2333*x2337))+(((-1.0)*x2335*x2342))+(((-1.0)*r11*x2334*x2343))+(((-1.0)*r12*x2344)));
evalcond[2]=((((-1.0)*r22*sj5*x2342))+((x2332*x2340))+(((-1.0)*x2336*x2343))+(((-1.0)*r20*x2338*x2342))+(((-1.0)*r21*x2334*x2342)));
evalcond[3]=((((-1.0)*r02*sj5*x2342))+((x2332*x2339))+(((-1.0)*x2341*x2343))+(((-1.0)*r01*x2334*x2342))+(((-1.0)*r00*x2338*x2342)));
evalcond[4]=((1.0)+(((-1.0)*x2339*x2342))+(((-1.0)*r01*x2334*x2343))+(((-1.0)*r02*x2344))+((x2333*x2341))+(((-1.0)*r00*x2338*x2343)));
evalcond[5]=((1.0)+(((-1.0)*x2337*x2343))+(((-1.0)*r10*x2338*x2342))+(((-1.0)*r12*sj5*x2342))+((x2332*x2335))+(((-1.0)*r11*x2334*x2342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2345=((1.0)*sj6);
CheckValue<IkReal> x2346 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2345))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2346.valid){
continue;
}
CheckValue<IkReal> x2347=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x2345)))),-1);
if(!x2347.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2346.value)+(((1.5707963267949)*(x2347.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2348=IKsin(j4);
IkReal x2349=IKcos(j4);
IkReal x2350=(cj5*cj6);
IkReal x2351=(r11*sj6);
IkReal x2352=(cj6*r20);
IkReal x2353=(cj6*r10);
IkReal x2354=(cj5*sj6);
IkReal x2355=(r01*sj6);
IkReal x2356=(r21*sj6);
IkReal x2357=(cj6*r00);
IkReal x2358=((1.0)*x2349);
IkReal x2359=((1.0)*x2348);
IkReal x2360=(sj5*x2359);
evalcond[0]=((((-1.0)*x2356*x2358))+(((-1.0)*r21*x2350*x2359))+(((-1.0)*r22*x2360))+((x2349*x2352))+(((-1.0)*r20*x2354*x2359)));
evalcond[1]=((((-1.0)*r10*x2354*x2359))+(((-1.0)*r11*x2350*x2359))+((x2349*x2353))+(((-1.0)*x2351*x2358))+(((-1.0)*r12*x2360)));
evalcond[2]=((((-1.0)*r22*sj5*x2358))+((x2348*x2356))+(((-1.0)*x2352*x2359))+(((-1.0)*r21*x2350*x2358))+(((-1.0)*r20*x2354*x2358)));
evalcond[3]=((((-1.0)*x2357*x2359))+(((-1.0)*r00*x2354*x2358))+(((-1.0)*r02*sj5*x2358))+((x2348*x2355))+(((-1.0)*r01*x2350*x2358)));
evalcond[4]=((1.0)+(((-1.0)*r00*x2354*x2359))+(((-1.0)*x2355*x2358))+(((-1.0)*r01*x2350*x2359))+((x2349*x2357))+(((-1.0)*r02*x2360)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x2358))+((x2348*x2351))+(((-1.0)*r10*x2354*x2358))+(((-1.0)*r11*x2350*x2358))+(((-1.0)*x2353*x2359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2361=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2361.valid){
continue;
}
CheckValue<IkReal> x2362 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2361.value)))+(x2362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2363=IKsin(j4);
IkReal x2364=IKcos(j4);
IkReal x2365=(cj5*cj6);
IkReal x2366=(r11*sj6);
IkReal x2367=(cj6*r20);
IkReal x2368=(cj6*r10);
IkReal x2369=(cj5*sj6);
IkReal x2370=(r01*sj6);
IkReal x2371=(r21*sj6);
IkReal x2372=(cj6*r00);
IkReal x2373=((1.0)*x2364);
IkReal x2374=((1.0)*x2363);
IkReal x2375=(sj5*x2374);
evalcond[0]=((((-1.0)*r21*x2365*x2374))+((x2364*x2367))+(((-1.0)*r20*x2369*x2374))+(((-1.0)*x2371*x2373))+(((-1.0)*r22*x2375)));
evalcond[1]=((((-1.0)*r10*x2369*x2374))+((x2364*x2368))+(((-1.0)*r11*x2365*x2374))+(((-1.0)*r12*x2375))+(((-1.0)*x2366*x2373)));
evalcond[2]=((((-1.0)*r21*x2365*x2373))+((x2363*x2371))+(((-1.0)*x2367*x2374))+(((-1.0)*r20*x2369*x2373))+(((-1.0)*r22*sj5*x2373)));
evalcond[3]=((((-1.0)*r00*x2369*x2373))+(((-1.0)*r02*sj5*x2373))+(((-1.0)*x2372*x2374))+((x2363*x2370))+(((-1.0)*r01*x2365*x2373)));
evalcond[4]=((1.0)+(((-1.0)*r02*x2375))+(((-1.0)*r00*x2369*x2374))+((x2364*x2372))+(((-1.0)*x2370*x2373))+(((-1.0)*r01*x2365*x2374)));
evalcond[5]=((1.0)+(((-1.0)*r10*x2369*x2373))+(((-1.0)*r11*x2365*x2373))+(((-1.0)*x2368*x2374))+((x2363*x2366))+(((-1.0)*r12*sj5*x2373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2376=((1.0)*cj5);
IkReal x2377=((0.01)*cj5);
IkReal x2378=(cj6*r11);
IkReal x2379=(r20*sj6);
IkReal x2380=((0.01)*sj5);
IkReal x2381=(cj6*r01);
IkReal x2382=((0.37429)*cj5);
IkReal x2383=((0.37429)*sj5);
IkReal x2384=(cj6*r21);
IkReal x2385=(r10*sj5*sj6);
IkReal x2386=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*pz))+(((-1.0)*x2383*x2384))+(((-1.0)*x2379*x2383))+((r22*x2380))+((r22*x2382))+((x2377*x2379))+((x2377*x2384)));
evalcond[2]=((0.43342)+(((-1.0)*x2381*x2383))+((r02*x2380))+((r02*x2382))+(((-1.0)*px))+((r00*sj6*x2377))+(((-1.0)*r00*sj6*x2383))+((x2377*x2381)));
evalcond[3]=(((r10*sj6*x2377))+(((-1.0)*x2378*x2383))+(((-1.0)*py))+(((-1.0)*r10*sj6*x2383))+((x2377*x2378))+((r12*x2380))+((r12*x2382)));
evalcond[4]=((-1.0)+((sj5*x2379))+((sj5*x2384))+(((-1.0)*r22*x2376)));
evalcond[5]=(x2385+((sj5*x2378))+(((-1.0)*r12*x2376)));
evalcond[6]=((((-1.0)*r02*x2376))+x2386+((sj5*x2381)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2387=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x2387;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2387);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2388=((1.0)*sj5);
IkReal x2389=((((-1.0)*r20*sj6*x2388))+((cj5*r22))+(((-1.0)*cj6*r21*x2388)));
j4eval[0]=x2389;
j4eval[1]=IKsign(x2389);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2390=cj6*cj6;
IkReal x2391=cj5*cj5;
IkReal x2392=r00*r00;
IkReal x2393=r01*r01;
IkReal x2394=r02*r02;
IkReal x2395=(cj6*r00);
IkReal x2396=(cj5*cj6*r01);
IkReal x2397=((2.0)*r02*sj5);
IkReal x2398=((1.0)*x2390);
IkReal x2399=((2.0)*r01*sj6);
IkReal x2400=(cj5*r00*sj6);
IkReal x2401=(x2391*x2392);
IkReal x2402=((((-1.0)*x2401))+(((-1.0)*x2396*x2397))+(((-1.0)*x2397*x2400))+((x2390*x2401))+(((-1.0)*x2393))+(((-1.0)*x2394))+((x2390*x2393))+(((-1.0)*x2391*x2393*x2398))+((x2391*x2394))+(((-1.0)*x2392*x2398))+(((-1.0)*x2391*x2395*x2399))+((x2395*x2399)));
j4eval[0]=x2402;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x2395)))+(IKabs((x2400+x2396+((r02*sj5))))));
j4eval[2]=IKsign(x2402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2403=cj6*cj6;
IkReal x2404=cj5*cj5;
IkReal x2405=r00*r00;
IkReal x2406=r01*r01;
IkReal x2407=r02*r02;
IkReal x2408=(cj6*r00);
IkReal x2409=(cj5*cj6*r01);
IkReal x2410=((2.0)*r02*sj5);
IkReal x2411=((1.0)*x2403);
IkReal x2412=((2.0)*r01*sj6);
IkReal x2413=(cj5*r00*sj6);
IkReal x2414=(x2404*x2405);
CheckValue<IkReal> x2415 = IKatan2WithCheck(IkReal((x2408+(((-1.0)*r01*sj6)))),(x2409+x2413+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2415.valid){
continue;
}
CheckValue<IkReal> x2416=IKPowWithIntegerCheck(IKsign((((x2403*x2406))+(((-1.0)*x2407))+(((-1.0)*x2406))+((x2408*x2412))+(((-1.0)*x2414))+(((-1.0)*x2405*x2411))+(((-1.0)*x2404*x2406*x2411))+((x2404*x2407))+(((-1.0)*x2410*x2413))+(((-1.0)*x2409*x2410))+((x2403*x2414))+(((-1.0)*x2404*x2408*x2412)))),-1);
if(!x2416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2415.value)+(((1.5707963267949)*(x2416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2417=IKsin(j4);
IkReal x2418=IKcos(j4);
IkReal x2419=(cj5*cj6);
IkReal x2420=(r11*sj6);
IkReal x2421=(cj6*r20);
IkReal x2422=(cj6*r10);
IkReal x2423=(cj5*sj6);
IkReal x2424=(r21*sj6);
IkReal x2425=(cj6*r00);
IkReal x2426=(r01*sj6);
IkReal x2427=((1.0)*x2418);
IkReal x2428=((1.0)*x2417);
IkReal x2429=(sj5*x2428);
evalcond[0]=(((x2418*x2421))+(((-1.0)*r20*x2423*x2428))+(((-1.0)*x2424*x2427))+(((-1.0)*r22*x2429))+(((-1.0)*r21*x2419*x2428)));
evalcond[1]=(((x2418*x2425))+(((-1.0)*r02*x2429))+(((-1.0)*r00*x2423*x2428))+(((-1.0)*x2426*x2427))+(((-1.0)*r01*x2419*x2428)));
evalcond[2]=(((x2417*x2424))+(((-1.0)*r20*x2423*x2427))+(((-1.0)*x2421*x2428))+(((-1.0)*r22*sj5*x2427))+(((-1.0)*r21*x2419*x2427)));
evalcond[3]=((((-1.0)*r11*x2419*x2427))+((x2417*x2420))+(((-1.0)*r12*sj5*x2427))+(((-1.0)*x2422*x2428))+(((-1.0)*r10*x2423*x2427)));
evalcond[4]=((1.0)+((x2418*x2422))+(((-1.0)*r11*x2419*x2428))+(((-1.0)*r10*x2423*x2428))+(((-1.0)*x2420*x2427))+(((-1.0)*r12*x2429)));
evalcond[5]=((-1.0)+((x2417*x2426))+(((-1.0)*r02*sj5*x2427))+(((-1.0)*x2425*x2428))+(((-1.0)*r00*x2423*x2427))+(((-1.0)*r01*x2419*x2427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2430=((1.0)*sj5);
CheckValue<IkReal> x2431 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x2431.valid){
continue;
}
CheckValue<IkReal> x2432=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r21*x2430))+((cj5*r22))+(((-1.0)*r20*sj6*x2430)))),-1);
if(!x2432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2431.value)+(((1.5707963267949)*(x2432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2433=IKsin(j4);
IkReal x2434=IKcos(j4);
IkReal x2435=(cj5*cj6);
IkReal x2436=(r11*sj6);
IkReal x2437=(cj6*r20);
IkReal x2438=(cj6*r10);
IkReal x2439=(cj5*sj6);
IkReal x2440=(r21*sj6);
IkReal x2441=(cj6*r00);
IkReal x2442=(r01*sj6);
IkReal x2443=((1.0)*x2434);
IkReal x2444=((1.0)*x2433);
IkReal x2445=(sj5*x2444);
evalcond[0]=((((-1.0)*r21*x2435*x2444))+(((-1.0)*r22*x2445))+(((-1.0)*x2440*x2443))+((x2434*x2437))+(((-1.0)*r20*x2439*x2444)));
evalcond[1]=((((-1.0)*r00*x2439*x2444))+((x2434*x2441))+(((-1.0)*x2442*x2443))+(((-1.0)*r01*x2435*x2444))+(((-1.0)*r02*x2445)));
evalcond[2]=(((x2433*x2440))+(((-1.0)*x2437*x2444))+(((-1.0)*r21*x2435*x2443))+(((-1.0)*r22*sj5*x2443))+(((-1.0)*r20*x2439*x2443)));
evalcond[3]=((((-1.0)*r12*sj5*x2443))+((x2433*x2436))+(((-1.0)*r10*x2439*x2443))+(((-1.0)*x2438*x2444))+(((-1.0)*r11*x2435*x2443)));
evalcond[4]=((1.0)+(((-1.0)*x2436*x2443))+(((-1.0)*r12*x2445))+(((-1.0)*r10*x2439*x2444))+((x2434*x2438))+(((-1.0)*r11*x2435*x2444)));
evalcond[5]=((-1.0)+((x2433*x2442))+(((-1.0)*r00*x2439*x2443))+(((-1.0)*r02*sj5*x2443))+(((-1.0)*x2441*x2444))+(((-1.0)*r01*x2435*x2443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2446 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2446.valid){
continue;
}
CheckValue<IkReal> x2447=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x2447.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2446.value)+(((1.5707963267949)*(x2447.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2448=IKsin(j4);
IkReal x2449=IKcos(j4);
IkReal x2450=(cj5*cj6);
IkReal x2451=(r11*sj6);
IkReal x2452=(cj6*r20);
IkReal x2453=(cj6*r10);
IkReal x2454=(cj5*sj6);
IkReal x2455=(r21*sj6);
IkReal x2456=(cj6*r00);
IkReal x2457=(r01*sj6);
IkReal x2458=((1.0)*x2449);
IkReal x2459=((1.0)*x2448);
IkReal x2460=(sj5*x2459);
evalcond[0]=((((-1.0)*r22*x2460))+(((-1.0)*r21*x2450*x2459))+(((-1.0)*r20*x2454*x2459))+((x2449*x2452))+(((-1.0)*x2455*x2458)));
evalcond[1]=((((-1.0)*r00*x2454*x2459))+((x2449*x2456))+(((-1.0)*x2457*x2458))+(((-1.0)*r01*x2450*x2459))+(((-1.0)*r02*x2460)));
evalcond[2]=((((-1.0)*r21*x2450*x2458))+(((-1.0)*x2452*x2459))+(((-1.0)*r20*x2454*x2458))+(((-1.0)*r22*sj5*x2458))+((x2448*x2455)));
evalcond[3]=((((-1.0)*x2453*x2459))+(((-1.0)*r12*sj5*x2458))+(((-1.0)*r10*x2454*x2458))+(((-1.0)*r11*x2450*x2458))+((x2448*x2451)));
evalcond[4]=((1.0)+(((-1.0)*r10*x2454*x2459))+(((-1.0)*r12*x2460))+(((-1.0)*x2451*x2458))+((x2449*x2453))+(((-1.0)*r11*x2450*x2459)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x2454*x2458))+(((-1.0)*r02*sj5*x2458))+(((-1.0)*x2456*x2459))+((x2448*x2457))+(((-1.0)*r01*x2450*x2458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2461=((1.0)*cj5);
IkReal x2462=((0.01)*cj5);
IkReal x2463=(cj6*r11);
IkReal x2464=(r20*sj6);
IkReal x2465=((0.01)*sj5);
IkReal x2466=(cj6*r01);
IkReal x2467=((0.37429)*cj5);
IkReal x2468=((0.37429)*sj5);
IkReal x2469=(cj6*r21);
IkReal x2470=(r10*sj5*sj6);
IkReal x2471=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x2464*x2468))+(((-1.0)*x2468*x2469))+((x2462*x2464))+((x2462*x2469))+(((-1.0)*pz))+((r22*x2465))+((r22*x2467)));
evalcond[2]=((-0.43342)+(((-1.0)*x2466*x2468))+((x2462*x2466))+(((-1.0)*px))+((r00*sj6*x2462))+((r02*x2467))+((r02*x2465))+(((-1.0)*r00*sj6*x2468)));
evalcond[3]=((((-1.0)*r10*sj6*x2468))+((r12*x2465))+((r12*x2467))+((x2462*x2463))+(((-1.0)*x2463*x2468))+(((-1.0)*py))+((r10*sj6*x2462)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x2461))+((sj5*x2469))+((sj5*x2464)));
evalcond[5]=(x2470+(((-1.0)*r12*x2461))+((sj5*x2463)));
evalcond[6]=(x2471+((sj5*x2466))+(((-1.0)*r02*x2461)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2472=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x2472;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x2472);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2473=((1.0)*sj6);
IkReal x2474=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x2473))+((cj5*r02)));
j4eval[0]=x2474;
j4eval[1]=IKsign(x2474);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x2473))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2475=cj6*cj6;
IkReal x2476=r01*r01;
IkReal x2477=cj5*cj5;
IkReal x2478=r00*r00;
IkReal x2479=r02*r02;
IkReal x2480=(cj6*r00);
IkReal x2481=(r02*sj5);
IkReal x2482=(cj5*cj6*r01);
IkReal x2483=((2.0)*r01*sj6);
IkReal x2484=(cj5*r00*sj6);
IkReal x2485=((1.0)*x2477);
IkReal x2486=(x2475*x2478);
IkReal x2487=(x2475*x2476);
IkReal x2488=(x2486+x2476+x2479+(((-1.0)*x2487))+((x2477*x2487))+(((-1.0)*x2485*x2486))+(((2.0)*x2481*x2482))+(((2.0)*x2481*x2484))+(((-1.0)*x2480*x2483))+((x2477*x2478))+((x2477*x2480*x2483))+(((-1.0)*x2479*x2485)));
j4eval[0]=x2488;
j4eval[1]=((IKabs((x2484+x2482+x2481)))+(IKabs((x2480+(((-1.0)*r01*sj6))))));
j4eval[2]=IKsign(x2488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2489=cj6*cj6;
IkReal x2490=r01*r01;
IkReal x2491=cj5*cj5;
IkReal x2492=r00*r00;
IkReal x2493=r02*r02;
IkReal x2494=(cj6*r00);
IkReal x2495=((2.0)*r01);
IkReal x2496=(cj5*cj6);
IkReal x2497=(r02*sj5);
IkReal x2498=(cj5*r00*sj6);
IkReal x2499=(x2491*x2492);
IkReal x2500=(x2489*x2490);
CheckValue<IkReal> x2501=IKPowWithIntegerCheck(IKsign((x2499+x2490+x2493+((sj6*x2491*x2494*x2495))+(((2.0)*x2497*x2498))+((x2495*x2496*x2497))+(((-1.0)*x2491*x2493))+(((-1.0)*x2500))+((x2491*x2500))+(((-1.0)*x2489*x2499))+((x2489*x2492))+(((-1.0)*sj6*x2494*x2495)))),-1);
if(!x2501.valid){
continue;
}
CheckValue<IkReal> x2502 = IKatan2WithCheck(IkReal((x2494+(((-1.0)*r01*sj6)))),(x2498+x2497+((r01*x2496))),IKFAST_ATAN2_MAGTHRESH);
if(!x2502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2501.value)))+(x2502.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2503=IKsin(j4);
IkReal x2504=IKcos(j4);
IkReal x2505=(cj5*cj6);
IkReal x2506=(r11*sj6);
IkReal x2507=(cj6*r20);
IkReal x2508=(cj6*r10);
IkReal x2509=(cj5*sj6);
IkReal x2510=(r21*sj6);
IkReal x2511=(cj6*r00);
IkReal x2512=(r01*sj6);
IkReal x2513=((1.0)*x2504);
IkReal x2514=((1.0)*x2503);
IkReal x2515=(sj5*x2514);
evalcond[0]=((((-1.0)*r20*x2509*x2514))+((x2504*x2507))+(((-1.0)*x2510*x2513))+(((-1.0)*r22*x2515))+(((-1.0)*r21*x2505*x2514)));
evalcond[1]=((((-1.0)*r00*x2509*x2514))+((x2504*x2511))+(((-1.0)*r01*x2505*x2514))+(((-1.0)*x2512*x2513))+(((-1.0)*r02*x2515)));
evalcond[2]=((((-1.0)*r20*x2509*x2513))+(((-1.0)*r22*sj5*x2513))+(((-1.0)*r21*x2505*x2513))+((x2503*x2510))+(((-1.0)*x2507*x2514)));
evalcond[3]=((((-1.0)*x2508*x2514))+(((-1.0)*r12*sj5*x2513))+(((-1.0)*r11*x2505*x2513))+(((-1.0)*r10*x2509*x2513))+((x2503*x2506)));
evalcond[4]=((-1.0)+((x2504*x2508))+(((-1.0)*x2506*x2513))+(((-1.0)*r12*x2515))+(((-1.0)*r11*x2505*x2514))+(((-1.0)*r10*x2509*x2514)));
evalcond[5]=((1.0)+(((-1.0)*r00*x2509*x2513))+(((-1.0)*r01*x2505*x2513))+(((-1.0)*r02*sj5*x2513))+(((-1.0)*x2511*x2514))+((x2503*x2512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2516=((1.0)*sj6);
CheckValue<IkReal> x2517 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x2516)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2517.valid){
continue;
}
CheckValue<IkReal> x2518=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x2516))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x2518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2517.value)+(((1.5707963267949)*(x2518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2519=IKsin(j4);
IkReal x2520=IKcos(j4);
IkReal x2521=(cj5*cj6);
IkReal x2522=(r11*sj6);
IkReal x2523=(cj6*r20);
IkReal x2524=(cj6*r10);
IkReal x2525=(cj5*sj6);
IkReal x2526=(r21*sj6);
IkReal x2527=(cj6*r00);
IkReal x2528=(r01*sj6);
IkReal x2529=((1.0)*x2520);
IkReal x2530=((1.0)*x2519);
IkReal x2531=(sj5*x2530);
evalcond[0]=((((-1.0)*r21*x2521*x2530))+(((-1.0)*r22*x2531))+((x2520*x2523))+(((-1.0)*r20*x2525*x2530))+(((-1.0)*x2526*x2529)));
evalcond[1]=((((-1.0)*r01*x2521*x2530))+(((-1.0)*r00*x2525*x2530))+(((-1.0)*r02*x2531))+(((-1.0)*x2528*x2529))+((x2520*x2527)));
evalcond[2]=((((-1.0)*r20*x2525*x2529))+((x2519*x2526))+(((-1.0)*r21*x2521*x2529))+(((-1.0)*x2523*x2530))+(((-1.0)*r22*sj5*x2529)));
evalcond[3]=(((x2519*x2522))+(((-1.0)*x2524*x2530))+(((-1.0)*r10*x2525*x2529))+(((-1.0)*r11*x2521*x2529))+(((-1.0)*r12*sj5*x2529)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x2525*x2530))+(((-1.0)*x2522*x2529))+(((-1.0)*r11*x2521*x2530))+(((-1.0)*r12*x2531))+((x2520*x2524)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x2529))+((x2519*x2528))+(((-1.0)*x2527*x2530))+(((-1.0)*r01*x2521*x2529))+(((-1.0)*r00*x2525*x2529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2532=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2532.valid){
continue;
}
CheckValue<IkReal> x2533 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x2533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2532.value)))+(x2533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2534=IKsin(j4);
IkReal x2535=IKcos(j4);
IkReal x2536=(cj5*cj6);
IkReal x2537=(r11*sj6);
IkReal x2538=(cj6*r20);
IkReal x2539=(cj6*r10);
IkReal x2540=(cj5*sj6);
IkReal x2541=(r21*sj6);
IkReal x2542=(cj6*r00);
IkReal x2543=(r01*sj6);
IkReal x2544=((1.0)*x2535);
IkReal x2545=((1.0)*x2534);
IkReal x2546=(sj5*x2545);
evalcond[0]=((((-1.0)*x2541*x2544))+(((-1.0)*r21*x2536*x2545))+(((-1.0)*r22*x2546))+(((-1.0)*r20*x2540*x2545))+((x2535*x2538)));
evalcond[1]=((((-1.0)*x2543*x2544))+(((-1.0)*r00*x2540*x2545))+((x2535*x2542))+(((-1.0)*r02*x2546))+(((-1.0)*r01*x2536*x2545)));
evalcond[2]=((((-1.0)*r22*sj5*x2544))+((x2534*x2541))+(((-1.0)*x2538*x2545))+(((-1.0)*r21*x2536*x2544))+(((-1.0)*r20*x2540*x2544)));
evalcond[3]=((((-1.0)*r12*sj5*x2544))+(((-1.0)*r10*x2540*x2544))+(((-1.0)*x2539*x2545))+(((-1.0)*r11*x2536*x2544))+((x2534*x2537)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x2546))+(((-1.0)*r10*x2540*x2545))+(((-1.0)*r11*x2536*x2545))+(((-1.0)*x2537*x2544))+((x2535*x2539)));
evalcond[5]=((1.0)+(((-1.0)*x2542*x2545))+(((-1.0)*r00*x2540*x2544))+((x2534*x2543))+(((-1.0)*r02*sj5*x2544))+(((-1.0)*r01*x2536*x2544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2547=cj6*cj6;
IkReal x2548=cj5*cj5;
IkReal x2549=(r22*sj5);
IkReal x2550=(cj0*r20);
IkReal x2551=((1.0)*r21);
IkReal x2552=(cj5*sj6);
IkReal x2553=(r02*r22);
IkReal x2554=(cj5*cj6);
IkReal x2555=(r02*sj5);
IkReal x2556=(cj6*sj6);
IkReal x2557=((1.0)*r20);
IkReal x2558=(r01*x2551);
IkReal x2559=(r00*r20*x2548);
CheckValue<IkReal> x2560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x2549*x2552))+((x2547*x2559))+(((-1.0)*r00*x2548*x2557))+(((-1.0)*r01*x2548*x2556*x2557))+((r01*r20*x2556))+((r01*r21*x2547))+(((-1.0)*x2553))+(((-1.0)*r01*x2549*x2554))+(((-1.0)*x2552*x2555*x2557))+(((-1.0)*r00*x2548*x2551*x2556))+((x2548*x2553))+(((-1.0)*x2551*x2554*x2555))+(((-1.0)*x2558))+((r00*r21*x2556))+(((-1.0)*r00*x2547*x2557))+(((-1.0)*x2547*x2548*x2558)))),-1);
if(!x2560.valid){
continue;
}
CheckValue<IkReal> x2561 = IKatan2WithCheck(IkReal((((cj6*x2550))+(((-1.0)*cj0*sj6*x2551)))),(((x2550*x2552))+((cj0*r21*x2554))+((cj0*x2549))),IKFAST_ATAN2_MAGTHRESH);
if(!x2561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2560.value)))+(x2561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2562=IKsin(j4);
IkReal x2563=IKcos(j4);
IkReal x2564=((1.0)*sj0);
IkReal x2565=((1.0)*cj6);
IkReal x2566=((1.0)*sj6);
IkReal x2567=(cj5*x2563);
IkReal x2568=(r20*x2562);
IkReal x2569=(cj6*x2563);
IkReal x2570=(r11*x2562);
IkReal x2571=(r21*x2562);
IkReal x2572=(r01*x2562);
IkReal x2573=((1.0)*sj5*x2562);
IkReal x2574=((1.0)*sj5*x2563);
IkReal x2575=(cj5*x2562*x2566);
evalcond[0]=((((-1.0)*r21*x2563*x2566))+((r20*x2569))+(((-1.0)*cj5*x2566*x2568))+(((-1.0)*r22*x2573))+(((-1.0)*cj5*x2565*x2571)));
evalcond[1]=(((sj6*x2571))+(((-1.0)*x2565*x2568))+(((-1.0)*r21*x2565*x2567))+(((-1.0)*r20*x2566*x2567))+(((-1.0)*r22*x2574)));
evalcond[2]=((((-1.0)*r10*x2575))+(((-1.0)*r12*x2573))+cj0+(((-1.0)*r11*x2563*x2566))+((r10*x2569))+(((-1.0)*cj5*x2565*x2570)));
evalcond[3]=(((r00*x2569))+(((-1.0)*r01*x2563*x2566))+(((-1.0)*x2564))+(((-1.0)*r02*x2573))+(((-1.0)*r00*x2575))+(((-1.0)*cj5*x2565*x2572)));
evalcond[4]=((((-1.0)*r00*x2566*x2567))+(((-1.0)*r01*x2565*x2567))+((sj6*x2572))+(((-1.0)*r02*x2574))+(((-1.0)*cj0))+(((-1.0)*r00*x2562*x2565)));
evalcond[5]=((((-1.0)*r12*x2574))+((sj6*x2570))+(((-1.0)*r10*x2562*x2565))+(((-1.0)*x2564))+(((-1.0)*r11*x2565*x2567))+(((-1.0)*r10*x2566*x2567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2576=(cj5*sj0);
CheckValue<IkReal> x2577=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x2577.valid){
continue;
}
CheckValue<IkReal> x2578 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r20*sj6*x2576))+((r22*sj0*sj5))+((cj6*r21*x2576))),IKFAST_ATAN2_MAGTHRESH);
if(!x2578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2577.value)))+(x2578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2579=IKsin(j4);
IkReal x2580=IKcos(j4);
IkReal x2581=((1.0)*sj0);
IkReal x2582=((1.0)*cj6);
IkReal x2583=((1.0)*sj6);
IkReal x2584=(cj5*x2580);
IkReal x2585=(r20*x2579);
IkReal x2586=(cj6*x2580);
IkReal x2587=(r11*x2579);
IkReal x2588=(r21*x2579);
IkReal x2589=(r01*x2579);
IkReal x2590=((1.0)*sj5*x2579);
IkReal x2591=((1.0)*sj5*x2580);
IkReal x2592=(cj5*x2579*x2583);
evalcond[0]=((((-1.0)*r22*x2590))+(((-1.0)*r21*x2580*x2583))+((r20*x2586))+(((-1.0)*cj5*x2582*x2588))+(((-1.0)*cj5*x2583*x2585)));
evalcond[1]=((((-1.0)*r21*x2582*x2584))+(((-1.0)*r22*x2591))+(((-1.0)*r20*x2583*x2584))+((sj6*x2588))+(((-1.0)*x2582*x2585)));
evalcond[2]=(cj0+(((-1.0)*r11*x2580*x2583))+((r10*x2586))+(((-1.0)*cj5*x2582*x2587))+(((-1.0)*r12*x2590))+(((-1.0)*r10*x2592)));
evalcond[3]=((((-1.0)*r00*x2592))+((r00*x2586))+(((-1.0)*r02*x2590))+(((-1.0)*x2581))+(((-1.0)*cj5*x2582*x2589))+(((-1.0)*r01*x2580*x2583)));
evalcond[4]=((((-1.0)*r00*x2579*x2582))+(((-1.0)*r02*x2591))+(((-1.0)*r01*x2582*x2584))+(((-1.0)*r00*x2583*x2584))+((sj6*x2589))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x2582*x2584))+(((-1.0)*x2581))+(((-1.0)*r10*x2583*x2584))+(((-1.0)*r10*x2579*x2582))+((sj6*x2587))+(((-1.0)*r12*x2591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2593=(cj0*sj6);
IkReal x2594=(cj0*cj6);
CheckValue<IkReal> x2595 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2593))+((r20*x2594)))),(((cj5*r20*x2593))+((cj5*r21*x2594))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2595.valid){
continue;
}
CheckValue<IkReal> x2596=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x2596.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2595.value)+(((1.5707963267949)*(x2596.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2597=IKsin(j4);
IkReal x2598=IKcos(j4);
IkReal x2599=((1.0)*sj0);
IkReal x2600=((1.0)*cj6);
IkReal x2601=((1.0)*sj6);
IkReal x2602=(cj5*x2598);
IkReal x2603=(r20*x2597);
IkReal x2604=(cj6*x2598);
IkReal x2605=(r11*x2597);
IkReal x2606=(r21*x2597);
IkReal x2607=(r01*x2597);
IkReal x2608=((1.0)*sj5*x2597);
IkReal x2609=((1.0)*sj5*x2598);
IkReal x2610=(cj5*x2597*x2601);
evalcond[0]=((((-1.0)*cj5*x2601*x2603))+(((-1.0)*cj5*x2600*x2606))+((r20*x2604))+(((-1.0)*r22*x2608))+(((-1.0)*r21*x2598*x2601)));
evalcond[1]=((((-1.0)*r21*x2600*x2602))+(((-1.0)*x2600*x2603))+((sj6*x2606))+(((-1.0)*r22*x2609))+(((-1.0)*r20*x2601*x2602)));
evalcond[2]=((((-1.0)*cj5*x2600*x2605))+cj0+(((-1.0)*r12*x2608))+(((-1.0)*r11*x2598*x2601))+((r10*x2604))+(((-1.0)*r10*x2610)));
evalcond[3]=((((-1.0)*r00*x2610))+(((-1.0)*cj5*x2600*x2607))+(((-1.0)*x2599))+(((-1.0)*r02*x2608))+(((-1.0)*r01*x2598*x2601))+((r00*x2604)));
evalcond[4]=((((-1.0)*r01*x2600*x2602))+(((-1.0)*r02*x2609))+((sj6*x2607))+(((-1.0)*r00*x2601*x2602))+(((-1.0)*r00*x2597*x2600))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r10*x2601*x2602))+(((-1.0)*r11*x2600*x2602))+(((-1.0)*x2599))+(((-1.0)*r12*x2609))+((sj6*x2605))+(((-1.0)*r10*x2597*x2600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2611=(cj6*sj5);
IkReal x2612=(sj5*sj6);
IkReal x2613=((0.01)*cj5);
IkReal x2614=(cj5*r22);
IkReal x2615=((1.0)*cj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.069)+((cj6*r21*x2613))+(((-0.37429)*r21*x2611))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-0.37429)*r20*x2612))+((r20*sj6*x2613))+(((0.37429)*x2614)));
evalcond[2]=((1.0)+((r20*x2612))+(((-1.0)*x2614))+((r21*x2611)));
evalcond[3]=((((-1.0)*r12*x2615))+((r11*x2611))+((r10*x2612)));
evalcond[4]=(((r00*x2612))+((r01*x2611))+(((-1.0)*r02*x2615)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2616=(r10*sj6);
IkReal x2617=((0.863573439158322)*sj5);
IkReal x2618=((0.0230723086152)*cj5);
IkReal x2619=(cj6*r11);
IkReal x2620=(r00*sj6);
IkReal x2621=((0.0230723086152)*sj5);
IkReal x2622=((0.863573439158322)*cj5);
IkReal x2623=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+(((-1.0)*x2618*x2619))+(((-1.0)*r12*x2622))+(((-1.0)*r12*x2621))+((x2617*x2619))+((x2616*x2617))+(((-1.0)*x2616*x2618)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+(((-1.0)*x2618*x2623))+(((-1.0)*x2618*x2620))+((x2617*x2623))+((x2617*x2620))+(((-1.0)*r02*x2621))+(((-1.0)*r02*x2622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+(((-1.0)*x2618*x2619))+(((-1.0)*r12*x2622))+(((-1.0)*r12*x2621))+((x2617*x2619))+((x2616*x2617))+(((-1.0)*x2616*x2618))))+IKsqr(((((2.30723086152)*px))+(((-1.0)*x2618*x2623))+(((-1.0)*x2618*x2620))+((x2617*x2623))+((x2617*x2620))+(((-1.0)*r02*x2621))+(((-1.0)*r02*x2622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+(((-1.0)*x2618*x2619))+(((-1.0)*r12*x2622))+(((-1.0)*r12*x2621))+((x2617*x2619))+((x2616*x2617))+(((-1.0)*x2616*x2618))), ((((2.30723086152)*px))+(((-1.0)*x2618*x2623))+(((-1.0)*x2618*x2620))+((x2617*x2623))+((x2617*x2620))+(((-1.0)*r02*x2621))+(((-1.0)*r02*x2622))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x2624=((0.01)*cj5);
IkReal x2625=(cj6*r01);
IkReal x2626=((0.37429)*sj5);
IkReal x2627=(cj6*r11);
IkReal x2628=((0.01)*sj5);
IkReal x2629=(r00*sj6);
IkReal x2630=((0.37429)*cj5);
IkReal x2631=(r10*sj6);
evalcond[0]=(((x2624*x2629))+((x2624*x2625))+(((-1.0)*x2625*x2626))+(((-1.0)*x2626*x2629))+(((-1.0)*px))+((r02*x2628))+(((0.43342)*(IKcos(j0))))+((r02*x2630)));
evalcond[1]=(((x2624*x2627))+(((0.43342)*(IKsin(j0))))+((r12*x2630))+((x2624*x2631))+(((-1.0)*x2626*x2627))+(((-1.0)*py))+((r12*x2628))+(((-1.0)*x2626*x2631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2632=(r20*sj0);
IkReal x2633=((1.0)*sj5);
IkReal x2634=(r21*sj0);
IkReal x2635=(((cj5*r12))+(((-1.0)*r10*sj6*x2633))+(((-1.0)*cj6*r11*x2633)));
j4eval[0]=x2635;
j4eval[1]=IKsign(x2635);
j4eval[2]=((IKabs((((r22*sj0*sj5))+((cj5*sj6*x2632))+((cj5*cj6*x2634)))))+(IKabs(((((-1.0)*sj6*x2634))+((cj6*x2632))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2636=(cj0*sj6);
IkReal x2637=((1.0)*sj5);
IkReal x2638=(cj0*cj6);
IkReal x2639=((((-1.0)*r00*sj6*x2637))+(((-1.0)*cj6*r01*x2637))+((cj5*r02)));
j4eval[0]=x2639;
j4eval[1]=IKsign(x2639);
j4eval[2]=((IKabs(((((-1.0)*r21*x2636))+((r20*x2638)))))+(IKabs((((cj5*r20*x2636))+((cj5*r21*x2638))+((cj0*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x2640=cj6*cj6;
IkReal x2641=cj5*cj5;
IkReal x2642=(r02*r22);
IkReal x2643=(r22*sj5);
IkReal x2644=(r00*r20);
IkReal x2645=((1.0)*r21);
IkReal x2646=(r20*sj6);
IkReal x2647=(cj6*r01);
IkReal x2648=(cj0*cj5);
IkReal x2649=(r00*sj6);
IkReal x2650=((1.0)*cj5);
IkReal x2651=(cj6*r21);
IkReal x2652=(cj5*r02*sj5);
IkReal x2653=((1.0)*x2641);
IkReal x2654=(x2640*x2641);
IkReal x2655=((((-1.0)*r01*x2645*x2654))+((x2649*x2651))+(((-1.0)*x2646*x2647*x2653))+(((-1.0)*x2640*x2644))+(((-1.0)*x2644*x2653))+(((-1.0)*x2643*x2649*x2650))+(((-1.0)*r01*x2645))+(((-1.0)*r02*sj5*x2646*x2650))+((x2644*x2654))+(((-1.0)*cj6*x2641*x2645*x2649))+((x2646*x2647))+(((-1.0)*x2643*x2647*x2650))+((r01*r21*x2640))+(((-1.0)*x2642))+(((-1.0)*cj6*x2645*x2652))+((x2641*x2642)));
j4eval[0]=x2655;
j4eval[1]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x2645)))))+(IKabs((((x2648*x2651))+((cj0*x2643))+((x2646*x2648))))));
j4eval[2]=IKsign(x2655);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x2656=((1.0)*cj5);
IkReal x2657=((0.01)*cj5);
IkReal x2658=(cj6*r11);
IkReal x2659=(r20*sj6);
IkReal x2660=((0.01)*sj5);
IkReal x2661=(cj6*r01);
IkReal x2662=((0.37429)*cj5);
IkReal x2663=((0.37429)*sj5);
IkReal x2664=(cj6*r21);
IkReal x2665=(r10*sj5*sj6);
IkReal x2666=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((x2657*x2664))+((x2657*x2659))+((r22*x2662))+((r22*x2660))+(((-1.0)*x2663*x2664))+(((-1.0)*pz))+(((-1.0)*x2659*x2663)));
evalcond[2]=(((x2657*x2661))+((r02*x2660))+((r02*x2662))+((r00*sj6*x2657))+(((-1.0)*px))+(((-1.0)*r00*sj6*x2663))+(((-1.0)*x2661*x2663)));
evalcond[3]=((0.43342)+((r10*sj6*x2657))+((r12*x2662))+((r12*x2660))+((x2657*x2658))+(((-1.0)*py))+(((-1.0)*r10*sj6*x2663))+(((-1.0)*x2658*x2663)));
evalcond[4]=((1.0)+(((-1.0)*r22*x2656))+((sj5*x2659))+((sj5*x2664)));
evalcond[5]=((((-1.0)*r12*x2656))+((sj5*x2658))+x2665);
evalcond[6]=((((-1.0)*r02*x2656))+((sj5*x2661))+x2666);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2667=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x2667;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2667);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2668=((1.0)*sj6);
IkReal x2669=(((cj5*r12))+(((-1.0)*r10*sj5*x2668))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x2669;
j4eval[1]=IKsign(x2669);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x2668))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2670=cj6*cj6;
IkReal x2671=cj5*cj5;
IkReal x2672=r10*r10;
IkReal x2673=r11*r11;
IkReal x2674=r12*r12;
IkReal x2675=(r10*sj6);
IkReal x2676=(r12*sj5);
IkReal x2677=((2.0)*cj6*r11);
IkReal x2678=((1.0)*x2672);
IkReal x2679=(x2670*x2673);
IkReal x2680=((((-1.0)*x2674))+(((-1.0)*x2673))+((x2670*x2671*x2672))+(((-1.0)*x2671*x2675*x2677))+(((-1.0)*x2670*x2678))+(((-1.0)*x2671*x2679))+(((-1.0)*x2671*x2678))+((x2675*x2677))+((x2671*x2674))+(((-2.0)*cj5*x2675*x2676))+(((-1.0)*cj5*x2676*x2677))+x2679);
j4eval[0]=x2680;
j4eval[1]=((IKabs((((cj5*x2675))+((cj5*cj6*r11))+x2676)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x2680);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2681=cj6*cj6;
IkReal x2682=cj5*cj5;
IkReal x2683=r10*r10;
IkReal x2684=r11*r11;
IkReal x2685=r12*r12;
IkReal x2686=(r10*sj6);
IkReal x2687=(r12*sj5);
IkReal x2688=((2.0)*cj6*r11);
IkReal x2689=(x2681*x2684);
IkReal x2690=(x2682*x2683);
CheckValue<IkReal> x2691=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2682*x2689))+(((-1.0)*cj5*x2687*x2688))+(((-2.0)*cj5*x2686*x2687))+((x2681*x2690))+(((-1.0)*x2685))+(((-1.0)*x2684))+((x2686*x2688))+((x2682*x2685))+(((-1.0)*x2681*x2683))+(((-1.0)*x2690))+(((-1.0)*x2682*x2686*x2688))+x2689)),-1);
if(!x2691.valid){
continue;
}
CheckValue<IkReal> x2692 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x2686))+((cj5*cj6*r11))+x2687),IKFAST_ATAN2_MAGTHRESH);
if(!x2692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2691.value)))+(x2692.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2693=IKsin(j4);
IkReal x2694=IKcos(j4);
IkReal x2695=(cj5*cj6);
IkReal x2696=(r11*sj6);
IkReal x2697=(cj6*r20);
IkReal x2698=(cj6*r10);
IkReal x2699=(cj5*sj6);
IkReal x2700=(r01*sj6);
IkReal x2701=(r21*sj6);
IkReal x2702=(cj6*r00);
IkReal x2703=((1.0)*x2694);
IkReal x2704=((1.0)*x2693);
IkReal x2705=(sj5*x2704);
evalcond[0]=((((-1.0)*r22*x2705))+(((-1.0)*r20*x2699*x2704))+(((-1.0)*r21*x2695*x2704))+((x2694*x2697))+(((-1.0)*x2701*x2703)));
evalcond[1]=((((-1.0)*r12*x2705))+(((-1.0)*r10*x2699*x2704))+(((-1.0)*r11*x2695*x2704))+(((-1.0)*x2696*x2703))+((x2694*x2698)));
evalcond[2]=(((x2693*x2701))+(((-1.0)*x2697*x2704))+(((-1.0)*r20*x2699*x2703))+(((-1.0)*r21*x2695*x2703))+(((-1.0)*r22*sj5*x2703)));
evalcond[3]=((((-1.0)*x2702*x2704))+((x2693*x2700))+(((-1.0)*r01*x2695*x2703))+(((-1.0)*r02*sj5*x2703))+(((-1.0)*r00*x2699*x2703)));
evalcond[4]=((1.0)+((x2694*x2702))+(((-1.0)*r02*x2705))+(((-1.0)*r01*x2695*x2704))+(((-1.0)*x2700*x2703))+(((-1.0)*r00*x2699*x2704)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x2699*x2703))+((x2693*x2696))+(((-1.0)*r11*x2695*x2703))+(((-1.0)*r12*sj5*x2703))+(((-1.0)*x2698*x2704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2706=((1.0)*sj6);
CheckValue<IkReal> x2707 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x2706))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2707.valid){
continue;
}
CheckValue<IkReal> x2708=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x2706)))),-1);
if(!x2708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2707.value)+(((1.5707963267949)*(x2708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2709=IKsin(j4);
IkReal x2710=IKcos(j4);
IkReal x2711=(cj5*cj6);
IkReal x2712=(r11*sj6);
IkReal x2713=(cj6*r20);
IkReal x2714=(cj6*r10);
IkReal x2715=(cj5*sj6);
IkReal x2716=(r01*sj6);
IkReal x2717=(r21*sj6);
IkReal x2718=(cj6*r00);
IkReal x2719=((1.0)*x2710);
IkReal x2720=((1.0)*x2709);
IkReal x2721=(sj5*x2720);
evalcond[0]=((((-1.0)*r21*x2711*x2720))+(((-1.0)*r20*x2715*x2720))+((x2710*x2713))+(((-1.0)*r22*x2721))+(((-1.0)*x2717*x2719)));
evalcond[1]=((((-1.0)*x2712*x2719))+((x2710*x2714))+(((-1.0)*r12*x2721))+(((-1.0)*r10*x2715*x2720))+(((-1.0)*r11*x2711*x2720)));
evalcond[2]=((((-1.0)*r20*x2715*x2719))+(((-1.0)*r21*x2711*x2719))+((x2709*x2717))+(((-1.0)*x2713*x2720))+(((-1.0)*r22*sj5*x2719)));
evalcond[3]=((((-1.0)*x2718*x2720))+((x2709*x2716))+(((-1.0)*r01*x2711*x2719))+(((-1.0)*r00*x2715*x2719))+(((-1.0)*r02*sj5*x2719)));
evalcond[4]=((1.0)+(((-1.0)*r01*x2711*x2720))+(((-1.0)*r00*x2715*x2720))+((x2710*x2718))+(((-1.0)*x2716*x2719))+(((-1.0)*r02*x2721)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x2715*x2719))+(((-1.0)*r11*x2711*x2719))+((x2709*x2712))+(((-1.0)*r12*sj5*x2719))+(((-1.0)*x2714*x2720)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2722=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2722.valid){
continue;
}
CheckValue<IkReal> x2723 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2722.value)))+(x2723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2724=IKsin(j4);
IkReal x2725=IKcos(j4);
IkReal x2726=(cj5*cj6);
IkReal x2727=(r11*sj6);
IkReal x2728=(cj6*r20);
IkReal x2729=(cj6*r10);
IkReal x2730=(cj5*sj6);
IkReal x2731=(r01*sj6);
IkReal x2732=(r21*sj6);
IkReal x2733=(cj6*r00);
IkReal x2734=((1.0)*x2725);
IkReal x2735=((1.0)*x2724);
IkReal x2736=(sj5*x2735);
evalcond[0]=((((-1.0)*r20*x2730*x2735))+((x2725*x2728))+(((-1.0)*r21*x2726*x2735))+(((-1.0)*r22*x2736))+(((-1.0)*x2732*x2734)));
evalcond[1]=((((-1.0)*r10*x2730*x2735))+(((-1.0)*x2727*x2734))+((x2725*x2729))+(((-1.0)*r11*x2726*x2735))+(((-1.0)*r12*x2736)));
evalcond[2]=((((-1.0)*r20*x2730*x2734))+(((-1.0)*x2728*x2735))+((x2724*x2732))+(((-1.0)*r22*sj5*x2734))+(((-1.0)*r21*x2726*x2734)));
evalcond[3]=((((-1.0)*r01*x2726*x2734))+(((-1.0)*x2733*x2735))+((x2724*x2731))+(((-1.0)*r02*sj5*x2734))+(((-1.0)*r00*x2730*x2734)));
evalcond[4]=((1.0)+(((-1.0)*r01*x2726*x2735))+(((-1.0)*x2731*x2734))+((x2725*x2733))+(((-1.0)*r00*x2730*x2735))+(((-1.0)*r02*x2736)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x2734))+(((-1.0)*r10*x2730*x2734))+((x2724*x2727))+(((-1.0)*r11*x2726*x2734))+(((-1.0)*x2729*x2735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2737=((1.0)*cj5);
IkReal x2738=((0.01)*cj5);
IkReal x2739=(cj6*r11);
IkReal x2740=(r20*sj6);
IkReal x2741=((0.01)*sj5);
IkReal x2742=(cj6*r01);
IkReal x2743=((0.37429)*cj5);
IkReal x2744=((0.37429)*sj5);
IkReal x2745=(cj6*r21);
IkReal x2746=(r10*sj5*sj6);
IkReal x2747=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((r22*x2741))+((r22*x2743))+(((-1.0)*x2744*x2745))+(((-1.0)*x2740*x2744))+((x2738*x2740))+((x2738*x2745))+(((-1.0)*pz)));
evalcond[2]=((((-1.0)*r00*sj6*x2744))+((x2738*x2742))+((r00*sj6*x2738))+(((-1.0)*px))+((r02*x2743))+((r02*x2741))+(((-1.0)*x2742*x2744)));
evalcond[3]=((-0.43342)+((r12*x2741))+((r12*x2743))+(((-1.0)*x2739*x2744))+(((-1.0)*r10*sj6*x2744))+(((-1.0)*py))+((r10*sj6*x2738))+((x2738*x2739)));
evalcond[4]=((1.0)+((sj5*x2740))+((sj5*x2745))+(((-1.0)*r22*x2737)));
evalcond[5]=(x2746+(((-1.0)*r12*x2737))+((sj5*x2739)));
evalcond[6]=(x2747+((sj5*x2742))+(((-1.0)*r02*x2737)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2748=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x2748;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2749=((1.0)*sj5);
IkReal x2750=(((cj5*r22))+(((-1.0)*r20*sj6*x2749))+(((-1.0)*cj6*r21*x2749)));
j4eval[0]=x2750;
j4eval[1]=IKsign(x2750);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2751=r11*r11;
IkReal x2752=cj5*cj5;
IkReal x2753=cj6*cj6;
IkReal x2754=r10*r10;
IkReal x2755=r12*r12;
IkReal x2756=(r12*sj5);
IkReal x2757=(cj6*r10);
IkReal x2758=((1.0)*x2753);
IkReal x2759=(cj5*cj6*r11);
IkReal x2760=(cj5*r10*sj6);
IkReal x2761=((2.0)*r11*sj6);
IkReal x2762=(x2752*x2754);
IkReal x2763=(x2755+x2751+x2762+((x2753*x2754))+(((-1.0)*x2758*x2762))+(((2.0)*x2756*x2759))+(((-1.0)*x2757*x2761))+((x2752*x2757*x2761))+(((2.0)*x2756*x2760))+((x2751*x2752*x2753))+(((-1.0)*x2751*x2758))+(((-1.0)*x2752*x2755)));
j4eval[0]=x2763;
j4eval[1]=IKsign(x2763);
j4eval[2]=((IKabs((x2757+(((-1.0)*r11*sj6)))))+(IKabs((x2756+x2759+x2760))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2764=r11*r11;
IkReal x2765=cj5*cj5;
IkReal x2766=cj6*cj6;
IkReal x2767=r10*r10;
IkReal x2768=r12*r12;
IkReal x2769=(r10*sj6);
IkReal x2770=(r12*sj5);
IkReal x2771=((1.0)*x2766);
IkReal x2772=(cj5*cj6*r11);
IkReal x2773=((2.0)*cj6*r11);
IkReal x2774=(x2765*x2767);
CheckValue<IkReal> x2775=IKPowWithIntegerCheck(IKsign((x2774+x2768+x2764+(((-1.0)*x2769*x2773))+(((2.0)*cj5*x2769*x2770))+(((-1.0)*x2771*x2774))+(((2.0)*x2770*x2772))+((x2764*x2765*x2766))+(((-1.0)*x2764*x2771))+((x2765*x2769*x2773))+(((-1.0)*x2765*x2768))+((x2766*x2767)))),-1);
if(!x2775.valid){
continue;
}
CheckValue<IkReal> x2776 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x2770+x2772+((cj5*x2769))),IKFAST_ATAN2_MAGTHRESH);
if(!x2776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2775.value)))+(x2776.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2777=IKsin(j4);
IkReal x2778=IKcos(j4);
IkReal x2779=(cj5*cj6);
IkReal x2780=(r11*sj6);
IkReal x2781=(cj6*r20);
IkReal x2782=(cj6*r10);
IkReal x2783=(cj5*sj6);
IkReal x2784=(r01*sj6);
IkReal x2785=(r21*sj6);
IkReal x2786=(cj6*r00);
IkReal x2787=((1.0)*x2778);
IkReal x2788=((1.0)*x2777);
IkReal x2789=(sj5*x2788);
evalcond[0]=(((x2778*x2781))+(((-1.0)*x2785*x2787))+(((-1.0)*r22*x2789))+(((-1.0)*r21*x2779*x2788))+(((-1.0)*r20*x2783*x2788)));
evalcond[1]=((((-1.0)*r12*x2789))+((x2778*x2782))+(((-1.0)*x2780*x2787))+(((-1.0)*r11*x2779*x2788))+(((-1.0)*r10*x2783*x2788)));
evalcond[2]=((((-1.0)*x2781*x2788))+((x2777*x2785))+(((-1.0)*r22*sj5*x2787))+(((-1.0)*r21*x2779*x2787))+(((-1.0)*r20*x2783*x2787)));
evalcond[3]=((((-1.0)*x2786*x2788))+((x2777*x2784))+(((-1.0)*r02*sj5*x2787))+(((-1.0)*r00*x2783*x2787))+(((-1.0)*r01*x2779*x2787)));
evalcond[4]=((-1.0)+((x2778*x2786))+(((-1.0)*x2784*x2787))+(((-1.0)*r00*x2783*x2788))+(((-1.0)*r02*x2789))+(((-1.0)*r01*x2779*x2788)));
evalcond[5]=((1.0)+((x2777*x2780))+(((-1.0)*r12*sj5*x2787))+(((-1.0)*r11*x2779*x2787))+(((-1.0)*x2782*x2788))+(((-1.0)*r10*x2783*x2787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2790=((1.0)*sj5);
CheckValue<IkReal> x2791 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x2791.valid){
continue;
}
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x2790))+(((-1.0)*r20*sj6*x2790)))),-1);
if(!x2792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2791.value)+(((1.5707963267949)*(x2792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2793=IKsin(j4);
IkReal x2794=IKcos(j4);
IkReal x2795=(cj5*cj6);
IkReal x2796=(r11*sj6);
IkReal x2797=(cj6*r20);
IkReal x2798=(cj6*r10);
IkReal x2799=(cj5*sj6);
IkReal x2800=(r01*sj6);
IkReal x2801=(r21*sj6);
IkReal x2802=(cj6*r00);
IkReal x2803=((1.0)*x2794);
IkReal x2804=((1.0)*x2793);
IkReal x2805=(sj5*x2804);
evalcond[0]=(((x2794*x2797))+(((-1.0)*r21*x2795*x2804))+(((-1.0)*r22*x2805))+(((-1.0)*r20*x2799*x2804))+(((-1.0)*x2801*x2803)));
evalcond[1]=(((x2794*x2798))+(((-1.0)*r12*x2805))+(((-1.0)*x2796*x2803))+(((-1.0)*r10*x2799*x2804))+(((-1.0)*r11*x2795*x2804)));
evalcond[2]=((((-1.0)*r22*sj5*x2803))+(((-1.0)*r21*x2795*x2803))+(((-1.0)*x2797*x2804))+((x2793*x2801))+(((-1.0)*r20*x2799*x2803)));
evalcond[3]=((((-1.0)*r00*x2799*x2803))+(((-1.0)*x2802*x2804))+(((-1.0)*r01*x2795*x2803))+(((-1.0)*r02*sj5*x2803))+((x2793*x2800)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x2799*x2804))+(((-1.0)*x2800*x2803))+(((-1.0)*r01*x2795*x2804))+(((-1.0)*r02*x2805))+((x2794*x2802)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x2803))+((x2793*x2796))+(((-1.0)*x2798*x2804))+(((-1.0)*r10*x2799*x2803))+(((-1.0)*r11*x2795*x2803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2806 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2806.valid){
continue;
}
CheckValue<IkReal> x2807=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x2807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2806.value)+(((1.5707963267949)*(x2807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2808=IKsin(j4);
IkReal x2809=IKcos(j4);
IkReal x2810=(cj5*cj6);
IkReal x2811=(r11*sj6);
IkReal x2812=(cj6*r20);
IkReal x2813=(cj6*r10);
IkReal x2814=(cj5*sj6);
IkReal x2815=(r01*sj6);
IkReal x2816=(r21*sj6);
IkReal x2817=(cj6*r00);
IkReal x2818=((1.0)*x2809);
IkReal x2819=((1.0)*x2808);
IkReal x2820=(sj5*x2819);
evalcond[0]=(((x2809*x2812))+(((-1.0)*r20*x2814*x2819))+(((-1.0)*r21*x2810*x2819))+(((-1.0)*r22*x2820))+(((-1.0)*x2816*x2818)));
evalcond[1]=(((x2809*x2813))+(((-1.0)*r11*x2810*x2819))+(((-1.0)*r12*x2820))+(((-1.0)*r10*x2814*x2819))+(((-1.0)*x2811*x2818)));
evalcond[2]=((((-1.0)*x2812*x2819))+(((-1.0)*r20*x2814*x2818))+(((-1.0)*r21*x2810*x2818))+((x2808*x2816))+(((-1.0)*r22*sj5*x2818)));
evalcond[3]=((((-1.0)*r02*sj5*x2818))+(((-1.0)*r01*x2810*x2818))+(((-1.0)*x2817*x2819))+((x2808*x2815))+(((-1.0)*r00*x2814*x2818)));
evalcond[4]=((-1.0)+((x2809*x2817))+(((-1.0)*x2815*x2818))+(((-1.0)*r02*x2820))+(((-1.0)*r01*x2810*x2819))+(((-1.0)*r00*x2814*x2819)));
evalcond[5]=((1.0)+(((-1.0)*r11*x2810*x2818))+(((-1.0)*x2813*x2819))+(((-1.0)*r12*sj5*x2818))+(((-1.0)*r10*x2814*x2818))+((x2808*x2811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2821=((1.0)*cj5);
IkReal x2822=((0.01)*cj5);
IkReal x2823=(cj6*r11);
IkReal x2824=(r20*sj6);
IkReal x2825=((0.01)*sj5);
IkReal x2826=(cj6*r01);
IkReal x2827=((0.37429)*cj5);
IkReal x2828=((0.37429)*sj5);
IkReal x2829=(cj6*r21);
IkReal x2830=(r10*sj5*sj6);
IkReal x2831=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+((x2822*x2824))+((x2822*x2829))+(((-1.0)*x2824*x2828))+(((-1.0)*pz))+((r22*x2825))+((r22*x2827))+(((-1.0)*x2828*x2829)));
evalcond[2]=((0.43342)+((r02*x2825))+((r02*x2827))+((x2822*x2826))+(((-1.0)*x2826*x2828))+(((-1.0)*px))+(((-1.0)*r00*sj6*x2828))+((r00*sj6*x2822)));
evalcond[3]=(((x2822*x2823))+(((-1.0)*r10*sj6*x2828))+((r10*sj6*x2822))+(((-1.0)*py))+(((-1.0)*x2823*x2828))+((r12*x2825))+((r12*x2827)));
evalcond[4]=((1.0)+((sj5*x2829))+((sj5*x2824))+(((-1.0)*r22*x2821)));
evalcond[5]=((((-1.0)*r12*x2821))+((sj5*x2823))+x2830);
evalcond[6]=(((sj5*x2826))+(((-1.0)*r02*x2821))+x2831);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2832=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x2832;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x2832);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2833=((1.0)*sj6);
IkReal x2834=((((-1.0)*r00*sj5*x2833))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x2834;
j4eval[1]=IKsign(x2834);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x2833))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2835=cj6*cj6;
IkReal x2836=cj5*cj5;
IkReal x2837=r00*r00;
IkReal x2838=r01*r01;
IkReal x2839=r02*r02;
IkReal x2840=(cj6*r00);
IkReal x2841=(cj5*cj6*r01);
IkReal x2842=((2.0)*r02*sj5);
IkReal x2843=((1.0)*x2835);
IkReal x2844=((2.0)*r01*sj6);
IkReal x2845=(cj5*r00*sj6);
IkReal x2846=(x2836*x2837);
IkReal x2847=(((x2836*x2839))+(((-1.0)*x2836*x2838*x2843))+(((-1.0)*x2842*x2845))+(((-1.0)*x2838))+(((-1.0)*x2839))+((x2840*x2844))+(((-1.0)*x2841*x2842))+(((-1.0)*x2846))+((x2835*x2838))+(((-1.0)*x2837*x2843))+(((-1.0)*x2836*x2840*x2844))+((x2835*x2846)));
j4eval[0]=x2847;
j4eval[1]=((IKabs((((r02*sj5))+x2845+x2841)))+(IKabs(((((-1.0)*r01*sj6))+x2840))));
j4eval[2]=IKsign(x2847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2848=cj6*cj6;
IkReal x2849=cj5*cj5;
IkReal x2850=r00*r00;
IkReal x2851=r01*r01;
IkReal x2852=r02*r02;
IkReal x2853=(cj6*r00);
IkReal x2854=(cj5*cj6*r01);
IkReal x2855=((2.0)*r02*sj5);
IkReal x2856=((1.0)*x2848);
IkReal x2857=((2.0)*r01*sj6);
IkReal x2858=(cj5*r00*sj6);
IkReal x2859=(x2849*x2850);
CheckValue<IkReal> x2860 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x2853)),(((r02*sj5))+x2858+x2854),IKFAST_ATAN2_MAGTHRESH);
if(!x2860.valid){
continue;
}
CheckValue<IkReal> x2861=IKPowWithIntegerCheck(IKsign((((x2849*x2852))+((x2848*x2851))+((x2848*x2859))+(((-1.0)*x2850*x2856))+((x2853*x2857))+(((-1.0)*x2854*x2855))+(((-1.0)*x2851))+(((-1.0)*x2852))+(((-1.0)*x2859))+(((-1.0)*x2855*x2858))+(((-1.0)*x2849*x2851*x2856))+(((-1.0)*x2849*x2853*x2857)))),-1);
if(!x2861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2860.value)+(((1.5707963267949)*(x2861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2862=IKsin(j4);
IkReal x2863=IKcos(j4);
IkReal x2864=(cj5*cj6);
IkReal x2865=(r11*sj6);
IkReal x2866=(cj6*r20);
IkReal x2867=(cj6*r10);
IkReal x2868=(cj5*sj6);
IkReal x2869=(r21*sj6);
IkReal x2870=(cj6*r00);
IkReal x2871=(r01*sj6);
IkReal x2872=((1.0)*x2863);
IkReal x2873=((1.0)*x2862);
IkReal x2874=(sj5*x2873);
evalcond[0]=((((-1.0)*r22*x2874))+(((-1.0)*r20*x2868*x2873))+((x2863*x2866))+(((-1.0)*x2869*x2872))+(((-1.0)*r21*x2864*x2873)));
evalcond[1]=((((-1.0)*r02*x2874))+(((-1.0)*x2871*x2872))+((x2863*x2870))+(((-1.0)*r01*x2864*x2873))+(((-1.0)*r00*x2868*x2873)));
evalcond[2]=((((-1.0)*r22*sj5*x2872))+(((-1.0)*r20*x2868*x2872))+(((-1.0)*r21*x2864*x2872))+((x2862*x2869))+(((-1.0)*x2866*x2873)));
evalcond[3]=((((-1.0)*x2867*x2873))+(((-1.0)*r12*sj5*x2872))+(((-1.0)*r10*x2868*x2872))+((x2862*x2865))+(((-1.0)*r11*x2864*x2872)));
evalcond[4]=((-1.0)+(((-1.0)*x2865*x2872))+((x2863*x2867))+(((-1.0)*r10*x2868*x2873))+(((-1.0)*r12*x2874))+(((-1.0)*r11*x2864*x2873)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x2872))+(((-1.0)*x2870*x2873))+((x2862*x2871))+(((-1.0)*r01*x2864*x2872))+(((-1.0)*r00*x2868*x2872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2875=((1.0)*sj6);
CheckValue<IkReal> x2876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x2875))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x2876.valid){
continue;
}
CheckValue<IkReal> x2877 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x2875)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2876.value)))+(x2877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2878=IKsin(j4);
IkReal x2879=IKcos(j4);
IkReal x2880=(cj5*cj6);
IkReal x2881=(r11*sj6);
IkReal x2882=(cj6*r20);
IkReal x2883=(cj6*r10);
IkReal x2884=(cj5*sj6);
IkReal x2885=(r21*sj6);
IkReal x2886=(cj6*r00);
IkReal x2887=(r01*sj6);
IkReal x2888=((1.0)*x2879);
IkReal x2889=((1.0)*x2878);
IkReal x2890=(sj5*x2889);
evalcond[0]=((((-1.0)*r22*x2890))+(((-1.0)*r20*x2884*x2889))+(((-1.0)*r21*x2880*x2889))+((x2879*x2882))+(((-1.0)*x2885*x2888)));
evalcond[1]=((((-1.0)*x2887*x2888))+(((-1.0)*r01*x2880*x2889))+(((-1.0)*r02*x2890))+((x2879*x2886))+(((-1.0)*r00*x2884*x2889)));
evalcond[2]=((((-1.0)*r20*x2884*x2888))+(((-1.0)*x2882*x2889))+(((-1.0)*r21*x2880*x2888))+((x2878*x2885))+(((-1.0)*r22*sj5*x2888)));
evalcond[3]=((((-1.0)*x2883*x2889))+(((-1.0)*r10*x2884*x2888))+((x2878*x2881))+(((-1.0)*r12*sj5*x2888))+(((-1.0)*r11*x2880*x2888)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x2884*x2889))+((x2879*x2883))+(((-1.0)*r11*x2880*x2889))+(((-1.0)*x2881*x2888))+(((-1.0)*r12*x2890)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x2880*x2888))+(((-1.0)*r02*sj5*x2888))+((x2878*x2887))+(((-1.0)*r00*x2884*x2888))+(((-1.0)*x2886*x2889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2891=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x2891.valid){
continue;
}
CheckValue<IkReal> x2892 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x2892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2891.value)))+(x2892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2893=IKsin(j4);
IkReal x2894=IKcos(j4);
IkReal x2895=(cj5*cj6);
IkReal x2896=(r11*sj6);
IkReal x2897=(cj6*r20);
IkReal x2898=(cj6*r10);
IkReal x2899=(cj5*sj6);
IkReal x2900=(r21*sj6);
IkReal x2901=(cj6*r00);
IkReal x2902=(r01*sj6);
IkReal x2903=((1.0)*x2894);
IkReal x2904=((1.0)*x2893);
IkReal x2905=(sj5*x2904);
evalcond[0]=((((-1.0)*x2900*x2903))+(((-1.0)*r21*x2895*x2904))+((x2894*x2897))+(((-1.0)*r20*x2899*x2904))+(((-1.0)*r22*x2905)));
evalcond[1]=((((-1.0)*x2902*x2903))+(((-1.0)*r02*x2905))+(((-1.0)*r00*x2899*x2904))+(((-1.0)*r01*x2895*x2904))+((x2894*x2901)));
evalcond[2]=((((-1.0)*x2897*x2904))+(((-1.0)*r22*sj5*x2903))+(((-1.0)*r21*x2895*x2903))+((x2893*x2900))+(((-1.0)*r20*x2899*x2903)));
evalcond[3]=((((-1.0)*x2898*x2904))+(((-1.0)*r11*x2895*x2903))+(((-1.0)*r10*x2899*x2903))+((x2893*x2896))+(((-1.0)*r12*sj5*x2903)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x2895*x2904))+(((-1.0)*r10*x2899*x2904))+(((-1.0)*x2896*x2903))+((x2894*x2898))+(((-1.0)*r12*x2905)));
evalcond[5]=((-1.0)+(((-1.0)*x2901*x2904))+(((-1.0)*r00*x2899*x2903))+(((-1.0)*r02*sj5*x2903))+(((-1.0)*r01*x2895*x2903))+((x2893*x2902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2906=((1.0)*cj5);
IkReal x2907=((0.01)*cj5);
IkReal x2908=(cj6*r11);
IkReal x2909=(r20*sj6);
IkReal x2910=((0.01)*sj5);
IkReal x2911=(cj6*r01);
IkReal x2912=((0.37429)*cj5);
IkReal x2913=((0.37429)*sj5);
IkReal x2914=(cj6*r21);
IkReal x2915=(r10*sj5*sj6);
IkReal x2916=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x2913*x2914))+((x2907*x2914))+(((-1.0)*pz))+((x2907*x2909))+(((-1.0)*x2909*x2913))+((r22*x2910))+((r22*x2912)));
evalcond[2]=((-0.43342)+((x2907*x2911))+(((-1.0)*px))+((r02*x2910))+((r02*x2912))+(((-1.0)*r00*sj6*x2913))+(((-1.0)*x2911*x2913))+((r00*sj6*x2907)));
evalcond[3]=(((r12*x2910))+((r12*x2912))+(((-1.0)*r10*sj6*x2913))+(((-1.0)*py))+(((-1.0)*x2908*x2913))+((x2907*x2908))+((r10*sj6*x2907)));
evalcond[4]=((1.0)+((sj5*x2914))+((sj5*x2909))+(((-1.0)*r22*x2906)));
evalcond[5]=(((sj5*x2908))+(((-1.0)*r12*x2906))+x2915);
evalcond[6]=((((-1.0)*r02*x2906))+((sj5*x2911))+x2916);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2917=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x2917;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x2917);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2918=((1.0)*sj5);
IkReal x2919=(((cj5*r22))+(((-1.0)*r20*sj6*x2918))+(((-1.0)*cj6*r21*x2918)));
j4eval[0]=x2919;
j4eval[1]=IKsign(x2919);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2920=cj6*cj6;
IkReal x2921=r01*r01;
IkReal x2922=cj5*cj5;
IkReal x2923=r00*r00;
IkReal x2924=r02*r02;
IkReal x2925=(cj6*r00);
IkReal x2926=(r02*sj5);
IkReal x2927=(cj5*cj6*r01);
IkReal x2928=((2.0)*r01*sj6);
IkReal x2929=(cj5*r00*sj6);
IkReal x2930=((1.0)*x2922);
IkReal x2931=(x2920*x2923);
IkReal x2932=(x2920*x2921);
IkReal x2933=((((-1.0)*x2930*x2931))+((x2922*x2925*x2928))+(((2.0)*x2926*x2929))+(((2.0)*x2926*x2927))+(((-1.0)*x2925*x2928))+(((-1.0)*x2924*x2930))+((x2922*x2932))+((x2922*x2923))+(((-1.0)*x2932))+x2931+x2921+x2924);
j4eval[0]=x2933;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x2925)))+(IKabs((x2929+x2927+x2926))));
j4eval[2]=IKsign(x2933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2934=cj6*cj6;
IkReal x2935=r01*r01;
IkReal x2936=cj5*cj5;
IkReal x2937=r00*r00;
IkReal x2938=r02*r02;
IkReal x2939=(cj6*r00);
IkReal x2940=((2.0)*r01);
IkReal x2941=(cj5*cj6);
IkReal x2942=(r02*sj5);
IkReal x2943=(cj5*r00*sj6);
IkReal x2944=(x2936*x2937);
IkReal x2945=(x2934*x2935);
CheckValue<IkReal> x2946=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2945))+((x2936*x2945))+(((-1.0)*x2934*x2944))+((x2940*x2941*x2942))+(((2.0)*x2942*x2943))+(((-1.0)*x2936*x2938))+(((-1.0)*sj6*x2939*x2940))+((x2934*x2937))+x2938+x2935+x2944+((sj6*x2936*x2939*x2940)))),-1);
if(!x2946.valid){
continue;
}
CheckValue<IkReal> x2947 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x2939)),(((r01*x2941))+x2943+x2942),IKFAST_ATAN2_MAGTHRESH);
if(!x2947.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2946.value)))+(x2947.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2948=IKsin(j4);
IkReal x2949=IKcos(j4);
IkReal x2950=(cj5*cj6);
IkReal x2951=(r11*sj6);
IkReal x2952=(cj6*r20);
IkReal x2953=(cj6*r10);
IkReal x2954=(cj5*sj6);
IkReal x2955=(r21*sj6);
IkReal x2956=(cj6*r00);
IkReal x2957=(r01*sj6);
IkReal x2958=((1.0)*x2949);
IkReal x2959=((1.0)*x2948);
IkReal x2960=(sj5*x2959);
evalcond[0]=((((-1.0)*r21*x2950*x2959))+(((-1.0)*x2955*x2958))+(((-1.0)*r22*x2960))+((x2949*x2952))+(((-1.0)*r20*x2954*x2959)));
evalcond[1]=((((-1.0)*r00*x2954*x2959))+(((-1.0)*r01*x2950*x2959))+(((-1.0)*r02*x2960))+((x2949*x2956))+(((-1.0)*x2957*x2958)));
evalcond[2]=((((-1.0)*x2952*x2959))+(((-1.0)*r21*x2950*x2958))+((x2948*x2955))+(((-1.0)*r22*sj5*x2958))+(((-1.0)*r20*x2954*x2958)));
evalcond[3]=((((-1.0)*x2953*x2959))+(((-1.0)*r11*x2950*x2958))+((x2948*x2951))+(((-1.0)*r10*x2954*x2958))+(((-1.0)*r12*sj5*x2958)));
evalcond[4]=((1.0)+(((-1.0)*r11*x2950*x2959))+(((-1.0)*x2951*x2958))+(((-1.0)*r10*x2954*x2959))+((x2949*x2953))+(((-1.0)*r12*x2960)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x2958))+(((-1.0)*r00*x2954*x2958))+((x2948*x2957))+(((-1.0)*r01*x2950*x2958))+(((-1.0)*x2956*x2959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2961=((1.0)*sj5);
CheckValue<IkReal> x2962 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x2962.valid){
continue;
}
CheckValue<IkReal> x2963=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x2961))+(((-1.0)*r20*sj6*x2961)))),-1);
if(!x2963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2962.value)+(((1.5707963267949)*(x2963.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2964=IKsin(j4);
IkReal x2965=IKcos(j4);
IkReal x2966=(cj5*cj6);
IkReal x2967=(r11*sj6);
IkReal x2968=(cj6*r20);
IkReal x2969=(cj6*r10);
IkReal x2970=(cj5*sj6);
IkReal x2971=(r21*sj6);
IkReal x2972=(cj6*r00);
IkReal x2973=(r01*sj6);
IkReal x2974=((1.0)*x2965);
IkReal x2975=((1.0)*x2964);
IkReal x2976=(sj5*x2975);
evalcond[0]=(((x2965*x2968))+(((-1.0)*r20*x2970*x2975))+(((-1.0)*r21*x2966*x2975))+(((-1.0)*r22*x2976))+(((-1.0)*x2971*x2974)));
evalcond[1]=((((-1.0)*r02*x2976))+(((-1.0)*r00*x2970*x2975))+((x2965*x2972))+(((-1.0)*r01*x2966*x2975))+(((-1.0)*x2973*x2974)));
evalcond[2]=(((x2964*x2971))+(((-1.0)*r20*x2970*x2974))+(((-1.0)*r22*sj5*x2974))+(((-1.0)*x2968*x2975))+(((-1.0)*r21*x2966*x2974)));
evalcond[3]=((((-1.0)*r12*sj5*x2974))+(((-1.0)*r10*x2970*x2974))+(((-1.0)*r11*x2966*x2974))+(((-1.0)*x2969*x2975))+((x2964*x2967)));
evalcond[4]=((1.0)+((x2965*x2969))+(((-1.0)*r10*x2970*x2975))+(((-1.0)*r12*x2976))+(((-1.0)*r11*x2966*x2975))+(((-1.0)*x2967*x2974)));
evalcond[5]=((1.0)+(((-1.0)*x2972*x2975))+((x2964*x2973))+(((-1.0)*r00*x2970*x2974))+(((-1.0)*r02*sj5*x2974))+(((-1.0)*r01*x2966*x2974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2977 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x2977.valid){
continue;
}
CheckValue<IkReal> x2978=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x2978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2977.value)+(((1.5707963267949)*(x2978.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2979=IKsin(j4);
IkReal x2980=IKcos(j4);
IkReal x2981=(cj5*cj6);
IkReal x2982=(r11*sj6);
IkReal x2983=(cj6*r20);
IkReal x2984=(cj6*r10);
IkReal x2985=(cj5*sj6);
IkReal x2986=(r21*sj6);
IkReal x2987=(cj6*r00);
IkReal x2988=(r01*sj6);
IkReal x2989=((1.0)*x2980);
IkReal x2990=((1.0)*x2979);
IkReal x2991=(sj5*x2990);
evalcond[0]=((((-1.0)*r22*x2991))+((x2980*x2983))+(((-1.0)*r21*x2981*x2990))+(((-1.0)*r20*x2985*x2990))+(((-1.0)*x2986*x2989)));
evalcond[1]=((((-1.0)*r01*x2981*x2990))+((x2980*x2987))+(((-1.0)*r00*x2985*x2990))+(((-1.0)*r02*x2991))+(((-1.0)*x2988*x2989)));
evalcond[2]=((((-1.0)*r20*x2985*x2989))+(((-1.0)*r21*x2981*x2989))+(((-1.0)*r22*sj5*x2989))+(((-1.0)*x2983*x2990))+((x2979*x2986)));
evalcond[3]=((((-1.0)*x2984*x2990))+(((-1.0)*r11*x2981*x2989))+(((-1.0)*r10*x2985*x2989))+((x2979*x2982))+(((-1.0)*r12*sj5*x2989)));
evalcond[4]=((1.0)+(((-1.0)*x2982*x2989))+(((-1.0)*r10*x2985*x2990))+(((-1.0)*r12*x2991))+((x2980*x2984))+(((-1.0)*r11*x2981*x2990)));
evalcond[5]=((1.0)+(((-1.0)*x2987*x2990))+(((-1.0)*r02*sj5*x2989))+(((-1.0)*r01*x2981*x2989))+(((-1.0)*r00*x2985*x2989))+((x2979*x2988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2992=cj6*cj6;
IkReal x2993=cj5*cj5;
IkReal x2994=(r22*sj5);
IkReal x2995=(cj0*r20);
IkReal x2996=((1.0)*r21);
IkReal x2997=(cj5*sj6);
IkReal x2998=(r02*r22);
IkReal x2999=(cj5*cj6);
IkReal x3000=(r02*sj5);
IkReal x3001=(cj6*sj6);
IkReal x3002=((1.0)*r20);
IkReal x3003=(r01*x2996);
IkReal x3004=(r00*r20*x2993);
CheckValue<IkReal> x3005=IKPowWithIntegerCheck(IKsign((((r01*r20*x3001))+(((-1.0)*r01*x2993*x3001*x3002))+(((-1.0)*r00*x2993*x3002))+(((-1.0)*r00*x2993*x2996*x3001))+(((-1.0)*r00*x2992*x3002))+(((-1.0)*x2996*x2999*x3000))+(((-1.0)*x2997*x3000*x3002))+(((-1.0)*x3003))+((r01*r21*x2992))+((x2993*x2998))+(((-1.0)*x2998))+(((-1.0)*r01*x2994*x2999))+(((-1.0)*r00*x2994*x2997))+((r00*r21*x3001))+(((-1.0)*x2992*x2993*x3003))+((x2992*x3004)))),-1);
if(!x3005.valid){
continue;
}
CheckValue<IkReal> x3006 = IKatan2WithCheck(IkReal((((cj6*x2995))+(((-1.0)*cj0*sj6*x2996)))),(((x2995*x2997))+((cj0*x2994))+((cj0*r21*x2999))),IKFAST_ATAN2_MAGTHRESH);
if(!x3006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3005.value)))+(x3006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3007=IKsin(j4);
IkReal x3008=IKcos(j4);
IkReal x3009=((1.0)*cj0);
IkReal x3010=(cj6*r20);
IkReal x3011=(cj5*sj6);
IkReal x3012=((1.0)*sj6);
IkReal x3013=(r21*sj6);
IkReal x3014=(cj6*r00);
IkReal x3015=((1.0)*cj5*cj6);
IkReal x3016=(r01*x3008);
IkReal x3017=(r11*x3007);
IkReal x3018=((1.0)*x3007);
IkReal x3019=(r11*x3008);
IkReal x3020=(r10*x3008);
IkReal x3021=((1.0)*x3008);
IkReal x3022=(r01*x3007);
IkReal x3023=(sj5*x3018);
evalcond[0]=((((-1.0)*r20*x3011*x3018))+(((-1.0)*r21*x3007*x3015))+((x3008*x3010))+(((-1.0)*r22*x3023))+(((-1.0)*r21*x3008*x3012)));
evalcond[1]=((((-1.0)*r22*sj5*x3021))+(((-1.0)*x3010*x3018))+((x3007*x3013))+(((-1.0)*r20*x3011*x3021))+(((-1.0)*r21*x3008*x3015)));
evalcond[2]=((((-1.0)*x3015*x3022))+sj0+((x3008*x3014))+(((-1.0)*r00*x3011*x3018))+(((-1.0)*r02*x3023))+(((-1.0)*x3012*x3016)));
evalcond[3]=(((cj6*x3020))+(((-1.0)*r12*x3023))+(((-1.0)*x3009))+(((-1.0)*r10*x3011*x3018))+(((-1.0)*x3015*x3017))+(((-1.0)*x3012*x3019)));
evalcond[4]=((((-1.0)*r00*x3011*x3021))+(((-1.0)*x3009))+((sj6*x3022))+(((-1.0)*x3014*x3018))+(((-1.0)*r02*sj5*x3021))+(((-1.0)*x3015*x3016)));
evalcond[5]=((((-1.0)*sj0))+((sj6*x3017))+(((-1.0)*r12*sj5*x3021))+(((-1.0)*x3011*x3020))+(((-1.0)*cj6*r10*x3018))+(((-1.0)*x3015*x3019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3024=(cj0*sj6);
IkReal x3025=((1.0)*sj5);
IkReal x3026=(cj0*cj6);
CheckValue<IkReal> x3027=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x3025))+(((-1.0)*r00*sj6*x3025))+((cj5*r02)))),-1);
if(!x3027.valid){
continue;
}
CheckValue<IkReal> x3028 = IKatan2WithCheck(IkReal((((r20*x3026))+(((-1.0)*r21*x3024)))),(((cj5*r21*x3026))+((cj0*r22*sj5))+((cj5*r20*x3024))),IKFAST_ATAN2_MAGTHRESH);
if(!x3028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3027.value)))+(x3028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3029=IKsin(j4);
IkReal x3030=IKcos(j4);
IkReal x3031=((1.0)*cj0);
IkReal x3032=(cj6*r20);
IkReal x3033=(cj5*sj6);
IkReal x3034=((1.0)*sj6);
IkReal x3035=(r21*sj6);
IkReal x3036=(cj6*r00);
IkReal x3037=((1.0)*cj5*cj6);
IkReal x3038=(r01*x3030);
IkReal x3039=(r11*x3029);
IkReal x3040=((1.0)*x3029);
IkReal x3041=(r11*x3030);
IkReal x3042=(r10*x3030);
IkReal x3043=((1.0)*x3030);
IkReal x3044=(r01*x3029);
IkReal x3045=(sj5*x3040);
evalcond[0]=((((-1.0)*r20*x3033*x3040))+(((-1.0)*r21*x3029*x3037))+((x3030*x3032))+(((-1.0)*r22*x3045))+(((-1.0)*r21*x3030*x3034)));
evalcond[1]=((((-1.0)*x3032*x3040))+(((-1.0)*r20*x3033*x3043))+(((-1.0)*r22*sj5*x3043))+(((-1.0)*r21*x3030*x3037))+((x3029*x3035)));
evalcond[2]=(sj0+((x3030*x3036))+(((-1.0)*r00*x3033*x3040))+(((-1.0)*x3034*x3038))+(((-1.0)*x3037*x3044))+(((-1.0)*r02*x3045)));
evalcond[3]=((((-1.0)*r10*x3033*x3040))+(((-1.0)*r12*x3045))+(((-1.0)*x3037*x3039))+(((-1.0)*x3031))+(((-1.0)*x3034*x3041))+((cj6*x3042)));
evalcond[4]=((((-1.0)*r00*x3033*x3043))+(((-1.0)*x3037*x3038))+((sj6*x3044))+(((-1.0)*x3031))+(((-1.0)*r02*sj5*x3043))+(((-1.0)*x3036*x3040)));
evalcond[5]=((((-1.0)*cj6*r10*x3040))+(((-1.0)*sj0))+(((-1.0)*x3033*x3042))+(((-1.0)*r12*sj5*x3043))+((sj6*x3039))+(((-1.0)*x3037*x3041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3046=(cj5*sj0);
IkReal x3047=((1.0)*sj5);
CheckValue<IkReal> x3048=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x3047))+(((-1.0)*cj6*r11*x3047)))),-1);
if(!x3048.valid){
continue;
}
CheckValue<IkReal> x3049 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((cj6*r21*x3046))+((r22*sj0*sj5))+((r20*sj6*x3046))),IKFAST_ATAN2_MAGTHRESH);
if(!x3049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3048.value)))+(x3049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3050=IKsin(j4);
IkReal x3051=IKcos(j4);
IkReal x3052=((1.0)*cj0);
IkReal x3053=(cj6*r20);
IkReal x3054=(cj5*sj6);
IkReal x3055=((1.0)*sj6);
IkReal x3056=(r21*sj6);
IkReal x3057=(cj6*r00);
IkReal x3058=((1.0)*cj5*cj6);
IkReal x3059=(r01*x3051);
IkReal x3060=(r11*x3050);
IkReal x3061=((1.0)*x3050);
IkReal x3062=(r11*x3051);
IkReal x3063=(r10*x3051);
IkReal x3064=((1.0)*x3051);
IkReal x3065=(r01*x3050);
IkReal x3066=(sj5*x3061);
evalcond[0]=((((-1.0)*r22*x3066))+(((-1.0)*r21*x3050*x3058))+((x3051*x3053))+(((-1.0)*r20*x3054*x3061))+(((-1.0)*r21*x3051*x3055)));
evalcond[1]=((((-1.0)*x3053*x3061))+(((-1.0)*r22*sj5*x3064))+(((-1.0)*r20*x3054*x3064))+(((-1.0)*r21*x3051*x3058))+((x3050*x3056)));
evalcond[2]=((((-1.0)*x3055*x3059))+(((-1.0)*x3058*x3065))+sj0+(((-1.0)*r02*x3066))+((x3051*x3057))+(((-1.0)*r00*x3054*x3061)));
evalcond[3]=((((-1.0)*x3058*x3060))+(((-1.0)*r10*x3054*x3061))+(((-1.0)*r12*x3066))+((cj6*x3063))+(((-1.0)*x3055*x3062))+(((-1.0)*x3052)));
evalcond[4]=(((sj6*x3065))+(((-1.0)*x3058*x3059))+(((-1.0)*r02*sj5*x3064))+(((-1.0)*r00*x3054*x3064))+(((-1.0)*x3052))+(((-1.0)*x3057*x3061)));
evalcond[5]=(((sj6*x3060))+(((-1.0)*sj0))+(((-1.0)*x3058*x3062))+(((-1.0)*cj6*r10*x3061))+(((-1.0)*r12*sj5*x3064))+(((-1.0)*x3054*x3063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3067=(r10*sj6);
IkReal x3068=((0.37429)*sj5);
IkReal x3069=(cj5*r22);
IkReal x3070=((0.01)*cj5);
IkReal x3071=(cj6*r11);
IkReal x3072=(r00*sj6);
IkReal x3073=(r20*sj6);
IkReal x3074=((0.01)*sj5);
IkReal x3075=(cj6*r01);
IkReal x3076=((0.37429)*cj5);
IkReal x3077=(cj6*r21);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((-0.36442)+((r22*x3074))+(((-1.0)*pz))+((x3070*x3077))+((x3070*x3073))+(((-1.0)*x3068*x3073))+(((-1.0)*x3068*x3077))+(((0.37429)*x3069)));
evalcond[2]=((((-1.0)*px))+((x3070*x3075))+((x3070*x3072))+((r02*x3076))+((r02*x3074))+(((-1.0)*x3068*x3072))+(((-1.0)*x3068*x3075)));
evalcond[3]=((((-1.0)*x3067*x3068))+(((-1.0)*py))+((r12*x3074))+((r12*x3076))+((x3070*x3071))+((x3067*x3070))+(((-1.0)*x3068*x3071)));
evalcond[4]=((((-1.0)*x3069))+((sj5*x3073))+((sj5*x3077)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3078=(cj6*sj5);
IkReal x3079=(sj5*sj6);
IkReal x3080=((1.0)*cj5);
if( IKabs((((r10*x3079))+((r11*x3078))+(((-1.0)*r12*x3080)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x3078))+((r00*x3079))+(((-1.0)*r02*x3080)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x3079))+((r11*x3078))+(((-1.0)*r12*x3080))))+IKsqr((((r01*x3078))+((r00*x3079))+(((-1.0)*r02*x3080))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x3079))+((r11*x3078))+(((-1.0)*r12*x3080))), (((r01*x3078))+((r00*x3079))+(((-1.0)*r02*x3080))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3081=(cj6*sj5);
IkReal x3082=(sj5*sj6);
IkReal x3083=((1.0)*cj5);
evalcond[0]=(((r11*x3081))+(((-1.0)*(IKsin(j0))))+(((-1.0)*r12*x3083))+((r10*x3082)));
evalcond[1]=(((r00*x3082))+(((-1.0)*r02*x3083))+(((-1.0)*(IKcos(j0))))+((r01*x3081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3084=((1.0)*cj5);
IkReal x3085=(((cj6*r11*sj5))+(((-1.0)*r12*x3084))+((r10*sj5*sj6)));
j4eval[0]=x3085;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs(((((-1.0)*cj6*r01*x3084))+(((-1.0)*r02*sj5))+(((-1.0)*r00*sj6*x3084))))));
j4eval[2]=IKsign(x3085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3086=(cj0*sj6);
IkReal x3087=(cj0*cj6);
IkReal x3088=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3088;
j4eval[1]=((IKabs((((r20*x3087))+(((-1.0)*r21*x3086)))))+(IKabs((((cj5*r20*x3086))+((cj5*r21*x3087))+((cj0*r22*sj5))))));
j4eval[2]=IKsign(x3088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3089=cj5*cj5;
IkReal x3090=cj6*cj6;
IkReal x3091=r20*r20;
IkReal x3092=r21*r21;
IkReal x3093=r22*r22;
IkReal x3094=(r22*sj5);
IkReal x3095=(cj6*r21);
IkReal x3096=((2.0)*r20*sj6);
IkReal x3097=((1.0)*x3089);
IkReal x3098=(x3090*x3091);
IkReal x3099=(x3090*x3092);
IkReal x3100=(x3092+x3093+x3098+(((2.0)*cj5*x3094*x3095))+((x3089*x3095*x3096))+((x3089*x3099))+((x3089*x3091))+(((-1.0)*x3093*x3097))+((cj5*x3094*x3096))+(((-1.0)*x3099))+(((-1.0)*x3095*x3096))+(((-1.0)*x3097*x3098)));
j4eval[0]=x3100;
j4eval[1]=IKsign(x3100);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((x3094+((cj5*r20*sj6))+((cj5*x3095))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3101=((1.0)*cj5);
IkReal x3102=((0.01)*cj5);
IkReal x3103=(cj6*r11);
IkReal x3104=(r20*sj6);
IkReal x3105=((0.01)*sj5);
IkReal x3106=(cj6*r01);
IkReal x3107=((0.37429)*cj5);
IkReal x3108=((0.37429)*sj5);
IkReal x3109=(cj6*r21);
IkReal x3110=(r10*sj5*sj6);
IkReal x3111=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+(((-1.0)*pz))+((r22*x3105))+((r22*x3107))+((x3102*x3104))+((x3102*x3109))+(((-1.0)*x3104*x3108))+(((-1.0)*x3108*x3109)));
evalcond[2]=(((r02*x3105))+((r02*x3107))+(((-1.0)*px))+(((-1.0)*x3106*x3108))+((x3102*x3106))+((r00*sj6*x3102))+(((-1.0)*r00*sj6*x3108)));
evalcond[3]=((((-1.0)*x3103*x3108))+(((-1.0)*r10*sj6*x3108))+(((-1.0)*py))+((x3102*x3103))+((r10*sj6*x3102))+((r12*x3107))+((r12*x3105)));
evalcond[4]=(((sj5*x3109))+((sj5*x3104))+(((-1.0)*r22*x3101)));
evalcond[5]=((-1.0)+x3110+((sj5*x3103))+(((-1.0)*r12*x3101)));
evalcond[6]=(x3111+((sj5*x3106))+(((-1.0)*r02*x3101)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3112=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x3112;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3112);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3113=((1.0)*sj5);
IkReal x3114=(((cj5*r22))+(((-1.0)*cj6*r21*x3113))+(((-1.0)*r20*sj6*x3113)));
j4eval[0]=x3114;
j4eval[1]=IKsign(x3114);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3115=cj5*cj5;
IkReal x3116=cj6*cj6;
IkReal x3117=r20*r20;
IkReal x3118=r21*r21;
IkReal x3119=r22*r22;
IkReal x3120=(r22*sj5);
IkReal x3121=(cj6*r21);
IkReal x3122=((2.0)*r20*sj6);
IkReal x3123=((1.0)*x3115);
IkReal x3124=(x3116*x3117);
IkReal x3125=(x3116*x3118);
IkReal x3126=(x3119+x3118+x3124+((cj5*x3120*x3122))+((x3115*x3125))+(((2.0)*cj5*x3120*x3121))+((x3115*x3121*x3122))+(((-1.0)*x3125))+(((-1.0)*x3123*x3124))+(((-1.0)*x3121*x3122))+(((-1.0)*x3119*x3123))+((x3115*x3117)));
j4eval[0]=x3126;
j4eval[1]=IKsign(x3126);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((x3120+((cj5*r20*sj6))+((cj5*x3121))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3127=cj5*cj5;
IkReal x3128=cj6*cj6;
IkReal x3129=r20*r20;
IkReal x3130=r21*r21;
IkReal x3131=r22*r22;
IkReal x3132=(cj6*r21);
IkReal x3133=(r22*sj5);
IkReal x3134=((1.0)*x3127);
IkReal x3135=((2.0)*r20*sj6);
IkReal x3136=(x3128*x3129);
IkReal x3137=(x3128*x3130);
CheckValue<IkReal> x3138 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(x3133+((cj5*r20*sj6))+((cj5*x3132))),IKFAST_ATAN2_MAGTHRESH);
if(!x3138.valid){
continue;
}
CheckValue<IkReal> x3139=IKPowWithIntegerCheck(IKsign((x3136+x3131+x3130+(((-1.0)*x3131*x3134))+((x3127*x3132*x3135))+((cj5*x3133*x3135))+(((-1.0)*x3132*x3135))+(((-1.0)*x3137))+(((-1.0)*x3134*x3136))+((x3127*x3129))+((x3127*x3137))+(((2.0)*cj5*x3132*x3133)))),-1);
if(!x3139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3138.value)+(((1.5707963267949)*(x3139.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3140=IKsin(j4);
IkReal x3141=IKcos(j4);
IkReal x3142=(cj5*cj6);
IkReal x3143=(r11*sj6);
IkReal x3144=(cj6*r20);
IkReal x3145=(cj5*sj6);
IkReal x3146=(cj6*r10);
IkReal x3147=(r01*sj6);
IkReal x3148=(r21*sj6);
IkReal x3149=(cj6*r00);
IkReal x3150=((1.0)*x3141);
IkReal x3151=((1.0)*x3140);
IkReal x3152=(sj5*x3151);
evalcond[0]=((((-1.0)*x3148*x3150))+(((-1.0)*r22*x3152))+(((-1.0)*r20*x3145*x3151))+(((-1.0)*r21*x3142*x3151))+((x3141*x3144)));
evalcond[1]=((((-1.0)*r11*x3142*x3151))+(((-1.0)*x3143*x3150))+(((-1.0)*r10*x3145*x3151))+(((-1.0)*r12*x3152))+((x3141*x3146)));
evalcond[2]=((((-1.0)*r01*x3142*x3150))+(((-1.0)*x3149*x3151))+(((-1.0)*r02*sj5*x3150))+((x3140*x3147))+(((-1.0)*r00*x3145*x3150)));
evalcond[3]=((((-1.0)*r11*x3142*x3150))+(((-1.0)*x3146*x3151))+(((-1.0)*r12*sj5*x3150))+((x3140*x3143))+(((-1.0)*r10*x3145*x3150)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x3142*x3151))+(((-1.0)*r02*x3152))+((x3141*x3149))+(((-1.0)*r00*x3145*x3151))+(((-1.0)*x3147*x3150)));
evalcond[5]=((1.0)+(((-1.0)*x3144*x3151))+(((-1.0)*r20*x3145*x3150))+(((-1.0)*r21*x3142*x3150))+(((-1.0)*r22*sj5*x3150))+((x3140*x3148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3153=((1.0)*sj5);
CheckValue<IkReal> x3154 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3154.valid){
continue;
}
CheckValue<IkReal> x3155=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r21*x3153))+((cj5*r22))+(((-1.0)*r20*sj6*x3153)))),-1);
if(!x3155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3154.value)+(((1.5707963267949)*(x3155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3156=IKsin(j4);
IkReal x3157=IKcos(j4);
IkReal x3158=(cj5*cj6);
IkReal x3159=(r11*sj6);
IkReal x3160=(cj6*r20);
IkReal x3161=(cj5*sj6);
IkReal x3162=(cj6*r10);
IkReal x3163=(r01*sj6);
IkReal x3164=(r21*sj6);
IkReal x3165=(cj6*r00);
IkReal x3166=((1.0)*x3157);
IkReal x3167=((1.0)*x3156);
IkReal x3168=(sj5*x3167);
evalcond[0]=((((-1.0)*r21*x3158*x3167))+(((-1.0)*x3164*x3166))+(((-1.0)*r20*x3161*x3167))+((x3157*x3160))+(((-1.0)*r22*x3168)));
evalcond[1]=((((-1.0)*r12*x3168))+(((-1.0)*r11*x3158*x3167))+(((-1.0)*r10*x3161*x3167))+((x3157*x3162))+(((-1.0)*x3159*x3166)));
evalcond[2]=((((-1.0)*x3165*x3167))+(((-1.0)*r02*sj5*x3166))+((x3156*x3163))+(((-1.0)*r01*x3158*x3166))+(((-1.0)*r00*x3161*x3166)));
evalcond[3]=((((-1.0)*x3162*x3167))+(((-1.0)*r12*sj5*x3166))+(((-1.0)*r11*x3158*x3166))+(((-1.0)*r10*x3161*x3166))+((x3156*x3159)));
evalcond[4]=((-1.0)+(((-1.0)*x3163*x3166))+(((-1.0)*r02*x3168))+((x3157*x3165))+(((-1.0)*r01*x3158*x3167))+(((-1.0)*r00*x3161*x3167)));
evalcond[5]=((1.0)+(((-1.0)*r21*x3158*x3166))+(((-1.0)*x3160*x3167))+(((-1.0)*r20*x3161*x3166))+(((-1.0)*r22*sj5*x3166))+((x3156*x3164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3169 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3169.valid){
continue;
}
CheckValue<IkReal> x3170=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x3170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3169.value)+(((1.5707963267949)*(x3170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3171=IKsin(j4);
IkReal x3172=IKcos(j4);
IkReal x3173=(cj5*cj6);
IkReal x3174=(r11*sj6);
IkReal x3175=(cj6*r20);
IkReal x3176=(cj5*sj6);
IkReal x3177=(cj6*r10);
IkReal x3178=(r01*sj6);
IkReal x3179=(r21*sj6);
IkReal x3180=(cj6*r00);
IkReal x3181=((1.0)*x3172);
IkReal x3182=((1.0)*x3171);
IkReal x3183=(sj5*x3182);
evalcond[0]=((((-1.0)*r22*x3183))+(((-1.0)*x3179*x3181))+(((-1.0)*r21*x3173*x3182))+(((-1.0)*r20*x3176*x3182))+((x3172*x3175)));
evalcond[1]=((((-1.0)*r11*x3173*x3182))+(((-1.0)*r10*x3176*x3182))+((x3172*x3177))+(((-1.0)*x3174*x3181))+(((-1.0)*r12*x3183)));
evalcond[2]=((((-1.0)*x3180*x3182))+((x3171*x3178))+(((-1.0)*r00*x3176*x3181))+(((-1.0)*r01*x3173*x3181))+(((-1.0)*r02*sj5*x3181)));
evalcond[3]=((((-1.0)*r11*x3173*x3181))+(((-1.0)*x3177*x3182))+(((-1.0)*r10*x3176*x3181))+((x3171*x3174))+(((-1.0)*r12*sj5*x3181)));
evalcond[4]=((-1.0)+((x3172*x3180))+(((-1.0)*r02*x3183))+(((-1.0)*x3178*x3181))+(((-1.0)*r00*x3176*x3182))+(((-1.0)*r01*x3173*x3182)));
evalcond[5]=((1.0)+(((-1.0)*r22*sj5*x3181))+(((-1.0)*r21*x3173*x3181))+(((-1.0)*r20*x3176*x3181))+(((-1.0)*x3175*x3182))+((x3171*x3179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3184=((1.0)*cj5);
IkReal x3185=((0.01)*cj5);
IkReal x3186=(cj6*r11);
IkReal x3187=(r20*sj6);
IkReal x3188=((0.01)*sj5);
IkReal x3189=(cj6*r01);
IkReal x3190=((0.37429)*cj5);
IkReal x3191=((0.37429)*sj5);
IkReal x3192=(cj6*r21);
IkReal x3193=(r10*sj5*sj6);
IkReal x3194=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+((r22*x3188))+(((-1.0)*x3191*x3192))+(((-1.0)*x3187*x3191))+((x3185*x3192))+((x3185*x3187))+(((-1.0)*pz))+((r22*x3190)));
evalcond[2]=(((r00*sj6*x3185))+((x3185*x3189))+(((-1.0)*px))+(((-1.0)*r00*sj6*x3191))+(((-1.0)*x3189*x3191))+((r02*x3190))+((r02*x3188)));
evalcond[3]=(((r10*sj6*x3185))+(((-1.0)*r10*sj6*x3191))+(((-1.0)*x3186*x3191))+((r12*x3188))+((x3185*x3186))+(((-1.0)*py))+((r12*x3190)));
evalcond[4]=((((-1.0)*r22*x3184))+((sj5*x3187))+((sj5*x3192)));
evalcond[5]=((1.0)+x3193+((sj5*x3186))+(((-1.0)*r12*x3184)));
evalcond[6]=(x3194+(((-1.0)*r02*x3184))+((sj5*x3189)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3195=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3195;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3196=((1.0)*sj6);
IkReal x3197=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3196)));
j4eval[0]=x3197;
j4eval[1]=IKsign(x3197);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3196))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3198=cj5*cj5;
IkReal x3199=cj6*cj6;
IkReal x3200=r20*r20;
IkReal x3201=r21*r21;
IkReal x3202=r22*r22;
IkReal x3203=(r22*sj5);
IkReal x3204=(cj6*r21);
IkReal x3205=((2.0)*r20*sj6);
IkReal x3206=((1.0)*x3198);
IkReal x3207=(x3199*x3200);
IkReal x3208=(x3199*x3201);
IkReal x3209=((((-1.0)*x3204*x3205))+((x3198*x3200))+((x3198*x3208))+x3207+x3202+x3201+((x3198*x3204*x3205))+(((-1.0)*x3208))+(((2.0)*cj5*x3203*x3204))+(((-1.0)*x3202*x3206))+((cj5*x3203*x3205))+(((-1.0)*x3206*x3207)));
j4eval[0]=x3209;
j4eval[1]=IKsign(x3209);
j4eval[2]=((IKabs((((cj6*r20))+(((-1.0)*r21*sj6)))))+(IKabs((((cj5*r20*sj6))+x3203+((cj5*x3204))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3210=cj5*cj5;
IkReal x3211=cj6*cj6;
IkReal x3212=r20*r20;
IkReal x3213=r21*r21;
IkReal x3214=r22*r22;
IkReal x3215=(cj6*r21);
IkReal x3216=(r22*sj5);
IkReal x3217=((1.0)*x3210);
IkReal x3218=((2.0)*r20*sj6);
IkReal x3219=(x3211*x3212);
IkReal x3220=(x3211*x3213);
CheckValue<IkReal> x3221=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3215*x3218))+((cj5*x3216*x3218))+(((2.0)*cj5*x3215*x3216))+((x3210*x3220))+(((-1.0)*x3214*x3217))+x3214+x3213+x3219+(((-1.0)*x3217*x3219))+(((-1.0)*x3220))+((x3210*x3215*x3218))+((x3210*x3212)))),-1);
if(!x3221.valid){
continue;
}
CheckValue<IkReal> x3222 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*x3215))+((cj5*r20*sj6))+x3216),IKFAST_ATAN2_MAGTHRESH);
if(!x3222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3221.value)))+(x3222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3223=IKsin(j4);
IkReal x3224=IKcos(j4);
IkReal x3225=(cj5*cj6);
IkReal x3226=(r11*sj6);
IkReal x3227=(cj6*r20);
IkReal x3228=(cj5*sj6);
IkReal x3229=(cj6*r10);
IkReal x3230=(r01*sj6);
IkReal x3231=(r21*sj6);
IkReal x3232=(cj6*r00);
IkReal x3233=((1.0)*x3224);
IkReal x3234=((1.0)*x3223);
IkReal x3235=(sj5*x3234);
evalcond[0]=((((-1.0)*x3231*x3233))+((x3224*x3227))+(((-1.0)*r22*x3235))+(((-1.0)*r21*x3225*x3234))+(((-1.0)*r20*x3228*x3234)));
evalcond[1]=((((-1.0)*x3226*x3233))+(((-1.0)*r11*x3225*x3234))+(((-1.0)*r12*x3235))+(((-1.0)*r10*x3228*x3234))+((x3224*x3229)));
evalcond[2]=(((x3223*x3230))+(((-1.0)*x3232*x3234))+(((-1.0)*r00*x3228*x3233))+(((-1.0)*r02*sj5*x3233))+(((-1.0)*r01*x3225*x3233)));
evalcond[3]=((((-1.0)*x3229*x3234))+((x3223*x3226))+(((-1.0)*r11*x3225*x3233))+(((-1.0)*r10*x3228*x3233))+(((-1.0)*r12*sj5*x3233)));
evalcond[4]=((1.0)+(((-1.0)*r02*x3235))+((x3224*x3232))+(((-1.0)*x3230*x3233))+(((-1.0)*r00*x3228*x3234))+(((-1.0)*r01*x3225*x3234)));
evalcond[5]=((1.0)+((x3223*x3231))+(((-1.0)*r22*sj5*x3233))+(((-1.0)*x3227*x3234))+(((-1.0)*r21*x3225*x3233))+(((-1.0)*r20*x3228*x3233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3236=((1.0)*sj6);
CheckValue<IkReal> x3237 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3236))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3237.valid){
continue;
}
CheckValue<IkReal> x3238=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3236)))),-1);
if(!x3238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3237.value)+(((1.5707963267949)*(x3238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3239=IKsin(j4);
IkReal x3240=IKcos(j4);
IkReal x3241=(cj5*cj6);
IkReal x3242=(r11*sj6);
IkReal x3243=(cj6*r20);
IkReal x3244=(cj5*sj6);
IkReal x3245=(cj6*r10);
IkReal x3246=(r01*sj6);
IkReal x3247=(r21*sj6);
IkReal x3248=(cj6*r00);
IkReal x3249=((1.0)*x3240);
IkReal x3250=((1.0)*x3239);
IkReal x3251=(sj5*x3250);
evalcond[0]=((((-1.0)*r20*x3244*x3250))+(((-1.0)*r22*x3251))+((x3240*x3243))+(((-1.0)*r21*x3241*x3250))+(((-1.0)*x3247*x3249)));
evalcond[1]=((((-1.0)*r11*x3241*x3250))+(((-1.0)*x3242*x3249))+((x3240*x3245))+(((-1.0)*r10*x3244*x3250))+(((-1.0)*r12*x3251)));
evalcond[2]=((((-1.0)*r01*x3241*x3249))+(((-1.0)*r02*sj5*x3249))+(((-1.0)*r00*x3244*x3249))+(((-1.0)*x3248*x3250))+((x3239*x3246)));
evalcond[3]=((((-1.0)*x3245*x3250))+(((-1.0)*r12*sj5*x3249))+(((-1.0)*r10*x3244*x3249))+((x3239*x3242))+(((-1.0)*r11*x3241*x3249)));
evalcond[4]=((1.0)+(((-1.0)*r02*x3251))+(((-1.0)*x3246*x3249))+((x3240*x3248))+(((-1.0)*r00*x3244*x3250))+(((-1.0)*r01*x3241*x3250)));
evalcond[5]=((1.0)+(((-1.0)*r22*sj5*x3249))+(((-1.0)*x3243*x3250))+(((-1.0)*r21*x3241*x3249))+((x3239*x3247))+(((-1.0)*r20*x3244*x3249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3252=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3252.valid){
continue;
}
CheckValue<IkReal> x3253 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3252.value)))+(x3253.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3254=IKsin(j4);
IkReal x3255=IKcos(j4);
IkReal x3256=(cj5*cj6);
IkReal x3257=(r11*sj6);
IkReal x3258=(cj6*r20);
IkReal x3259=(cj5*sj6);
IkReal x3260=(cj6*r10);
IkReal x3261=(r01*sj6);
IkReal x3262=(r21*sj6);
IkReal x3263=(cj6*r00);
IkReal x3264=((1.0)*x3255);
IkReal x3265=((1.0)*x3254);
IkReal x3266=(sj5*x3265);
evalcond[0]=((((-1.0)*r20*x3259*x3265))+(((-1.0)*r21*x3256*x3265))+(((-1.0)*x3262*x3264))+(((-1.0)*r22*x3266))+((x3255*x3258)));
evalcond[1]=((((-1.0)*r11*x3256*x3265))+(((-1.0)*r10*x3259*x3265))+(((-1.0)*x3257*x3264))+((x3255*x3260))+(((-1.0)*r12*x3266)));
evalcond[2]=((((-1.0)*r00*x3259*x3264))+(((-1.0)*r02*sj5*x3264))+((x3254*x3261))+(((-1.0)*x3263*x3265))+(((-1.0)*r01*x3256*x3264)));
evalcond[3]=((((-1.0)*r11*x3256*x3264))+(((-1.0)*x3260*x3265))+(((-1.0)*r10*x3259*x3264))+(((-1.0)*r12*sj5*x3264))+((x3254*x3257)));
evalcond[4]=((1.0)+(((-1.0)*r00*x3259*x3265))+(((-1.0)*x3261*x3264))+((x3255*x3263))+(((-1.0)*r02*x3266))+(((-1.0)*r01*x3256*x3265)));
evalcond[5]=((1.0)+(((-1.0)*r20*x3259*x3264))+((x3254*x3262))+(((-1.0)*r21*x3256*x3264))+(((-1.0)*r22*sj5*x3264))+(((-1.0)*x3258*x3265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3267=cj5*cj5;
IkReal x3268=cj6*cj6;
IkReal x3269=r20*r20;
IkReal x3270=r21*r21;
IkReal x3271=r22*r22;
IkReal x3272=(cj6*r21);
IkReal x3273=(r22*sj5);
IkReal x3274=((1.0)*x3267);
IkReal x3275=((2.0)*r20*sj6);
IkReal x3276=(x3268*x3269);
IkReal x3277=(x3268*x3270);
CheckValue<IkReal> x3278=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3272*x3275))+(((-1.0)*x3277))+x3276+x3270+x3271+((x3267*x3277))+(((-1.0)*x3274*x3276))+((x3267*x3269))+((cj5*x3273*x3275))+(((2.0)*cj5*x3272*x3273))+(((-1.0)*x3271*x3274))+((x3267*x3272*x3275)))),-1);
if(!x3278.valid){
continue;
}
CheckValue<IkReal> x3279 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*x3272))+((cj5*r20*sj6))+x3273),IKFAST_ATAN2_MAGTHRESH);
if(!x3279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3278.value)))+(x3279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3280=IKsin(j4);
IkReal x3281=IKcos(j4);
IkReal x3282=(cj5*cj6);
IkReal x3283=(r11*sj6);
IkReal x3284=(cj6*r20);
IkReal x3285=(cj6*r10);
IkReal x3286=(cj5*sj6);
IkReal x3287=(r01*sj6);
IkReal x3288=(r21*sj6);
IkReal x3289=(cj6*r00);
IkReal x3290=((1.0)*x3281);
IkReal x3291=((1.0)*x3280);
IkReal x3292=(sj5*x3291);
evalcond[0]=((((-1.0)*r22*x3292))+(((-1.0)*r20*x3286*x3291))+(((-1.0)*x3288*x3290))+((x3281*x3284))+(((-1.0)*r21*x3282*x3291)));
evalcond[1]=((((-1.0)*r02*sj5*x3290))+((x3280*x3287))+(((-1.0)*r00*x3286*x3290))+(((-1.0)*x3289*x3291))+(((-1.0)*r01*x3282*x3290)));
evalcond[2]=(((x3280*x3283))+(((-1.0)*r12*sj5*x3290))+(((-1.0)*r11*x3282*x3290))+(((-1.0)*r10*x3286*x3290))+(((-1.0)*x3285*x3291)));
evalcond[3]=((((-1.0)*r12*x3292))+cj0+(((-1.0)*x3283*x3290))+(((-1.0)*r11*x3282*x3291))+((x3281*x3285))+(((-1.0)*r10*x3286*x3291)));
evalcond[4]=((1.0)+((x3280*x3288))+(((-1.0)*r22*sj5*x3290))+(((-1.0)*r20*x3286*x3290))+(((-1.0)*x3284*x3291))+(((-1.0)*r21*x3282*x3290)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3287*x3290))+(((-1.0)*r02*x3292))+((x3281*x3289))+(((-1.0)*r00*x3286*x3291))+(((-1.0)*r01*x3282*x3291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3293=(cj0*sj6);
IkReal x3294=(cj0*cj6);
CheckValue<IkReal> x3295 = IKatan2WithCheck(IkReal((((r20*x3294))+(((-1.0)*r21*x3293)))),(((cj5*r21*x3294))+((cj5*r20*x3293))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3295.valid){
continue;
}
CheckValue<IkReal> x3296=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3295.value)+(((1.5707963267949)*(x3296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3297=IKsin(j4);
IkReal x3298=IKcos(j4);
IkReal x3299=(cj5*cj6);
IkReal x3300=(r11*sj6);
IkReal x3301=(cj6*r20);
IkReal x3302=(cj6*r10);
IkReal x3303=(cj5*sj6);
IkReal x3304=(r01*sj6);
IkReal x3305=(r21*sj6);
IkReal x3306=(cj6*r00);
IkReal x3307=((1.0)*x3298);
IkReal x3308=((1.0)*x3297);
IkReal x3309=(sj5*x3308);
evalcond[0]=((((-1.0)*x3305*x3307))+(((-1.0)*r21*x3299*x3308))+(((-1.0)*r22*x3309))+((x3298*x3301))+(((-1.0)*r20*x3303*x3308)));
evalcond[1]=((((-1.0)*r00*x3303*x3307))+(((-1.0)*r02*sj5*x3307))+(((-1.0)*x3306*x3308))+(((-1.0)*r01*x3299*x3307))+((x3297*x3304)));
evalcond[2]=((((-1.0)*r10*x3303*x3307))+(((-1.0)*r11*x3299*x3307))+(((-1.0)*x3302*x3308))+(((-1.0)*r12*sj5*x3307))+((x3297*x3300)));
evalcond[3]=((((-1.0)*r10*x3303*x3308))+cj0+(((-1.0)*r11*x3299*x3308))+((x3298*x3302))+(((-1.0)*r12*x3309))+(((-1.0)*x3300*x3307)));
evalcond[4]=((1.0)+(((-1.0)*r21*x3299*x3307))+(((-1.0)*r22*sj5*x3307))+(((-1.0)*x3301*x3308))+(((-1.0)*r20*x3303*x3307))+((x3297*x3305)));
evalcond[5]=((((-1.0)*r00*x3303*x3308))+(((-1.0)*sj0))+(((-1.0)*x3304*x3307))+((x3298*x3306))+(((-1.0)*r02*x3309))+(((-1.0)*r01*x3299*x3308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3310=((1.0)*cj5);
CheckValue<IkReal> x3311=IKPowWithIntegerCheck(IKsign((((cj6*r11*sj5))+(((-1.0)*r12*x3310))+((r10*sj5*sj6)))),-1);
if(!x3311.valid){
continue;
}
CheckValue<IkReal> x3312 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj6*x3310))+(((-1.0)*r02*sj5))+(((-1.0)*cj6*r01*x3310)))),((((-1.0)*r01*sj6))+((cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x3312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3311.value)))+(x3312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3313=IKsin(j4);
IkReal x3314=IKcos(j4);
IkReal x3315=(cj5*cj6);
IkReal x3316=(r11*sj6);
IkReal x3317=(cj6*r20);
IkReal x3318=(cj6*r10);
IkReal x3319=(cj5*sj6);
IkReal x3320=(r01*sj6);
IkReal x3321=(r21*sj6);
IkReal x3322=(cj6*r00);
IkReal x3323=((1.0)*x3314);
IkReal x3324=((1.0)*x3313);
IkReal x3325=(sj5*x3324);
evalcond[0]=((((-1.0)*r21*x3315*x3324))+(((-1.0)*x3321*x3323))+(((-1.0)*r22*x3325))+((x3314*x3317))+(((-1.0)*r20*x3319*x3324)));
evalcond[1]=((((-1.0)*x3322*x3324))+(((-1.0)*r02*sj5*x3323))+(((-1.0)*r00*x3319*x3323))+(((-1.0)*r01*x3315*x3323))+((x3313*x3320)));
evalcond[2]=(((x3313*x3316))+(((-1.0)*r12*sj5*x3323))+(((-1.0)*x3318*x3324))+(((-1.0)*r10*x3319*x3323))+(((-1.0)*r11*x3315*x3323)));
evalcond[3]=(cj0+((x3314*x3318))+(((-1.0)*r10*x3319*x3324))+(((-1.0)*r12*x3325))+(((-1.0)*x3316*x3323))+(((-1.0)*r11*x3315*x3324)));
evalcond[4]=((1.0)+(((-1.0)*r21*x3315*x3323))+(((-1.0)*r22*sj5*x3323))+(((-1.0)*x3317*x3324))+(((-1.0)*r20*x3319*x3323))+((x3313*x3321)));
evalcond[5]=(((x3314*x3322))+(((-1.0)*sj0))+(((-1.0)*r02*x3325))+(((-1.0)*x3320*x3323))+(((-1.0)*r00*x3319*x3324))+(((-1.0)*r01*x3315*x3324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3326=(cj6*sj5);
IkReal x3327=(sj5*sj6);
IkReal x3328=((0.01)*cj5);
IkReal x3329=(cj5*r22);
IkReal x3330=((1.0)*cj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.069)+((cj6*r21*x3328))+(((0.01)*r22*sj5))+((r20*sj6*x3328))+(((-1.0)*pz))+(((0.37429)*x3329))+(((-0.37429)*r20*x3327))+(((-0.37429)*r21*x3326)));
evalcond[2]=((1.0)+(((-1.0)*x3329))+((r20*x3327))+((r21*x3326)));
evalcond[3]=(((r11*x3326))+(((-1.0)*r12*x3330))+((r10*x3327)));
evalcond[4]=(((r01*x3326))+((r00*x3327))+(((-1.0)*r02*x3330)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3331=((1.26697583102024)*cj5);
IkReal x3332=((0.0338501117053686)*cj5);
IkReal x3333=(r00*sj6);
IkReal x3334=(r10*sj6);
IkReal x3335=((1.26697583102024)*sj5);
IkReal x3336=(cj6*r11);
IkReal x3337=((0.0338501117053686)*sj5);
IkReal x3338=(cj6*r01);
if( IKabs((((x3332*x3334))+((x3332*x3336))+(((-3.38501117053686)*py))+((r12*x3331))+((r12*x3337))+(((-1.0)*x3334*x3335))+(((-1.0)*x3335*x3336)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x3332*x3338))+((x3332*x3333))+(((-3.38501117053686)*px))+((r02*x3337))+((r02*x3331))+(((-1.0)*x3335*x3338))+(((-1.0)*x3333*x3335)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x3332*x3334))+((x3332*x3336))+(((-3.38501117053686)*py))+((r12*x3331))+((r12*x3337))+(((-1.0)*x3334*x3335))+(((-1.0)*x3335*x3336))))+IKsqr((((x3332*x3338))+((x3332*x3333))+(((-3.38501117053686)*px))+((r02*x3337))+((r02*x3331))+(((-1.0)*x3335*x3338))+(((-1.0)*x3333*x3335))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x3332*x3334))+((x3332*x3336))+(((-3.38501117053686)*py))+((r12*x3331))+((r12*x3337))+(((-1.0)*x3334*x3335))+(((-1.0)*x3335*x3336))), (((x3332*x3338))+((x3332*x3333))+(((-3.38501117053686)*px))+((r02*x3337))+((r02*x3331))+(((-1.0)*x3335*x3338))+(((-1.0)*x3333*x3335))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3339=((0.01)*cj5);
IkReal x3340=(cj6*r01);
IkReal x3341=(r00*sj6);
IkReal x3342=((0.01)*sj5);
IkReal x3343=((0.37429)*sj5);
IkReal x3344=((0.37429)*cj5);
IkReal x3345=(r10*sj6);
IkReal x3346=(cj6*r11);
evalcond[0]=((((-1.0)*x3340*x3343))+((r02*x3342))+((r02*x3344))+(((-1.0)*x3341*x3343))+(((-1.0)*px))+(((-0.29542)*(IKcos(j0))))+((x3339*x3341))+((x3339*x3340)));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+(((-1.0)*x3343*x3345))+(((-1.0)*x3343*x3346))+(((-1.0)*py))+((x3339*x3345))+((x3339*x3346))+((r12*x3344))+((r12*x3342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3347=(cj0*sj6);
IkReal x3348=(cj0*cj6);
IkReal x3349=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3349;
j4eval[1]=((IKabs(((((-1.0)*r21*x3347))+((r20*x3348)))))+(IKabs((((cj5*r20*x3347))+((cj0*r22*sj5))+((cj5*r21*x3348))))));
j4eval[2]=IKsign(x3349);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3350=cj5*cj5;
IkReal x3351=cj6*cj6;
IkReal x3352=(r00*r20);
IkReal x3353=(r02*r22);
IkReal x3354=(r22*sj5);
IkReal x3355=(cj6*r21);
IkReal x3356=(r00*sj6);
IkReal x3357=(r20*sj6);
IkReal x3358=(cj6*r01);
IkReal x3359=(cj0*cj5);
IkReal x3360=((1.0)*x3350);
IkReal x3361=(cj5*r02*sj5);
IkReal x3362=(r01*r21*x3351);
IkReal x3363=(((cj5*x3354*x3356))+((cj5*x3354*x3358))+((x3350*x3355*x3356))+((x3350*x3362))+x3353+(((-1.0)*x3362))+((r01*r21))+((x3357*x3361))+(((-1.0)*x3355*x3356))+((x3351*x3352))+(((-1.0)*x3357*x3358))+(((-1.0)*x3353*x3360))+((x3350*x3357*x3358))+((x3355*x3361))+((x3350*x3352))+(((-1.0)*x3351*x3352*x3360)));
j4eval[0]=x3363;
j4eval[1]=IKsign(x3363);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x3355*x3359))+((cj0*x3354))+((x3357*x3359))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3364=cj6*cj6;
IkReal x3365=cj5*cj5;
IkReal x3366=(r12*sj5);
IkReal x3367=(r22*sj5);
IkReal x3368=((1.0)*r11);
IkReal x3369=(r20*sj0);
IkReal x3370=(r10*r20);
IkReal x3371=(cj5*sj6);
IkReal x3372=(cj6*r10);
IkReal x3373=(r12*r22);
IkReal x3374=(cj5*cj6*r21);
IkReal x3375=(r21*x3364);
IkReal x3376=(cj6*r20*sj6);
IkReal x3377=(r11*x3365);
IkReal x3378=((1.0)*r21*sj6);
IkReal x3379=((1.0)*x3365);
IkReal x3380=(((r20*x3366*x3371))+((x3375*x3377))+(((-1.0)*x3373*x3379))+((x3364*x3370))+((r11*r21))+x3373+((x3376*x3377))+((r21*sj6*x3365*x3372))+((x3365*x3370))+((x3366*x3374))+((cj5*cj6*r11*x3367))+(((-1.0)*x3364*x3370*x3379))+(((-1.0)*x3372*x3378))+(((-1.0)*x3368*x3375))+(((-1.0)*x3368*x3376))+((r10*x3367*x3371)));
j4eval[0]=x3380;
j4eval[1]=IKsign(x3380);
j4eval[2]=((IKabs((((cj6*x3369))+(((-1.0)*sj0*x3378)))))+(IKabs((((sj0*x3374))+((x3369*x3371))+((sj0*x3367))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3381=((1.0)*cj5);
IkReal x3382=((0.01)*cj5);
IkReal x3383=(cj6*r11);
IkReal x3384=(r20*sj6);
IkReal x3385=((0.01)*sj5);
IkReal x3386=(cj6*r01);
IkReal x3387=((0.37429)*cj5);
IkReal x3388=((0.37429)*sj5);
IkReal x3389=(cj6*r21);
IkReal x3390=(r10*sj5*sj6);
IkReal x3391=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+((x3382*x3384))+((x3382*x3389))+(((-1.0)*x3384*x3388))+(((-1.0)*pz))+((r22*x3387))+((r22*x3385))+(((-1.0)*x3388*x3389)));
evalcond[2]=((-0.29542)+((x3382*x3386))+(((-1.0)*r00*sj6*x3388))+((r00*sj6*x3382))+(((-1.0)*px))+((r02*x3387))+((r02*x3385))+(((-1.0)*x3386*x3388)));
evalcond[3]=(((x3382*x3383))+(((-1.0)*x3383*x3388))+(((-1.0)*r10*sj6*x3388))+(((-1.0)*py))+((r12*x3387))+((r12*x3385))+((r10*sj6*x3382)));
evalcond[4]=((1.0)+(((-1.0)*r22*x3381))+((sj5*x3384))+((sj5*x3389)));
evalcond[5]=(x3390+(((-1.0)*r12*x3381))+((sj5*x3383)));
evalcond[6]=(x3391+(((-1.0)*r02*x3381))+((sj5*x3386)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3392=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3392;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3393=((1.0)*sj5);
IkReal x3394=(((cj5*r22))+(((-1.0)*r20*sj6*x3393))+(((-1.0)*cj6*r21*x3393)));
j4eval[0]=x3394;
j4eval[1]=IKsign(x3394);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3395=cj6*cj6;
IkReal x3396=r01*r01;
IkReal x3397=cj5*cj5;
IkReal x3398=r00*r00;
IkReal x3399=r02*r02;
IkReal x3400=(cj6*r00);
IkReal x3401=(r02*sj5);
IkReal x3402=(cj5*cj6*r01);
IkReal x3403=((2.0)*r01*sj6);
IkReal x3404=(cj5*r00*sj6);
IkReal x3405=((1.0)*x3397);
IkReal x3406=(x3395*x3398);
IkReal x3407=(x3395*x3396);
IkReal x3408=((((-1.0)*x3400*x3403))+(((-1.0)*x3405*x3406))+(((-1.0)*x3407))+(((2.0)*x3401*x3402))+(((2.0)*x3401*x3404))+x3396+x3399+(((-1.0)*x3399*x3405))+x3406+((x3397*x3400*x3403))+((x3397*x3407))+((x3397*x3398)));
j4eval[0]=x3408;
j4eval[1]=((IKabs((x3401+x3402+x3404)))+(IKabs(((((-1.0)*r01*sj6))+x3400))));
j4eval[2]=IKsign(x3408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3409=cj6*cj6;
IkReal x3410=r01*r01;
IkReal x3411=cj5*cj5;
IkReal x3412=r00*r00;
IkReal x3413=r02*r02;
IkReal x3414=(cj6*r00);
IkReal x3415=((2.0)*r01);
IkReal x3416=(cj5*cj6);
IkReal x3417=(r02*sj5);
IkReal x3418=(cj5*r00*sj6);
IkReal x3419=(x3411*x3412);
IkReal x3420=(x3409*x3410);
CheckValue<IkReal> x3421=IKPowWithIntegerCheck(IKsign((((x3409*x3412))+(((-1.0)*x3409*x3419))+(((-1.0)*x3411*x3413))+x3413+x3410+x3419+(((-1.0)*x3420))+(((2.0)*x3417*x3418))+(((-1.0)*sj6*x3414*x3415))+((x3411*x3420))+((x3415*x3416*x3417))+((sj6*x3411*x3414*x3415)))),-1);
if(!x3421.valid){
continue;
}
CheckValue<IkReal> x3422 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3414)),(x3417+x3418+((r01*x3416))),IKFAST_ATAN2_MAGTHRESH);
if(!x3422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3421.value)))+(x3422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3423=IKsin(j4);
IkReal x3424=IKcos(j4);
IkReal x3425=(cj5*cj6);
IkReal x3426=(r11*sj6);
IkReal x3427=(cj6*r20);
IkReal x3428=(cj6*r10);
IkReal x3429=(cj5*sj6);
IkReal x3430=(r21*sj6);
IkReal x3431=(cj6*r00);
IkReal x3432=(r01*sj6);
IkReal x3433=((1.0)*x3424);
IkReal x3434=((1.0)*x3423);
IkReal x3435=(sj5*x3434);
evalcond[0]=(((x3424*x3427))+(((-1.0)*x3430*x3433))+(((-1.0)*r21*x3425*x3434))+(((-1.0)*r22*x3435))+(((-1.0)*r20*x3429*x3434)));
evalcond[1]=(((x3424*x3431))+(((-1.0)*x3432*x3433))+(((-1.0)*r01*x3425*x3434))+(((-1.0)*r00*x3429*x3434))+(((-1.0)*r02*x3435)));
evalcond[2]=((((-1.0)*x3427*x3434))+(((-1.0)*r21*x3425*x3433))+(((-1.0)*r22*sj5*x3433))+(((-1.0)*r20*x3429*x3433))+((x3423*x3430)));
evalcond[3]=((((-1.0)*x3428*x3434))+(((-1.0)*r12*sj5*x3433))+(((-1.0)*r11*x3425*x3433))+((x3423*x3426))+(((-1.0)*r10*x3429*x3433)));
evalcond[4]=((1.0)+((x3424*x3428))+(((-1.0)*r12*x3435))+(((-1.0)*x3426*x3433))+(((-1.0)*r11*x3425*x3434))+(((-1.0)*r10*x3429*x3434)));
evalcond[5]=((1.0)+(((-1.0)*x3431*x3434))+(((-1.0)*r01*x3425*x3433))+(((-1.0)*r02*sj5*x3433))+(((-1.0)*r00*x3429*x3433))+((x3423*x3432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3436=((1.0)*sj5);
CheckValue<IkReal> x3437 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x3437.valid){
continue;
}
CheckValue<IkReal> x3438=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x3436))+(((-1.0)*r20*sj6*x3436)))),-1);
if(!x3438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3437.value)+(((1.5707963267949)*(x3438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3439=IKsin(j4);
IkReal x3440=IKcos(j4);
IkReal x3441=(cj5*cj6);
IkReal x3442=(r11*sj6);
IkReal x3443=(cj6*r20);
IkReal x3444=(cj6*r10);
IkReal x3445=(cj5*sj6);
IkReal x3446=(r21*sj6);
IkReal x3447=(cj6*r00);
IkReal x3448=(r01*sj6);
IkReal x3449=((1.0)*x3440);
IkReal x3450=((1.0)*x3439);
IkReal x3451=(sj5*x3450);
evalcond[0]=((((-1.0)*r20*x3445*x3450))+(((-1.0)*r21*x3441*x3450))+(((-1.0)*x3446*x3449))+((x3440*x3443))+(((-1.0)*r22*x3451)));
evalcond[1]=((((-1.0)*r01*x3441*x3450))+(((-1.0)*x3448*x3449))+(((-1.0)*r00*x3445*x3450))+((x3440*x3447))+(((-1.0)*r02*x3451)));
evalcond[2]=((((-1.0)*r20*x3445*x3449))+(((-1.0)*r22*sj5*x3449))+(((-1.0)*r21*x3441*x3449))+(((-1.0)*x3443*x3450))+((x3439*x3446)));
evalcond[3]=((((-1.0)*r10*x3445*x3449))+(((-1.0)*r11*x3441*x3449))+(((-1.0)*x3444*x3450))+(((-1.0)*r12*sj5*x3449))+((x3439*x3442)));
evalcond[4]=((1.0)+(((-1.0)*r11*x3441*x3450))+(((-1.0)*r10*x3445*x3450))+(((-1.0)*r12*x3451))+(((-1.0)*x3442*x3449))+((x3440*x3444)));
evalcond[5]=((1.0)+(((-1.0)*x3447*x3450))+(((-1.0)*r01*x3441*x3449))+((x3439*x3448))+(((-1.0)*r02*sj5*x3449))+(((-1.0)*r00*x3445*x3449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3452 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3452.valid){
continue;
}
CheckValue<IkReal> x3453=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3452.value)+(((1.5707963267949)*(x3453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3454=IKsin(j4);
IkReal x3455=IKcos(j4);
IkReal x3456=(cj5*cj6);
IkReal x3457=(r11*sj6);
IkReal x3458=(cj6*r20);
IkReal x3459=(cj6*r10);
IkReal x3460=(cj5*sj6);
IkReal x3461=(r21*sj6);
IkReal x3462=(cj6*r00);
IkReal x3463=(r01*sj6);
IkReal x3464=((1.0)*x3455);
IkReal x3465=((1.0)*x3454);
IkReal x3466=(sj5*x3465);
evalcond[0]=((((-1.0)*x3461*x3464))+((x3455*x3458))+(((-1.0)*r21*x3456*x3465))+(((-1.0)*r22*x3466))+(((-1.0)*r20*x3460*x3465)));
evalcond[1]=(((x3455*x3462))+(((-1.0)*x3463*x3464))+(((-1.0)*r00*x3460*x3465))+(((-1.0)*r01*x3456*x3465))+(((-1.0)*r02*x3466)));
evalcond[2]=((((-1.0)*r22*sj5*x3464))+(((-1.0)*x3458*x3465))+(((-1.0)*r21*x3456*x3464))+((x3454*x3461))+(((-1.0)*r20*x3460*x3464)));
evalcond[3]=((((-1.0)*r10*x3460*x3464))+(((-1.0)*r12*sj5*x3464))+(((-1.0)*r11*x3456*x3464))+(((-1.0)*x3459*x3465))+((x3454*x3457)));
evalcond[4]=((1.0)+(((-1.0)*r10*x3460*x3465))+((x3455*x3459))+(((-1.0)*r11*x3456*x3465))+(((-1.0)*r12*x3466))+(((-1.0)*x3457*x3464)));
evalcond[5]=((1.0)+(((-1.0)*r00*x3460*x3464))+(((-1.0)*r01*x3456*x3464))+(((-1.0)*x3462*x3465))+(((-1.0)*r02*sj5*x3464))+((x3454*x3463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3467=((1.0)*cj5);
IkReal x3468=((0.01)*cj5);
IkReal x3469=(cj6*r11);
IkReal x3470=(r20*sj6);
IkReal x3471=((0.01)*sj5);
IkReal x3472=(cj6*r01);
IkReal x3473=((0.37429)*cj5);
IkReal x3474=((0.37429)*sj5);
IkReal x3475=(cj6*r21);
IkReal x3476=(r10*sj5*sj6);
IkReal x3477=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*pz))+((x3468*x3470))+((x3468*x3475))+(((-1.0)*x3470*x3474))+(((-1.0)*x3474*x3475))+((r22*x3471))+((r22*x3473)));
evalcond[2]=((0.29542)+((r00*sj6*x3468))+(((-1.0)*x3472*x3474))+(((-1.0)*px))+((x3468*x3472))+((r02*x3473))+((r02*x3471))+(((-1.0)*r00*sj6*x3474)));
evalcond[3]=(((r12*x3471))+((r12*x3473))+(((-1.0)*py))+(((-1.0)*x3469*x3474))+((x3468*x3469))+(((-1.0)*r10*sj6*x3474))+((r10*sj6*x3468)));
evalcond[4]=((1.0)+((sj5*x3475))+((sj5*x3470))+(((-1.0)*r22*x3467)));
evalcond[5]=(((sj5*x3469))+x3476+(((-1.0)*r12*x3467)));
evalcond[6]=((((-1.0)*r02*x3467))+((sj5*x3472))+x3477);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3478=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3478;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x3478);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3479=((1.0)*sj6);
IkReal x3480=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x3479))+((cj5*r02)));
j4eval[0]=x3480;
j4eval[1]=IKsign(x3480);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3479))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3481=cj6*cj6;
IkReal x3482=cj5*cj5;
IkReal x3483=r00*r00;
IkReal x3484=r01*r01;
IkReal x3485=r02*r02;
IkReal x3486=(cj6*r00);
IkReal x3487=(cj5*cj6*r01);
IkReal x3488=((2.0)*r02*sj5);
IkReal x3489=((1.0)*x3481);
IkReal x3490=((2.0)*r01*sj6);
IkReal x3491=(cj5*r00*sj6);
IkReal x3492=(x3482*x3483);
IkReal x3493=((((-1.0)*x3483*x3489))+((x3481*x3492))+(((-1.0)*x3482*x3484*x3489))+(((-1.0)*x3488*x3491))+(((-1.0)*x3482*x3486*x3490))+((x3482*x3485))+(((-1.0)*x3484))+(((-1.0)*x3485))+((x3486*x3490))+(((-1.0)*x3487*x3488))+(((-1.0)*x3492))+((x3481*x3484)));
j4eval[0]=x3493;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x3486)))+(IKabs((x3491+x3487+((r02*sj5))))));
j4eval[2]=IKsign(x3493);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3494=cj6*cj6;
IkReal x3495=cj5*cj5;
IkReal x3496=r00*r00;
IkReal x3497=r01*r01;
IkReal x3498=r02*r02;
IkReal x3499=(cj6*r00);
IkReal x3500=(cj5*cj6*r01);
IkReal x3501=((2.0)*r02*sj5);
IkReal x3502=((1.0)*x3494);
IkReal x3503=((2.0)*r01*sj6);
IkReal x3504=(cj5*r00*sj6);
IkReal x3505=(x3495*x3496);
CheckValue<IkReal> x3506 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3499)),(x3500+x3504+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3506.valid){
continue;
}
CheckValue<IkReal> x3507=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3495*x3499*x3503))+((x3494*x3497))+((x3499*x3503))+(((-1.0)*x3495*x3497*x3502))+(((-1.0)*x3501*x3504))+(((-1.0)*x3496*x3502))+((x3494*x3505))+(((-1.0)*x3497))+(((-1.0)*x3498))+(((-1.0)*x3505))+((x3495*x3498))+(((-1.0)*x3500*x3501)))),-1);
if(!x3507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3506.value)+(((1.5707963267949)*(x3507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3508=IKsin(j4);
IkReal x3509=IKcos(j4);
IkReal x3510=(cj5*cj6);
IkReal x3511=(r11*sj6);
IkReal x3512=(cj6*r20);
IkReal x3513=(cj6*r10);
IkReal x3514=(cj5*sj6);
IkReal x3515=(r21*sj6);
IkReal x3516=(cj6*r00);
IkReal x3517=(r01*sj6);
IkReal x3518=((1.0)*x3509);
IkReal x3519=((1.0)*x3508);
IkReal x3520=(sj5*x3519);
evalcond[0]=((((-1.0)*x3515*x3518))+(((-1.0)*r21*x3510*x3519))+(((-1.0)*r22*x3520))+(((-1.0)*r20*x3514*x3519))+((x3509*x3512)));
evalcond[1]=((((-1.0)*r02*x3520))+(((-1.0)*x3517*x3518))+((x3509*x3516))+(((-1.0)*r01*x3510*x3519))+(((-1.0)*r00*x3514*x3519)));
evalcond[2]=((((-1.0)*x3512*x3519))+(((-1.0)*r21*x3510*x3518))+(((-1.0)*r22*sj5*x3518))+((x3508*x3515))+(((-1.0)*r20*x3514*x3518)));
evalcond[3]=((((-1.0)*r11*x3510*x3518))+(((-1.0)*r10*x3514*x3518))+(((-1.0)*x3513*x3519))+(((-1.0)*r12*sj5*x3518))+((x3508*x3511)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x3510*x3519))+(((-1.0)*r10*x3514*x3519))+(((-1.0)*x3511*x3518))+((x3509*x3513))+(((-1.0)*r12*x3520)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x3518))+((x3508*x3517))+(((-1.0)*r01*x3510*x3518))+(((-1.0)*r00*x3514*x3518))+(((-1.0)*x3516*x3519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3521=((1.0)*sj6);
CheckValue<IkReal> x3522 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x3521)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3522.valid){
continue;
}
CheckValue<IkReal> x3523=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x3521))+((cj5*r02)))),-1);
if(!x3523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3522.value)+(((1.5707963267949)*(x3523.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3524=IKsin(j4);
IkReal x3525=IKcos(j4);
IkReal x3526=(cj5*cj6);
IkReal x3527=(r11*sj6);
IkReal x3528=(cj6*r20);
IkReal x3529=(cj6*r10);
IkReal x3530=(cj5*sj6);
IkReal x3531=(r21*sj6);
IkReal x3532=(cj6*r00);
IkReal x3533=(r01*sj6);
IkReal x3534=((1.0)*x3525);
IkReal x3535=((1.0)*x3524);
IkReal x3536=(sj5*x3535);
evalcond[0]=(((x3525*x3528))+(((-1.0)*x3531*x3534))+(((-1.0)*r21*x3526*x3535))+(((-1.0)*r20*x3530*x3535))+(((-1.0)*r22*x3536)));
evalcond[1]=((((-1.0)*r01*x3526*x3535))+(((-1.0)*r02*x3536))+(((-1.0)*x3533*x3534))+((x3525*x3532))+(((-1.0)*r00*x3530*x3535)));
evalcond[2]=((((-1.0)*r22*sj5*x3534))+(((-1.0)*x3528*x3535))+(((-1.0)*r21*x3526*x3534))+(((-1.0)*r20*x3530*x3534))+((x3524*x3531)));
evalcond[3]=(((x3524*x3527))+(((-1.0)*r10*x3530*x3534))+(((-1.0)*r11*x3526*x3534))+(((-1.0)*x3529*x3535))+(((-1.0)*r12*sj5*x3534)));
evalcond[4]=((-1.0)+((x3525*x3529))+(((-1.0)*r12*x3536))+(((-1.0)*r10*x3530*x3535))+(((-1.0)*r11*x3526*x3535))+(((-1.0)*x3527*x3534)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x3526*x3534))+(((-1.0)*r02*sj5*x3534))+((x3524*x3533))+(((-1.0)*x3532*x3535))+(((-1.0)*r00*x3530*x3534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3537=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3537.valid){
continue;
}
CheckValue<IkReal> x3538 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x3538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3537.value)))+(x3538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3539=IKsin(j4);
IkReal x3540=IKcos(j4);
IkReal x3541=(cj5*cj6);
IkReal x3542=(r11*sj6);
IkReal x3543=(cj6*r20);
IkReal x3544=(cj6*r10);
IkReal x3545=(cj5*sj6);
IkReal x3546=(r21*sj6);
IkReal x3547=(cj6*r00);
IkReal x3548=(r01*sj6);
IkReal x3549=((1.0)*x3540);
IkReal x3550=((1.0)*x3539);
IkReal x3551=(sj5*x3550);
evalcond[0]=((((-1.0)*r20*x3545*x3550))+(((-1.0)*r21*x3541*x3550))+((x3540*x3543))+(((-1.0)*x3546*x3549))+(((-1.0)*r22*x3551)));
evalcond[1]=((((-1.0)*r00*x3545*x3550))+(((-1.0)*r01*x3541*x3550))+((x3540*x3547))+(((-1.0)*x3548*x3549))+(((-1.0)*r02*x3551)));
evalcond[2]=((((-1.0)*r22*sj5*x3549))+(((-1.0)*r20*x3545*x3549))+((x3539*x3546))+(((-1.0)*x3543*x3550))+(((-1.0)*r21*x3541*x3549)));
evalcond[3]=((((-1.0)*r10*x3545*x3549))+((x3539*x3542))+(((-1.0)*r12*sj5*x3549))+(((-1.0)*r11*x3541*x3549))+(((-1.0)*x3544*x3550)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x3545*x3550))+(((-1.0)*x3542*x3549))+(((-1.0)*r11*x3541*x3550))+((x3540*x3544))+(((-1.0)*r12*x3551)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x3549))+((x3539*x3548))+(((-1.0)*r00*x3545*x3549))+(((-1.0)*r01*x3541*x3549))+(((-1.0)*x3547*x3550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3552=((1.0)*cj5);
IkReal x3553=((0.01)*cj5);
IkReal x3554=(cj6*r11);
IkReal x3555=(r20*sj6);
IkReal x3556=((0.01)*sj5);
IkReal x3557=(cj6*r01);
IkReal x3558=((0.37429)*cj5);
IkReal x3559=((0.37429)*sj5);
IkReal x3560=(cj6*r21);
IkReal x3561=(r10*sj5*sj6);
IkReal x3562=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x3555*x3559))+(((-1.0)*pz))+(((-1.0)*x3559*x3560))+((x3553*x3555))+((r22*x3558))+((r22*x3556))+((x3553*x3560)));
evalcond[2]=((((-1.0)*x3557*x3559))+((r00*sj6*x3553))+(((-1.0)*r00*sj6*x3559))+(((-1.0)*px))+((x3553*x3557))+((r02*x3556))+((r02*x3558)));
evalcond[3]=((-0.29542)+(((-1.0)*x3554*x3559))+((r12*x3558))+((r12*x3556))+(((-1.0)*py))+((x3553*x3554))+((r10*sj6*x3553))+(((-1.0)*r10*sj6*x3559)));
evalcond[4]=((1.0)+((sj5*x3560))+(((-1.0)*r22*x3552))+((sj5*x3555)));
evalcond[5]=(x3561+(((-1.0)*r12*x3552))+((sj5*x3554)));
evalcond[6]=(x3562+((sj5*x3557))+(((-1.0)*r02*x3552)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3563=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x3563;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3564=((1.0)*sj5);
IkReal x3565=(((cj5*r22))+(((-1.0)*r20*sj6*x3564))+(((-1.0)*cj6*r21*x3564)));
j4eval[0]=x3565;
j4eval[1]=IKsign(x3565);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3566=r11*r11;
IkReal x3567=cj5*cj5;
IkReal x3568=cj6*cj6;
IkReal x3569=r10*r10;
IkReal x3570=r12*r12;
IkReal x3571=(r12*sj5);
IkReal x3572=(cj6*r10);
IkReal x3573=((1.0)*x3568);
IkReal x3574=(cj5*cj6*r11);
IkReal x3575=(cj5*r10*sj6);
IkReal x3576=((2.0)*r11*sj6);
IkReal x3577=(x3567*x3569);
IkReal x3578=((((-1.0)*x3567*x3570))+(((2.0)*x3571*x3574))+(((2.0)*x3571*x3575))+(((-1.0)*x3566*x3573))+((x3566*x3567*x3568))+x3577+x3570+x3566+((x3568*x3569))+(((-1.0)*x3573*x3577))+(((-1.0)*x3572*x3576))+((x3567*x3572*x3576)));
j4eval[0]=x3578;
j4eval[1]=IKsign(x3578);
j4eval[2]=((IKabs((x3572+(((-1.0)*r11*sj6)))))+(IKabs((x3575+x3574+x3571))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3579=r11*r11;
IkReal x3580=cj5*cj5;
IkReal x3581=cj6*cj6;
IkReal x3582=r10*r10;
IkReal x3583=r12*r12;
IkReal x3584=(r10*sj6);
IkReal x3585=(r12*sj5);
IkReal x3586=((1.0)*x3581);
IkReal x3587=(cj5*cj6*r11);
IkReal x3588=((2.0)*cj6*r11);
IkReal x3589=(x3580*x3582);
CheckValue<IkReal> x3590=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*x3584*x3585))+x3579+x3583+x3589+(((-1.0)*x3580*x3583))+(((-1.0)*x3584*x3588))+(((-1.0)*x3579*x3586))+((x3579*x3580*x3581))+(((-1.0)*x3586*x3589))+((x3581*x3582))+(((2.0)*x3585*x3587))+((x3580*x3584*x3588)))),-1);
if(!x3590.valid){
continue;
}
CheckValue<IkReal> x3591 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x3584))+x3585+x3587),IKFAST_ATAN2_MAGTHRESH);
if(!x3591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3590.value)))+(x3591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3592=IKsin(j4);
IkReal x3593=IKcos(j4);
IkReal x3594=(cj5*cj6);
IkReal x3595=(r11*sj6);
IkReal x3596=(cj6*r20);
IkReal x3597=(cj6*r10);
IkReal x3598=(cj5*sj6);
IkReal x3599=(r01*sj6);
IkReal x3600=(r21*sj6);
IkReal x3601=(cj6*r00);
IkReal x3602=((1.0)*x3593);
IkReal x3603=((1.0)*x3592);
IkReal x3604=(sj5*x3603);
evalcond[0]=((((-1.0)*r20*x3598*x3603))+((x3593*x3596))+(((-1.0)*x3600*x3602))+(((-1.0)*r22*x3604))+(((-1.0)*r21*x3594*x3603)));
evalcond[1]=((((-1.0)*r11*x3594*x3603))+(((-1.0)*r10*x3598*x3603))+(((-1.0)*r12*x3604))+((x3593*x3597))+(((-1.0)*x3595*x3602)));
evalcond[2]=((((-1.0)*r20*x3598*x3602))+((x3592*x3600))+(((-1.0)*r22*sj5*x3602))+(((-1.0)*r21*x3594*x3602))+(((-1.0)*x3596*x3603)));
evalcond[3]=(((x3592*x3599))+(((-1.0)*x3601*x3603))+(((-1.0)*r01*x3594*x3602))+(((-1.0)*r00*x3598*x3602))+(((-1.0)*r02*sj5*x3602)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x3604))+((x3593*x3601))+(((-1.0)*r01*x3594*x3603))+(((-1.0)*r00*x3598*x3603))+(((-1.0)*x3599*x3602)));
evalcond[5]=((1.0)+(((-1.0)*r11*x3594*x3602))+(((-1.0)*r10*x3598*x3602))+((x3592*x3595))+(((-1.0)*x3597*x3603))+(((-1.0)*r12*sj5*x3602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3605=((1.0)*sj5);
CheckValue<IkReal> x3606 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3606.valid){
continue;
}
CheckValue<IkReal> x3607=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x3605))+(((-1.0)*cj6*r21*x3605)))),-1);
if(!x3607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3606.value)+(((1.5707963267949)*(x3607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3608=IKsin(j4);
IkReal x3609=IKcos(j4);
IkReal x3610=(cj5*cj6);
IkReal x3611=(r11*sj6);
IkReal x3612=(cj6*r20);
IkReal x3613=(cj6*r10);
IkReal x3614=(cj5*sj6);
IkReal x3615=(r01*sj6);
IkReal x3616=(r21*sj6);
IkReal x3617=(cj6*r00);
IkReal x3618=((1.0)*x3609);
IkReal x3619=((1.0)*x3608);
IkReal x3620=(sj5*x3619);
evalcond[0]=((((-1.0)*x3616*x3618))+((x3609*x3612))+(((-1.0)*r21*x3610*x3619))+(((-1.0)*r22*x3620))+(((-1.0)*r20*x3614*x3619)));
evalcond[1]=((((-1.0)*x3611*x3618))+((x3609*x3613))+(((-1.0)*r10*x3614*x3619))+(((-1.0)*r12*x3620))+(((-1.0)*r11*x3610*x3619)));
evalcond[2]=(((x3608*x3616))+(((-1.0)*x3612*x3619))+(((-1.0)*r21*x3610*x3618))+(((-1.0)*r22*sj5*x3618))+(((-1.0)*r20*x3614*x3618)));
evalcond[3]=((((-1.0)*r00*x3614*x3618))+(((-1.0)*x3617*x3619))+((x3608*x3615))+(((-1.0)*r01*x3610*x3618))+(((-1.0)*r02*sj5*x3618)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x3614*x3619))+((x3609*x3617))+(((-1.0)*x3615*x3618))+(((-1.0)*r01*x3610*x3619))+(((-1.0)*r02*x3620)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x3618))+((x3608*x3611))+(((-1.0)*x3613*x3619))+(((-1.0)*r10*x3614*x3618))+(((-1.0)*r11*x3610*x3618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3621 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3621.valid){
continue;
}
CheckValue<IkReal> x3622=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x3622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3621.value)+(((1.5707963267949)*(x3622.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3623=IKsin(j4);
IkReal x3624=IKcos(j4);
IkReal x3625=(cj5*cj6);
IkReal x3626=(r11*sj6);
IkReal x3627=(cj6*r20);
IkReal x3628=(cj6*r10);
IkReal x3629=(cj5*sj6);
IkReal x3630=(r01*sj6);
IkReal x3631=(r21*sj6);
IkReal x3632=(cj6*r00);
IkReal x3633=((1.0)*x3624);
IkReal x3634=((1.0)*x3623);
IkReal x3635=(sj5*x3634);
evalcond[0]=((((-1.0)*r20*x3629*x3634))+(((-1.0)*x3631*x3633))+(((-1.0)*r22*x3635))+((x3624*x3627))+(((-1.0)*r21*x3625*x3634)));
evalcond[1]=((((-1.0)*r11*x3625*x3634))+(((-1.0)*r12*x3635))+((x3624*x3628))+(((-1.0)*x3626*x3633))+(((-1.0)*r10*x3629*x3634)));
evalcond[2]=((((-1.0)*x3627*x3634))+(((-1.0)*r20*x3629*x3633))+((x3623*x3631))+(((-1.0)*r22*sj5*x3633))+(((-1.0)*r21*x3625*x3633)));
evalcond[3]=(((x3623*x3630))+(((-1.0)*r00*x3629*x3633))+(((-1.0)*r02*sj5*x3633))+(((-1.0)*r01*x3625*x3633))+(((-1.0)*x3632*x3634)));
evalcond[4]=((-1.0)+(((-1.0)*x3630*x3633))+(((-1.0)*r00*x3629*x3634))+(((-1.0)*r02*x3635))+(((-1.0)*r01*x3625*x3634))+((x3624*x3632)));
evalcond[5]=((1.0)+(((-1.0)*r11*x3625*x3633))+(((-1.0)*x3628*x3634))+(((-1.0)*r12*sj5*x3633))+((x3623*x3626))+(((-1.0)*r10*x3629*x3633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3636=((1.0)*cj5);
IkReal x3637=((0.01)*cj5);
IkReal x3638=(cj6*r11);
IkReal x3639=(r20*sj6);
IkReal x3640=((0.01)*sj5);
IkReal x3641=(cj6*r01);
IkReal x3642=((0.37429)*cj5);
IkReal x3643=((0.37429)*sj5);
IkReal x3644=(cj6*r21);
IkReal x3645=(r10*sj5*sj6);
IkReal x3646=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x3643*x3644))+(((-1.0)*x3639*x3643))+((x3637*x3644))+(((-1.0)*pz))+((x3637*x3639))+((r22*x3642))+((r22*x3640)));
evalcond[2]=((((-1.0)*r00*sj6*x3643))+((x3637*x3641))+(((-1.0)*px))+((r00*sj6*x3637))+((r02*x3642))+((r02*x3640))+(((-1.0)*x3641*x3643)));
evalcond[3]=((0.29542)+((r12*x3642))+((r12*x3640))+((r10*sj6*x3637))+(((-1.0)*py))+((x3637*x3638))+(((-1.0)*x3638*x3643))+(((-1.0)*r10*sj6*x3643)));
evalcond[4]=((1.0)+((sj5*x3639))+(((-1.0)*r22*x3636))+((sj5*x3644)));
evalcond[5]=(((sj5*x3638))+(((-1.0)*r12*x3636))+x3645);
evalcond[6]=(x3646+(((-1.0)*r02*x3636))+((sj5*x3641)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3647=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3647;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3647);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3648=((1.0)*sj6);
IkReal x3649=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3648)));
j4eval[0]=x3649;
j4eval[1]=IKsign(x3649);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3648))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3650=cj6*cj6;
IkReal x3651=cj5*cj5;
IkReal x3652=r10*r10;
IkReal x3653=r11*r11;
IkReal x3654=r12*r12;
IkReal x3655=(r10*sj6);
IkReal x3656=(r12*sj5);
IkReal x3657=((2.0)*cj6*r11);
IkReal x3658=((1.0)*x3652);
IkReal x3659=(x3650*x3653);
IkReal x3660=(((x3651*x3654))+(((-1.0)*x3651*x3659))+(((-1.0)*cj5*x3656*x3657))+x3659+((x3650*x3651*x3652))+(((-1.0)*x3653))+(((-1.0)*x3654))+(((-1.0)*x3650*x3658))+(((-1.0)*x3651*x3658))+((x3655*x3657))+(((-2.0)*cj5*x3655*x3656))+(((-1.0)*x3651*x3655*x3657)));
j4eval[0]=x3660;
j4eval[1]=((IKabs((x3656+((cj5*cj6*r11))+((cj5*x3655)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x3660);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3661=cj6*cj6;
IkReal x3662=cj5*cj5;
IkReal x3663=r10*r10;
IkReal x3664=r11*r11;
IkReal x3665=r12*r12;
IkReal x3666=(r10*sj6);
IkReal x3667=(r12*sj5);
IkReal x3668=((2.0)*cj6*r11);
IkReal x3669=(x3661*x3664);
IkReal x3670=(x3662*x3663);
CheckValue<IkReal> x3671=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3661*x3663))+((x3662*x3665))+(((-2.0)*cj5*x3666*x3667))+(((-1.0)*x3665))+(((-1.0)*x3664))+((x3661*x3670))+x3669+(((-1.0)*x3670))+(((-1.0)*cj5*x3667*x3668))+(((-1.0)*x3662*x3666*x3668))+(((-1.0)*x3662*x3669))+((x3666*x3668)))),-1);
if(!x3671.valid){
continue;
}
CheckValue<IkReal> x3672 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x3666))+x3667+((cj5*cj6*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x3672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3671.value)))+(x3672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3673=IKsin(j4);
IkReal x3674=IKcos(j4);
IkReal x3675=(cj5*cj6);
IkReal x3676=(r11*sj6);
IkReal x3677=(cj6*r20);
IkReal x3678=(cj6*r10);
IkReal x3679=(cj5*sj6);
IkReal x3680=(r01*sj6);
IkReal x3681=(r21*sj6);
IkReal x3682=(cj6*r00);
IkReal x3683=((1.0)*x3674);
IkReal x3684=((1.0)*x3673);
IkReal x3685=(sj5*x3684);
evalcond[0]=((((-1.0)*r22*x3685))+((x3674*x3677))+(((-1.0)*r20*x3679*x3684))+(((-1.0)*r21*x3675*x3684))+(((-1.0)*x3681*x3683)));
evalcond[1]=((((-1.0)*r10*x3679*x3684))+(((-1.0)*r11*x3675*x3684))+((x3674*x3678))+(((-1.0)*x3676*x3683))+(((-1.0)*r12*x3685)));
evalcond[2]=((((-1.0)*x3677*x3684))+((x3673*x3681))+(((-1.0)*r20*x3679*x3683))+(((-1.0)*r21*x3675*x3683))+(((-1.0)*r22*sj5*x3683)));
evalcond[3]=((((-1.0)*r01*x3675*x3683))+(((-1.0)*x3682*x3684))+(((-1.0)*r02*sj5*x3683))+((x3673*x3680))+(((-1.0)*r00*x3679*x3683)));
evalcond[4]=((1.0)+(((-1.0)*r01*x3675*x3684))+((x3674*x3682))+(((-1.0)*x3680*x3683))+(((-1.0)*r00*x3679*x3684))+(((-1.0)*r02*x3685)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x3679*x3683))+((x3673*x3676))+(((-1.0)*r11*x3675*x3683))+(((-1.0)*r12*sj5*x3683))+(((-1.0)*x3678*x3684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3686=((1.0)*sj6);
CheckValue<IkReal> x3687 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3686))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3687.valid){
continue;
}
CheckValue<IkReal> x3688=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x3686)))),-1);
if(!x3688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3687.value)+(((1.5707963267949)*(x3688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3689=IKsin(j4);
IkReal x3690=IKcos(j4);
IkReal x3691=(cj5*cj6);
IkReal x3692=(r11*sj6);
IkReal x3693=(cj6*r20);
IkReal x3694=(cj6*r10);
IkReal x3695=(cj5*sj6);
IkReal x3696=(r01*sj6);
IkReal x3697=(r21*sj6);
IkReal x3698=(cj6*r00);
IkReal x3699=((1.0)*x3690);
IkReal x3700=((1.0)*x3689);
IkReal x3701=(sj5*x3700);
evalcond[0]=((((-1.0)*r20*x3695*x3700))+(((-1.0)*r21*x3691*x3700))+(((-1.0)*x3697*x3699))+((x3690*x3693))+(((-1.0)*r22*x3701)));
evalcond[1]=((((-1.0)*r10*x3695*x3700))+((x3690*x3694))+(((-1.0)*r12*x3701))+(((-1.0)*r11*x3691*x3700))+(((-1.0)*x3692*x3699)));
evalcond[2]=((((-1.0)*x3693*x3700))+((x3689*x3697))+(((-1.0)*r22*sj5*x3699))+(((-1.0)*r20*x3695*x3699))+(((-1.0)*r21*x3691*x3699)));
evalcond[3]=((((-1.0)*x3698*x3700))+((x3689*x3696))+(((-1.0)*r01*x3691*x3699))+(((-1.0)*r00*x3695*x3699))+(((-1.0)*r02*sj5*x3699)));
evalcond[4]=((1.0)+(((-1.0)*r02*x3701))+(((-1.0)*r01*x3691*x3700))+(((-1.0)*x3696*x3699))+((x3690*x3698))+(((-1.0)*r00*x3695*x3700)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x3691*x3699))+(((-1.0)*r12*sj5*x3699))+((x3689*x3692))+(((-1.0)*x3694*x3700))+(((-1.0)*r10*x3695*x3699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3702=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3702.valid){
continue;
}
CheckValue<IkReal> x3703 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x3703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3702.value)))+(x3703.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3704=IKsin(j4);
IkReal x3705=IKcos(j4);
IkReal x3706=(cj5*cj6);
IkReal x3707=(r11*sj6);
IkReal x3708=(cj6*r20);
IkReal x3709=(cj6*r10);
IkReal x3710=(cj5*sj6);
IkReal x3711=(r01*sj6);
IkReal x3712=(r21*sj6);
IkReal x3713=(cj6*r00);
IkReal x3714=((1.0)*x3705);
IkReal x3715=((1.0)*x3704);
IkReal x3716=(sj5*x3715);
evalcond[0]=((((-1.0)*r21*x3706*x3715))+(((-1.0)*r20*x3710*x3715))+((x3705*x3708))+(((-1.0)*x3712*x3714))+(((-1.0)*r22*x3716)));
evalcond[1]=((((-1.0)*x3707*x3714))+(((-1.0)*r10*x3710*x3715))+(((-1.0)*r12*x3716))+(((-1.0)*r11*x3706*x3715))+((x3705*x3709)));
evalcond[2]=((((-1.0)*r21*x3706*x3714))+(((-1.0)*r22*sj5*x3714))+(((-1.0)*r20*x3710*x3714))+((x3704*x3712))+(((-1.0)*x3708*x3715)));
evalcond[3]=((((-1.0)*r02*sj5*x3714))+(((-1.0)*x3713*x3715))+(((-1.0)*r00*x3710*x3714))+((x3704*x3711))+(((-1.0)*r01*x3706*x3714)));
evalcond[4]=((1.0)+(((-1.0)*r00*x3710*x3715))+(((-1.0)*x3711*x3714))+(((-1.0)*r02*x3716))+((x3705*x3713))+(((-1.0)*r01*x3706*x3715)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x3714))+(((-1.0)*r10*x3710*x3714))+(((-1.0)*r11*x3706*x3714))+(((-1.0)*x3709*x3715))+((x3704*x3707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3717=cj6*cj6;
IkReal x3718=cj5*cj5;
IkReal x3719=((1.0)*r11);
IkReal x3720=(cj5*sj0);
IkReal x3721=(cj6*r21);
IkReal x3722=(r22*sj5);
IkReal x3723=(r20*sj6);
IkReal x3724=(r12*r22);
IkReal x3725=((1.0)*sj6);
IkReal x3726=(r21*x3717);
IkReal x3727=(r10*x3718);
IkReal x3728=(r11*x3718);
IkReal x3729=(r20*x3717);
IkReal x3730=(cj5*r12*sj5);
CheckValue<IkReal> x3731 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*x3725)))),(((sj0*x3722))+((x3720*x3721))+((x3720*x3723))),IKFAST_ATAN2_MAGTHRESH);
if(!x3731.valid){
continue;
}
CheckValue<IkReal> x3732=IKPowWithIntegerCheck(IKsign(((((-1.0)*x3727*x3729))+((cj6*x3723*x3728))+((r20*x3727))+(((-1.0)*x3718*x3724))+((cj5*cj6*r11*x3722))+((r11*r21))+((x3726*x3728))+(((-1.0)*cj6*x3719*x3723))+((sj6*x3721*x3727))+x3724+((x3723*x3730))+((r10*x3729))+(((-1.0)*r10*x3721*x3725))+(((-1.0)*x3719*x3726))+((cj5*r10*sj6*x3722))+((x3721*x3730)))),-1);
if(!x3732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3731.value)+(((1.5707963267949)*(x3732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3733=IKsin(j4);
IkReal x3734=IKcos(j4);
IkReal x3735=(cj5*cj6);
IkReal x3736=(r11*sj6);
IkReal x3737=(cj6*r20);
IkReal x3738=(cj5*sj6);
IkReal x3739=(cj6*r10);
IkReal x3740=(r01*sj6);
IkReal x3741=(r21*sj6);
IkReal x3742=(cj6*r00);
IkReal x3743=((1.0)*x3734);
IkReal x3744=((1.0)*x3733);
IkReal x3745=(sj5*x3744);
evalcond[0]=((((-1.0)*r22*x3745))+((x3734*x3737))+(((-1.0)*r20*x3738*x3744))+(((-1.0)*r21*x3735*x3744))+(((-1.0)*x3741*x3743)));
evalcond[1]=((((-1.0)*r22*sj5*x3743))+(((-1.0)*x3737*x3744))+(((-1.0)*r20*x3738*x3743))+(((-1.0)*r21*x3735*x3743))+((x3733*x3741)));
evalcond[2]=((((-1.0)*r11*x3735*x3744))+cj0+((x3734*x3739))+(((-1.0)*r12*x3745))+(((-1.0)*x3736*x3743))+(((-1.0)*r10*x3738*x3744)));
evalcond[3]=(cj0+(((-1.0)*r00*x3738*x3743))+(((-1.0)*r02*sj5*x3743))+(((-1.0)*r01*x3735*x3743))+(((-1.0)*x3742*x3744))+((x3733*x3740)));
evalcond[4]=(((x3733*x3736))+sj0+(((-1.0)*r11*x3735*x3743))+(((-1.0)*r12*sj5*x3743))+(((-1.0)*r10*x3738*x3743))+(((-1.0)*x3739*x3744)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3740*x3743))+(((-1.0)*r00*x3738*x3744))+((x3734*x3742))+(((-1.0)*r01*x3735*x3744))+(((-1.0)*r02*x3745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3746=cj5*cj5;
IkReal x3747=cj6*cj6;
IkReal x3748=(r22*sj5);
IkReal x3749=(cj6*r21);
IkReal x3750=(r20*sj6);
IkReal x3751=((1.0)*sj6);
IkReal x3752=(cj0*cj5);
IkReal x3753=(r02*r22);
IkReal x3754=(cj6*r01);
IkReal x3755=(r00*sj6);
IkReal x3756=(cj5*r02*sj5);
IkReal x3757=(r01*x3746);
IkReal x3758=(r21*x3747);
IkReal x3759=(r00*r20*x3746);
CheckValue<IkReal> x3760 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x3751)))),(((cj0*x3748))+((x3749*x3752))+((x3750*x3752))),IKFAST_ATAN2_MAGTHRESH);
if(!x3760.valid){
continue;
}
CheckValue<IkReal> x3761=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3758))+(((-1.0)*x3746*x3753))+((x3757*x3758))+(((-1.0)*x3747*x3759))+((r00*r20*x3747))+((r01*r21))+((x3746*x3750*x3754))+x3759+x3753+((x3746*x3749*x3755))+((x3749*x3756))+((cj5*x3748*x3755))+((cj5*x3748*x3754))+((x3750*x3756))+(((-1.0)*x3750*x3754))+(((-1.0)*r00*x3749*x3751)))),-1);
if(!x3761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3760.value)+(((1.5707963267949)*(x3761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3762=IKsin(j4);
IkReal x3763=IKcos(j4);
IkReal x3764=(cj5*cj6);
IkReal x3765=(r11*sj6);
IkReal x3766=(cj6*r20);
IkReal x3767=(cj5*sj6);
IkReal x3768=(cj6*r10);
IkReal x3769=(r01*sj6);
IkReal x3770=(r21*sj6);
IkReal x3771=(cj6*r00);
IkReal x3772=((1.0)*x3763);
IkReal x3773=((1.0)*x3762);
IkReal x3774=(sj5*x3773);
evalcond[0]=((((-1.0)*r22*x3774))+(((-1.0)*r21*x3764*x3773))+(((-1.0)*x3770*x3772))+((x3763*x3766))+(((-1.0)*r20*x3767*x3773)));
evalcond[1]=(((x3762*x3770))+(((-1.0)*r22*sj5*x3772))+(((-1.0)*r21*x3764*x3772))+(((-1.0)*x3766*x3773))+(((-1.0)*r20*x3767*x3772)));
evalcond[2]=((((-1.0)*r11*x3764*x3773))+(((-1.0)*r10*x3767*x3773))+cj0+(((-1.0)*x3765*x3772))+((x3763*x3768))+(((-1.0)*r12*x3774)));
evalcond[3]=(cj0+(((-1.0)*r02*sj5*x3772))+(((-1.0)*r00*x3767*x3772))+((x3762*x3769))+(((-1.0)*x3771*x3773))+(((-1.0)*r01*x3764*x3772)));
evalcond[4]=(sj0+(((-1.0)*r11*x3764*x3772))+(((-1.0)*r10*x3767*x3772))+(((-1.0)*r12*sj5*x3772))+((x3762*x3765))+(((-1.0)*x3768*x3773)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3774))+(((-1.0)*r00*x3767*x3773))+(((-1.0)*x3769*x3772))+((x3763*x3771))+(((-1.0)*r01*x3764*x3773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3775=(cj0*sj6);
IkReal x3776=(cj0*cj6);
CheckValue<IkReal> x3777 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x3775))+((r20*x3776)))),(((cj5*r20*x3775))+((cj0*r22*sj5))+((cj5*r21*x3776))),IKFAST_ATAN2_MAGTHRESH);
if(!x3777.valid){
continue;
}
CheckValue<IkReal> x3778=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x3778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3777.value)+(((1.5707963267949)*(x3778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3779=IKsin(j4);
IkReal x3780=IKcos(j4);
IkReal x3781=(cj5*cj6);
IkReal x3782=(r11*sj6);
IkReal x3783=(cj6*r20);
IkReal x3784=(cj5*sj6);
IkReal x3785=(cj6*r10);
IkReal x3786=(r01*sj6);
IkReal x3787=(r21*sj6);
IkReal x3788=(cj6*r00);
IkReal x3789=((1.0)*x3780);
IkReal x3790=((1.0)*x3779);
IkReal x3791=(sj5*x3790);
evalcond[0]=((((-1.0)*r22*x3791))+(((-1.0)*r20*x3784*x3790))+((x3780*x3783))+(((-1.0)*x3787*x3789))+(((-1.0)*r21*x3781*x3790)));
evalcond[1]=((((-1.0)*x3783*x3790))+(((-1.0)*r22*sj5*x3789))+(((-1.0)*r20*x3784*x3789))+((x3779*x3787))+(((-1.0)*r21*x3781*x3789)));
evalcond[2]=((((-1.0)*r12*x3791))+cj0+(((-1.0)*x3782*x3789))+(((-1.0)*r10*x3784*x3790))+(((-1.0)*r11*x3781*x3790))+((x3780*x3785)));
evalcond[3]=(cj0+(((-1.0)*r01*x3781*x3789))+((x3779*x3786))+(((-1.0)*r00*x3784*x3789))+(((-1.0)*x3788*x3790))+(((-1.0)*r02*sj5*x3789)));
evalcond[4]=((((-1.0)*r11*x3781*x3789))+(((-1.0)*r12*sj5*x3789))+sj0+((x3779*x3782))+(((-1.0)*x3785*x3790))+(((-1.0)*r10*x3784*x3789)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x3781*x3790))+(((-1.0)*x3786*x3789))+(((-1.0)*r02*x3791))+(((-1.0)*r00*x3784*x3790))+((x3780*x3788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3792=(cj6*sj5);
IkReal x3793=(sj5*sj6);
IkReal x3794=((0.01)*cj5);
IkReal x3795=(cj5*r22);
IkReal x3796=((1.0)*cj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.069)+(((0.37429)*x3795))+((r20*sj6*x3794))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((cj6*r21*x3794))+(((-0.37429)*r21*x3792))+(((-0.37429)*r20*x3793)));
evalcond[2]=((-1.0)+((r21*x3792))+(((-1.0)*x3795))+((r20*x3793)));
evalcond[3]=((((-1.0)*r12*x3796))+((r10*x3793))+((r11*x3792)));
evalcond[4]=((((-1.0)*r02*x3796))+((r00*x3793))+((r01*x3792)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3797=((1.26697583102024)*cj5);
IkReal x3798=((0.0338501117053686)*cj5);
IkReal x3799=(r00*sj6);
IkReal x3800=(r10*sj6);
IkReal x3801=((1.26697583102024)*sj5);
IkReal x3802=(cj6*r11);
IkReal x3803=((0.0338501117053686)*sj5);
IkReal x3804=(cj6*r01);
if( IKabs(((((-3.38501117053686)*py))+((r12*x3803))+(((-1.0)*x3801*x3802))+(((-1.0)*x3800*x3801))+((x3798*x3802))+((x3798*x3800))+((r12*x3797)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.38501117053686)*px))+((x3798*x3799))+(((-1.0)*x3801*x3804))+((r02*x3797))+((x3798*x3804))+((r02*x3803))+(((-1.0)*x3799*x3801)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.38501117053686)*py))+((r12*x3803))+(((-1.0)*x3801*x3802))+(((-1.0)*x3800*x3801))+((x3798*x3802))+((x3798*x3800))+((r12*x3797))))+IKsqr(((((-3.38501117053686)*px))+((x3798*x3799))+(((-1.0)*x3801*x3804))+((r02*x3797))+((x3798*x3804))+((r02*x3803))+(((-1.0)*x3799*x3801))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.38501117053686)*py))+((r12*x3803))+(((-1.0)*x3801*x3802))+(((-1.0)*x3800*x3801))+((x3798*x3802))+((x3798*x3800))+((r12*x3797))), ((((-3.38501117053686)*px))+((x3798*x3799))+(((-1.0)*x3801*x3804))+((r02*x3797))+((x3798*x3804))+((r02*x3803))+(((-1.0)*x3799*x3801))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3805=((0.01)*cj5);
IkReal x3806=(cj6*r01);
IkReal x3807=(r00*sj6);
IkReal x3808=((0.01)*sj5);
IkReal x3809=((0.37429)*sj5);
IkReal x3810=((0.37429)*cj5);
IkReal x3811=(r10*sj6);
IkReal x3812=(cj6*r11);
evalcond[0]=(((x3805*x3806))+((x3805*x3807))+((r02*x3808))+(((-1.0)*px))+((r02*x3810))+(((-0.29542)*(IKcos(j0))))+(((-1.0)*x3806*x3809))+(((-1.0)*x3807*x3809)));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+((r12*x3810))+((x3805*x3812))+((x3805*x3811))+((r12*x3808))+(((-1.0)*x3809*x3811))+(((-1.0)*x3809*x3812))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3813=(r20*sj0);
IkReal x3814=((1.0)*sj5);
IkReal x3815=(r21*sj0);
IkReal x3816=(((cj5*r12))+(((-1.0)*r10*sj6*x3814))+(((-1.0)*cj6*r11*x3814)));
j4eval[0]=x3816;
j4eval[1]=IKsign(x3816);
j4eval[2]=((IKabs((((cj5*sj6*x3813))+((r22*sj0*sj5))+((cj5*cj6*x3815)))))+(IKabs(((((-1.0)*sj6*x3815))+((cj6*x3813))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3817=cj5*cj5;
IkReal x3818=cj6*cj6;
IkReal x3819=(r00*r20);
IkReal x3820=(r02*r22);
IkReal x3821=(r22*sj5);
IkReal x3822=(cj6*r21);
IkReal x3823=(r00*sj6);
IkReal x3824=(r20*sj6);
IkReal x3825=(cj6*r01);
IkReal x3826=(cj0*cj5);
IkReal x3827=((1.0)*x3817);
IkReal x3828=(cj5*r02*sj5);
IkReal x3829=(r01*r21*x3818);
IkReal x3830=(((r01*r21))+(((-1.0)*x3829))+((x3818*x3819))+((cj5*x3821*x3825))+((cj5*x3821*x3823))+(((-1.0)*x3824*x3825))+((x3824*x3828))+((x3817*x3819))+x3820+((x3817*x3829))+((x3817*x3822*x3823))+((x3822*x3828))+(((-1.0)*x3822*x3823))+(((-1.0)*x3820*x3827))+((x3817*x3824*x3825))+(((-1.0)*x3818*x3819*x3827)));
j4eval[0]=x3830;
j4eval[1]=IKsign(x3830);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x3824*x3826))+((cj0*x3821))+((x3822*x3826))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3831=cj6*cj6;
IkReal x3832=cj5*cj5;
IkReal x3833=(r12*sj5);
IkReal x3834=(r22*sj5);
IkReal x3835=((1.0)*r11);
IkReal x3836=(r20*sj0);
IkReal x3837=(r10*r20);
IkReal x3838=(cj5*sj6);
IkReal x3839=(cj6*r10);
IkReal x3840=(r12*r22);
IkReal x3841=(cj5*cj6*r21);
IkReal x3842=(r21*x3831);
IkReal x3843=(cj6*r20*sj6);
IkReal x3844=(r11*x3832);
IkReal x3845=((1.0)*r21*sj6);
IkReal x3846=((1.0)*x3832);
IkReal x3847=(((r11*r21))+(((-1.0)*x3840*x3846))+(((-1.0)*x3831*x3837*x3846))+((r21*sj6*x3832*x3839))+(((-1.0)*x3835*x3843))+(((-1.0)*x3835*x3842))+((x3831*x3837))+(((-1.0)*x3839*x3845))+((x3832*x3837))+((x3842*x3844))+((x3843*x3844))+x3840+((cj5*cj6*r11*x3834))+((x3833*x3841))+((r10*x3834*x3838))+((r20*x3833*x3838)));
j4eval[0]=x3847;
j4eval[1]=IKsign(x3847);
j4eval[2]=((IKabs(((((-1.0)*sj0*x3845))+((cj6*x3836)))))+(IKabs((((sj0*x3834))+((x3836*x3838))+((sj0*x3841))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x3848=((1.0)*cj5);
IkReal x3849=((0.01)*cj5);
IkReal x3850=(cj6*r11);
IkReal x3851=(r20*sj6);
IkReal x3852=((0.01)*sj5);
IkReal x3853=(cj6*r01);
IkReal x3854=((0.37429)*cj5);
IkReal x3855=((0.37429)*sj5);
IkReal x3856=(cj6*r21);
IkReal x3857=(r10*sj5*sj6);
IkReal x3858=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x3849*x3856))+((x3849*x3851))+(((-1.0)*pz))+(((-1.0)*x3855*x3856))+(((-1.0)*x3851*x3855))+((r22*x3854))+((r22*x3852)));
evalcond[2]=((-0.29542)+((r02*x3854))+((r02*x3852))+((x3849*x3853))+(((-1.0)*px))+(((-1.0)*x3853*x3855))+((r00*sj6*x3849))+(((-1.0)*r00*sj6*x3855)));
evalcond[3]=((((-1.0)*r10*sj6*x3855))+((r10*sj6*x3849))+(((-1.0)*x3850*x3855))+((x3849*x3850))+(((-1.0)*py))+((r12*x3854))+((r12*x3852)));
evalcond[4]=((-1.0)+((sj5*x3856))+((sj5*x3851))+(((-1.0)*r22*x3848)));
evalcond[5]=(((sj5*x3850))+(((-1.0)*r12*x3848))+x3857);
evalcond[6]=((((-1.0)*r02*x3848))+((sj5*x3853))+x3858);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3859=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x3859;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x3859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3860=((1.0)*sj6);
IkReal x3861=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x3860))+((cj5*r02)));
j4eval[0]=x3861;
j4eval[1]=IKsign(x3861);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x3860))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3862=cj6*cj6;
IkReal x3863=r01*r01;
IkReal x3864=cj5*cj5;
IkReal x3865=r00*r00;
IkReal x3866=r02*r02;
IkReal x3867=(cj6*r00);
IkReal x3868=(r02*sj5);
IkReal x3869=(cj5*cj6*r01);
IkReal x3870=((2.0)*r01*sj6);
IkReal x3871=(cj5*r00*sj6);
IkReal x3872=((1.0)*x3864);
IkReal x3873=(x3862*x3865);
IkReal x3874=(x3862*x3863);
IkReal x3875=((((-1.0)*x3867*x3870))+(((-1.0)*x3866*x3872))+((x3864*x3874))+((x3864*x3867*x3870))+((x3864*x3865))+x3863+x3866+x3873+(((-1.0)*x3874))+(((2.0)*x3868*x3871))+(((2.0)*x3868*x3869))+(((-1.0)*x3872*x3873)));
j4eval[0]=x3875;
j4eval[1]=((IKabs((x3869+x3868+x3871)))+(IKabs(((((-1.0)*r01*sj6))+x3867))));
j4eval[2]=IKsign(x3875);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3876=cj6*cj6;
IkReal x3877=r01*r01;
IkReal x3878=cj5*cj5;
IkReal x3879=r00*r00;
IkReal x3880=r02*r02;
IkReal x3881=(cj6*r00);
IkReal x3882=((2.0)*r01);
IkReal x3883=(cj5*cj6);
IkReal x3884=(r02*sj5);
IkReal x3885=(cj5*r00*sj6);
IkReal x3886=(x3878*x3879);
IkReal x3887=(x3876*x3877);
CheckValue<IkReal> x3888 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3881)),(x3885+x3884+((r01*x3883))),IKFAST_ATAN2_MAGTHRESH);
if(!x3888.valid){
continue;
}
CheckValue<IkReal> x3889=IKPowWithIntegerCheck(IKsign((((sj6*x3878*x3881*x3882))+((x3882*x3883*x3884))+(((2.0)*x3884*x3885))+(((-1.0)*x3887))+(((-1.0)*x3876*x3886))+((x3878*x3887))+(((-1.0)*sj6*x3881*x3882))+x3877+x3886+x3880+((x3876*x3879))+(((-1.0)*x3878*x3880)))),-1);
if(!x3889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3888.value)+(((1.5707963267949)*(x3889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3890=IKsin(j4);
IkReal x3891=IKcos(j4);
IkReal x3892=(cj5*cj6);
IkReal x3893=(r11*sj6);
IkReal x3894=(cj6*r20);
IkReal x3895=(cj6*r10);
IkReal x3896=(cj5*sj6);
IkReal x3897=(r21*sj6);
IkReal x3898=(cj6*r00);
IkReal x3899=(r01*sj6);
IkReal x3900=((1.0)*x3891);
IkReal x3901=((1.0)*x3890);
IkReal x3902=(sj5*x3901);
evalcond[0]=((((-1.0)*r21*x3892*x3901))+(((-1.0)*x3897*x3900))+(((-1.0)*r22*x3902))+((x3891*x3894))+(((-1.0)*r20*x3896*x3901)));
evalcond[1]=((((-1.0)*r00*x3896*x3901))+((x3891*x3898))+(((-1.0)*x3899*x3900))+(((-1.0)*r01*x3892*x3901))+(((-1.0)*r02*x3902)));
evalcond[2]=((((-1.0)*r21*x3892*x3900))+((x3890*x3897))+(((-1.0)*r22*sj5*x3900))+(((-1.0)*x3894*x3901))+(((-1.0)*r20*x3896*x3900)));
evalcond[3]=(((x3890*x3893))+(((-1.0)*r12*sj5*x3900))+(((-1.0)*x3895*x3901))+(((-1.0)*r11*x3892*x3900))+(((-1.0)*r10*x3896*x3900)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x3902))+(((-1.0)*x3893*x3900))+((x3891*x3895))+(((-1.0)*r11*x3892*x3901))+(((-1.0)*r10*x3896*x3901)));
evalcond[5]=((1.0)+((x3890*x3899))+(((-1.0)*r00*x3896*x3900))+(((-1.0)*x3898*x3901))+(((-1.0)*r02*sj5*x3900))+(((-1.0)*r01*x3892*x3900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3903=((1.0)*sj6);
CheckValue<IkReal> x3904=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x3903))+((cj5*r02)))),-1);
if(!x3904.valid){
continue;
}
CheckValue<IkReal> x3905 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x3903)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x3905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3904.value)))+(x3905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3906=IKsin(j4);
IkReal x3907=IKcos(j4);
IkReal x3908=(cj5*cj6);
IkReal x3909=(r11*sj6);
IkReal x3910=(cj6*r20);
IkReal x3911=(cj6*r10);
IkReal x3912=(cj5*sj6);
IkReal x3913=(r21*sj6);
IkReal x3914=(cj6*r00);
IkReal x3915=(r01*sj6);
IkReal x3916=((1.0)*x3907);
IkReal x3917=((1.0)*x3906);
IkReal x3918=(sj5*x3917);
evalcond[0]=(((x3907*x3910))+(((-1.0)*r22*x3918))+(((-1.0)*r20*x3912*x3917))+(((-1.0)*x3913*x3916))+(((-1.0)*r21*x3908*x3917)));
evalcond[1]=((((-1.0)*x3915*x3916))+(((-1.0)*r02*x3918))+(((-1.0)*r00*x3912*x3917))+((x3907*x3914))+(((-1.0)*r01*x3908*x3917)));
evalcond[2]=(((x3906*x3913))+(((-1.0)*x3910*x3917))+(((-1.0)*r22*sj5*x3916))+(((-1.0)*r20*x3912*x3916))+(((-1.0)*r21*x3908*x3916)));
evalcond[3]=((((-1.0)*x3911*x3917))+(((-1.0)*r11*x3908*x3916))+((x3906*x3909))+(((-1.0)*r12*sj5*x3916))+(((-1.0)*r10*x3912*x3916)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x3908*x3917))+((x3907*x3911))+(((-1.0)*x3909*x3916))+(((-1.0)*r10*x3912*x3917))+(((-1.0)*r12*x3918)));
evalcond[5]=((1.0)+(((-1.0)*x3914*x3917))+(((-1.0)*r00*x3912*x3916))+((x3906*x3915))+(((-1.0)*r02*sj5*x3916))+(((-1.0)*r01*x3908*x3916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3919=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x3919.valid){
continue;
}
CheckValue<IkReal> x3920 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x3920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3919.value)))+(x3920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3921=IKsin(j4);
IkReal x3922=IKcos(j4);
IkReal x3923=(cj5*cj6);
IkReal x3924=(r11*sj6);
IkReal x3925=(cj6*r20);
IkReal x3926=(cj6*r10);
IkReal x3927=(cj5*sj6);
IkReal x3928=(r21*sj6);
IkReal x3929=(cj6*r00);
IkReal x3930=(r01*sj6);
IkReal x3931=((1.0)*x3922);
IkReal x3932=((1.0)*x3921);
IkReal x3933=(sj5*x3932);
evalcond[0]=((((-1.0)*r21*x3923*x3932))+(((-1.0)*r22*x3933))+(((-1.0)*x3928*x3931))+(((-1.0)*r20*x3927*x3932))+((x3922*x3925)));
evalcond[1]=((((-1.0)*x3930*x3931))+(((-1.0)*r02*x3933))+(((-1.0)*r01*x3923*x3932))+(((-1.0)*r00*x3927*x3932))+((x3922*x3929)));
evalcond[2]=(((x3921*x3928))+(((-1.0)*r21*x3923*x3931))+(((-1.0)*x3925*x3932))+(((-1.0)*r20*x3927*x3931))+(((-1.0)*r22*sj5*x3931)));
evalcond[3]=(((x3921*x3924))+(((-1.0)*r10*x3927*x3931))+(((-1.0)*x3926*x3932))+(((-1.0)*r11*x3923*x3931))+(((-1.0)*r12*sj5*x3931)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x3927*x3932))+(((-1.0)*r11*x3923*x3932))+(((-1.0)*r12*x3933))+(((-1.0)*x3924*x3931))+((x3922*x3926)));
evalcond[5]=((1.0)+(((-1.0)*x3929*x3932))+(((-1.0)*r02*sj5*x3931))+((x3921*x3930))+(((-1.0)*r01*x3923*x3931))+(((-1.0)*r00*x3927*x3931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3934=((1.0)*cj5);
IkReal x3935=((0.01)*cj5);
IkReal x3936=(cj6*r11);
IkReal x3937=(r20*sj6);
IkReal x3938=((0.01)*sj5);
IkReal x3939=(cj6*r01);
IkReal x3940=((0.37429)*cj5);
IkReal x3941=((0.37429)*sj5);
IkReal x3942=(cj6*r21);
IkReal x3943=(r10*sj5*sj6);
IkReal x3944=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x3938))+((r22*x3940))+(((-1.0)*x3937*x3941))+(((-1.0)*pz))+(((-1.0)*x3941*x3942))+((x3935*x3937))+((x3935*x3942)));
evalcond[2]=((0.29542)+((r00*sj6*x3935))+(((-1.0)*r00*sj6*x3941))+(((-1.0)*px))+((x3935*x3939))+(((-1.0)*x3939*x3941))+((r02*x3940))+((r02*x3938)));
evalcond[3]=((((-1.0)*r10*sj6*x3941))+(((-1.0)*py))+((x3935*x3936))+((r10*sj6*x3935))+((r12*x3940))+((r12*x3938))+(((-1.0)*x3936*x3941)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x3934))+((sj5*x3942))+((sj5*x3937)));
evalcond[5]=(x3943+(((-1.0)*r12*x3934))+((sj5*x3936)));
evalcond[6]=(x3944+(((-1.0)*r02*x3934))+((sj5*x3939)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3945=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x3945;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x3945);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3946=((1.0)*sj5);
IkReal x3947=((((-1.0)*r20*sj6*x3946))+((cj5*r22))+(((-1.0)*cj6*r21*x3946)));
j4eval[0]=x3947;
j4eval[1]=IKsign(x3947);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3948=cj6*cj6;
IkReal x3949=cj5*cj5;
IkReal x3950=r00*r00;
IkReal x3951=r01*r01;
IkReal x3952=r02*r02;
IkReal x3953=(cj6*r00);
IkReal x3954=(cj5*cj6*r01);
IkReal x3955=((2.0)*r02*sj5);
IkReal x3956=((1.0)*x3948);
IkReal x3957=((2.0)*r01*sj6);
IkReal x3958=(cj5*r00*sj6);
IkReal x3959=(x3949*x3950);
IkReal x3960=((((-1.0)*x3955*x3958))+(((-1.0)*x3954*x3955))+(((-1.0)*x3952))+(((-1.0)*x3951))+(((-1.0)*x3959))+((x3953*x3957))+(((-1.0)*x3949*x3951*x3956))+((x3948*x3951))+((x3948*x3959))+((x3949*x3952))+(((-1.0)*x3950*x3956))+(((-1.0)*x3949*x3953*x3957)));
j4eval[0]=x3960;
j4eval[1]=((IKabs((((r02*sj5))+x3958+x3954)))+(IKabs(((((-1.0)*r01*sj6))+x3953))));
j4eval[2]=IKsign(x3960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3961=cj6*cj6;
IkReal x3962=cj5*cj5;
IkReal x3963=r00*r00;
IkReal x3964=r01*r01;
IkReal x3965=r02*r02;
IkReal x3966=(cj6*r00);
IkReal x3967=(cj5*cj6*r01);
IkReal x3968=((2.0)*r02*sj5);
IkReal x3969=((1.0)*x3961);
IkReal x3970=((2.0)*r01*sj6);
IkReal x3971=(cj5*r00*sj6);
IkReal x3972=(x3962*x3963);
CheckValue<IkReal> x3973 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x3966)),(((r02*sj5))+x3967+x3971),IKFAST_ATAN2_MAGTHRESH);
if(!x3973.valid){
continue;
}
CheckValue<IkReal> x3974=IKPowWithIntegerCheck(IKsign((((x3962*x3965))+(((-1.0)*x3962*x3964*x3969))+(((-1.0)*x3963*x3969))+(((-1.0)*x3962*x3966*x3970))+(((-1.0)*x3968*x3971))+((x3961*x3972))+((x3961*x3964))+(((-1.0)*x3965))+(((-1.0)*x3964))+(((-1.0)*x3972))+((x3966*x3970))+(((-1.0)*x3967*x3968)))),-1);
if(!x3974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3973.value)+(((1.5707963267949)*(x3974.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3975=IKsin(j4);
IkReal x3976=IKcos(j4);
IkReal x3977=(cj5*cj6);
IkReal x3978=(r11*sj6);
IkReal x3979=(cj6*r20);
IkReal x3980=(cj6*r10);
IkReal x3981=(cj5*sj6);
IkReal x3982=(r21*sj6);
IkReal x3983=(cj6*r00);
IkReal x3984=(r01*sj6);
IkReal x3985=((1.0)*x3976);
IkReal x3986=((1.0)*x3975);
IkReal x3987=(sj5*x3986);
evalcond[0]=((((-1.0)*r20*x3981*x3986))+((x3976*x3979))+(((-1.0)*r22*x3987))+(((-1.0)*x3982*x3985))+(((-1.0)*r21*x3977*x3986)));
evalcond[1]=((((-1.0)*x3984*x3985))+(((-1.0)*r01*x3977*x3986))+(((-1.0)*r00*x3981*x3986))+((x3976*x3983))+(((-1.0)*r02*x3987)));
evalcond[2]=((((-1.0)*r20*x3981*x3985))+((x3975*x3982))+(((-1.0)*x3979*x3986))+(((-1.0)*r22*sj5*x3985))+(((-1.0)*r21*x3977*x3985)));
evalcond[3]=((((-1.0)*r11*x3977*x3985))+(((-1.0)*r12*sj5*x3985))+(((-1.0)*r10*x3981*x3985))+((x3975*x3978))+(((-1.0)*x3980*x3986)));
evalcond[4]=((1.0)+(((-1.0)*r12*x3987))+(((-1.0)*r11*x3977*x3986))+(((-1.0)*x3978*x3985))+((x3976*x3980))+(((-1.0)*r10*x3981*x3986)));
evalcond[5]=((-1.0)+((x3975*x3984))+(((-1.0)*x3983*x3986))+(((-1.0)*r01*x3977*x3985))+(((-1.0)*r00*x3981*x3985))+(((-1.0)*r02*sj5*x3985)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3988=((1.0)*sj5);
CheckValue<IkReal> x3989 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x3989.valid){
continue;
}
CheckValue<IkReal> x3990=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x3988))+(((-1.0)*cj6*r21*x3988)))),-1);
if(!x3990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3989.value)+(((1.5707963267949)*(x3990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3991=IKsin(j4);
IkReal x3992=IKcos(j4);
IkReal x3993=(cj5*cj6);
IkReal x3994=(r11*sj6);
IkReal x3995=(cj6*r20);
IkReal x3996=(cj6*r10);
IkReal x3997=(cj5*sj6);
IkReal x3998=(r21*sj6);
IkReal x3999=(cj6*r00);
IkReal x4000=(r01*sj6);
IkReal x4001=((1.0)*x3992);
IkReal x4002=((1.0)*x3991);
IkReal x4003=(sj5*x4002);
evalcond[0]=((((-1.0)*r22*x4003))+(((-1.0)*x3998*x4001))+(((-1.0)*r21*x3993*x4002))+(((-1.0)*r20*x3997*x4002))+((x3992*x3995)));
evalcond[1]=((((-1.0)*r01*x3993*x4002))+(((-1.0)*r00*x3997*x4002))+(((-1.0)*r02*x4003))+(((-1.0)*x4000*x4001))+((x3992*x3999)));
evalcond[2]=((((-1.0)*r21*x3993*x4001))+(((-1.0)*x3995*x4002))+(((-1.0)*r20*x3997*x4001))+(((-1.0)*r22*sj5*x4001))+((x3991*x3998)));
evalcond[3]=((((-1.0)*r10*x3997*x4001))+(((-1.0)*r11*x3993*x4001))+(((-1.0)*r12*sj5*x4001))+(((-1.0)*x3996*x4002))+((x3991*x3994)));
evalcond[4]=((1.0)+(((-1.0)*r10*x3997*x4002))+(((-1.0)*r11*x3993*x4002))+(((-1.0)*x3994*x4001))+(((-1.0)*r12*x4003))+((x3992*x3996)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x3993*x4001))+(((-1.0)*r00*x3997*x4001))+(((-1.0)*x3999*x4002))+(((-1.0)*r02*sj5*x4001))+((x3991*x4000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4004 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4004.valid){
continue;
}
CheckValue<IkReal> x4005=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4004.value)+(((1.5707963267949)*(x4005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4006=IKsin(j4);
IkReal x4007=IKcos(j4);
IkReal x4008=(cj5*cj6);
IkReal x4009=(r11*sj6);
IkReal x4010=(cj6*r20);
IkReal x4011=(cj6*r10);
IkReal x4012=(cj5*sj6);
IkReal x4013=(r21*sj6);
IkReal x4014=(cj6*r00);
IkReal x4015=(r01*sj6);
IkReal x4016=((1.0)*x4007);
IkReal x4017=((1.0)*x4006);
IkReal x4018=(sj5*x4017);
evalcond[0]=((((-1.0)*r20*x4012*x4017))+(((-1.0)*r22*x4018))+(((-1.0)*x4013*x4016))+((x4007*x4010))+(((-1.0)*r21*x4008*x4017)));
evalcond[1]=((((-1.0)*r01*x4008*x4017))+(((-1.0)*r02*x4018))+(((-1.0)*x4015*x4016))+(((-1.0)*r00*x4012*x4017))+((x4007*x4014)));
evalcond[2]=((((-1.0)*r20*x4012*x4016))+(((-1.0)*r22*sj5*x4016))+(((-1.0)*x4010*x4017))+((x4006*x4013))+(((-1.0)*r21*x4008*x4016)));
evalcond[3]=((((-1.0)*r11*x4008*x4016))+(((-1.0)*x4011*x4017))+(((-1.0)*r12*sj5*x4016))+((x4006*x4009))+(((-1.0)*r10*x4012*x4016)));
evalcond[4]=((1.0)+(((-1.0)*r12*x4018))+(((-1.0)*r11*x4008*x4017))+(((-1.0)*x4009*x4016))+((x4007*x4011))+(((-1.0)*r10*x4012*x4017)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x4008*x4016))+(((-1.0)*r02*sj5*x4016))+(((-1.0)*x4014*x4017))+(((-1.0)*r00*x4012*x4016))+((x4006*x4015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4019=((1.0)*cj5);
IkReal x4020=((0.01)*cj5);
IkReal x4021=(cj6*r11);
IkReal x4022=(r20*sj6);
IkReal x4023=((0.01)*sj5);
IkReal x4024=(cj6*r01);
IkReal x4025=((0.37429)*cj5);
IkReal x4026=((0.37429)*sj5);
IkReal x4027=(cj6*r21);
IkReal x4028=(r10*sj5*sj6);
IkReal x4029=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x4020*x4027))+((x4020*x4022))+(((-1.0)*x4022*x4026))+(((-1.0)*x4026*x4027))+(((-1.0)*pz))+((r22*x4025))+((r22*x4023)));
evalcond[2]=(((r00*sj6*x4020))+((x4020*x4024))+(((-1.0)*x4024*x4026))+(((-1.0)*px))+(((-1.0)*r00*sj6*x4026))+((r02*x4025))+((r02*x4023)));
evalcond[3]=((-0.29542)+((r10*sj6*x4020))+(((-1.0)*r10*sj6*x4026))+((x4020*x4021))+(((-1.0)*py))+((r12*x4025))+((r12*x4023))+(((-1.0)*x4021*x4026)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x4019))+((sj5*x4027))+((sj5*x4022)));
evalcond[5]=((((-1.0)*r12*x4019))+x4028+((sj5*x4021)));
evalcond[6]=((((-1.0)*r02*x4019))+x4029+((sj5*x4024)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4030=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4030;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4030);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4031=((1.0)*sj6);
IkReal x4032=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4031)));
j4eval[0]=x4032;
j4eval[1]=IKsign(x4032);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x4031))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4033=r11*r11;
IkReal x4034=cj5*cj5;
IkReal x4035=cj6*cj6;
IkReal x4036=r10*r10;
IkReal x4037=r12*r12;
IkReal x4038=(r12*sj5);
IkReal x4039=(cj6*r10);
IkReal x4040=((1.0)*x4035);
IkReal x4041=(cj5*cj6*r11);
IkReal x4042=(cj5*r10*sj6);
IkReal x4043=((2.0)*r11*sj6);
IkReal x4044=(x4034*x4036);
IkReal x4045=((((-1.0)*x4034*x4037))+((x4033*x4034*x4035))+((x4035*x4036))+(((-1.0)*x4039*x4043))+((x4034*x4039*x4043))+(((-1.0)*x4033*x4040))+x4044+x4033+x4037+(((2.0)*x4038*x4041))+(((2.0)*x4038*x4042))+(((-1.0)*x4040*x4044)));
j4eval[0]=x4045;
j4eval[1]=IKsign(x4045);
j4eval[2]=((IKabs((x4039+(((-1.0)*r11*sj6)))))+(IKabs((x4041+x4042+x4038))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4046=r11*r11;
IkReal x4047=cj5*cj5;
IkReal x4048=cj6*cj6;
IkReal x4049=r10*r10;
IkReal x4050=r12*r12;
IkReal x4051=(r10*sj6);
IkReal x4052=(r12*sj5);
IkReal x4053=((1.0)*x4048);
IkReal x4054=(cj5*cj6*r11);
IkReal x4055=((2.0)*cj6*r11);
IkReal x4056=(x4047*x4049);
CheckValue<IkReal> x4057 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x4054+x4052+((cj5*x4051))),IKFAST_ATAN2_MAGTHRESH);
if(!x4057.valid){
continue;
}
CheckValue<IkReal> x4058=IKPowWithIntegerCheck(IKsign((((x4046*x4047*x4048))+(((2.0)*cj5*x4051*x4052))+(((-1.0)*x4051*x4055))+(((-1.0)*x4053*x4056))+(((-1.0)*x4047*x4050))+(((-1.0)*x4046*x4053))+((x4047*x4051*x4055))+(((2.0)*x4052*x4054))+x4046+x4056+x4050+((x4048*x4049)))),-1);
if(!x4058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4057.value)+(((1.5707963267949)*(x4058.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4059=IKsin(j4);
IkReal x4060=IKcos(j4);
IkReal x4061=(cj5*cj6);
IkReal x4062=(r11*sj6);
IkReal x4063=(cj6*r20);
IkReal x4064=(cj6*r10);
IkReal x4065=(cj5*sj6);
IkReal x4066=(r01*sj6);
IkReal x4067=(r21*sj6);
IkReal x4068=(cj6*r00);
IkReal x4069=((1.0)*x4060);
IkReal x4070=((1.0)*x4059);
IkReal x4071=(sj5*x4070);
evalcond[0]=((((-1.0)*r22*x4071))+((x4060*x4063))+(((-1.0)*x4067*x4069))+(((-1.0)*r21*x4061*x4070))+(((-1.0)*r20*x4065*x4070)));
evalcond[1]=(((x4060*x4064))+(((-1.0)*r10*x4065*x4070))+(((-1.0)*r11*x4061*x4070))+(((-1.0)*r12*x4071))+(((-1.0)*x4062*x4069)));
evalcond[2]=((((-1.0)*r20*x4065*x4069))+((x4059*x4067))+(((-1.0)*r21*x4061*x4069))+(((-1.0)*r22*sj5*x4069))+(((-1.0)*x4063*x4070)));
evalcond[3]=((((-1.0)*x4068*x4070))+(((-1.0)*r00*x4065*x4069))+((x4059*x4066))+(((-1.0)*r01*x4061*x4069))+(((-1.0)*r02*sj5*x4069)));
evalcond[4]=((1.0)+(((-1.0)*r01*x4061*x4070))+((x4060*x4068))+(((-1.0)*r02*x4071))+(((-1.0)*x4066*x4069))+(((-1.0)*r00*x4065*x4070)));
evalcond[5]=((1.0)+((x4059*x4062))+(((-1.0)*r10*x4065*x4069))+(((-1.0)*r12*sj5*x4069))+(((-1.0)*x4064*x4070))+(((-1.0)*r11*x4061*x4069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4072=((1.0)*sj6);
CheckValue<IkReal> x4073 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4072))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4073.valid){
continue;
}
CheckValue<IkReal> x4074=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4072)))),-1);
if(!x4074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4073.value)+(((1.5707963267949)*(x4074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4075=IKsin(j4);
IkReal x4076=IKcos(j4);
IkReal x4077=(cj5*cj6);
IkReal x4078=(r11*sj6);
IkReal x4079=(cj6*r20);
IkReal x4080=(cj6*r10);
IkReal x4081=(cj5*sj6);
IkReal x4082=(r01*sj6);
IkReal x4083=(r21*sj6);
IkReal x4084=(cj6*r00);
IkReal x4085=((1.0)*x4076);
IkReal x4086=((1.0)*x4075);
IkReal x4087=(sj5*x4086);
evalcond[0]=((((-1.0)*r21*x4077*x4086))+(((-1.0)*x4083*x4085))+(((-1.0)*r22*x4087))+(((-1.0)*r20*x4081*x4086))+((x4076*x4079)));
evalcond[1]=(((x4076*x4080))+(((-1.0)*r12*x4087))+(((-1.0)*r11*x4077*x4086))+(((-1.0)*r10*x4081*x4086))+(((-1.0)*x4078*x4085)));
evalcond[2]=((((-1.0)*r22*sj5*x4085))+(((-1.0)*r21*x4077*x4085))+((x4075*x4083))+(((-1.0)*r20*x4081*x4085))+(((-1.0)*x4079*x4086)));
evalcond[3]=((((-1.0)*r02*sj5*x4085))+(((-1.0)*x4084*x4086))+((x4075*x4082))+(((-1.0)*r00*x4081*x4085))+(((-1.0)*r01*x4077*x4085)));
evalcond[4]=((1.0)+((x4076*x4084))+(((-1.0)*r02*x4087))+(((-1.0)*x4082*x4085))+(((-1.0)*r00*x4081*x4086))+(((-1.0)*r01*x4077*x4086)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x4085))+((x4075*x4078))+(((-1.0)*r11*x4077*x4085))+(((-1.0)*r10*x4081*x4085))+(((-1.0)*x4080*x4086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4088=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4088.valid){
continue;
}
CheckValue<IkReal> x4089 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4088.value)))+(x4089.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4090=IKsin(j4);
IkReal x4091=IKcos(j4);
IkReal x4092=(cj5*cj6);
IkReal x4093=(r11*sj6);
IkReal x4094=(cj6*r20);
IkReal x4095=(cj6*r10);
IkReal x4096=(cj5*sj6);
IkReal x4097=(r01*sj6);
IkReal x4098=(r21*sj6);
IkReal x4099=(cj6*r00);
IkReal x4100=((1.0)*x4091);
IkReal x4101=((1.0)*x4090);
IkReal x4102=(sj5*x4101);
evalcond[0]=((((-1.0)*x4098*x4100))+(((-1.0)*r20*x4096*x4101))+(((-1.0)*r22*x4102))+(((-1.0)*r21*x4092*x4101))+((x4091*x4094)));
evalcond[1]=((((-1.0)*r11*x4092*x4101))+(((-1.0)*r10*x4096*x4101))+(((-1.0)*r12*x4102))+((x4091*x4095))+(((-1.0)*x4093*x4100)));
evalcond[2]=((((-1.0)*r20*x4096*x4100))+(((-1.0)*r21*x4092*x4100))+(((-1.0)*r22*sj5*x4100))+(((-1.0)*x4094*x4101))+((x4090*x4098)));
evalcond[3]=((((-1.0)*r02*sj5*x4100))+(((-1.0)*r01*x4092*x4100))+(((-1.0)*r00*x4096*x4100))+((x4090*x4097))+(((-1.0)*x4099*x4101)));
evalcond[4]=((1.0)+(((-1.0)*r01*x4092*x4101))+(((-1.0)*r00*x4096*x4101))+((x4091*x4099))+(((-1.0)*x4097*x4100))+(((-1.0)*r02*x4102)));
evalcond[5]=((1.0)+(((-1.0)*r11*x4092*x4100))+(((-1.0)*x4095*x4101))+(((-1.0)*r10*x4096*x4100))+(((-1.0)*r12*sj5*x4100))+((x4090*x4093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4103=((1.0)*cj5);
IkReal x4104=((0.01)*cj5);
IkReal x4105=(cj6*r11);
IkReal x4106=(r20*sj6);
IkReal x4107=((0.01)*sj5);
IkReal x4108=(cj6*r01);
IkReal x4109=((0.37429)*cj5);
IkReal x4110=((0.37429)*sj5);
IkReal x4111=(cj6*r21);
IkReal x4112=(r10*sj5*sj6);
IkReal x4113=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x4107))+((r22*x4109))+(((-1.0)*x4110*x4111))+(((-1.0)*pz))+((x4104*x4111))+((x4104*x4106))+(((-1.0)*x4106*x4110)));
evalcond[2]=((((-1.0)*r00*sj6*x4110))+(((-1.0)*px))+((r00*sj6*x4104))+(((-1.0)*x4108*x4110))+((x4104*x4108))+((r02*x4109))+((r02*x4107)));
evalcond[3]=((0.29542)+(((-1.0)*x4105*x4110))+(((-1.0)*r10*sj6*x4110))+(((-1.0)*py))+((r12*x4107))+((r12*x4109))+((x4104*x4105))+((r10*sj6*x4104)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x4103))+((sj5*x4111))+((sj5*x4106)));
evalcond[5]=((((-1.0)*r12*x4103))+((sj5*x4105))+x4112);
evalcond[6]=(((sj5*x4108))+x4113+(((-1.0)*r02*x4103)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4114=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4114;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4114);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4115=((1.0)*sj5);
IkReal x4116=(((cj5*r22))+(((-1.0)*cj6*r21*x4115))+(((-1.0)*r20*sj6*x4115)));
j4eval[0]=x4116;
j4eval[1]=IKsign(x4116);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4117=cj6*cj6;
IkReal x4118=cj5*cj5;
IkReal x4119=r10*r10;
IkReal x4120=r11*r11;
IkReal x4121=r12*r12;
IkReal x4122=(r10*sj6);
IkReal x4123=(r12*sj5);
IkReal x4124=((2.0)*cj6*r11);
IkReal x4125=((1.0)*x4119);
IkReal x4126=(x4117*x4120);
IkReal x4127=((((-1.0)*x4118*x4122*x4124))+(((-1.0)*x4118*x4126))+x4126+((x4118*x4121))+((x4117*x4118*x4119))+(((-2.0)*cj5*x4122*x4123))+((x4122*x4124))+(((-1.0)*x4118*x4125))+(((-1.0)*x4120))+(((-1.0)*x4121))+(((-1.0)*cj5*x4123*x4124))+(((-1.0)*x4117*x4125)));
j4eval[0]=x4127;
j4eval[1]=((IKabs((((cj5*x4122))+((cj5*cj6*r11))+x4123)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4128=cj6*cj6;
IkReal x4129=cj5*cj5;
IkReal x4130=r10*r10;
IkReal x4131=r11*r11;
IkReal x4132=r12*r12;
IkReal x4133=(r10*sj6);
IkReal x4134=(r12*sj5);
IkReal x4135=((2.0)*cj6*r11);
IkReal x4136=(x4128*x4131);
IkReal x4137=(x4129*x4130);
CheckValue<IkReal> x4138=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4129*x4136))+((x4129*x4132))+(((-1.0)*x4129*x4133*x4135))+((x4128*x4137))+(((-2.0)*cj5*x4133*x4134))+(((-1.0)*x4137))+(((-1.0)*x4131))+(((-1.0)*x4132))+x4136+(((-1.0)*cj5*x4134*x4135))+((x4133*x4135))+(((-1.0)*x4128*x4130)))),-1);
if(!x4138.valid){
continue;
}
CheckValue<IkReal> x4139 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*cj6*r11))+x4134+((cj5*x4133))),IKFAST_ATAN2_MAGTHRESH);
if(!x4139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4138.value)))+(x4139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4140=IKsin(j4);
IkReal x4141=IKcos(j4);
IkReal x4142=(cj5*cj6);
IkReal x4143=(r11*sj6);
IkReal x4144=(cj6*r20);
IkReal x4145=(cj6*r10);
IkReal x4146=(cj5*sj6);
IkReal x4147=(r01*sj6);
IkReal x4148=(r21*sj6);
IkReal x4149=(cj6*r00);
IkReal x4150=((1.0)*x4141);
IkReal x4151=((1.0)*x4140);
IkReal x4152=(sj5*x4151);
evalcond[0]=((((-1.0)*x4148*x4150))+((x4141*x4144))+(((-1.0)*r21*x4142*x4151))+(((-1.0)*r22*x4152))+(((-1.0)*r20*x4146*x4151)));
evalcond[1]=((((-1.0)*r10*x4146*x4151))+((x4141*x4145))+(((-1.0)*x4143*x4150))+(((-1.0)*r11*x4142*x4151))+(((-1.0)*r12*x4152)));
evalcond[2]=((((-1.0)*x4144*x4151))+(((-1.0)*r22*sj5*x4150))+(((-1.0)*r21*x4142*x4150))+(((-1.0)*r20*x4146*x4150))+((x4140*x4148)));
evalcond[3]=((((-1.0)*r01*x4142*x4150))+(((-1.0)*r00*x4146*x4150))+(((-1.0)*x4149*x4151))+(((-1.0)*r02*sj5*x4150))+((x4140*x4147)));
evalcond[4]=((-1.0)+(((-1.0)*x4147*x4150))+(((-1.0)*r02*x4152))+((x4141*x4149))+(((-1.0)*r01*x4142*x4151))+(((-1.0)*r00*x4146*x4151)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x4146*x4150))+(((-1.0)*x4145*x4151))+(((-1.0)*r11*x4142*x4150))+(((-1.0)*r12*sj5*x4150))+((x4140*x4143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4153=((1.0)*sj5);
CheckValue<IkReal> x4154 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4154.valid){
continue;
}
CheckValue<IkReal> x4155=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x4153))+(((-1.0)*cj6*r21*x4153)))),-1);
if(!x4155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4154.value)+(((1.5707963267949)*(x4155.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4156=IKsin(j4);
IkReal x4157=IKcos(j4);
IkReal x4158=(cj5*cj6);
IkReal x4159=(r11*sj6);
IkReal x4160=(cj6*r20);
IkReal x4161=(cj6*r10);
IkReal x4162=(cj5*sj6);
IkReal x4163=(r01*sj6);
IkReal x4164=(r21*sj6);
IkReal x4165=(cj6*r00);
IkReal x4166=((1.0)*x4157);
IkReal x4167=((1.0)*x4156);
IkReal x4168=(sj5*x4167);
evalcond[0]=((((-1.0)*r20*x4162*x4167))+((x4157*x4160))+(((-1.0)*x4164*x4166))+(((-1.0)*r21*x4158*x4167))+(((-1.0)*r22*x4168)));
evalcond[1]=((((-1.0)*r10*x4162*x4167))+(((-1.0)*x4159*x4166))+(((-1.0)*r12*x4168))+((x4157*x4161))+(((-1.0)*r11*x4158*x4167)));
evalcond[2]=((((-1.0)*x4160*x4167))+(((-1.0)*r20*x4162*x4166))+((x4156*x4164))+(((-1.0)*r21*x4158*x4166))+(((-1.0)*r22*sj5*x4166)));
evalcond[3]=((((-1.0)*x4165*x4167))+(((-1.0)*r00*x4162*x4166))+((x4156*x4163))+(((-1.0)*r01*x4158*x4166))+(((-1.0)*r02*sj5*x4166)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x4168))+((x4157*x4165))+(((-1.0)*r00*x4162*x4167))+(((-1.0)*x4163*x4166))+(((-1.0)*r01*x4158*x4167)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x4162*x4166))+(((-1.0)*x4161*x4167))+(((-1.0)*r12*sj5*x4166))+((x4156*x4159))+(((-1.0)*r11*x4158*x4166)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4169 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4169.valid){
continue;
}
CheckValue<IkReal> x4170=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x4170.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4169.value)+(((1.5707963267949)*(x4170.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4171=IKsin(j4);
IkReal x4172=IKcos(j4);
IkReal x4173=(cj5*cj6);
IkReal x4174=(r11*sj6);
IkReal x4175=(cj6*r20);
IkReal x4176=(cj6*r10);
IkReal x4177=(cj5*sj6);
IkReal x4178=(r01*sj6);
IkReal x4179=(r21*sj6);
IkReal x4180=(cj6*r00);
IkReal x4181=((1.0)*x4172);
IkReal x4182=((1.0)*x4171);
IkReal x4183=(sj5*x4182);
evalcond[0]=((((-1.0)*r21*x4173*x4182))+(((-1.0)*r20*x4177*x4182))+(((-1.0)*r22*x4183))+((x4172*x4175))+(((-1.0)*x4179*x4181)));
evalcond[1]=((((-1.0)*r12*x4183))+(((-1.0)*r11*x4173*x4182))+(((-1.0)*x4174*x4181))+(((-1.0)*r10*x4177*x4182))+((x4172*x4176)));
evalcond[2]=((((-1.0)*r21*x4173*x4181))+(((-1.0)*x4175*x4182))+(((-1.0)*r20*x4177*x4181))+((x4171*x4179))+(((-1.0)*r22*sj5*x4181)));
evalcond[3]=((((-1.0)*x4180*x4182))+(((-1.0)*r02*sj5*x4181))+(((-1.0)*r01*x4173*x4181))+((x4171*x4178))+(((-1.0)*r00*x4177*x4181)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x4183))+((x4172*x4180))+(((-1.0)*r01*x4173*x4182))+(((-1.0)*r00*x4177*x4182))+(((-1.0)*x4178*x4181)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x4181))+(((-1.0)*r11*x4173*x4181))+(((-1.0)*x4176*x4182))+(((-1.0)*r10*x4177*x4181))+((x4171*x4174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4184=cj6*cj6;
IkReal x4185=cj5*cj5;
IkReal x4186=((1.0)*r11);
IkReal x4187=(cj5*sj0);
IkReal x4188=(cj6*r21);
IkReal x4189=(r22*sj5);
IkReal x4190=(r20*sj6);
IkReal x4191=(r12*r22);
IkReal x4192=((1.0)*sj6);
IkReal x4193=(r21*x4184);
IkReal x4194=(r10*x4185);
IkReal x4195=(r11*x4185);
IkReal x4196=(r20*x4184);
IkReal x4197=(cj5*r12*sj5);
CheckValue<IkReal> x4198=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj6*x4189))+((r20*x4194))+((r11*r21))+((x4193*x4195))+((cj6*x4190*x4195))+((x4190*x4197))+(((-1.0)*x4186*x4193))+((r10*x4196))+x4191+(((-1.0)*x4185*x4191))+((x4188*x4197))+((cj5*cj6*r11*x4189))+((sj6*x4188*x4194))+(((-1.0)*cj6*x4186*x4190))+(((-1.0)*x4194*x4196))+(((-1.0)*r10*x4188*x4192)))),-1);
if(!x4198.valid){
continue;
}
CheckValue<IkReal> x4199 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x4192))+((cj6*r20*sj0)))),(((sj0*x4189))+((x4187*x4190))+((x4187*x4188))),IKFAST_ATAN2_MAGTHRESH);
if(!x4199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4198.value)))+(x4199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4200=IKsin(j4);
IkReal x4201=IKcos(j4);
IkReal x4202=(cj5*cj6);
IkReal x4203=(r11*sj6);
IkReal x4204=(cj6*r20);
IkReal x4205=(cj6*r10);
IkReal x4206=(cj5*sj6);
IkReal x4207=(r01*sj6);
IkReal x4208=(r21*sj6);
IkReal x4209=(cj6*r00);
IkReal x4210=((1.0)*x4201);
IkReal x4211=((1.0)*x4200);
IkReal x4212=(sj5*x4211);
evalcond[0]=((((-1.0)*r20*x4206*x4211))+((x4201*x4204))+(((-1.0)*r22*x4212))+(((-1.0)*x4208*x4210))+(((-1.0)*r21*x4202*x4211)));
evalcond[1]=((((-1.0)*r20*x4206*x4210))+(((-1.0)*x4204*x4211))+((x4200*x4208))+(((-1.0)*r21*x4202*x4210))+(((-1.0)*r22*sj5*x4210)));
evalcond[2]=(sj0+(((-1.0)*r02*x4212))+(((-1.0)*x4207*x4210))+(((-1.0)*r00*x4206*x4211))+(((-1.0)*r01*x4202*x4211))+((x4201*x4209)));
evalcond[3]=(cj0+(((-1.0)*r00*x4206*x4210))+(((-1.0)*r01*x4202*x4210))+(((-1.0)*r02*sj5*x4210))+((x4200*x4207))+(((-1.0)*x4209*x4211)));
evalcond[4]=(sj0+(((-1.0)*r12*sj5*x4210))+(((-1.0)*x4205*x4211))+(((-1.0)*r11*x4202*x4210))+((x4200*x4203))+(((-1.0)*r10*x4206*x4210)));
evalcond[5]=((((-1.0)*r12*x4212))+((x4201*x4205))+(((-1.0)*r11*x4202*x4211))+(((-1.0)*r10*x4206*x4211))+(((-1.0)*cj0))+(((-1.0)*x4203*x4210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4213=cj5*cj5;
IkReal x4214=cj6*cj6;
IkReal x4215=(r22*sj5);
IkReal x4216=(cj6*r21);
IkReal x4217=(r20*sj6);
IkReal x4218=((1.0)*sj6);
IkReal x4219=(cj0*cj5);
IkReal x4220=(r02*r22);
IkReal x4221=(cj6*r01);
IkReal x4222=(r00*sj6);
IkReal x4223=(cj5*r02*sj5);
IkReal x4224=(r01*x4213);
IkReal x4225=(r21*x4214);
IkReal x4226=(r00*r20*x4213);
CheckValue<IkReal> x4227 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x4218)))),(((cj0*x4215))+((x4217*x4219))+((x4216*x4219))),IKFAST_ATAN2_MAGTHRESH);
if(!x4227.valid){
continue;
}
CheckValue<IkReal> x4228=IKPowWithIntegerCheck(IKsign((((x4224*x4225))+((x4216*x4223))+(((-1.0)*x4214*x4226))+(((-1.0)*r00*x4216*x4218))+(((-1.0)*x4213*x4220))+((x4217*x4223))+((cj5*x4215*x4222))+((cj5*x4215*x4221))+((r01*r21))+(((-1.0)*x4217*x4221))+x4226+x4220+((r00*r20*x4214))+(((-1.0)*r01*x4225))+((x4213*x4216*x4222))+((x4213*x4217*x4221)))),-1);
if(!x4228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4227.value)+(((1.5707963267949)*(x4228.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4229=IKsin(j4);
IkReal x4230=IKcos(j4);
IkReal x4231=(cj5*cj6);
IkReal x4232=(r11*sj6);
IkReal x4233=(cj6*r20);
IkReal x4234=(cj6*r10);
IkReal x4235=(cj5*sj6);
IkReal x4236=(r01*sj6);
IkReal x4237=(r21*sj6);
IkReal x4238=(cj6*r00);
IkReal x4239=((1.0)*x4230);
IkReal x4240=((1.0)*x4229);
IkReal x4241=(sj5*x4240);
evalcond[0]=((((-1.0)*r21*x4231*x4240))+((x4230*x4233))+(((-1.0)*r22*x4241))+(((-1.0)*r20*x4235*x4240))+(((-1.0)*x4237*x4239)));
evalcond[1]=((((-1.0)*x4233*x4240))+(((-1.0)*r22*sj5*x4239))+(((-1.0)*r21*x4231*x4239))+((x4229*x4237))+(((-1.0)*r20*x4235*x4239)));
evalcond[2]=(((x4230*x4238))+sj0+(((-1.0)*r01*x4231*x4240))+(((-1.0)*r00*x4235*x4240))+(((-1.0)*x4236*x4239))+(((-1.0)*r02*x4241)));
evalcond[3]=((((-1.0)*r00*x4235*x4239))+cj0+(((-1.0)*r01*x4231*x4239))+((x4229*x4236))+(((-1.0)*r02*sj5*x4239))+(((-1.0)*x4238*x4240)));
evalcond[4]=((((-1.0)*r10*x4235*x4239))+sj0+(((-1.0)*r12*sj5*x4239))+(((-1.0)*r11*x4231*x4239))+((x4229*x4232))+(((-1.0)*x4234*x4240)));
evalcond[5]=(((x4230*x4234))+(((-1.0)*x4232*x4239))+(((-1.0)*r11*x4231*x4240))+(((-1.0)*r12*x4241))+(((-1.0)*r10*x4235*x4240))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4242=(cj5*sj0);
IkReal x4243=((1.0)*sj5);
CheckValue<IkReal> x4244 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r22*sj0*sj5))+((r20*sj6*x4242))+((cj6*r21*x4242))),IKFAST_ATAN2_MAGTHRESH);
if(!x4244.valid){
continue;
}
CheckValue<IkReal> x4245=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x4243))+(((-1.0)*r10*sj6*x4243)))),-1);
if(!x4245.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4244.value)+(((1.5707963267949)*(x4245.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4246=IKsin(j4);
IkReal x4247=IKcos(j4);
IkReal x4248=(cj5*cj6);
IkReal x4249=(r11*sj6);
IkReal x4250=(cj6*r20);
IkReal x4251=(cj6*r10);
IkReal x4252=(cj5*sj6);
IkReal x4253=(r01*sj6);
IkReal x4254=(r21*sj6);
IkReal x4255=(cj6*r00);
IkReal x4256=((1.0)*x4247);
IkReal x4257=((1.0)*x4246);
IkReal x4258=(sj5*x4257);
evalcond[0]=(((x4247*x4250))+(((-1.0)*x4254*x4256))+(((-1.0)*r22*x4258))+(((-1.0)*r20*x4252*x4257))+(((-1.0)*r21*x4248*x4257)));
evalcond[1]=((((-1.0)*r22*sj5*x4256))+((x4246*x4254))+(((-1.0)*r20*x4252*x4256))+(((-1.0)*r21*x4248*x4256))+(((-1.0)*x4250*x4257)));
evalcond[2]=(sj0+((x4247*x4255))+(((-1.0)*x4253*x4256))+(((-1.0)*r00*x4252*x4257))+(((-1.0)*r01*x4248*x4257))+(((-1.0)*r02*x4258)));
evalcond[3]=(cj0+(((-1.0)*x4255*x4257))+(((-1.0)*r00*x4252*x4256))+((x4246*x4253))+(((-1.0)*r01*x4248*x4256))+(((-1.0)*r02*sj5*x4256)));
evalcond[4]=(((x4246*x4249))+sj0+(((-1.0)*r10*x4252*x4256))+(((-1.0)*x4251*x4257))+(((-1.0)*r11*x4248*x4256))+(((-1.0)*r12*sj5*x4256)));
evalcond[5]=(((x4247*x4251))+(((-1.0)*r10*x4252*x4257))+(((-1.0)*r11*x4248*x4257))+(((-1.0)*x4249*x4256))+(((-1.0)*cj0))+(((-1.0)*r12*x4258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4259=(r10*sj6);
IkReal x4260=((0.37429)*sj5);
IkReal x4261=(cj5*r22);
IkReal x4262=((0.01)*cj5);
IkReal x4263=(cj6*r11);
IkReal x4264=(r00*sj6);
IkReal x4265=(r20*sj6);
IkReal x4266=((0.01)*sj5);
IkReal x4267=(cj6*r01);
IkReal x4268=((0.37429)*cj5);
IkReal x4269=(cj6*r21);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((0.36442)+(((-1.0)*pz))+((x4262*x4265))+((x4262*x4269))+(((-1.0)*x4260*x4265))+(((-1.0)*x4260*x4269))+(((0.37429)*x4261))+((r22*x4266)));
evalcond[2]=(((r02*x4266))+((r02*x4268))+(((-1.0)*px))+((x4262*x4264))+((x4262*x4267))+(((-1.0)*x4260*x4264))+(((-1.0)*x4260*x4267)));
evalcond[3]=(((r12*x4266))+((r12*x4268))+(((-1.0)*x4259*x4260))+(((-1.0)*py))+((x4259*x4262))+((x4262*x4263))+(((-1.0)*x4260*x4263)));
evalcond[4]=(((sj5*x4265))+((sj5*x4269))+(((-1.0)*x4261)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4270=(cj6*sj5);
IkReal x4271=(sj5*sj6);
IkReal x4272=((1.0)*cj5);
if( IKabs(((((-1.0)*r12*x4272))+((r11*x4270))+((r10*x4271)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x4271))+(((-1.0)*r02*x4272))+((r01*x4270)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x4272))+((r11*x4270))+((r10*x4271))))+IKsqr((((r00*x4271))+(((-1.0)*r02*x4272))+((r01*x4270))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x4272))+((r11*x4270))+((r10*x4271))), (((r00*x4271))+(((-1.0)*r02*x4272))+((r01*x4270))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4273=(cj6*sj5);
IkReal x4274=(sj5*sj6);
IkReal x4275=((1.0)*cj5);
evalcond[0]=((((-1.0)*r12*x4275))+((r11*x4273))+(((-1.0)*(IKsin(j0))))+((r10*x4274)));
evalcond[1]=(((r00*x4274))+(((-1.0)*r02*x4275))+(((-1.0)*(IKcos(j0))))+((r01*x4273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4276=((1.0)*cj5);
IkReal x4277=((1.0)*sj5);
IkReal x4278=(((cj5*r12))+(((-1.0)*r10*sj6*x4277))+(((-1.0)*cj6*r11*x4277)));
j4eval[0]=x4278;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs(((((-1.0)*r02*x4277))+(((-1.0)*r00*sj6*x4276))+(((-1.0)*cj6*r01*x4276))))));
j4eval[2]=IKsign(x4278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4279=(r20*sj0);
IkReal x4280=((1.0)*sj5);
IkReal x4281=(r21*sj0);
IkReal x4282=(((cj5*r12))+(((-1.0)*cj6*r11*x4280))+(((-1.0)*r10*sj6*x4280)));
j4eval[0]=x4282;
j4eval[1]=IKsign(x4282);
j4eval[2]=((IKabs((((cj6*x4279))+(((-1.0)*sj6*x4281)))))+(IKabs((((cj5*cj6*x4281))+((cj5*sj6*x4279))+((r22*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4283=cj5*cj5;
IkReal x4284=cj6*cj6;
IkReal x4285=r22*r22;
IkReal x4286=r21*r21;
IkReal x4287=r20*r20;
IkReal x4288=(r22*sj5);
IkReal x4289=(r21*sj6);
IkReal x4290=(cj6*r20);
IkReal x4291=(cj5*r20*sj6);
IkReal x4292=((1.0)*x4283);
IkReal x4293=(cj5*cj6*r21);
IkReal x4294=(x4284*x4286);
IkReal x4295=(x4284*x4287);
IkReal x4296=(((x4283*x4285))+(((-2.0)*x4283*x4289*x4290))+(((-1.0)*x4295))+((x4283*x4295))+x4294+(((-2.0)*x4288*x4293))+(((-2.0)*x4288*x4291))+(((-1.0)*x4285))+(((-1.0)*x4286))+(((-1.0)*x4287*x4292))+(((-1.0)*x4292*x4294))+(((2.0)*x4289*x4290)));
j4eval[0]=x4296;
j4eval[1]=IKsign(x4296);
j4eval[2]=((IKabs((x4291+x4293+x4288)))+(IKabs((x4290+(((-1.0)*x4289))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4297=((1.0)*cj5);
IkReal x4298=((0.01)*cj5);
IkReal x4299=(cj6*r11);
IkReal x4300=(r20*sj6);
IkReal x4301=((0.01)*sj5);
IkReal x4302=(cj6*r01);
IkReal x4303=((0.37429)*cj5);
IkReal x4304=((0.37429)*sj5);
IkReal x4305=(cj6*r21);
IkReal x4306=(r10*sj5*sj6);
IkReal x4307=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.36442)+((r22*x4303))+((r22*x4301))+(((-1.0)*pz))+((x4298*x4305))+((x4298*x4300))+(((-1.0)*x4304*x4305))+(((-1.0)*x4300*x4304)));
evalcond[2]=(((r02*x4303))+((r02*x4301))+((r00*sj6*x4298))+(((-1.0)*px))+(((-1.0)*r00*sj6*x4304))+((x4298*x4302))+(((-1.0)*x4302*x4304)));
evalcond[3]=(((x4298*x4299))+((r12*x4301))+((r12*x4303))+((r10*sj6*x4298))+(((-1.0)*py))+(((-1.0)*r10*sj6*x4304))+(((-1.0)*x4299*x4304)));
evalcond[4]=((((-1.0)*r22*x4297))+((sj5*x4300))+((sj5*x4305)));
evalcond[5]=((((-1.0)*r12*x4297))+x4306+((sj5*x4299)));
evalcond[6]=((-1.0)+x4307+(((-1.0)*r02*x4297))+((sj5*x4302)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4308=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4308;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x4308);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4309=((1.0)*sj6);
IkReal x4310=((((-1.0)*r00*sj5*x4309))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x4310;
j4eval[1]=IKsign(x4310);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x4309))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4311=cj5*cj5;
IkReal x4312=cj6*cj6;
IkReal x4313=r22*r22;
IkReal x4314=r21*r21;
IkReal x4315=r20*r20;
IkReal x4316=(r22*sj5);
IkReal x4317=(r21*sj6);
IkReal x4318=(cj6*r20);
IkReal x4319=(cj5*r20*sj6);
IkReal x4320=((1.0)*x4311);
IkReal x4321=(cj5*cj6*r21);
IkReal x4322=(x4312*x4314);
IkReal x4323=(x4312*x4315);
IkReal x4324=(((x4311*x4313))+(((-1.0)*x4315*x4320))+(((-2.0)*x4316*x4321))+(((-1.0)*x4323))+(((2.0)*x4317*x4318))+((x4311*x4323))+(((-2.0)*x4311*x4317*x4318))+(((-1.0)*x4320*x4322))+x4322+(((-1.0)*x4314))+(((-1.0)*x4313))+(((-2.0)*x4316*x4319)));
j4eval[0]=x4324;
j4eval[1]=IKsign(x4324);
j4eval[2]=((IKabs((x4318+(((-1.0)*x4317)))))+(IKabs((x4321+x4316+x4319))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4325=cj5*cj5;
IkReal x4326=cj6*cj6;
IkReal x4327=r22*r22;
IkReal x4328=r21*r21;
IkReal x4329=r20*r20;
IkReal x4330=(r21*sj6);
IkReal x4331=(cj6*r20);
IkReal x4332=(cj5*cj6*r21);
IkReal x4333=((1.0)*x4325);
IkReal x4334=(cj5*r20*sj6);
IkReal x4335=((2.0)*r22*sj5);
IkReal x4336=(x4326*x4328);
IkReal x4337=(x4326*x4329);
CheckValue<IkReal> x4338=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4332*x4335))+(((-1.0)*x4333*x4336))+(((-1.0)*x4334*x4335))+(((-1.0)*x4337))+(((-1.0)*x4328))+(((-1.0)*x4327))+(((2.0)*x4330*x4331))+((x4325*x4327))+((x4325*x4337))+(((-2.0)*x4325*x4330*x4331))+x4336+(((-1.0)*x4329*x4333)))),-1);
if(!x4338.valid){
continue;
}
CheckValue<IkReal> x4339 = IKatan2WithCheck(IkReal(((((-1.0)*x4330))+x4331)),(((r22*sj5))+x4334+x4332),IKFAST_ATAN2_MAGTHRESH);
if(!x4339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4338.value)))+(x4339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4340=IKsin(j4);
IkReal x4341=IKcos(j4);
IkReal x4342=(cj5*cj6);
IkReal x4343=(r11*sj6);
IkReal x4344=(cj6*r20);
IkReal x4345=(cj5*sj6);
IkReal x4346=(cj6*r10);
IkReal x4347=(r01*sj6);
IkReal x4348=(r21*sj6);
IkReal x4349=(cj6*r00);
IkReal x4350=((1.0)*x4341);
IkReal x4351=((1.0)*x4340);
IkReal x4352=(sj5*x4351);
evalcond[0]=((((-1.0)*r20*x4345*x4351))+((x4341*x4344))+(((-1.0)*r22*x4352))+(((-1.0)*x4348*x4350))+(((-1.0)*r21*x4342*x4351)));
evalcond[1]=((((-1.0)*r02*x4352))+(((-1.0)*r01*x4342*x4351))+((x4341*x4349))+(((-1.0)*x4347*x4350))+(((-1.0)*r00*x4345*x4351)));
evalcond[2]=((((-1.0)*x4349*x4351))+(((-1.0)*r02*sj5*x4350))+(((-1.0)*r01*x4342*x4350))+((x4340*x4347))+(((-1.0)*r00*x4345*x4350)));
evalcond[3]=((((-1.0)*r11*x4342*x4350))+(((-1.0)*r10*x4345*x4350))+(((-1.0)*r12*sj5*x4350))+((x4340*x4343))+(((-1.0)*x4346*x4351)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x4342*x4351))+(((-1.0)*r10*x4345*x4351))+(((-1.0)*x4343*x4350))+(((-1.0)*r12*x4352))+((x4341*x4346)));
evalcond[5]=((-1.0)+(((-1.0)*x4344*x4351))+(((-1.0)*r20*x4345*x4350))+((x4340*x4348))+(((-1.0)*r22*sj5*x4350))+(((-1.0)*r21*x4342*x4350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4353=((1.0)*sj6);
CheckValue<IkReal> x4354 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4353))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4354.valid){
continue;
}
CheckValue<IkReal> x4355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x4353))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x4355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4354.value)+(((1.5707963267949)*(x4355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4356=IKsin(j4);
IkReal x4357=IKcos(j4);
IkReal x4358=(cj5*cj6);
IkReal x4359=(r11*sj6);
IkReal x4360=(cj6*r20);
IkReal x4361=(cj5*sj6);
IkReal x4362=(cj6*r10);
IkReal x4363=(r01*sj6);
IkReal x4364=(r21*sj6);
IkReal x4365=(cj6*r00);
IkReal x4366=((1.0)*x4357);
IkReal x4367=((1.0)*x4356);
IkReal x4368=(sj5*x4367);
evalcond[0]=((((-1.0)*r22*x4368))+((x4357*x4360))+(((-1.0)*r20*x4361*x4367))+(((-1.0)*r21*x4358*x4367))+(((-1.0)*x4364*x4366)));
evalcond[1]=(((x4357*x4365))+(((-1.0)*r00*x4361*x4367))+(((-1.0)*r02*x4368))+(((-1.0)*x4363*x4366))+(((-1.0)*r01*x4358*x4367)));
evalcond[2]=(((x4356*x4363))+(((-1.0)*r00*x4361*x4366))+(((-1.0)*x4365*x4367))+(((-1.0)*r02*sj5*x4366))+(((-1.0)*r01*x4358*x4366)));
evalcond[3]=((((-1.0)*r12*sj5*x4366))+(((-1.0)*x4362*x4367))+(((-1.0)*r11*x4358*x4366))+(((-1.0)*r10*x4361*x4366))+((x4356*x4359)));
evalcond[4]=((-1.0)+((x4357*x4362))+(((-1.0)*x4359*x4366))+(((-1.0)*r11*x4358*x4367))+(((-1.0)*r12*x4368))+(((-1.0)*r10*x4361*x4367)));
evalcond[5]=((-1.0)+(((-1.0)*x4360*x4367))+(((-1.0)*r20*x4361*x4366))+((x4356*x4364))+(((-1.0)*r21*x4358*x4366))+(((-1.0)*r22*sj5*x4366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4369=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4369.valid){
continue;
}
CheckValue<IkReal> x4370 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x4370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4369.value)))+(x4370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4371=IKsin(j4);
IkReal x4372=IKcos(j4);
IkReal x4373=(cj5*cj6);
IkReal x4374=(r11*sj6);
IkReal x4375=(cj6*r20);
IkReal x4376=(cj5*sj6);
IkReal x4377=(cj6*r10);
IkReal x4378=(r01*sj6);
IkReal x4379=(r21*sj6);
IkReal x4380=(cj6*r00);
IkReal x4381=((1.0)*x4372);
IkReal x4382=((1.0)*x4371);
IkReal x4383=(sj5*x4382);
evalcond[0]=((((-1.0)*x4379*x4381))+(((-1.0)*r21*x4373*x4382))+((x4372*x4375))+(((-1.0)*r22*x4383))+(((-1.0)*r20*x4376*x4382)));
evalcond[1]=((((-1.0)*r02*x4383))+(((-1.0)*r01*x4373*x4382))+(((-1.0)*x4378*x4381))+((x4372*x4380))+(((-1.0)*r00*x4376*x4382)));
evalcond[2]=(((x4371*x4378))+(((-1.0)*x4380*x4382))+(((-1.0)*r01*x4373*x4381))+(((-1.0)*r02*sj5*x4381))+(((-1.0)*r00*x4376*x4381)));
evalcond[3]=(((x4371*x4374))+(((-1.0)*r12*sj5*x4381))+(((-1.0)*r10*x4376*x4381))+(((-1.0)*r11*x4373*x4381))+(((-1.0)*x4377*x4382)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x4383))+((x4372*x4377))+(((-1.0)*r10*x4376*x4382))+(((-1.0)*r11*x4373*x4382))+(((-1.0)*x4374*x4381)));
evalcond[5]=((-1.0)+((x4371*x4379))+(((-1.0)*r21*x4373*x4381))+(((-1.0)*r20*x4376*x4381))+(((-1.0)*x4375*x4382))+(((-1.0)*r22*sj5*x4381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4384=((1.0)*cj5);
IkReal x4385=((0.01)*cj5);
IkReal x4386=(cj6*r11);
IkReal x4387=(r20*sj6);
IkReal x4388=((0.01)*sj5);
IkReal x4389=(cj6*r01);
IkReal x4390=((0.37429)*cj5);
IkReal x4391=((0.37429)*sj5);
IkReal x4392=(cj6*r21);
IkReal x4393=(r10*sj5*sj6);
IkReal x4394=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.36442)+(((-1.0)*x4387*x4391))+((r22*x4390))+((r22*x4388))+(((-1.0)*pz))+(((-1.0)*x4391*x4392))+((x4385*x4392))+((x4385*x4387)));
evalcond[2]=((((-1.0)*x4389*x4391))+((r02*x4388))+((r02*x4390))+(((-1.0)*px))+(((-1.0)*r00*sj6*x4391))+((r00*sj6*x4385))+((x4385*x4389)));
evalcond[3]=(((r10*sj6*x4385))+(((-1.0)*py))+(((-1.0)*x4386*x4391))+(((-1.0)*r10*sj6*x4391))+((r12*x4388))+((x4385*x4386))+((r12*x4390)));
evalcond[4]=(((sj5*x4392))+(((-1.0)*r22*x4384))+((sj5*x4387)));
evalcond[5]=((((-1.0)*r12*x4384))+x4393+((sj5*x4386)));
evalcond[6]=((1.0)+(((-1.0)*r02*x4384))+x4394+((sj5*x4389)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4395=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x4395;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4395);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4396=((1.0)*sj5);
IkReal x4397=((((-1.0)*cj6*r21*x4396))+((cj5*r22))+(((-1.0)*r20*sj6*x4396)));
j4eval[0]=x4397;
j4eval[1]=IKsign(x4397);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4398=cj5*cj5;
IkReal x4399=cj6*cj6;
IkReal x4400=r22*r22;
IkReal x4401=r21*r21;
IkReal x4402=r20*r20;
IkReal x4403=(r22*sj5);
IkReal x4404=(r21*sj6);
IkReal x4405=(cj6*r20);
IkReal x4406=(cj5*r20*sj6);
IkReal x4407=((1.0)*x4398);
IkReal x4408=(cj5*cj6*r21);
IkReal x4409=(x4399*x4401);
IkReal x4410=(x4399*x4402);
IkReal x4411=(x4409+(((-1.0)*x4407*x4409))+(((2.0)*x4404*x4405))+(((-1.0)*x4400))+(((-1.0)*x4401))+(((-1.0)*x4410))+(((-1.0)*x4402*x4407))+(((-2.0)*x4398*x4404*x4405))+(((-2.0)*x4403*x4408))+(((-2.0)*x4403*x4406))+((x4398*x4410))+((x4398*x4400)));
j4eval[0]=x4411;
j4eval[1]=IKsign(x4411);
j4eval[2]=((IKabs((x4405+(((-1.0)*x4404)))))+(IKabs((x4408+x4406+x4403))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4412=cj5*cj5;
IkReal x4413=cj6*cj6;
IkReal x4414=r22*r22;
IkReal x4415=r21*r21;
IkReal x4416=r20*r20;
IkReal x4417=(r21*sj6);
IkReal x4418=(cj6*r20);
IkReal x4419=(cj5*cj6*r21);
IkReal x4420=((1.0)*x4412);
IkReal x4421=(cj5*r20*sj6);
IkReal x4422=((2.0)*r22*sj5);
IkReal x4423=(x4413*x4415);
IkReal x4424=(x4413*x4416);
CheckValue<IkReal> x4425 = IKatan2WithCheck(IkReal((x4418+(((-1.0)*x4417)))),(x4419+x4421+((r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4425.valid){
continue;
}
CheckValue<IkReal> x4426=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4412*x4417*x4418))+(((-1.0)*x4420*x4423))+x4423+((x4412*x4424))+((x4412*x4414))+(((2.0)*x4417*x4418))+(((-1.0)*x4421*x4422))+(((-1.0)*x4415))+(((-1.0)*x4414))+(((-1.0)*x4424))+(((-1.0)*x4419*x4422))+(((-1.0)*x4416*x4420)))),-1);
if(!x4426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4425.value)+(((1.5707963267949)*(x4426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4427=IKsin(j4);
IkReal x4428=IKcos(j4);
IkReal x4429=(cj5*cj6);
IkReal x4430=(r11*sj6);
IkReal x4431=(cj6*r20);
IkReal x4432=(cj5*sj6);
IkReal x4433=(cj6*r10);
IkReal x4434=(r01*sj6);
IkReal x4435=(r21*sj6);
IkReal x4436=(cj6*r00);
IkReal x4437=((1.0)*x4428);
IkReal x4438=((1.0)*x4427);
IkReal x4439=(sj5*x4438);
evalcond[0]=((((-1.0)*r21*x4429*x4438))+((x4428*x4431))+(((-1.0)*r20*x4432*x4438))+(((-1.0)*r22*x4439))+(((-1.0)*x4435*x4437)));
evalcond[1]=((((-1.0)*r02*x4439))+(((-1.0)*x4434*x4437))+((x4428*x4436))+(((-1.0)*r00*x4432*x4438))+(((-1.0)*r01*x4429*x4438)));
evalcond[2]=((((-1.0)*x4436*x4438))+(((-1.0)*r02*sj5*x4437))+((x4427*x4434))+(((-1.0)*r00*x4432*x4437))+(((-1.0)*r01*x4429*x4437)));
evalcond[3]=((((-1.0)*r11*x4429*x4437))+(((-1.0)*x4433*x4438))+(((-1.0)*r12*sj5*x4437))+((x4427*x4430))+(((-1.0)*r10*x4432*x4437)));
evalcond[4]=((1.0)+(((-1.0)*r11*x4429*x4438))+(((-1.0)*x4430*x4437))+((x4428*x4433))+(((-1.0)*r12*x4439))+(((-1.0)*r10*x4432*x4438)));
evalcond[5]=((-1.0)+(((-1.0)*r21*x4429*x4437))+(((-1.0)*r20*x4432*x4437))+(((-1.0)*r22*sj5*x4437))+(((-1.0)*x4431*x4438))+((x4427*x4435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4440=((1.0)*sj5);
CheckValue<IkReal> x4441=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x4440))+(((-1.0)*r20*sj6*x4440)))),-1);
if(!x4441.valid){
continue;
}
CheckValue<IkReal> x4442 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x4442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4441.value)))+(x4442.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4443=IKsin(j4);
IkReal x4444=IKcos(j4);
IkReal x4445=(cj5*cj6);
IkReal x4446=(r11*sj6);
IkReal x4447=(cj6*r20);
IkReal x4448=(cj5*sj6);
IkReal x4449=(cj6*r10);
IkReal x4450=(r01*sj6);
IkReal x4451=(r21*sj6);
IkReal x4452=(cj6*r00);
IkReal x4453=((1.0)*x4444);
IkReal x4454=((1.0)*x4443);
IkReal x4455=(sj5*x4454);
evalcond[0]=((((-1.0)*r22*x4455))+(((-1.0)*r20*x4448*x4454))+(((-1.0)*r21*x4445*x4454))+((x4444*x4447))+(((-1.0)*x4451*x4453)));
evalcond[1]=((((-1.0)*r02*x4455))+(((-1.0)*r01*x4445*x4454))+((x4444*x4452))+(((-1.0)*r00*x4448*x4454))+(((-1.0)*x4450*x4453)));
evalcond[2]=((((-1.0)*r01*x4445*x4453))+(((-1.0)*r00*x4448*x4453))+((x4443*x4450))+(((-1.0)*r02*sj5*x4453))+(((-1.0)*x4452*x4454)));
evalcond[3]=((((-1.0)*r10*x4448*x4453))+(((-1.0)*x4449*x4454))+((x4443*x4446))+(((-1.0)*r11*x4445*x4453))+(((-1.0)*r12*sj5*x4453)));
evalcond[4]=((1.0)+(((-1.0)*x4446*x4453))+(((-1.0)*r10*x4448*x4454))+(((-1.0)*r12*x4455))+((x4444*x4449))+(((-1.0)*r11*x4445*x4454)));
evalcond[5]=((-1.0)+(((-1.0)*r20*x4448*x4453))+(((-1.0)*r21*x4445*x4453))+(((-1.0)*x4447*x4454))+((x4443*x4451))+(((-1.0)*r22*sj5*x4453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4456 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4456.valid){
continue;
}
CheckValue<IkReal> x4457=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4456.value)+(((1.5707963267949)*(x4457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4458=IKsin(j4);
IkReal x4459=IKcos(j4);
IkReal x4460=(cj5*cj6);
IkReal x4461=(r11*sj6);
IkReal x4462=(cj6*r20);
IkReal x4463=(cj5*sj6);
IkReal x4464=(cj6*r10);
IkReal x4465=(r01*sj6);
IkReal x4466=(r21*sj6);
IkReal x4467=(cj6*r00);
IkReal x4468=((1.0)*x4459);
IkReal x4469=((1.0)*x4458);
IkReal x4470=(sj5*x4469);
evalcond[0]=((((-1.0)*r21*x4460*x4469))+(((-1.0)*r20*x4463*x4469))+(((-1.0)*x4466*x4468))+((x4459*x4462))+(((-1.0)*r22*x4470)));
evalcond[1]=((((-1.0)*x4465*x4468))+(((-1.0)*r01*x4460*x4469))+((x4459*x4467))+(((-1.0)*r00*x4463*x4469))+(((-1.0)*r02*x4470)));
evalcond[2]=(((x4458*x4465))+(((-1.0)*r01*x4460*x4468))+(((-1.0)*r02*sj5*x4468))+(((-1.0)*r00*x4463*x4468))+(((-1.0)*x4467*x4469)));
evalcond[3]=((((-1.0)*x4464*x4469))+(((-1.0)*r12*sj5*x4468))+((x4458*x4461))+(((-1.0)*r11*x4460*x4468))+(((-1.0)*r10*x4463*x4468)));
evalcond[4]=((1.0)+(((-1.0)*r12*x4470))+(((-1.0)*r11*x4460*x4469))+(((-1.0)*r10*x4463*x4469))+((x4459*x4464))+(((-1.0)*x4461*x4468)));
evalcond[5]=((-1.0)+(((-1.0)*r22*sj5*x4468))+(((-1.0)*r21*x4460*x4468))+(((-1.0)*r20*x4463*x4468))+((x4458*x4466))+(((-1.0)*x4462*x4469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4471=cj5*cj5;
IkReal x4472=cj6*cj6;
IkReal x4473=r22*r22;
IkReal x4474=r21*r21;
IkReal x4475=r20*r20;
IkReal x4476=(r21*sj6);
IkReal x4477=(cj6*r20);
IkReal x4478=(cj5*cj6*r21);
IkReal x4479=((1.0)*x4471);
IkReal x4480=(cj5*r20*sj6);
IkReal x4481=((2.0)*r22*sj5);
IkReal x4482=(x4472*x4474);
IkReal x4483=(x4472*x4475);
CheckValue<IkReal> x4484 = IKatan2WithCheck(IkReal((x4477+(((-1.0)*x4476)))),(x4478+x4480+((r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4484.valid){
continue;
}
CheckValue<IkReal> x4485=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4483))+((x4471*x4473))+((x4471*x4483))+x4482+(((-1.0)*x4475*x4479))+(((-2.0)*x4471*x4476*x4477))+(((-1.0)*x4479*x4482))+(((2.0)*x4476*x4477))+(((-1.0)*x4480*x4481))+(((-1.0)*x4478*x4481))+(((-1.0)*x4473))+(((-1.0)*x4474)))),-1);
if(!x4485.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4484.value)+(((1.5707963267949)*(x4485.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4486=IKsin(j4);
IkReal x4487=IKcos(j4);
IkReal x4488=(cj5*cj6);
IkReal x4489=(r11*sj6);
IkReal x4490=(cj6*r20);
IkReal x4491=(cj6*r10);
IkReal x4492=(cj5*sj6);
IkReal x4493=(r21*sj6);
IkReal x4494=(cj6*r00);
IkReal x4495=(r01*sj6);
IkReal x4496=((1.0)*x4487);
IkReal x4497=((1.0)*x4486);
IkReal x4498=(sj5*x4497);
evalcond[0]=((((-1.0)*r20*x4492*x4497))+((x4487*x4490))+(((-1.0)*r21*x4488*x4497))+(((-1.0)*r22*x4498))+(((-1.0)*x4493*x4496)));
evalcond[1]=((((-1.0)*r02*sj5*x4496))+(((-1.0)*r00*x4492*x4496))+((x4486*x4495))+(((-1.0)*r01*x4488*x4496))+(((-1.0)*x4494*x4497)));
evalcond[2]=((((-1.0)*r11*x4488*x4496))+(((-1.0)*r12*sj5*x4496))+(((-1.0)*r10*x4492*x4496))+(((-1.0)*x4491*x4497))+((x4486*x4489)));
evalcond[3]=((((-1.0)*r02*x4498))+sj0+((x4487*x4494))+(((-1.0)*r00*x4492*x4497))+(((-1.0)*x4495*x4496))+(((-1.0)*r01*x4488*x4497)));
evalcond[4]=((-1.0)+(((-1.0)*r20*x4492*x4496))+(((-1.0)*r22*sj5*x4496))+(((-1.0)*x4490*x4497))+((x4486*x4493))+(((-1.0)*r21*x4488*x4496)));
evalcond[5]=((((-1.0)*x4489*x4496))+((x4487*x4491))+(((-1.0)*r11*x4488*x4497))+(((-1.0)*r10*x4492*x4497))+(((-1.0)*cj0))+(((-1.0)*r12*x4498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4499=(cj5*sj0);
IkReal x4500=((1.0)*sj5);
CheckValue<IkReal> x4501 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r20*sj6*x4499))+((r22*sj0*sj5))+((cj6*r21*x4499))),IKFAST_ATAN2_MAGTHRESH);
if(!x4501.valid){
continue;
}
CheckValue<IkReal> x4502=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj6*x4500))+((cj5*r12))+(((-1.0)*cj6*r11*x4500)))),-1);
if(!x4502.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4501.value)+(((1.5707963267949)*(x4502.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4503=IKsin(j4);
IkReal x4504=IKcos(j4);
IkReal x4505=(cj5*cj6);
IkReal x4506=(r11*sj6);
IkReal x4507=(cj6*r20);
IkReal x4508=(cj6*r10);
IkReal x4509=(cj5*sj6);
IkReal x4510=(r21*sj6);
IkReal x4511=(cj6*r00);
IkReal x4512=(r01*sj6);
IkReal x4513=((1.0)*x4504);
IkReal x4514=((1.0)*x4503);
IkReal x4515=(sj5*x4514);
evalcond[0]=((((-1.0)*r20*x4509*x4514))+(((-1.0)*r21*x4505*x4514))+(((-1.0)*x4510*x4513))+((x4504*x4507))+(((-1.0)*r22*x4515)));
evalcond[1]=(((x4503*x4512))+(((-1.0)*r00*x4509*x4513))+(((-1.0)*x4511*x4514))+(((-1.0)*r01*x4505*x4513))+(((-1.0)*r02*sj5*x4513)));
evalcond[2]=((((-1.0)*r10*x4509*x4513))+(((-1.0)*r11*x4505*x4513))+((x4503*x4506))+(((-1.0)*r12*sj5*x4513))+(((-1.0)*x4508*x4514)));
evalcond[3]=(sj0+(((-1.0)*r02*x4515))+((x4504*x4511))+(((-1.0)*x4512*x4513))+(((-1.0)*r00*x4509*x4514))+(((-1.0)*r01*x4505*x4514)));
evalcond[4]=((-1.0)+((x4503*x4510))+(((-1.0)*r20*x4509*x4513))+(((-1.0)*r21*x4505*x4513))+(((-1.0)*r22*sj5*x4513))+(((-1.0)*x4507*x4514)));
evalcond[5]=((((-1.0)*x4506*x4513))+(((-1.0)*r10*x4509*x4514))+(((-1.0)*r12*x4515))+(((-1.0)*r11*x4505*x4514))+((x4504*x4508))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4516=((1.0)*cj5);
IkReal x4517=((1.0)*sj5);
CheckValue<IkReal> x4518 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj6*x4516))+(((-1.0)*r02*x4517))+(((-1.0)*cj6*r01*x4516)))),((((-1.0)*r01*sj6))+((cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x4518.valid){
continue;
}
CheckValue<IkReal> x4519=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x4517))+(((-1.0)*r10*sj6*x4517)))),-1);
if(!x4519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4518.value)+(((1.5707963267949)*(x4519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4520=IKsin(j4);
IkReal x4521=IKcos(j4);
IkReal x4522=(cj5*cj6);
IkReal x4523=(r11*sj6);
IkReal x4524=(cj6*r20);
IkReal x4525=(cj6*r10);
IkReal x4526=(cj5*sj6);
IkReal x4527=(r21*sj6);
IkReal x4528=(cj6*r00);
IkReal x4529=(r01*sj6);
IkReal x4530=((1.0)*x4521);
IkReal x4531=((1.0)*x4520);
IkReal x4532=(sj5*x4531);
evalcond[0]=(((x4521*x4524))+(((-1.0)*r21*x4522*x4531))+(((-1.0)*x4527*x4530))+(((-1.0)*r22*x4532))+(((-1.0)*r20*x4526*x4531)));
evalcond[1]=((((-1.0)*r02*sj5*x4530))+(((-1.0)*r01*x4522*x4530))+(((-1.0)*x4528*x4531))+((x4520*x4529))+(((-1.0)*r00*x4526*x4530)));
evalcond[2]=((((-1.0)*r11*x4522*x4530))+(((-1.0)*x4525*x4531))+(((-1.0)*r12*sj5*x4530))+((x4520*x4523))+(((-1.0)*r10*x4526*x4530)));
evalcond[3]=(sj0+((x4521*x4528))+(((-1.0)*r01*x4522*x4531))+(((-1.0)*x4529*x4530))+(((-1.0)*r02*x4532))+(((-1.0)*r00*x4526*x4531)));
evalcond[4]=((-1.0)+(((-1.0)*r22*sj5*x4530))+(((-1.0)*r21*x4522*x4530))+(((-1.0)*x4524*x4531))+(((-1.0)*r20*x4526*x4530))+((x4520*x4527)));
evalcond[5]=((((-1.0)*r11*x4522*x4531))+((x4521*x4525))+(((-1.0)*x4523*x4530))+(((-1.0)*r10*x4526*x4531))+(((-1.0)*r12*x4532))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4533=(cj2*sj1);
IkReal x4534=((364.42)*cj1);
IkReal x4535=((1000.0)*px);
IkReal x4536=(cj5*sj2);
IkReal x4537=(cj6*r01);
IkReal x4538=((69.0)*r12);
IkReal x4539=(sj5*sj6);
IkReal x4540=((69.0)*r10);
IkReal x4541=((374.29)*r00);
IkReal x4542=((374.29)*sj5);
IkReal x4543=((374.29)*r02);
IkReal x4544=((10.0)*r02*sj5);
IkReal x4545=((10.0)*r00*sj6);
IkReal x4546=(cj6*r11*sj5);
CheckValue<IkReal> x4547 = IKatan2WithCheck(IkReal(((((-10.0)*x4536*x4537))+((sj2*x4537*x4542))+(((-1.0)*cj5*r12*x4534))+((sj2*x4539*x4541))+(((-1.0)*x4533*x4539*x4540))+(((-1.0)*x4536*x4543))+(((-1.0)*x4536*x4545))+((r10*x4534*x4539))+(((-1.0)*cj5*x4538))+(((69.0)*x4546))+((cj5*x4533*x4538))+((x4534*x4546))+((sj2*x4535))+(((-69.0)*x4533*x4546))+(((-1.0)*sj2*x4544))+((x4539*x4540)))),((((-1.0)*cj5*x4533*x4545))+(((-1.0)*cj5*x4533*x4543))+(((-1.0)*x4533*x4544))+((x4533*x4539*x4541))+((sj2*x4539*x4540))+(((69.0)*sj2*x4546))+((x4533*x4535))+(((-1.0)*x4536*x4538))+((x4533*x4537*x4542))+(((-10.0)*cj5*x4533*x4537))),IKFAST_ATAN2_MAGTHRESH);
if(!x4547.valid){
continue;
}
CheckValue<IkReal> x4548=IKPowWithIntegerCheck(IKsign(((-69.0)+((x4533*x4534))+(((69.0)*x4533))+(((69.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x4548.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4547.value)+(((1.5707963267949)*(x4548.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4549=IKsin(j0);
IkReal x4550=IKcos(j0);
IkReal x4551=(cj6*r11);
IkReal x4552=((0.01)*cj5);
IkReal x4553=(sj5*sj6);
IkReal x4554=((0.36442)*cj1);
IkReal x4555=(cj2*sj1);
IkReal x4556=(cj6*r01);
IkReal x4557=((0.37429)*sj5);
IkReal x4558=(cj5*r02);
IkReal x4559=((0.01)*sj5);
IkReal x4560=(cj5*r12);
IkReal x4561=((0.069)*x4549);
IkReal x4562=((0.069)*x4550);
IkReal x4563=((1.0)*x4549);
evalcond[0]=(((sj5*x4551))+((r10*x4553))+(((-1.0)*x4555*x4563))+(((-1.0)*x4560))+((sj2*x4550)));
evalcond[1]=((((-1.0)*sj2*x4563))+((sj5*x4556))+((r00*x4553))+(((-1.0)*x4550*x4555))+(((-1.0)*x4558)));
evalcond[2]=((((-1.0)*x4556*x4557))+(((-1.0)*sj2*x4561))+((x4550*x4554))+((x4552*x4556))+x4562+(((0.37429)*x4558))+(((-1.0)*x4555*x4562))+(((-1.0)*px))+((r02*x4559))+((r00*sj6*x4552))+(((-0.37429)*r00*x4553)));
evalcond[3]=(((r10*sj6*x4552))+(((0.37429)*x4560))+x4561+((x4551*x4552))+(((-1.0)*x4555*x4561))+(((-1.0)*x4551*x4557))+((r12*x4559))+(((-1.0)*py))+((sj2*x4562))+(((-0.37429)*r10*x4553))+((x4549*x4554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4564=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4564;
j4eval[1]=IKsign(x4564);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4565=((1.0)*sj5);
IkReal x4566=((((-1.0)*cj6*r01*x4565))+(((-1.0)*r00*sj6*x4565))+((cj5*r02)));
j4eval[0]=x4566;
j4eval[1]=IKsign(x4566);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x4567=cj5*cj5;
IkReal x4568=cj6*cj6;
IkReal x4569=r20*r20;
IkReal x4570=r21*r21;
IkReal x4571=r22*r22;
IkReal x4572=(r22*sj5);
IkReal x4573=(cj6*r20);
IkReal x4574=(cj1*sj2);
IkReal x4575=(cj6*r21);
IkReal x4576=(cj5*sj1);
IkReal x4577=(r20*sj6);
IkReal x4578=(r21*sj6);
IkReal x4579=((2.0)*x4577);
IkReal x4580=((1.0)*x4567);
IkReal x4581=(x4568*x4569);
IkReal x4582=(x4568*x4570);
IkReal x4583=(((x4567*x4569))+(((-1.0)*x4580*x4581))+x4581+x4570+x4571+(((-1.0)*x4582))+((x4567*x4582))+((cj5*x4572*x4579))+(((2.0)*x4567*x4573*x4578))+(((-2.0)*x4573*x4578))+(((2.0)*cj5*x4572*x4575))+(((-1.0)*x4571*x4580)));
j4eval[0]=x4583;
j4eval[1]=((IKabs((((sj1*x4573))+(((-1.0)*sj1*x4578))+((cj5*x4574*x4577))+((cj5*x4574*x4575))+((x4572*x4574)))))+(IKabs((((sj1*x4572))+((x4574*x4578))+(((-1.0)*x4573*x4574))+((x4575*x4576))+((x4576*x4577))))));
j4eval[2]=IKsign(x4583);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4584=((1.0)*cj5);
IkReal x4585=((0.01)*cj5);
IkReal x4586=(cj6*r11);
IkReal x4587=(r20*sj6);
IkReal x4588=((0.01)*sj5);
IkReal x4589=(cj6*r01);
IkReal x4590=((0.37429)*cj5);
IkReal x4591=((0.37429)*sj5);
IkReal x4592=(cj6*r21);
IkReal x4593=(r10*sj5*sj6);
IkReal x4594=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((-0.069)+((r22*x4590))+((r22*x4588))+(((-1.0)*x4587*x4591))+((x4585*x4592))+(((-1.0)*pz))+(((-1.0)*x4591*x4592))+((x4585*x4587)));
evalcond[2]=(((r02*x4588))+((r02*x4590))+(((-1.0)*x4589*x4591))+(((-1.0)*px))+((x4585*x4589))+(((-1.0)*r00*sj6*x4591))+(((0.43342)*cj0))+((r00*sj6*x4585)));
evalcond[3]=((((-1.0)*py))+(((0.43342)*sj0))+((x4585*x4586))+(((-1.0)*x4586*x4591))+((r12*x4588))+((r10*sj6*x4585))+((r12*x4590))+(((-1.0)*r10*sj6*x4591)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x4584))+((sj5*x4587))+((sj5*x4592)));
evalcond[5]=(x4593+(((-1.0)*r12*x4584))+((sj5*x4586)));
evalcond[6]=(x4594+(((-1.0)*r02*x4584))+((sj5*x4589)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4595=(cj0*sj6);
IkReal x4596=(cj0*cj6);
IkReal x4597=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x4597;
j4eval[1]=((IKabs((((cj5*r21*x4596))+((cj5*r20*x4595))+((cj0*r22*sj5)))))+(IKabs(((((-1.0)*r21*x4595))+((r20*x4596))))));
j4eval[2]=IKsign(x4597);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4598=(r21*sj0);
IkReal x4599=(r20*sj0);
IkReal x4600=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4600;
j4eval[1]=((IKabs(((((-1.0)*sj6*x4598))+((cj6*x4599)))))+(IKabs((((cj5*cj6*x4598))+((r22*sj0*sj5))+((cj5*sj6*x4599))))));
j4eval[2]=IKsign(x4600);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4601=cj6*cj6;
IkReal x4602=cj5*cj5;
IkReal x4603=(r02*r22);
IkReal x4604=(r22*sj5);
IkReal x4605=(r00*r20);
IkReal x4606=((1.0)*r21);
IkReal x4607=(r20*sj6);
IkReal x4608=(cj6*r01);
IkReal x4609=(cj0*cj5);
IkReal x4610=(r00*sj6);
IkReal x4611=((1.0)*cj5);
IkReal x4612=(cj6*r21);
IkReal x4613=(cj5*r02*sj5);
IkReal x4614=((1.0)*x4602);
IkReal x4615=(x4601*x4602);
IkReal x4616=((((-1.0)*x4607*x4608*x4614))+((x4605*x4615))+(((-1.0)*x4603))+((x4607*x4608))+(((-1.0)*r01*x4606*x4615))+(((-1.0)*cj6*x4602*x4606*x4610))+((r01*r21*x4601))+(((-1.0)*x4605*x4614))+((x4610*x4612))+(((-1.0)*x4601*x4605))+(((-1.0)*x4604*x4610*x4611))+(((-1.0)*r01*x4606))+((x4602*x4603))+(((-1.0)*cj6*x4606*x4613))+(((-1.0)*x4604*x4608*x4611))+(((-1.0)*r02*sj5*x4607*x4611)));
j4eval[0]=x4616;
j4eval[1]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x4606)))))+(IKabs((((cj0*x4604))+((x4609*x4612))+((x4607*x4609))))));
j4eval[2]=IKsign(x4616);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x4617=((1.0)*cj5);
IkReal x4618=((0.01)*cj5);
IkReal x4619=(cj6*r11);
IkReal x4620=(r20*sj6);
IkReal x4621=((0.01)*sj5);
IkReal x4622=(cj6*r01);
IkReal x4623=((0.37429)*cj5);
IkReal x4624=((0.37429)*sj5);
IkReal x4625=(cj6*r21);
IkReal x4626=(r10*sj5*sj6);
IkReal x4627=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*pz))+((x4618*x4625))+((x4618*x4620))+(((-1.0)*x4620*x4624))+((r22*x4623))+((r22*x4621))+(((-1.0)*x4624*x4625)));
evalcond[2]=((((-1.0)*r00*sj6*x4624))+((r00*sj6*x4618))+((r02*x4621))+((r02*x4623))+(((-1.0)*px))+((x4618*x4622))+(((-1.0)*x4622*x4624)));
evalcond[3]=((0.43342)+(((-1.0)*r10*sj6*x4624))+((r12*x4623))+((r12*x4621))+((r10*sj6*x4618))+(((-1.0)*py))+(((-1.0)*x4619*x4624))+((x4618*x4619)));
evalcond[4]=((-1.0)+((sj5*x4625))+((sj5*x4620))+(((-1.0)*r22*x4617)));
evalcond[5]=(x4626+(((-1.0)*r12*x4617))+((sj5*x4619)));
evalcond[6]=((((-1.0)*r02*x4617))+((sj5*x4622))+x4627);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4628=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x4628;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4629=((1.0)*sj5);
IkReal x4630=(((cj5*r22))+(((-1.0)*r20*sj6*x4629))+(((-1.0)*cj6*r21*x4629)));
j4eval[0]=x4630;
j4eval[1]=IKsign(x4630);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4631=cj6*cj6;
IkReal x4632=cj5*cj5;
IkReal x4633=r10*r10;
IkReal x4634=r11*r11;
IkReal x4635=r12*r12;
IkReal x4636=(r10*sj6);
IkReal x4637=(r12*sj5);
IkReal x4638=((2.0)*cj6*r11);
IkReal x4639=((1.0)*x4633);
IkReal x4640=(x4631*x4634);
IkReal x4641=((((-1.0)*x4635))+(((-1.0)*x4634))+(((-2.0)*cj5*x4636*x4637))+(((-1.0)*x4632*x4640))+x4640+((x4636*x4638))+(((-1.0)*x4632*x4636*x4638))+((x4632*x4635))+(((-1.0)*x4631*x4639))+((x4631*x4632*x4633))+(((-1.0)*x4632*x4639))+(((-1.0)*cj5*x4637*x4638)));
j4eval[0]=x4641;
j4eval[1]=((IKabs((((cj5*x4636))+x4637+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4641);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4642=cj6*cj6;
IkReal x4643=cj5*cj5;
IkReal x4644=r10*r10;
IkReal x4645=r11*r11;
IkReal x4646=r12*r12;
IkReal x4647=(r10*sj6);
IkReal x4648=(r12*sj5);
IkReal x4649=((2.0)*cj6*r11);
IkReal x4650=(x4642*x4645);
IkReal x4651=(x4643*x4644);
CheckValue<IkReal> x4652 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x4648+((cj5*cj6*r11))+((cj5*x4647))),IKFAST_ATAN2_MAGTHRESH);
if(!x4652.valid){
continue;
}
CheckValue<IkReal> x4653=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4643*x4647*x4649))+((x4642*x4651))+x4650+(((-1.0)*x4646))+(((-1.0)*x4645))+(((-1.0)*x4643*x4650))+(((-1.0)*x4651))+((x4643*x4646))+(((-2.0)*cj5*x4647*x4648))+(((-1.0)*x4642*x4644))+(((-1.0)*cj5*x4648*x4649))+((x4647*x4649)))),-1);
if(!x4653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4652.value)+(((1.5707963267949)*(x4653.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4654=IKsin(j4);
IkReal x4655=IKcos(j4);
IkReal x4656=(cj5*cj6);
IkReal x4657=(r11*sj6);
IkReal x4658=(cj6*r20);
IkReal x4659=(cj6*r10);
IkReal x4660=(cj5*sj6);
IkReal x4661=(r01*sj6);
IkReal x4662=(r21*sj6);
IkReal x4663=(cj6*r00);
IkReal x4664=((1.0)*x4655);
IkReal x4665=((1.0)*x4654);
IkReal x4666=(sj5*x4665);
evalcond[0]=((((-1.0)*x4662*x4664))+(((-1.0)*r21*x4656*x4665))+(((-1.0)*r22*x4666))+((x4655*x4658))+(((-1.0)*r20*x4660*x4665)));
evalcond[1]=((((-1.0)*r10*x4660*x4665))+(((-1.0)*r12*x4666))+(((-1.0)*r11*x4656*x4665))+((x4655*x4659))+(((-1.0)*x4657*x4664)));
evalcond[2]=((((-1.0)*x4658*x4665))+(((-1.0)*r21*x4656*x4664))+(((-1.0)*r22*sj5*x4664))+((x4654*x4662))+(((-1.0)*r20*x4660*x4664)));
evalcond[3]=((((-1.0)*r01*x4656*x4664))+(((-1.0)*x4663*x4665))+((x4654*x4661))+(((-1.0)*r02*sj5*x4664))+(((-1.0)*r00*x4660*x4664)));
evalcond[4]=((-1.0)+(((-1.0)*x4661*x4664))+(((-1.0)*r01*x4656*x4665))+((x4655*x4663))+(((-1.0)*r00*x4660*x4665))+(((-1.0)*r02*x4666)));
evalcond[5]=((-1.0)+(((-1.0)*x4659*x4665))+(((-1.0)*r12*sj5*x4664))+((x4654*x4657))+(((-1.0)*r10*x4660*x4664))+(((-1.0)*r11*x4656*x4664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4667=((1.0)*sj5);
CheckValue<IkReal> x4668 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4668.valid){
continue;
}
CheckValue<IkReal> x4669=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x4667))+(((-1.0)*r20*sj6*x4667)))),-1);
if(!x4669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4668.value)+(((1.5707963267949)*(x4669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4670=IKsin(j4);
IkReal x4671=IKcos(j4);
IkReal x4672=(cj5*cj6);
IkReal x4673=(r11*sj6);
IkReal x4674=(cj6*r20);
IkReal x4675=(cj6*r10);
IkReal x4676=(cj5*sj6);
IkReal x4677=(r01*sj6);
IkReal x4678=(r21*sj6);
IkReal x4679=(cj6*r00);
IkReal x4680=((1.0)*x4671);
IkReal x4681=((1.0)*x4670);
IkReal x4682=(sj5*x4681);
evalcond[0]=((((-1.0)*r20*x4676*x4681))+(((-1.0)*r21*x4672*x4681))+(((-1.0)*r22*x4682))+(((-1.0)*x4678*x4680))+((x4671*x4674)));
evalcond[1]=((((-1.0)*x4673*x4680))+(((-1.0)*r10*x4676*x4681))+(((-1.0)*r11*x4672*x4681))+((x4671*x4675))+(((-1.0)*r12*x4682)));
evalcond[2]=((((-1.0)*r22*sj5*x4680))+(((-1.0)*r20*x4676*x4680))+((x4670*x4678))+(((-1.0)*r21*x4672*x4680))+(((-1.0)*x4674*x4681)));
evalcond[3]=((((-1.0)*x4679*x4681))+(((-1.0)*r02*sj5*x4680))+((x4670*x4677))+(((-1.0)*r00*x4676*x4680))+(((-1.0)*r01*x4672*x4680)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x4676*x4681))+(((-1.0)*r02*x4682))+(((-1.0)*r01*x4672*x4681))+((x4671*x4679))+(((-1.0)*x4677*x4680)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x4680))+((x4670*x4673))+(((-1.0)*r10*x4676*x4680))+(((-1.0)*x4675*x4681))+(((-1.0)*r11*x4672*x4680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4683 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4683.valid){
continue;
}
CheckValue<IkReal> x4684=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x4684.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4683.value)+(((1.5707963267949)*(x4684.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4685=IKsin(j4);
IkReal x4686=IKcos(j4);
IkReal x4687=(cj5*cj6);
IkReal x4688=(r11*sj6);
IkReal x4689=(cj6*r20);
IkReal x4690=(cj6*r10);
IkReal x4691=(cj5*sj6);
IkReal x4692=(r01*sj6);
IkReal x4693=(r21*sj6);
IkReal x4694=(cj6*r00);
IkReal x4695=((1.0)*x4686);
IkReal x4696=((1.0)*x4685);
IkReal x4697=(sj5*x4696);
evalcond[0]=((((-1.0)*x4693*x4695))+(((-1.0)*r21*x4687*x4696))+(((-1.0)*r22*x4697))+((x4686*x4689))+(((-1.0)*r20*x4691*x4696)));
evalcond[1]=((((-1.0)*r12*x4697))+(((-1.0)*r11*x4687*x4696))+(((-1.0)*x4688*x4695))+(((-1.0)*r10*x4691*x4696))+((x4686*x4690)));
evalcond[2]=((((-1.0)*r22*sj5*x4695))+(((-1.0)*r21*x4687*x4695))+((x4685*x4693))+(((-1.0)*x4689*x4696))+(((-1.0)*r20*x4691*x4695)));
evalcond[3]=((((-1.0)*r02*sj5*x4695))+(((-1.0)*r00*x4691*x4695))+(((-1.0)*r01*x4687*x4695))+(((-1.0)*x4694*x4696))+((x4685*x4692)));
evalcond[4]=((-1.0)+(((-1.0)*x4692*x4695))+(((-1.0)*r00*x4691*x4696))+(((-1.0)*r02*x4697))+(((-1.0)*r01*x4687*x4696))+((x4686*x4694)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x4695))+(((-1.0)*r11*x4687*x4695))+(((-1.0)*x4690*x4696))+(((-1.0)*r10*x4691*x4695))+((x4685*x4688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4698=((1.0)*cj5);
IkReal x4699=((0.01)*cj5);
IkReal x4700=(cj6*r11);
IkReal x4701=(r20*sj6);
IkReal x4702=((0.01)*sj5);
IkReal x4703=(cj6*r01);
IkReal x4704=((0.37429)*cj5);
IkReal x4705=((0.37429)*sj5);
IkReal x4706=(cj6*r21);
IkReal x4707=(r10*sj5*sj6);
IkReal x4708=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x4699*x4706))+((x4699*x4701))+(((-1.0)*pz))+(((-1.0)*x4705*x4706))+((r22*x4704))+((r22*x4702))+(((-1.0)*x4701*x4705)));
evalcond[2]=(((r00*sj6*x4699))+((x4699*x4703))+(((-1.0)*x4703*x4705))+(((-1.0)*r00*sj6*x4705))+(((-1.0)*px))+((r02*x4702))+((r02*x4704)));
evalcond[3]=((-0.43342)+(((-1.0)*x4700*x4705))+(((-1.0)*r10*sj6*x4705))+((x4699*x4700))+((r10*sj6*x4699))+(((-1.0)*py))+((r12*x4704))+((r12*x4702)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x4698))+((sj5*x4706))+((sj5*x4701)));
evalcond[5]=((((-1.0)*r12*x4698))+x4707+((sj5*x4700)));
evalcond[6]=(x4708+(((-1.0)*r02*x4698))+((sj5*x4703)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4709=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4709;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x4709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4710=((1.0)*sj6);
IkReal x4711=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x4710)));
j4eval[0]=x4711;
j4eval[1]=IKsign(x4711);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x4710))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4712=r11*r11;
IkReal x4713=cj5*cj5;
IkReal x4714=cj6*cj6;
IkReal x4715=r10*r10;
IkReal x4716=r12*r12;
IkReal x4717=(r12*sj5);
IkReal x4718=(cj6*r10);
IkReal x4719=((1.0)*x4714);
IkReal x4720=(cj5*cj6*r11);
IkReal x4721=(cj5*r10*sj6);
IkReal x4722=((2.0)*r11*sj6);
IkReal x4723=(x4713*x4715);
IkReal x4724=((((-1.0)*x4712*x4719))+((x4714*x4715))+((x4712*x4713*x4714))+x4716+x4712+x4723+(((-1.0)*x4719*x4723))+(((-1.0)*x4718*x4722))+((x4713*x4718*x4722))+(((2.0)*x4717*x4720))+(((2.0)*x4717*x4721))+(((-1.0)*x4713*x4716)));
j4eval[0]=x4724;
j4eval[1]=IKsign(x4724);
j4eval[2]=((IKabs((x4717+x4721+x4720)))+(IKabs((x4718+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4725=r11*r11;
IkReal x4726=cj5*cj5;
IkReal x4727=cj6*cj6;
IkReal x4728=r10*r10;
IkReal x4729=r12*r12;
IkReal x4730=(r10*sj6);
IkReal x4731=(r12*sj5);
IkReal x4732=((1.0)*x4727);
IkReal x4733=(cj5*cj6*r11);
IkReal x4734=((2.0)*cj6*r11);
IkReal x4735=(x4726*x4728);
CheckValue<IkReal> x4736=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4730*x4734))+((x4726*x4730*x4734))+x4735+x4729+x4725+(((-1.0)*x4732*x4735))+(((2.0)*x4731*x4733))+((x4725*x4726*x4727))+(((-1.0)*x4725*x4732))+((x4727*x4728))+(((-1.0)*x4726*x4729))+(((2.0)*cj5*x4730*x4731)))),-1);
if(!x4736.valid){
continue;
}
CheckValue<IkReal> x4737 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x4733+x4731+((cj5*x4730))),IKFAST_ATAN2_MAGTHRESH);
if(!x4737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4736.value)))+(x4737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4738=IKsin(j4);
IkReal x4739=IKcos(j4);
IkReal x4740=(cj5*cj6);
IkReal x4741=(r11*sj6);
IkReal x4742=(cj6*r20);
IkReal x4743=(cj6*r10);
IkReal x4744=(cj5*sj6);
IkReal x4745=(r01*sj6);
IkReal x4746=(r21*sj6);
IkReal x4747=(cj6*r00);
IkReal x4748=((1.0)*x4739);
IkReal x4749=((1.0)*x4738);
IkReal x4750=(sj5*x4749);
evalcond[0]=((((-1.0)*r20*x4744*x4749))+(((-1.0)*x4746*x4748))+(((-1.0)*r21*x4740*x4749))+(((-1.0)*r22*x4750))+((x4739*x4742)));
evalcond[1]=((((-1.0)*r11*x4740*x4749))+(((-1.0)*r10*x4744*x4749))+(((-1.0)*r12*x4750))+(((-1.0)*x4741*x4748))+((x4739*x4743)));
evalcond[2]=((((-1.0)*r20*x4744*x4748))+((x4738*x4746))+(((-1.0)*r21*x4740*x4748))+(((-1.0)*r22*sj5*x4748))+(((-1.0)*x4742*x4749)));
evalcond[3]=((((-1.0)*r00*x4744*x4748))+((x4738*x4745))+(((-1.0)*r02*sj5*x4748))+(((-1.0)*r01*x4740*x4748))+(((-1.0)*x4747*x4749)));
evalcond[4]=((1.0)+(((-1.0)*r00*x4744*x4749))+(((-1.0)*x4745*x4748))+(((-1.0)*r01*x4740*x4749))+(((-1.0)*r02*x4750))+((x4739*x4747)));
evalcond[5]=((1.0)+(((-1.0)*r11*x4740*x4748))+((x4738*x4741))+(((-1.0)*r10*x4744*x4748))+(((-1.0)*r12*sj5*x4748))+(((-1.0)*x4743*x4749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4751=((1.0)*sj6);
CheckValue<IkReal> x4752 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4751))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4752.valid){
continue;
}
CheckValue<IkReal> x4753=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5*x4751))+((cj5*r12))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x4753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4752.value)+(((1.5707963267949)*(x4753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4754=IKsin(j4);
IkReal x4755=IKcos(j4);
IkReal x4756=(cj5*cj6);
IkReal x4757=(r11*sj6);
IkReal x4758=(cj6*r20);
IkReal x4759=(cj6*r10);
IkReal x4760=(cj5*sj6);
IkReal x4761=(r01*sj6);
IkReal x4762=(r21*sj6);
IkReal x4763=(cj6*r00);
IkReal x4764=((1.0)*x4755);
IkReal x4765=((1.0)*x4754);
IkReal x4766=(sj5*x4765);
evalcond[0]=((((-1.0)*r22*x4766))+(((-1.0)*x4762*x4764))+((x4755*x4758))+(((-1.0)*r20*x4760*x4765))+(((-1.0)*r21*x4756*x4765)));
evalcond[1]=((((-1.0)*r11*x4756*x4765))+((x4755*x4759))+(((-1.0)*x4757*x4764))+(((-1.0)*r12*x4766))+(((-1.0)*r10*x4760*x4765)));
evalcond[2]=((((-1.0)*x4758*x4765))+(((-1.0)*r22*sj5*x4764))+(((-1.0)*r20*x4760*x4764))+((x4754*x4762))+(((-1.0)*r21*x4756*x4764)));
evalcond[3]=((((-1.0)*r01*x4756*x4764))+(((-1.0)*r02*sj5*x4764))+(((-1.0)*x4763*x4765))+((x4754*x4761))+(((-1.0)*r00*x4760*x4764)));
evalcond[4]=((1.0)+(((-1.0)*r01*x4756*x4765))+(((-1.0)*r02*x4766))+(((-1.0)*x4761*x4764))+((x4755*x4763))+(((-1.0)*r00*x4760*x4765)));
evalcond[5]=((1.0)+(((-1.0)*r11*x4756*x4764))+((x4754*x4757))+(((-1.0)*r12*sj5*x4764))+(((-1.0)*r10*x4760*x4764))+(((-1.0)*x4759*x4765)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4767=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4767.valid){
continue;
}
CheckValue<IkReal> x4768 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x4768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4767.value)))+(x4768.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4769=IKsin(j4);
IkReal x4770=IKcos(j4);
IkReal x4771=(cj5*cj6);
IkReal x4772=(r11*sj6);
IkReal x4773=(cj6*r20);
IkReal x4774=(cj6*r10);
IkReal x4775=(cj5*sj6);
IkReal x4776=(r01*sj6);
IkReal x4777=(r21*sj6);
IkReal x4778=(cj6*r00);
IkReal x4779=((1.0)*x4770);
IkReal x4780=((1.0)*x4769);
IkReal x4781=(sj5*x4780);
evalcond[0]=((((-1.0)*r21*x4771*x4780))+(((-1.0)*x4777*x4779))+(((-1.0)*r22*x4781))+(((-1.0)*r20*x4775*x4780))+((x4770*x4773)));
evalcond[1]=((((-1.0)*r11*x4771*x4780))+(((-1.0)*x4772*x4779))+(((-1.0)*r10*x4775*x4780))+((x4770*x4774))+(((-1.0)*r12*x4781)));
evalcond[2]=((((-1.0)*x4773*x4780))+((x4769*x4777))+(((-1.0)*r21*x4771*x4779))+(((-1.0)*r22*sj5*x4779))+(((-1.0)*r20*x4775*x4779)));
evalcond[3]=(((x4769*x4776))+(((-1.0)*r02*sj5*x4779))+(((-1.0)*r00*x4775*x4779))+(((-1.0)*x4778*x4780))+(((-1.0)*r01*x4771*x4779)));
evalcond[4]=((1.0)+(((-1.0)*r00*x4775*x4780))+(((-1.0)*r01*x4771*x4780))+(((-1.0)*x4776*x4779))+(((-1.0)*r02*x4781))+((x4770*x4778)));
evalcond[5]=((1.0)+(((-1.0)*r10*x4775*x4779))+((x4769*x4772))+(((-1.0)*r12*sj5*x4779))+(((-1.0)*r11*x4771*x4779))+(((-1.0)*x4774*x4780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4782=((1.0)*cj5);
IkReal x4783=((0.01)*cj5);
IkReal x4784=(cj6*r11);
IkReal x4785=(r20*sj6);
IkReal x4786=((0.01)*sj5);
IkReal x4787=(cj6*r01);
IkReal x4788=((0.37429)*cj5);
IkReal x4789=((0.37429)*sj5);
IkReal x4790=(cj6*r21);
IkReal x4791=(r10*sj5*sj6);
IkReal x4792=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x4783*x4790))+((r22*x4788))+((r22*x4786))+(((-1.0)*x4789*x4790))+(((-1.0)*pz))+(((-1.0)*x4785*x4789))+((x4783*x4785)));
evalcond[2]=((0.43342)+((r02*x4786))+((r02*x4788))+((r00*sj6*x4783))+(((-1.0)*x4787*x4789))+(((-1.0)*px))+(((-1.0)*r00*sj6*x4789))+((x4783*x4787)));
evalcond[3]=(((r10*sj6*x4783))+((r12*x4788))+((r12*x4786))+(((-1.0)*py))+(((-1.0)*r10*sj6*x4789))+(((-1.0)*x4784*x4789))+((x4783*x4784)));
evalcond[4]=((-1.0)+((sj5*x4790))+(((-1.0)*r22*x4782))+((sj5*x4785)));
evalcond[5]=(x4791+((sj5*x4784))+(((-1.0)*r12*x4782)));
evalcond[6]=(x4792+(((-1.0)*r02*x4782))+((sj5*x4787)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4793=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x4793;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x4793);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4794=((1.0)*sj5);
IkReal x4795=(((cj5*r22))+(((-1.0)*cj6*r21*x4794))+(((-1.0)*r20*sj6*x4794)));
j4eval[0]=x4795;
j4eval[1]=IKsign(x4795);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4796=cj6*cj6;
IkReal x4797=cj5*cj5;
IkReal x4798=r00*r00;
IkReal x4799=r01*r01;
IkReal x4800=r02*r02;
IkReal x4801=(cj6*r00);
IkReal x4802=(cj5*cj6*r01);
IkReal x4803=((2.0)*r02*sj5);
IkReal x4804=((1.0)*x4796);
IkReal x4805=((2.0)*r01*sj6);
IkReal x4806=(cj5*r00*sj6);
IkReal x4807=(x4797*x4798);
IkReal x4808=(((x4796*x4799))+((x4801*x4805))+((x4797*x4800))+(((-1.0)*x4802*x4803))+(((-1.0)*x4797*x4801*x4805))+((x4796*x4807))+(((-1.0)*x4798*x4804))+(((-1.0)*x4799))+(((-1.0)*x4803*x4806))+(((-1.0)*x4807))+(((-1.0)*x4800))+(((-1.0)*x4797*x4799*x4804)));
j4eval[0]=x4808;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x4801)))+(IKabs((((r02*sj5))+x4802+x4806))));
j4eval[2]=IKsign(x4808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4809=cj6*cj6;
IkReal x4810=cj5*cj5;
IkReal x4811=r00*r00;
IkReal x4812=r01*r01;
IkReal x4813=r02*r02;
IkReal x4814=(cj6*r00);
IkReal x4815=(cj5*cj6*r01);
IkReal x4816=((2.0)*r02*sj5);
IkReal x4817=((1.0)*x4809);
IkReal x4818=((2.0)*r01*sj6);
IkReal x4819=(cj5*r00*sj6);
IkReal x4820=(x4810*x4811);
CheckValue<IkReal> x4821 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x4814)),(((r02*sj5))+x4815+x4819),IKFAST_ATAN2_MAGTHRESH);
if(!x4821.valid){
continue;
}
CheckValue<IkReal> x4822=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4811*x4817))+(((-1.0)*x4815*x4816))+((x4809*x4812))+((x4809*x4820))+(((-1.0)*x4812))+(((-1.0)*x4813))+(((-1.0)*x4816*x4819))+(((-1.0)*x4820))+(((-1.0)*x4810*x4812*x4817))+((x4810*x4813))+(((-1.0)*x4810*x4814*x4818))+((x4814*x4818)))),-1);
if(!x4822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4821.value)+(((1.5707963267949)*(x4822.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4823=IKsin(j4);
IkReal x4824=IKcos(j4);
IkReal x4825=(cj5*cj6);
IkReal x4826=(r11*sj6);
IkReal x4827=(cj6*r20);
IkReal x4828=(cj6*r10);
IkReal x4829=(cj5*sj6);
IkReal x4830=(r21*sj6);
IkReal x4831=(cj6*r00);
IkReal x4832=(r01*sj6);
IkReal x4833=((1.0)*x4824);
IkReal x4834=((1.0)*x4823);
IkReal x4835=(sj5*x4834);
evalcond[0]=((((-1.0)*r20*x4829*x4834))+(((-1.0)*x4830*x4833))+(((-1.0)*r22*x4835))+((x4824*x4827))+(((-1.0)*r21*x4825*x4834)));
evalcond[1]=(((x4824*x4831))+(((-1.0)*x4832*x4833))+(((-1.0)*r01*x4825*x4834))+(((-1.0)*r00*x4829*x4834))+(((-1.0)*r02*x4835)));
evalcond[2]=((((-1.0)*r20*x4829*x4833))+(((-1.0)*r22*sj5*x4833))+((x4823*x4830))+(((-1.0)*x4827*x4834))+(((-1.0)*r21*x4825*x4833)));
evalcond[3]=((((-1.0)*r11*x4825*x4833))+((x4823*x4826))+(((-1.0)*r12*sj5*x4833))+(((-1.0)*x4828*x4834))+(((-1.0)*r10*x4829*x4833)));
evalcond[4]=((1.0)+(((-1.0)*r11*x4825*x4834))+(((-1.0)*r12*x4835))+(((-1.0)*x4826*x4833))+((x4824*x4828))+(((-1.0)*r10*x4829*x4834)));
evalcond[5]=((-1.0)+(((-1.0)*x4831*x4834))+(((-1.0)*r01*x4825*x4833))+(((-1.0)*r00*x4829*x4833))+((x4823*x4832))+(((-1.0)*r02*sj5*x4833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4836=((1.0)*sj5);
CheckValue<IkReal> x4837 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x4837.valid){
continue;
}
CheckValue<IkReal> x4838=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj6*x4836))+((cj5*r22))+(((-1.0)*cj6*r21*x4836)))),-1);
if(!x4838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4837.value)+(((1.5707963267949)*(x4838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4839=IKsin(j4);
IkReal x4840=IKcos(j4);
IkReal x4841=(cj5*cj6);
IkReal x4842=(r11*sj6);
IkReal x4843=(cj6*r20);
IkReal x4844=(cj6*r10);
IkReal x4845=(cj5*sj6);
IkReal x4846=(r21*sj6);
IkReal x4847=(cj6*r00);
IkReal x4848=(r01*sj6);
IkReal x4849=((1.0)*x4840);
IkReal x4850=((1.0)*x4839);
IkReal x4851=(sj5*x4850);
evalcond[0]=((((-1.0)*r22*x4851))+((x4840*x4843))+(((-1.0)*r20*x4845*x4850))+(((-1.0)*r21*x4841*x4850))+(((-1.0)*x4846*x4849)));
evalcond[1]=(((x4840*x4847))+(((-1.0)*r02*x4851))+(((-1.0)*x4848*x4849))+(((-1.0)*r00*x4845*x4850))+(((-1.0)*r01*x4841*x4850)));
evalcond[2]=((((-1.0)*x4843*x4850))+(((-1.0)*r22*sj5*x4849))+(((-1.0)*r20*x4845*x4849))+(((-1.0)*r21*x4841*x4849))+((x4839*x4846)));
evalcond[3]=((((-1.0)*r11*x4841*x4849))+(((-1.0)*r12*sj5*x4849))+(((-1.0)*r10*x4845*x4849))+(((-1.0)*x4844*x4850))+((x4839*x4842)));
evalcond[4]=((1.0)+(((-1.0)*x4842*x4849))+(((-1.0)*r12*x4851))+(((-1.0)*r11*x4841*x4850))+((x4840*x4844))+(((-1.0)*r10*x4845*x4850)));
evalcond[5]=((-1.0)+(((-1.0)*x4847*x4850))+(((-1.0)*r01*x4841*x4849))+(((-1.0)*r02*sj5*x4849))+(((-1.0)*r00*x4845*x4849))+((x4839*x4848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4852 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4852.valid){
continue;
}
CheckValue<IkReal> x4853=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x4853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4852.value)+(((1.5707963267949)*(x4853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4854=IKsin(j4);
IkReal x4855=IKcos(j4);
IkReal x4856=(cj5*cj6);
IkReal x4857=(r11*sj6);
IkReal x4858=(cj6*r20);
IkReal x4859=(cj6*r10);
IkReal x4860=(cj5*sj6);
IkReal x4861=(r21*sj6);
IkReal x4862=(cj6*r00);
IkReal x4863=(r01*sj6);
IkReal x4864=((1.0)*x4855);
IkReal x4865=((1.0)*x4854);
IkReal x4866=(sj5*x4865);
evalcond[0]=((((-1.0)*r21*x4856*x4865))+(((-1.0)*r22*x4866))+(((-1.0)*r20*x4860*x4865))+((x4855*x4858))+(((-1.0)*x4861*x4864)));
evalcond[1]=((((-1.0)*x4863*x4864))+(((-1.0)*r00*x4860*x4865))+(((-1.0)*r01*x4856*x4865))+(((-1.0)*r02*x4866))+((x4855*x4862)));
evalcond[2]=(((x4854*x4861))+(((-1.0)*r21*x4856*x4864))+(((-1.0)*r22*sj5*x4864))+(((-1.0)*x4858*x4865))+(((-1.0)*r20*x4860*x4864)));
evalcond[3]=((((-1.0)*r11*x4856*x4864))+(((-1.0)*x4859*x4865))+(((-1.0)*r12*sj5*x4864))+(((-1.0)*r10*x4860*x4864))+((x4854*x4857)));
evalcond[4]=((1.0)+(((-1.0)*r11*x4856*x4865))+(((-1.0)*r12*x4866))+(((-1.0)*x4857*x4864))+((x4855*x4859))+(((-1.0)*r10*x4860*x4865)));
evalcond[5]=((-1.0)+(((-1.0)*x4862*x4865))+((x4854*x4863))+(((-1.0)*r00*x4860*x4864))+(((-1.0)*r01*x4856*x4864))+(((-1.0)*r02*sj5*x4864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4867=((1.0)*cj5);
IkReal x4868=((0.01)*cj5);
IkReal x4869=(cj6*r11);
IkReal x4870=(r20*sj6);
IkReal x4871=((0.01)*sj5);
IkReal x4872=(cj6*r01);
IkReal x4873=((0.37429)*cj5);
IkReal x4874=((0.37429)*sj5);
IkReal x4875=(cj6*r21);
IkReal x4876=(r10*sj5*sj6);
IkReal x4877=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x4868*x4875))+((x4868*x4870))+(((-1.0)*x4874*x4875))+(((-1.0)*pz))+(((-1.0)*x4870*x4874))+((r22*x4871))+((r22*x4873)));
evalcond[2]=((-0.43342)+((r02*x4873))+((r02*x4871))+((x4868*x4872))+(((-1.0)*px))+(((-1.0)*x4872*x4874))+(((-1.0)*r00*sj6*x4874))+((r00*sj6*x4868)));
evalcond[3]=((((-1.0)*x4869*x4874))+((x4868*x4869))+(((-1.0)*py))+(((-1.0)*r10*sj6*x4874))+((r12*x4871))+((r12*x4873))+((r10*sj6*x4868)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x4867))+((sj5*x4875))+((sj5*x4870)));
evalcond[5]=((((-1.0)*r12*x4867))+((sj5*x4869))+x4876);
evalcond[6]=((((-1.0)*r02*x4867))+((sj5*x4872))+x4877);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4878=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x4878;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x4878);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4879=((1.0)*sj6);
IkReal x4880=((((-1.0)*cj6*r01*sj5))+((cj5*r02))+(((-1.0)*r00*sj5*x4879)));
j4eval[0]=x4880;
j4eval[1]=IKsign(x4880);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x4879))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4881=cj6*cj6;
IkReal x4882=r01*r01;
IkReal x4883=cj5*cj5;
IkReal x4884=r00*r00;
IkReal x4885=r02*r02;
IkReal x4886=(cj6*r00);
IkReal x4887=(r02*sj5);
IkReal x4888=(cj5*cj6*r01);
IkReal x4889=((2.0)*r01*sj6);
IkReal x4890=(cj5*r00*sj6);
IkReal x4891=((1.0)*x4883);
IkReal x4892=(x4881*x4884);
IkReal x4893=(x4881*x4882);
IkReal x4894=((((2.0)*x4887*x4890))+(((-1.0)*x4893))+(((-1.0)*x4891*x4892))+(((-1.0)*x4886*x4889))+(((-1.0)*x4885*x4891))+((x4883*x4893))+((x4883*x4884))+(((2.0)*x4887*x4888))+x4882+x4885+x4892+((x4883*x4886*x4889)));
j4eval[0]=x4894;
j4eval[1]=((IKabs((x4888+x4887+x4890)))+(IKabs(((((-1.0)*r01*sj6))+x4886))));
j4eval[2]=IKsign(x4894);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4895=cj6*cj6;
IkReal x4896=r01*r01;
IkReal x4897=cj5*cj5;
IkReal x4898=r00*r00;
IkReal x4899=r02*r02;
IkReal x4900=(cj6*r00);
IkReal x4901=((2.0)*r01);
IkReal x4902=(cj5*cj6);
IkReal x4903=(r02*sj5);
IkReal x4904=(cj5*r00*sj6);
IkReal x4905=(x4897*x4898);
IkReal x4906=(x4895*x4896);
CheckValue<IkReal> x4907=IKPowWithIntegerCheck(IKsign((x4905+(((-1.0)*x4906))+(((2.0)*x4903*x4904))+((x4895*x4898))+(((-1.0)*sj6*x4900*x4901))+(((-1.0)*x4895*x4905))+(((-1.0)*x4897*x4899))+((x4901*x4902*x4903))+((sj6*x4897*x4900*x4901))+((x4897*x4906))+x4899+x4896)),-1);
if(!x4907.valid){
continue;
}
CheckValue<IkReal> x4908 = IKatan2WithCheck(IkReal((x4900+(((-1.0)*r01*sj6)))),(x4903+x4904+((r01*x4902))),IKFAST_ATAN2_MAGTHRESH);
if(!x4908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4907.value)))+(x4908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4909=IKsin(j4);
IkReal x4910=IKcos(j4);
IkReal x4911=(cj5*cj6);
IkReal x4912=(r11*sj6);
IkReal x4913=(cj6*r20);
IkReal x4914=(cj6*r10);
IkReal x4915=(cj5*sj6);
IkReal x4916=(r21*sj6);
IkReal x4917=(cj6*r00);
IkReal x4918=(r01*sj6);
IkReal x4919=((1.0)*x4910);
IkReal x4920=((1.0)*x4909);
IkReal x4921=(sj5*x4920);
evalcond[0]=((((-1.0)*r21*x4911*x4920))+((x4910*x4913))+(((-1.0)*r20*x4915*x4920))+(((-1.0)*r22*x4921))+(((-1.0)*x4916*x4919)));
evalcond[1]=((((-1.0)*r02*x4921))+(((-1.0)*x4918*x4919))+(((-1.0)*r00*x4915*x4920))+((x4910*x4917))+(((-1.0)*r01*x4911*x4920)));
evalcond[2]=((((-1.0)*r20*x4915*x4919))+(((-1.0)*r22*sj5*x4919))+(((-1.0)*r21*x4911*x4919))+((x4909*x4916))+(((-1.0)*x4913*x4920)));
evalcond[3]=((((-1.0)*r11*x4911*x4919))+(((-1.0)*x4914*x4920))+(((-1.0)*r12*sj5*x4919))+((x4909*x4912))+(((-1.0)*r10*x4915*x4919)));
evalcond[4]=((-1.0)+(((-1.0)*x4912*x4919))+((x4910*x4914))+(((-1.0)*r11*x4911*x4920))+(((-1.0)*r12*x4921))+(((-1.0)*r10*x4915*x4920)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x4919))+(((-1.0)*r00*x4915*x4919))+(((-1.0)*x4917*x4920))+((x4909*x4918))+(((-1.0)*r01*x4911*x4919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4922=((1.0)*sj6);
CheckValue<IkReal> x4923=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x4922))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x4923.valid){
continue;
}
CheckValue<IkReal> x4924 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x4922))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x4924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4923.value)))+(x4924.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4925=IKsin(j4);
IkReal x4926=IKcos(j4);
IkReal x4927=(cj5*cj6);
IkReal x4928=(r11*sj6);
IkReal x4929=(cj6*r20);
IkReal x4930=(cj6*r10);
IkReal x4931=(cj5*sj6);
IkReal x4932=(r21*sj6);
IkReal x4933=(cj6*r00);
IkReal x4934=(r01*sj6);
IkReal x4935=((1.0)*x4926);
IkReal x4936=((1.0)*x4925);
IkReal x4937=(sj5*x4936);
evalcond[0]=(((x4926*x4929))+(((-1.0)*r20*x4931*x4936))+(((-1.0)*x4932*x4935))+(((-1.0)*r21*x4927*x4936))+(((-1.0)*r22*x4937)));
evalcond[1]=((((-1.0)*r01*x4927*x4936))+(((-1.0)*r02*x4937))+((x4926*x4933))+(((-1.0)*x4934*x4935))+(((-1.0)*r00*x4931*x4936)));
evalcond[2]=((((-1.0)*r20*x4931*x4935))+((x4925*x4932))+(((-1.0)*r21*x4927*x4935))+(((-1.0)*x4929*x4936))+(((-1.0)*r22*sj5*x4935)));
evalcond[3]=((((-1.0)*r10*x4931*x4935))+(((-1.0)*r12*sj5*x4935))+(((-1.0)*x4930*x4936))+((x4925*x4928))+(((-1.0)*r11*x4927*x4935)));
evalcond[4]=((-1.0)+((x4926*x4930))+(((-1.0)*r10*x4931*x4936))+(((-1.0)*r12*x4937))+(((-1.0)*r11*x4927*x4936))+(((-1.0)*x4928*x4935)));
evalcond[5]=((1.0)+(((-1.0)*r01*x4927*x4935))+(((-1.0)*x4933*x4936))+(((-1.0)*r02*sj5*x4935))+(((-1.0)*r00*x4931*x4935))+((x4925*x4934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4938=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x4938.valid){
continue;
}
CheckValue<IkReal> x4939 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x4939.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4938.value)))+(x4939.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4940=IKsin(j4);
IkReal x4941=IKcos(j4);
IkReal x4942=(cj5*cj6);
IkReal x4943=(r11*sj6);
IkReal x4944=(cj6*r20);
IkReal x4945=(cj6*r10);
IkReal x4946=(cj5*sj6);
IkReal x4947=(r21*sj6);
IkReal x4948=(cj6*r00);
IkReal x4949=(r01*sj6);
IkReal x4950=((1.0)*x4941);
IkReal x4951=((1.0)*x4940);
IkReal x4952=(sj5*x4951);
evalcond[0]=((((-1.0)*x4947*x4950))+(((-1.0)*r21*x4942*x4951))+(((-1.0)*r22*x4952))+((x4941*x4944))+(((-1.0)*r20*x4946*x4951)));
evalcond[1]=((((-1.0)*r02*x4952))+((x4941*x4948))+(((-1.0)*r01*x4942*x4951))+(((-1.0)*x4949*x4950))+(((-1.0)*r00*x4946*x4951)));
evalcond[2]=((((-1.0)*r21*x4942*x4950))+(((-1.0)*r22*sj5*x4950))+((x4940*x4947))+(((-1.0)*x4944*x4951))+(((-1.0)*r20*x4946*x4950)));
evalcond[3]=(((x4940*x4943))+(((-1.0)*r11*x4942*x4950))+(((-1.0)*x4945*x4951))+(((-1.0)*r10*x4946*x4950))+(((-1.0)*r12*sj5*x4950)));
evalcond[4]=((-1.0)+(((-1.0)*x4943*x4950))+(((-1.0)*r11*x4942*x4951))+((x4941*x4945))+(((-1.0)*r12*x4952))+(((-1.0)*r10*x4946*x4951)));
evalcond[5]=((1.0)+((x4940*x4949))+(((-1.0)*r01*x4942*x4950))+(((-1.0)*x4948*x4951))+(((-1.0)*r02*sj5*x4950))+(((-1.0)*r00*x4946*x4950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4953=cj6*cj6;
IkReal x4954=cj5*cj5;
IkReal x4955=(r22*sj5);
IkReal x4956=(cj0*r20);
IkReal x4957=((1.0)*r21);
IkReal x4958=(cj5*sj6);
IkReal x4959=(r02*r22);
IkReal x4960=(cj5*cj6);
IkReal x4961=(r02*sj5);
IkReal x4962=(cj6*sj6);
IkReal x4963=((1.0)*r20);
IkReal x4964=(r01*x4957);
IkReal x4965=(r00*r20*x4954);
CheckValue<IkReal> x4966 = IKatan2WithCheck(IkReal((((cj6*x4956))+(((-1.0)*cj0*sj6*x4957)))),(((x4956*x4958))+((cj0*r21*x4960))+((cj0*x4955))),IKFAST_ATAN2_MAGTHRESH);
if(!x4966.valid){
continue;
}
CheckValue<IkReal> x4967=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x4955*x4958))+(((-1.0)*r00*x4954*x4957*x4962))+(((-1.0)*x4957*x4960*x4961))+((r00*r21*x4962))+(((-1.0)*x4953*x4954*x4964))+((r01*r21*x4953))+(((-1.0)*x4964))+((x4954*x4959))+(((-1.0)*x4959))+((r01*r20*x4962))+(((-1.0)*r00*x4954*x4963))+(((-1.0)*r00*x4953*x4963))+(((-1.0)*x4958*x4961*x4963))+(((-1.0)*r01*x4955*x4960))+((x4953*x4965))+(((-1.0)*r01*x4954*x4962*x4963)))),-1);
if(!x4967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4966.value)+(((1.5707963267949)*(x4967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4968=IKsin(j4);
IkReal x4969=IKcos(j4);
IkReal x4970=((1.0)*sj0);
IkReal x4971=((1.0)*cj6);
IkReal x4972=((1.0)*sj6);
IkReal x4973=(cj5*x4969);
IkReal x4974=(r20*x4968);
IkReal x4975=(cj6*x4969);
IkReal x4976=(r11*x4968);
IkReal x4977=(r21*x4968);
IkReal x4978=(r01*x4968);
IkReal x4979=((1.0)*sj5*x4968);
IkReal x4980=((1.0)*sj5*x4969);
IkReal x4981=(cj5*x4968*x4972);
evalcond[0]=((((-1.0)*r21*x4969*x4972))+(((-1.0)*r22*x4979))+((r20*x4975))+(((-1.0)*cj5*x4972*x4974))+(((-1.0)*cj5*x4971*x4977)));
evalcond[1]=((((-1.0)*r21*x4971*x4973))+(((-1.0)*r22*x4980))+(((-1.0)*r20*x4972*x4973))+((sj6*x4977))+(((-1.0)*x4971*x4974)));
evalcond[2]=(cj0+((r10*x4975))+(((-1.0)*r12*x4979))+(((-1.0)*r10*x4981))+(((-1.0)*r11*x4969*x4972))+(((-1.0)*cj5*x4971*x4976)));
evalcond[3]=((((-1.0)*r01*x4969*x4972))+(((-1.0)*x4970))+(((-1.0)*r02*x4979))+(((-1.0)*r00*x4981))+((r00*x4975))+(((-1.0)*cj5*x4971*x4978)));
evalcond[4]=((((-1.0)*r01*x4971*x4973))+((sj6*x4978))+(((-1.0)*r02*x4980))+(((-1.0)*r00*x4968*x4971))+(((-1.0)*cj0))+(((-1.0)*r00*x4972*x4973)));
evalcond[5]=((((-1.0)*r10*x4972*x4973))+(((-1.0)*r11*x4971*x4973))+(((-1.0)*r10*x4968*x4971))+(((-1.0)*x4970))+((sj6*x4976))+(((-1.0)*r12*x4980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4982=(cj5*sj0);
CheckValue<IkReal> x4983=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x4983.valid){
continue;
}
CheckValue<IkReal> x4984 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r20*sj6*x4982))+((r22*sj0*sj5))+((cj6*r21*x4982))),IKFAST_ATAN2_MAGTHRESH);
if(!x4984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4983.value)))+(x4984.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4985=IKsin(j4);
IkReal x4986=IKcos(j4);
IkReal x4987=((1.0)*sj0);
IkReal x4988=((1.0)*cj6);
IkReal x4989=((1.0)*sj6);
IkReal x4990=(cj5*x4986);
IkReal x4991=(r20*x4985);
IkReal x4992=(cj6*x4986);
IkReal x4993=(r11*x4985);
IkReal x4994=(r21*x4985);
IkReal x4995=(r01*x4985);
IkReal x4996=((1.0)*sj5*x4985);
IkReal x4997=((1.0)*sj5*x4986);
IkReal x4998=(cj5*x4985*x4989);
evalcond[0]=((((-1.0)*r22*x4996))+(((-1.0)*r21*x4986*x4989))+((r20*x4992))+(((-1.0)*cj5*x4989*x4991))+(((-1.0)*cj5*x4988*x4994)));
evalcond[1]=((((-1.0)*r22*x4997))+(((-1.0)*r20*x4989*x4990))+((sj6*x4994))+(((-1.0)*r21*x4988*x4990))+(((-1.0)*x4988*x4991)));
evalcond[2]=(cj0+(((-1.0)*r12*x4996))+((r10*x4992))+(((-1.0)*cj5*x4988*x4993))+(((-1.0)*r10*x4998))+(((-1.0)*r11*x4986*x4989)));
evalcond[3]=((((-1.0)*r00*x4998))+(((-1.0)*r02*x4996))+(((-1.0)*x4987))+(((-1.0)*cj5*x4988*x4995))+(((-1.0)*r01*x4986*x4989))+((r00*x4992)));
evalcond[4]=((((-1.0)*r00*x4989*x4990))+(((-1.0)*r00*x4985*x4988))+((sj6*x4995))+(((-1.0)*r02*x4997))+(((-1.0)*r01*x4988*x4990))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r11*x4988*x4990))+(((-1.0)*r12*x4997))+(((-1.0)*r10*x4989*x4990))+((sj6*x4993))+(((-1.0)*r10*x4985*x4988))+(((-1.0)*x4987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4999=(cj0*sj6);
IkReal x5000=(cj0*cj6);
CheckValue<IkReal> x5001=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x5001.valid){
continue;
}
CheckValue<IkReal> x5002 = IKatan2WithCheck(IkReal((((r20*x5000))+(((-1.0)*r21*x4999)))),(((cj5*r21*x5000))+((cj5*r20*x4999))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5002.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5001.value)))+(x5002.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5003=IKsin(j4);
IkReal x5004=IKcos(j4);
IkReal x5005=((1.0)*sj0);
IkReal x5006=((1.0)*cj6);
IkReal x5007=((1.0)*sj6);
IkReal x5008=(cj5*x5004);
IkReal x5009=(r20*x5003);
IkReal x5010=(cj6*x5004);
IkReal x5011=(r11*x5003);
IkReal x5012=(r21*x5003);
IkReal x5013=(r01*x5003);
IkReal x5014=((1.0)*sj5*x5003);
IkReal x5015=((1.0)*sj5*x5004);
IkReal x5016=(cj5*x5003*x5007);
evalcond[0]=(((r20*x5010))+(((-1.0)*r21*x5004*x5007))+(((-1.0)*cj5*x5007*x5009))+(((-1.0)*r22*x5014))+(((-1.0)*cj5*x5006*x5012)));
evalcond[1]=((((-1.0)*r20*x5007*x5008))+(((-1.0)*x5006*x5009))+(((-1.0)*r21*x5006*x5008))+(((-1.0)*r22*x5015))+((sj6*x5012)));
evalcond[2]=(cj0+(((-1.0)*r10*x5016))+(((-1.0)*r11*x5004*x5007))+(((-1.0)*r12*x5014))+((r10*x5010))+(((-1.0)*cj5*x5006*x5011)));
evalcond[3]=((((-1.0)*r02*x5014))+((r00*x5010))+(((-1.0)*r00*x5016))+(((-1.0)*r01*x5004*x5007))+(((-1.0)*x5005))+(((-1.0)*cj5*x5006*x5013)));
evalcond[4]=((((-1.0)*r02*x5015))+(((-1.0)*r00*x5003*x5006))+(((-1.0)*r01*x5006*x5008))+((sj6*x5013))+(((-1.0)*r00*x5007*x5008))+(((-1.0)*cj0)));
evalcond[5]=(((sj6*x5011))+(((-1.0)*r10*x5003*x5006))+(((-1.0)*r12*x5015))+(((-1.0)*r10*x5007*x5008))+(((-1.0)*x5005))+(((-1.0)*r11*x5006*x5008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5017=((1.0)*cj5);
IkReal x5018=((0.01)*cj5);
IkReal x5019=(cj6*r11);
IkReal x5020=(r20*sj6);
IkReal x5021=((0.01)*sj5);
IkReal x5022=(cj6*r01);
IkReal x5023=((0.37429)*cj5);
IkReal x5024=((0.37429)*sj5);
IkReal x5025=(cj6*r21);
IkReal x5026=(r10*sj5*sj6);
IkReal x5027=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.069)+((x5018*x5020))+((x5018*x5025))+(((-1.0)*pz))+((r22*x5021))+((r22*x5023))+(((-1.0)*x5020*x5024))+(((-1.0)*x5024*x5025)));
evalcond[2]=((((-1.0)*r00*sj6*x5024))+((r02*x5021))+((r02*x5023))+((r00*sj6*x5018))+((x5018*x5022))+(((-1.0)*px))+(((-1.0)*x5022*x5024))+(((0.43342)*cj0)));
evalcond[3]=((((-1.0)*x5019*x5024))+(((-1.0)*r10*sj6*x5024))+((r12*x5021))+((r12*x5023))+((r10*sj6*x5018))+(((-1.0)*py))+(((0.43342)*sj0))+((x5018*x5019)));
evalcond[4]=((1.0)+(((-1.0)*r22*x5017))+((sj5*x5020))+((sj5*x5025)));
evalcond[5]=(((sj5*x5019))+x5026+(((-1.0)*r12*x5017)));
evalcond[6]=((((-1.0)*r02*x5017))+x5027+((sj5*x5022)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5028=(r20*sj0);
IkReal x5029=((1.0)*sj5);
IkReal x5030=(r21*sj0);
IkReal x5031=(((cj5*r12))+(((-1.0)*r10*sj6*x5029))+(((-1.0)*cj6*r11*x5029)));
j4eval[0]=x5031;
j4eval[1]=IKsign(x5031);
j4eval[2]=((IKabs((((cj5*cj6*x5030))+((cj5*sj6*x5028))+((r22*sj0*sj5)))))+(IKabs(((((-1.0)*sj6*x5030))+((cj6*x5028))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5032=(cj0*sj6);
IkReal x5033=((1.0)*sj5);
IkReal x5034=(cj0*cj6);
IkReal x5035=((((-1.0)*cj6*r01*x5033))+(((-1.0)*r00*sj6*x5033))+((cj5*r02)));
j4eval[0]=x5035;
j4eval[1]=IKsign(x5035);
j4eval[2]=((IKabs((((cj5*r20*x5032))+((cj5*r21*x5034))+((cj0*r22*sj5)))))+(IKabs((((r20*x5034))+(((-1.0)*r21*x5032))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5036=cj6*cj6;
IkReal x5037=cj5*cj5;
IkReal x5038=(r02*r22);
IkReal x5039=(r22*sj5);
IkReal x5040=(r00*r20);
IkReal x5041=((1.0)*r21);
IkReal x5042=(r20*sj6);
IkReal x5043=(cj6*r01);
IkReal x5044=(cj0*cj5);
IkReal x5045=(r00*sj6);
IkReal x5046=((1.0)*cj5);
IkReal x5047=(cj6*r21);
IkReal x5048=(cj5*r02*sj5);
IkReal x5049=((1.0)*x5037);
IkReal x5050=(x5036*x5037);
IkReal x5051=((((-1.0)*x5036*x5040))+(((-1.0)*cj6*x5041*x5048))+(((-1.0)*x5040*x5049))+(((-1.0)*x5038))+(((-1.0)*x5042*x5043*x5049))+(((-1.0)*r02*sj5*x5042*x5046))+((x5042*x5043))+(((-1.0)*cj6*x5037*x5041*x5045))+((x5037*x5038))+((x5045*x5047))+(((-1.0)*r01*x5041*x5050))+(((-1.0)*x5039*x5045*x5046))+(((-1.0)*r01*x5041))+((x5040*x5050))+(((-1.0)*x5039*x5043*x5046))+((r01*r21*x5036)));
j4eval[0]=x5051;
j4eval[1]=((IKabs((((x5042*x5044))+((x5044*x5047))+((cj0*x5039)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x5041))))));
j4eval[2]=IKsign(x5051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5052=((1.0)*cj5);
IkReal x5053=((0.01)*cj5);
IkReal x5054=(cj6*r11);
IkReal x5055=(r20*sj6);
IkReal x5056=((0.01)*sj5);
IkReal x5057=(cj6*r01);
IkReal x5058=((0.37429)*cj5);
IkReal x5059=((0.37429)*sj5);
IkReal x5060=(cj6*r21);
IkReal x5061=(r10*sj5*sj6);
IkReal x5062=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x5059*x5060))+((r22*x5056))+((r22*x5058))+(((-1.0)*x5055*x5059))+((x5053*x5055))+(((-1.0)*pz))+((x5053*x5060)));
evalcond[2]=((((-1.0)*r00*sj6*x5059))+((x5053*x5057))+(((-1.0)*px))+((r00*sj6*x5053))+(((-1.0)*x5057*x5059))+((r02*x5058))+((r02*x5056)));
evalcond[3]=((0.43342)+(((-1.0)*r10*sj6*x5059))+(((-1.0)*x5054*x5059))+((r12*x5056))+((r12*x5058))+((x5053*x5054))+(((-1.0)*py))+((r10*sj6*x5053)));
evalcond[4]=((1.0)+((sj5*x5060))+(((-1.0)*r22*x5052))+((sj5*x5055)));
evalcond[5]=((((-1.0)*r12*x5052))+x5061+((sj5*x5054)));
evalcond[6]=(x5062+((sj5*x5057))+(((-1.0)*r02*x5052)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5063=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5063;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5064=((1.0)*sj6);
IkReal x5065=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x5064)));
j4eval[0]=x5065;
j4eval[1]=IKsign(x5065);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5064))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5066=cj6*cj6;
IkReal x5067=cj5*cj5;
IkReal x5068=r10*r10;
IkReal x5069=r11*r11;
IkReal x5070=r12*r12;
IkReal x5071=(r10*sj6);
IkReal x5072=(r12*sj5);
IkReal x5073=((2.0)*cj6*r11);
IkReal x5074=((1.0)*x5068);
IkReal x5075=(x5066*x5069);
IkReal x5076=((((-1.0)*x5067*x5074))+(((-1.0)*x5066*x5074))+((x5066*x5067*x5068))+(((-1.0)*x5067*x5071*x5073))+((x5067*x5070))+(((-1.0)*cj5*x5072*x5073))+x5075+(((-1.0)*x5067*x5075))+((x5071*x5073))+(((-1.0)*x5070))+(((-1.0)*x5069))+(((-2.0)*cj5*x5071*x5072)));
j4eval[0]=x5076;
j4eval[1]=((IKabs(((((-1.0)*r11*sj6))+((cj6*r10)))))+(IKabs((((cj5*x5071))+x5072+((cj5*cj6*r11))))));
j4eval[2]=IKsign(x5076);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5077=cj6*cj6;
IkReal x5078=cj5*cj5;
IkReal x5079=r10*r10;
IkReal x5080=r11*r11;
IkReal x5081=r12*r12;
IkReal x5082=(r10*sj6);
IkReal x5083=(r12*sj5);
IkReal x5084=((2.0)*cj6*r11);
IkReal x5085=(x5077*x5080);
IkReal x5086=(x5078*x5079);
CheckValue<IkReal> x5087 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x5082))+x5083+((cj5*cj6*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x5087.valid){
continue;
}
CheckValue<IkReal> x5088=IKPowWithIntegerCheck(IKsign((((x5077*x5086))+(((-1.0)*cj5*x5083*x5084))+(((-1.0)*x5080))+(((-1.0)*x5086))+(((-1.0)*x5081))+(((-1.0)*x5078*x5085))+(((-2.0)*cj5*x5082*x5083))+((x5082*x5084))+x5085+(((-1.0)*x5078*x5082*x5084))+((x5078*x5081))+(((-1.0)*x5077*x5079)))),-1);
if(!x5088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5087.value)+(((1.5707963267949)*(x5088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5089=IKsin(j4);
IkReal x5090=IKcos(j4);
IkReal x5091=(cj5*cj6);
IkReal x5092=(r11*sj6);
IkReal x5093=(cj6*r20);
IkReal x5094=(cj6*r10);
IkReal x5095=(cj5*sj6);
IkReal x5096=(r01*sj6);
IkReal x5097=(r21*sj6);
IkReal x5098=(cj6*r00);
IkReal x5099=((1.0)*x5090);
IkReal x5100=((1.0)*x5089);
IkReal x5101=(sj5*x5100);
evalcond[0]=((((-1.0)*r22*x5101))+(((-1.0)*r21*x5091*x5100))+(((-1.0)*x5097*x5099))+(((-1.0)*r20*x5095*x5100))+((x5090*x5093)));
evalcond[1]=((((-1.0)*r11*x5091*x5100))+(((-1.0)*r10*x5095*x5100))+((x5090*x5094))+(((-1.0)*x5092*x5099))+(((-1.0)*r12*x5101)));
evalcond[2]=((((-1.0)*r22*sj5*x5099))+((x5089*x5097))+(((-1.0)*r21*x5091*x5099))+(((-1.0)*r20*x5095*x5099))+(((-1.0)*x5093*x5100)));
evalcond[3]=((((-1.0)*r01*x5091*x5099))+((x5089*x5096))+(((-1.0)*r00*x5095*x5099))+(((-1.0)*x5098*x5100))+(((-1.0)*r02*sj5*x5099)));
evalcond[4]=((1.0)+(((-1.0)*r01*x5091*x5100))+(((-1.0)*r02*x5101))+(((-1.0)*x5096*x5099))+(((-1.0)*r00*x5095*x5100))+((x5090*x5098)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x5091*x5099))+(((-1.0)*r12*sj5*x5099))+(((-1.0)*r10*x5095*x5099))+((x5089*x5092))+(((-1.0)*x5094*x5100)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5102=((1.0)*sj6);
CheckValue<IkReal> x5103=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x5102)))),-1);
if(!x5103.valid){
continue;
}
CheckValue<IkReal> x5104 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5102))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5103.value)))+(x5104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5105=IKsin(j4);
IkReal x5106=IKcos(j4);
IkReal x5107=(cj5*cj6);
IkReal x5108=(r11*sj6);
IkReal x5109=(cj6*r20);
IkReal x5110=(cj6*r10);
IkReal x5111=(cj5*sj6);
IkReal x5112=(r01*sj6);
IkReal x5113=(r21*sj6);
IkReal x5114=(cj6*r00);
IkReal x5115=((1.0)*x5106);
IkReal x5116=((1.0)*x5105);
IkReal x5117=(sj5*x5116);
evalcond[0]=(((x5106*x5109))+(((-1.0)*r22*x5117))+(((-1.0)*r21*x5107*x5116))+(((-1.0)*r20*x5111*x5116))+(((-1.0)*x5113*x5115)));
evalcond[1]=(((x5106*x5110))+(((-1.0)*r10*x5111*x5116))+(((-1.0)*r11*x5107*x5116))+(((-1.0)*x5108*x5115))+(((-1.0)*r12*x5117)));
evalcond[2]=((((-1.0)*r21*x5107*x5115))+(((-1.0)*r20*x5111*x5115))+(((-1.0)*x5109*x5116))+(((-1.0)*r22*sj5*x5115))+((x5105*x5113)));
evalcond[3]=((((-1.0)*r01*x5107*x5115))+(((-1.0)*x5114*x5116))+(((-1.0)*r02*sj5*x5115))+((x5105*x5112))+(((-1.0)*r00*x5111*x5115)));
evalcond[4]=((1.0)+(((-1.0)*x5112*x5115))+((x5106*x5114))+(((-1.0)*r02*x5117))+(((-1.0)*r01*x5107*x5116))+(((-1.0)*r00*x5111*x5116)));
evalcond[5]=((-1.0)+((x5105*x5108))+(((-1.0)*x5110*x5116))+(((-1.0)*r10*x5111*x5115))+(((-1.0)*r11*x5107*x5115))+(((-1.0)*r12*sj5*x5115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5118=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5118.valid){
continue;
}
CheckValue<IkReal> x5119 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5118.value)))+(x5119.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5120=IKsin(j4);
IkReal x5121=IKcos(j4);
IkReal x5122=(cj5*cj6);
IkReal x5123=(r11*sj6);
IkReal x5124=(cj6*r20);
IkReal x5125=(cj6*r10);
IkReal x5126=(cj5*sj6);
IkReal x5127=(r01*sj6);
IkReal x5128=(r21*sj6);
IkReal x5129=(cj6*r00);
IkReal x5130=((1.0)*x5121);
IkReal x5131=((1.0)*x5120);
IkReal x5132=(sj5*x5131);
evalcond[0]=((((-1.0)*r21*x5122*x5131))+(((-1.0)*x5128*x5130))+(((-1.0)*r20*x5126*x5131))+(((-1.0)*r22*x5132))+((x5121*x5124)));
evalcond[1]=((((-1.0)*x5123*x5130))+(((-1.0)*r10*x5126*x5131))+(((-1.0)*r12*x5132))+(((-1.0)*r11*x5122*x5131))+((x5121*x5125)));
evalcond[2]=((((-1.0)*r21*x5122*x5130))+(((-1.0)*x5124*x5131))+(((-1.0)*r22*sj5*x5130))+(((-1.0)*r20*x5126*x5130))+((x5120*x5128)));
evalcond[3]=((((-1.0)*r01*x5122*x5130))+(((-1.0)*r02*sj5*x5130))+(((-1.0)*x5129*x5131))+((x5120*x5127))+(((-1.0)*r00*x5126*x5130)));
evalcond[4]=((1.0)+(((-1.0)*r01*x5122*x5131))+(((-1.0)*r02*x5132))+(((-1.0)*x5127*x5130))+((x5121*x5129))+(((-1.0)*r00*x5126*x5131)));
evalcond[5]=((-1.0)+(((-1.0)*x5125*x5131))+(((-1.0)*r12*sj5*x5130))+(((-1.0)*r10*x5126*x5130))+((x5120*x5123))+(((-1.0)*r11*x5122*x5130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5133=((1.0)*cj5);
IkReal x5134=((0.01)*cj5);
IkReal x5135=(cj6*r11);
IkReal x5136=(r20*sj6);
IkReal x5137=((0.01)*sj5);
IkReal x5138=(cj6*r01);
IkReal x5139=((0.37429)*cj5);
IkReal x5140=((0.37429)*sj5);
IkReal x5141=(cj6*r21);
IkReal x5142=(r10*sj5*sj6);
IkReal x5143=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((r22*x5139))+((r22*x5137))+((x5134*x5141))+(((-1.0)*x5136*x5140))+(((-1.0)*x5140*x5141))+(((-1.0)*pz))+((x5134*x5136)));
evalcond[2]=((((-1.0)*px))+(((-1.0)*r00*sj6*x5140))+((r00*sj6*x5134))+((x5134*x5138))+((r02*x5137))+((r02*x5139))+(((-1.0)*x5138*x5140)));
evalcond[3]=((-0.43342)+((r12*x5139))+((r12*x5137))+(((-1.0)*x5135*x5140))+(((-1.0)*py))+(((-1.0)*r10*sj6*x5140))+((x5134*x5135))+((r10*sj6*x5134)));
evalcond[4]=((1.0)+((sj5*x5141))+((sj5*x5136))+(((-1.0)*r22*x5133)));
evalcond[5]=(((sj5*x5135))+x5142+(((-1.0)*r12*x5133)));
evalcond[6]=(((sj5*x5138))+x5143+(((-1.0)*r02*x5133)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5144=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x5144;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5144);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5145=((1.0)*sj5);
IkReal x5146=(((cj5*r22))+(((-1.0)*cj6*r21*x5145))+(((-1.0)*r20*sj6*x5145)));
j4eval[0]=x5146;
j4eval[1]=IKsign(x5146);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5147=r11*r11;
IkReal x5148=cj5*cj5;
IkReal x5149=cj6*cj6;
IkReal x5150=r10*r10;
IkReal x5151=r12*r12;
IkReal x5152=(r12*sj5);
IkReal x5153=(cj6*r10);
IkReal x5154=((1.0)*x5149);
IkReal x5155=(cj5*cj6*r11);
IkReal x5156=(cj5*r10*sj6);
IkReal x5157=((2.0)*r11*sj6);
IkReal x5158=(x5148*x5150);
IkReal x5159=((((-1.0)*x5154*x5158))+((x5147*x5148*x5149))+((x5149*x5150))+x5158+x5151+x5147+(((2.0)*x5152*x5155))+(((2.0)*x5152*x5156))+((x5148*x5153*x5157))+(((-1.0)*x5147*x5154))+(((-1.0)*x5148*x5151))+(((-1.0)*x5153*x5157)));
j4eval[0]=x5159;
j4eval[1]=IKsign(x5159);
j4eval[2]=((IKabs((x5152+x5155+x5156)))+(IKabs((x5153+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5160=r11*r11;
IkReal x5161=cj5*cj5;
IkReal x5162=cj6*cj6;
IkReal x5163=r10*r10;
IkReal x5164=r12*r12;
IkReal x5165=(r10*sj6);
IkReal x5166=(r12*sj5);
IkReal x5167=((1.0)*x5162);
IkReal x5168=(cj5*cj6*r11);
IkReal x5169=((2.0)*cj6*r11);
IkReal x5170=(x5161*x5163);
CheckValue<IkReal> x5171=IKPowWithIntegerCheck(IKsign((((x5160*x5161*x5162))+(((2.0)*x5166*x5168))+((x5161*x5165*x5169))+((x5162*x5163))+(((-1.0)*x5160*x5167))+(((2.0)*cj5*x5165*x5166))+x5160+x5164+x5170+(((-1.0)*x5165*x5169))+(((-1.0)*x5167*x5170))+(((-1.0)*x5161*x5164)))),-1);
if(!x5171.valid){
continue;
}
CheckValue<IkReal> x5172 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x5166+x5168+((cj5*x5165))),IKFAST_ATAN2_MAGTHRESH);
if(!x5172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5171.value)))+(x5172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5173=IKsin(j4);
IkReal x5174=IKcos(j4);
IkReal x5175=(cj5*cj6);
IkReal x5176=(r11*sj6);
IkReal x5177=(cj6*r20);
IkReal x5178=(cj6*r10);
IkReal x5179=(cj5*sj6);
IkReal x5180=(r01*sj6);
IkReal x5181=(r21*sj6);
IkReal x5182=(cj6*r00);
IkReal x5183=((1.0)*x5174);
IkReal x5184=((1.0)*x5173);
IkReal x5185=(sj5*x5184);
evalcond[0]=((((-1.0)*r20*x5179*x5184))+(((-1.0)*r22*x5185))+(((-1.0)*x5181*x5183))+((x5174*x5177))+(((-1.0)*r21*x5175*x5184)));
evalcond[1]=((((-1.0)*x5176*x5183))+(((-1.0)*r12*x5185))+(((-1.0)*r10*x5179*x5184))+(((-1.0)*r11*x5175*x5184))+((x5174*x5178)));
evalcond[2]=((((-1.0)*r20*x5179*x5183))+((x5173*x5181))+(((-1.0)*r22*sj5*x5183))+(((-1.0)*x5177*x5184))+(((-1.0)*r21*x5175*x5183)));
evalcond[3]=(((x5173*x5180))+(((-1.0)*r02*sj5*x5183))+(((-1.0)*x5182*x5184))+(((-1.0)*r01*x5175*x5183))+(((-1.0)*r00*x5179*x5183)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5185))+((x5174*x5182))+(((-1.0)*x5180*x5183))+(((-1.0)*r01*x5175*x5184))+(((-1.0)*r00*x5179*x5184)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x5183))+(((-1.0)*r10*x5179*x5183))+(((-1.0)*r11*x5175*x5183))+(((-1.0)*x5178*x5184))+((x5173*x5176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5186=((1.0)*sj5);
CheckValue<IkReal> x5187 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5187.valid){
continue;
}
CheckValue<IkReal> x5188=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x5186))+(((-1.0)*r20*sj6*x5186)))),-1);
if(!x5188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5187.value)+(((1.5707963267949)*(x5188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5189=IKsin(j4);
IkReal x5190=IKcos(j4);
IkReal x5191=(cj5*cj6);
IkReal x5192=(r11*sj6);
IkReal x5193=(cj6*r20);
IkReal x5194=(cj6*r10);
IkReal x5195=(cj5*sj6);
IkReal x5196=(r01*sj6);
IkReal x5197=(r21*sj6);
IkReal x5198=(cj6*r00);
IkReal x5199=((1.0)*x5190);
IkReal x5200=((1.0)*x5189);
IkReal x5201=(sj5*x5200);
evalcond[0]=((((-1.0)*r22*x5201))+(((-1.0)*x5197*x5199))+(((-1.0)*r20*x5195*x5200))+(((-1.0)*r21*x5191*x5200))+((x5190*x5193)));
evalcond[1]=((((-1.0)*r10*x5195*x5200))+(((-1.0)*x5192*x5199))+(((-1.0)*r11*x5191*x5200))+(((-1.0)*r12*x5201))+((x5190*x5194)));
evalcond[2]=((((-1.0)*r20*x5195*x5199))+(((-1.0)*r21*x5191*x5199))+(((-1.0)*r22*sj5*x5199))+(((-1.0)*x5193*x5200))+((x5189*x5197)));
evalcond[3]=((((-1.0)*r00*x5195*x5199))+(((-1.0)*r01*x5191*x5199))+(((-1.0)*x5198*x5200))+(((-1.0)*r02*sj5*x5199))+((x5189*x5196)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x5201))+(((-1.0)*r01*x5191*x5200))+(((-1.0)*x5196*x5199))+(((-1.0)*r00*x5195*x5200))+((x5190*x5198)));
evalcond[5]=((1.0)+(((-1.0)*r11*x5191*x5199))+(((-1.0)*r12*sj5*x5199))+(((-1.0)*x5194*x5200))+(((-1.0)*r10*x5195*x5199))+((x5189*x5192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5202 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5202.valid){
continue;
}
CheckValue<IkReal> x5203=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x5203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5202.value)+(((1.5707963267949)*(x5203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5204=IKsin(j4);
IkReal x5205=IKcos(j4);
IkReal x5206=(cj5*cj6);
IkReal x5207=(r11*sj6);
IkReal x5208=(cj6*r20);
IkReal x5209=(cj6*r10);
IkReal x5210=(cj5*sj6);
IkReal x5211=(r01*sj6);
IkReal x5212=(r21*sj6);
IkReal x5213=(cj6*r00);
IkReal x5214=((1.0)*x5205);
IkReal x5215=((1.0)*x5204);
IkReal x5216=(sj5*x5215);
evalcond[0]=(((x5205*x5208))+(((-1.0)*r21*x5206*x5215))+(((-1.0)*x5212*x5214))+(((-1.0)*r22*x5216))+(((-1.0)*r20*x5210*x5215)));
evalcond[1]=(((x5205*x5209))+(((-1.0)*x5207*x5214))+(((-1.0)*r11*x5206*x5215))+(((-1.0)*r10*x5210*x5215))+(((-1.0)*r12*x5216)));
evalcond[2]=((((-1.0)*r21*x5206*x5214))+(((-1.0)*r22*sj5*x5214))+((x5204*x5212))+(((-1.0)*x5208*x5215))+(((-1.0)*r20*x5210*x5214)));
evalcond[3]=((((-1.0)*r00*x5210*x5214))+(((-1.0)*x5213*x5215))+(((-1.0)*r02*sj5*x5214))+(((-1.0)*r01*x5206*x5214))+((x5204*x5211)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x5210*x5215))+(((-1.0)*r01*x5206*x5215))+(((-1.0)*x5211*x5214))+((x5205*x5213))+(((-1.0)*r02*x5216)));
evalcond[5]=((1.0)+((x5204*x5207))+(((-1.0)*r12*sj5*x5214))+(((-1.0)*x5209*x5215))+(((-1.0)*r11*x5206*x5214))+(((-1.0)*r10*x5210*x5214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5217=((1.0)*cj5);
IkReal x5218=((0.01)*cj5);
IkReal x5219=(cj6*r11);
IkReal x5220=(r20*sj6);
IkReal x5221=((0.01)*sj5);
IkReal x5222=(cj6*r01);
IkReal x5223=((0.37429)*cj5);
IkReal x5224=((0.37429)*sj5);
IkReal x5225=(cj6*r21);
IkReal x5226=(r10*sj5*sj6);
IkReal x5227=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+((r22*x5223))+((r22*x5221))+(((-1.0)*pz))+((x5218*x5225))+((x5218*x5220))+(((-1.0)*x5224*x5225))+(((-1.0)*x5220*x5224)));
evalcond[2]=((0.43342)+(((-1.0)*r00*sj6*x5224))+((r02*x5221))+((r02*x5223))+(((-1.0)*x5222*x5224))+(((-1.0)*px))+((x5218*x5222))+((r00*sj6*x5218)));
evalcond[3]=(((x5218*x5219))+((r10*sj6*x5218))+(((-1.0)*x5219*x5224))+(((-1.0)*py))+((r12*x5223))+((r12*x5221))+(((-1.0)*r10*sj6*x5224)));
evalcond[4]=((1.0)+((sj5*x5220))+((sj5*x5225))+(((-1.0)*r22*x5217)));
evalcond[5]=(x5226+((sj5*x5219))+(((-1.0)*r12*x5217)));
evalcond[6]=(x5227+((sj5*x5222))+(((-1.0)*r02*x5217)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5228=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5228;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x5228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5229=((1.0)*sj6);
IkReal x5230=((((-1.0)*r00*sj5*x5229))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x5230;
j4eval[1]=IKsign(x5230);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5229))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5231=cj6*cj6;
IkReal x5232=cj5*cj5;
IkReal x5233=r00*r00;
IkReal x5234=r01*r01;
IkReal x5235=r02*r02;
IkReal x5236=(cj6*r00);
IkReal x5237=(cj5*cj6*r01);
IkReal x5238=((2.0)*r02*sj5);
IkReal x5239=((1.0)*x5231);
IkReal x5240=((2.0)*r01*sj6);
IkReal x5241=(cj5*r00*sj6);
IkReal x5242=(x5232*x5233);
IkReal x5243=((((-1.0)*x5242))+((x5236*x5240))+(((-1.0)*x5234))+(((-1.0)*x5235))+((x5232*x5235))+((x5231*x5234))+((x5231*x5242))+(((-1.0)*x5232*x5236*x5240))+(((-1.0)*x5237*x5238))+(((-1.0)*x5233*x5239))+(((-1.0)*x5232*x5234*x5239))+(((-1.0)*x5238*x5241)));
j4eval[0]=x5243;
j4eval[1]=((IKabs((x5241+x5237+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x5236))));
j4eval[2]=IKsign(x5243);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5244=cj6*cj6;
IkReal x5245=cj5*cj5;
IkReal x5246=r00*r00;
IkReal x5247=r01*r01;
IkReal x5248=r02*r02;
IkReal x5249=(cj6*r00);
IkReal x5250=(cj5*cj6*r01);
IkReal x5251=((2.0)*r02*sj5);
IkReal x5252=((1.0)*x5244);
IkReal x5253=((2.0)*r01*sj6);
IkReal x5254=(cj5*r00*sj6);
IkReal x5255=(x5245*x5246);
CheckValue<IkReal> x5256 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x5249)),(x5250+x5254+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5256.valid){
continue;
}
CheckValue<IkReal> x5257=IKPowWithIntegerCheck(IKsign((((x5245*x5248))+(((-1.0)*x5255))+(((-1.0)*x5247))+(((-1.0)*x5248))+(((-1.0)*x5245*x5249*x5253))+((x5244*x5255))+(((-1.0)*x5250*x5251))+((x5244*x5247))+(((-1.0)*x5245*x5247*x5252))+((x5249*x5253))+(((-1.0)*x5246*x5252))+(((-1.0)*x5251*x5254)))),-1);
if(!x5257.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5256.value)+(((1.5707963267949)*(x5257.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5258=IKsin(j4);
IkReal x5259=IKcos(j4);
IkReal x5260=(cj5*cj6);
IkReal x5261=(r11*sj6);
IkReal x5262=(cj6*r20);
IkReal x5263=(cj6*r10);
IkReal x5264=(cj5*sj6);
IkReal x5265=(r21*sj6);
IkReal x5266=(cj6*r00);
IkReal x5267=(r01*sj6);
IkReal x5268=((1.0)*x5259);
IkReal x5269=((1.0)*x5258);
IkReal x5270=(sj5*x5269);
evalcond[0]=((((-1.0)*r21*x5260*x5269))+(((-1.0)*r20*x5264*x5269))+((x5259*x5262))+(((-1.0)*x5265*x5268))+(((-1.0)*r22*x5270)));
evalcond[1]=((((-1.0)*x5267*x5268))+(((-1.0)*r02*x5270))+(((-1.0)*r00*x5264*x5269))+(((-1.0)*r01*x5260*x5269))+((x5259*x5266)));
evalcond[2]=((((-1.0)*r22*sj5*x5268))+(((-1.0)*r21*x5260*x5268))+(((-1.0)*x5262*x5269))+(((-1.0)*r20*x5264*x5268))+((x5258*x5265)));
evalcond[3]=((((-1.0)*x5263*x5269))+(((-1.0)*r12*sj5*x5268))+(((-1.0)*r11*x5260*x5268))+(((-1.0)*r10*x5264*x5268))+((x5258*x5261)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5260*x5269))+(((-1.0)*r10*x5264*x5269))+(((-1.0)*r12*x5270))+(((-1.0)*x5261*x5268))+((x5259*x5263)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x5268))+(((-1.0)*r00*x5264*x5268))+(((-1.0)*x5266*x5269))+((x5258*x5267))+(((-1.0)*r01*x5260*x5268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5271=((1.0)*sj6);
CheckValue<IkReal> x5272=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x5271))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x5272.valid){
continue;
}
CheckValue<IkReal> x5273 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5271))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5273.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5272.value)))+(x5273.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5274=IKsin(j4);
IkReal x5275=IKcos(j4);
IkReal x5276=(cj5*cj6);
IkReal x5277=(r11*sj6);
IkReal x5278=(cj6*r20);
IkReal x5279=(cj6*r10);
IkReal x5280=(cj5*sj6);
IkReal x5281=(r21*sj6);
IkReal x5282=(cj6*r00);
IkReal x5283=(r01*sj6);
IkReal x5284=((1.0)*x5275);
IkReal x5285=((1.0)*x5274);
IkReal x5286=(sj5*x5285);
evalcond[0]=((((-1.0)*r22*x5286))+(((-1.0)*x5281*x5284))+(((-1.0)*r21*x5276*x5285))+((x5275*x5278))+(((-1.0)*r20*x5280*x5285)));
evalcond[1]=((((-1.0)*r00*x5280*x5285))+((x5275*x5282))+(((-1.0)*r01*x5276*x5285))+(((-1.0)*r02*x5286))+(((-1.0)*x5283*x5284)));
evalcond[2]=((((-1.0)*r21*x5276*x5284))+(((-1.0)*x5278*x5285))+((x5274*x5281))+(((-1.0)*r20*x5280*x5284))+(((-1.0)*r22*sj5*x5284)));
evalcond[3]=((((-1.0)*r11*x5276*x5284))+(((-1.0)*x5279*x5285))+(((-1.0)*r12*sj5*x5284))+((x5274*x5277))+(((-1.0)*r10*x5280*x5284)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5276*x5285))+((x5275*x5279))+(((-1.0)*r12*x5286))+(((-1.0)*x5277*x5284))+(((-1.0)*r10*x5280*x5285)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x5280*x5284))+(((-1.0)*r01*x5276*x5284))+((x5274*x5283))+(((-1.0)*x5282*x5285))+(((-1.0)*r02*sj5*x5284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5287=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5287.valid){
continue;
}
CheckValue<IkReal> x5288 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x5288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5287.value)))+(x5288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5289=IKsin(j4);
IkReal x5290=IKcos(j4);
IkReal x5291=(cj5*cj6);
IkReal x5292=(r11*sj6);
IkReal x5293=(cj6*r20);
IkReal x5294=(cj6*r10);
IkReal x5295=(cj5*sj6);
IkReal x5296=(r21*sj6);
IkReal x5297=(cj6*r00);
IkReal x5298=(r01*sj6);
IkReal x5299=((1.0)*x5290);
IkReal x5300=((1.0)*x5289);
IkReal x5301=(sj5*x5300);
evalcond[0]=((((-1.0)*r22*x5301))+(((-1.0)*r20*x5295*x5300))+((x5290*x5293))+(((-1.0)*r21*x5291*x5300))+(((-1.0)*x5296*x5299)));
evalcond[1]=((((-1.0)*r00*x5295*x5300))+((x5290*x5297))+(((-1.0)*r01*x5291*x5300))+(((-1.0)*r02*x5301))+(((-1.0)*x5298*x5299)));
evalcond[2]=((((-1.0)*r20*x5295*x5299))+(((-1.0)*r21*x5291*x5299))+((x5289*x5296))+(((-1.0)*x5293*x5300))+(((-1.0)*r22*sj5*x5299)));
evalcond[3]=(((x5289*x5292))+(((-1.0)*r10*x5295*x5299))+(((-1.0)*r12*sj5*x5299))+(((-1.0)*r11*x5291*x5299))+(((-1.0)*x5294*x5300)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5291*x5300))+((x5290*x5294))+(((-1.0)*r12*x5301))+(((-1.0)*x5292*x5299))+(((-1.0)*r10*x5295*x5300)));
evalcond[5]=((-1.0)+(((-1.0)*x5297*x5300))+(((-1.0)*r01*x5291*x5299))+((x5289*x5298))+(((-1.0)*r00*x5295*x5299))+(((-1.0)*r02*sj5*x5299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5302=((1.0)*cj5);
IkReal x5303=((0.01)*cj5);
IkReal x5304=(cj6*r11);
IkReal x5305=(r20*sj6);
IkReal x5306=((0.01)*sj5);
IkReal x5307=(cj6*r01);
IkReal x5308=((0.37429)*cj5);
IkReal x5309=((0.37429)*sj5);
IkReal x5310=(cj6*r21);
IkReal x5311=(r10*sj5*sj6);
IkReal x5312=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x5305*x5309))+((r22*x5306))+((r22*x5308))+(((-1.0)*pz))+((x5303*x5310))+((x5303*x5305))+(((-1.0)*x5309*x5310)));
evalcond[2]=((-0.43342)+(((-1.0)*r00*sj6*x5309))+((r02*x5308))+((r02*x5306))+(((-1.0)*px))+((r00*sj6*x5303))+(((-1.0)*x5307*x5309))+((x5303*x5307)));
evalcond[3]=(((r10*sj6*x5303))+(((-1.0)*py))+((r12*x5306))+((r12*x5308))+((x5303*x5304))+(((-1.0)*r10*sj6*x5309))+(((-1.0)*x5304*x5309)));
evalcond[4]=((1.0)+((sj5*x5305))+(((-1.0)*r22*x5302))+((sj5*x5310)));
evalcond[5]=(((sj5*x5304))+x5311+(((-1.0)*r12*x5302)));
evalcond[6]=(((sj5*x5307))+x5312+(((-1.0)*r02*x5302)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5313=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x5313;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5313);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5314=((1.0)*sj5);
IkReal x5315=(((cj5*r22))+(((-1.0)*r20*sj6*x5314))+(((-1.0)*cj6*r21*x5314)));
j4eval[0]=x5315;
j4eval[1]=IKsign(x5315);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5316=cj6*cj6;
IkReal x5317=r01*r01;
IkReal x5318=cj5*cj5;
IkReal x5319=r00*r00;
IkReal x5320=r02*r02;
IkReal x5321=(cj6*r00);
IkReal x5322=(r02*sj5);
IkReal x5323=(cj5*cj6*r01);
IkReal x5324=((2.0)*r01*sj6);
IkReal x5325=(cj5*r00*sj6);
IkReal x5326=((1.0)*x5318);
IkReal x5327=(x5316*x5319);
IkReal x5328=(x5316*x5317);
IkReal x5329=((((-1.0)*x5328))+(((-1.0)*x5321*x5324))+((x5318*x5328))+x5327+x5320+x5317+(((-1.0)*x5326*x5327))+((x5318*x5319))+(((2.0)*x5322*x5323))+(((2.0)*x5322*x5325))+((x5318*x5321*x5324))+(((-1.0)*x5320*x5326)));
j4eval[0]=x5329;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x5321)))+(IKabs((x5325+x5322+x5323))));
j4eval[2]=IKsign(x5329);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5330=cj6*cj6;
IkReal x5331=r01*r01;
IkReal x5332=cj5*cj5;
IkReal x5333=r00*r00;
IkReal x5334=r02*r02;
IkReal x5335=(cj6*r00);
IkReal x5336=((2.0)*r01);
IkReal x5337=(cj5*cj6);
IkReal x5338=(r02*sj5);
IkReal x5339=(cj5*r00*sj6);
IkReal x5340=(x5332*x5333);
IkReal x5341=(x5330*x5331);
CheckValue<IkReal> x5342 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x5335)),(x5339+x5338+((r01*x5337))),IKFAST_ATAN2_MAGTHRESH);
if(!x5342.valid){
continue;
}
CheckValue<IkReal> x5343=IKPowWithIntegerCheck(IKsign((x5331+x5334+x5340+(((2.0)*x5338*x5339))+(((-1.0)*sj6*x5335*x5336))+(((-1.0)*x5330*x5340))+((x5336*x5337*x5338))+(((-1.0)*x5341))+(((-1.0)*x5332*x5334))+((x5332*x5341))+((sj6*x5332*x5335*x5336))+((x5330*x5333)))),-1);
if(!x5343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5342.value)+(((1.5707963267949)*(x5343.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5344=IKsin(j4);
IkReal x5345=IKcos(j4);
IkReal x5346=(cj5*cj6);
IkReal x5347=(r11*sj6);
IkReal x5348=(cj6*r20);
IkReal x5349=(cj6*r10);
IkReal x5350=(cj5*sj6);
IkReal x5351=(r21*sj6);
IkReal x5352=(cj6*r00);
IkReal x5353=(r01*sj6);
IkReal x5354=((1.0)*x5345);
IkReal x5355=((1.0)*x5344);
IkReal x5356=(sj5*x5355);
evalcond[0]=((((-1.0)*x5351*x5354))+(((-1.0)*r21*x5346*x5355))+(((-1.0)*r20*x5350*x5355))+(((-1.0)*r22*x5356))+((x5345*x5348)));
evalcond[1]=((((-1.0)*r00*x5350*x5355))+(((-1.0)*r02*x5356))+(((-1.0)*x5353*x5354))+(((-1.0)*r01*x5346*x5355))+((x5345*x5352)));
evalcond[2]=((((-1.0)*r22*sj5*x5354))+(((-1.0)*r21*x5346*x5354))+(((-1.0)*r20*x5350*x5354))+(((-1.0)*x5348*x5355))+((x5344*x5351)));
evalcond[3]=((((-1.0)*r10*x5350*x5354))+(((-1.0)*r11*x5346*x5354))+(((-1.0)*x5349*x5355))+((x5344*x5347))+(((-1.0)*r12*sj5*x5354)));
evalcond[4]=((1.0)+(((-1.0)*r10*x5350*x5355))+(((-1.0)*r12*x5356))+(((-1.0)*r11*x5346*x5355))+((x5345*x5349))+(((-1.0)*x5347*x5354)));
evalcond[5]=((1.0)+(((-1.0)*r00*x5350*x5354))+(((-1.0)*x5352*x5355))+(((-1.0)*r02*sj5*x5354))+(((-1.0)*r01*x5346*x5354))+((x5344*x5353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5357=((1.0)*sj5);
CheckValue<IkReal> x5358 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x5358.valid){
continue;
}
CheckValue<IkReal> x5359=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x5357))+(((-1.0)*cj6*r21*x5357)))),-1);
if(!x5359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5358.value)+(((1.5707963267949)*(x5359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5360=IKsin(j4);
IkReal x5361=IKcos(j4);
IkReal x5362=(cj5*cj6);
IkReal x5363=(r11*sj6);
IkReal x5364=(cj6*r20);
IkReal x5365=(cj6*r10);
IkReal x5366=(cj5*sj6);
IkReal x5367=(r21*sj6);
IkReal x5368=(cj6*r00);
IkReal x5369=(r01*sj6);
IkReal x5370=((1.0)*x5361);
IkReal x5371=((1.0)*x5360);
IkReal x5372=(sj5*x5371);
evalcond[0]=((((-1.0)*r22*x5372))+(((-1.0)*x5367*x5370))+(((-1.0)*r20*x5366*x5371))+(((-1.0)*r21*x5362*x5371))+((x5361*x5364)));
evalcond[1]=((((-1.0)*r01*x5362*x5371))+(((-1.0)*r02*x5372))+((x5361*x5368))+(((-1.0)*r00*x5366*x5371))+(((-1.0)*x5369*x5370)));
evalcond[2]=((((-1.0)*r22*sj5*x5370))+((x5360*x5367))+(((-1.0)*r20*x5366*x5370))+(((-1.0)*r21*x5362*x5370))+(((-1.0)*x5364*x5371)));
evalcond[3]=((((-1.0)*r12*sj5*x5370))+((x5360*x5363))+(((-1.0)*r10*x5366*x5370))+(((-1.0)*r11*x5362*x5370))+(((-1.0)*x5365*x5371)));
evalcond[4]=((1.0)+(((-1.0)*r12*x5372))+(((-1.0)*r10*x5366*x5371))+(((-1.0)*x5363*x5370))+(((-1.0)*r11*x5362*x5371))+((x5361*x5365)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x5370))+(((-1.0)*r01*x5362*x5370))+((x5360*x5369))+(((-1.0)*x5368*x5371))+(((-1.0)*r00*x5366*x5370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5373 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5373.valid){
continue;
}
CheckValue<IkReal> x5374=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x5374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5373.value)+(((1.5707963267949)*(x5374.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5375=IKsin(j4);
IkReal x5376=IKcos(j4);
IkReal x5377=(cj5*cj6);
IkReal x5378=(r11*sj6);
IkReal x5379=(cj6*r20);
IkReal x5380=(cj6*r10);
IkReal x5381=(cj5*sj6);
IkReal x5382=(r21*sj6);
IkReal x5383=(cj6*r00);
IkReal x5384=(r01*sj6);
IkReal x5385=((1.0)*x5376);
IkReal x5386=((1.0)*x5375);
IkReal x5387=(sj5*x5386);
evalcond[0]=((((-1.0)*x5382*x5385))+(((-1.0)*r20*x5381*x5386))+(((-1.0)*r21*x5377*x5386))+((x5376*x5379))+(((-1.0)*r22*x5387)));
evalcond[1]=((((-1.0)*x5384*x5385))+(((-1.0)*r01*x5377*x5386))+(((-1.0)*r02*x5387))+(((-1.0)*r00*x5381*x5386))+((x5376*x5383)));
evalcond[2]=((((-1.0)*r20*x5381*x5385))+(((-1.0)*r21*x5377*x5385))+((x5375*x5382))+(((-1.0)*r22*sj5*x5385))+(((-1.0)*x5379*x5386)));
evalcond[3]=((((-1.0)*r12*sj5*x5385))+(((-1.0)*x5380*x5386))+(((-1.0)*r11*x5377*x5385))+(((-1.0)*r10*x5381*x5385))+((x5375*x5378)));
evalcond[4]=((1.0)+(((-1.0)*r11*x5377*x5386))+(((-1.0)*r12*x5387))+(((-1.0)*r10*x5381*x5386))+((x5376*x5380))+(((-1.0)*x5378*x5385)));
evalcond[5]=((1.0)+((x5375*x5384))+(((-1.0)*r02*sj5*x5385))+(((-1.0)*r01*x5377*x5385))+(((-1.0)*x5383*x5386))+(((-1.0)*r00*x5381*x5385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5388=cj6*cj6;
IkReal x5389=cj5*cj5;
IkReal x5390=(r22*sj5);
IkReal x5391=(cj0*r20);
IkReal x5392=((1.0)*r21);
IkReal x5393=(cj5*sj6);
IkReal x5394=(r02*r22);
IkReal x5395=(cj5*cj6);
IkReal x5396=(r02*sj5);
IkReal x5397=(cj6*sj6);
IkReal x5398=((1.0)*r20);
IkReal x5399=(r01*x5392);
IkReal x5400=(r00*r20*x5389);
CheckValue<IkReal> x5401=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5393*x5396*x5398))+(((-1.0)*r00*x5389*x5398))+(((-1.0)*r01*x5390*x5395))+((x5389*x5394))+((r01*r20*x5397))+(((-1.0)*x5388*x5389*x5399))+(((-1.0)*r00*x5390*x5393))+((x5388*x5400))+(((-1.0)*x5392*x5395*x5396))+((r01*r21*x5388))+(((-1.0)*r00*x5389*x5392*x5397))+(((-1.0)*r00*x5388*x5398))+(((-1.0)*r01*x5389*x5397*x5398))+(((-1.0)*x5399))+((r00*r21*x5397))+(((-1.0)*x5394)))),-1);
if(!x5401.valid){
continue;
}
CheckValue<IkReal> x5402 = IKatan2WithCheck(IkReal((((cj6*x5391))+(((-1.0)*cj0*sj6*x5392)))),(((x5391*x5393))+((cj0*r21*x5395))+((cj0*x5390))),IKFAST_ATAN2_MAGTHRESH);
if(!x5402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5401.value)))+(x5402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5403=IKsin(j4);
IkReal x5404=IKcos(j4);
IkReal x5405=((1.0)*cj0);
IkReal x5406=(cj6*r20);
IkReal x5407=(cj5*sj6);
IkReal x5408=((1.0)*sj6);
IkReal x5409=(r21*sj6);
IkReal x5410=(cj6*r00);
IkReal x5411=((1.0)*cj5*cj6);
IkReal x5412=(r01*x5404);
IkReal x5413=(r11*x5403);
IkReal x5414=((1.0)*x5403);
IkReal x5415=(r11*x5404);
IkReal x5416=(r10*x5404);
IkReal x5417=((1.0)*x5404);
IkReal x5418=(r01*x5403);
IkReal x5419=(sj5*x5414);
evalcond[0]=((((-1.0)*r21*x5403*x5411))+(((-1.0)*r21*x5404*x5408))+(((-1.0)*r22*x5419))+((x5404*x5406))+(((-1.0)*r20*x5407*x5414)));
evalcond[1]=((((-1.0)*r22*sj5*x5417))+(((-1.0)*x5406*x5414))+(((-1.0)*r20*x5407*x5417))+(((-1.0)*r21*x5404*x5411))+((x5403*x5409)));
evalcond[2]=((((-1.0)*r02*x5419))+sj0+((x5404*x5410))+(((-1.0)*x5411*x5418))+(((-1.0)*r00*x5407*x5414))+(((-1.0)*x5408*x5412)));
evalcond[3]=((((-1.0)*r10*x5407*x5414))+(((-1.0)*x5405))+(((-1.0)*r12*x5419))+(((-1.0)*x5411*x5413))+(((-1.0)*x5408*x5415))+((cj6*x5416)));
evalcond[4]=(((sj6*x5418))+(((-1.0)*x5410*x5414))+(((-1.0)*x5405))+(((-1.0)*r02*sj5*x5417))+(((-1.0)*x5411*x5412))+(((-1.0)*r00*x5407*x5417)));
evalcond[5]=((((-1.0)*sj0))+((sj6*x5413))+(((-1.0)*x5407*x5416))+(((-1.0)*x5411*x5415))+(((-1.0)*cj6*r10*x5414))+(((-1.0)*r12*sj5*x5417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5420=(cj0*sj6);
IkReal x5421=((1.0)*sj5);
IkReal x5422=(cj0*cj6);
CheckValue<IkReal> x5423=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x5421))+(((-1.0)*r00*sj6*x5421))+((cj5*r02)))),-1);
if(!x5423.valid){
continue;
}
CheckValue<IkReal> x5424 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5420))+((r20*x5422)))),(((cj5*r21*x5422))+((cj5*r20*x5420))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5423.value)))+(x5424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5425=IKsin(j4);
IkReal x5426=IKcos(j4);
IkReal x5427=((1.0)*cj0);
IkReal x5428=(cj6*r20);
IkReal x5429=(cj5*sj6);
IkReal x5430=((1.0)*sj6);
IkReal x5431=(r21*sj6);
IkReal x5432=(cj6*r00);
IkReal x5433=((1.0)*cj5*cj6);
IkReal x5434=(r01*x5426);
IkReal x5435=(r11*x5425);
IkReal x5436=((1.0)*x5425);
IkReal x5437=(r11*x5426);
IkReal x5438=(r10*x5426);
IkReal x5439=((1.0)*x5426);
IkReal x5440=(r01*x5425);
IkReal x5441=(sj5*x5436);
evalcond[0]=((((-1.0)*r21*x5426*x5430))+((x5426*x5428))+(((-1.0)*r22*x5441))+(((-1.0)*r21*x5425*x5433))+(((-1.0)*r20*x5429*x5436)));
evalcond[1]=((((-1.0)*x5428*x5436))+(((-1.0)*r22*sj5*x5439))+(((-1.0)*r21*x5426*x5433))+((x5425*x5431))+(((-1.0)*r20*x5429*x5439)));
evalcond[2]=((((-1.0)*r00*x5429*x5436))+(((-1.0)*x5433*x5440))+sj0+((x5426*x5432))+(((-1.0)*r02*x5441))+(((-1.0)*x5430*x5434)));
evalcond[3]=((((-1.0)*x5427))+((cj6*x5438))+(((-1.0)*r12*x5441))+(((-1.0)*x5433*x5435))+(((-1.0)*x5430*x5437))+(((-1.0)*r10*x5429*x5436)));
evalcond[4]=((((-1.0)*x5427))+(((-1.0)*r00*x5429*x5439))+((sj6*x5440))+(((-1.0)*r02*sj5*x5439))+(((-1.0)*x5433*x5434))+(((-1.0)*x5432*x5436)));
evalcond[5]=((((-1.0)*r12*sj5*x5439))+(((-1.0)*sj0))+(((-1.0)*x5429*x5438))+(((-1.0)*cj6*r10*x5436))+(((-1.0)*x5433*x5437))+((sj6*x5435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5442=(cj5*sj0);
IkReal x5443=((1.0)*sj5);
CheckValue<IkReal> x5444 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r20*sj6*x5442))+((cj6*r21*x5442))+((r22*sj0*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5444.valid){
continue;
}
CheckValue<IkReal> x5445=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x5443))+(((-1.0)*cj6*r11*x5443)))),-1);
if(!x5445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5444.value)+(((1.5707963267949)*(x5445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5446=IKsin(j4);
IkReal x5447=IKcos(j4);
IkReal x5448=((1.0)*cj0);
IkReal x5449=(cj6*r20);
IkReal x5450=(cj5*sj6);
IkReal x5451=((1.0)*sj6);
IkReal x5452=(r21*sj6);
IkReal x5453=(cj6*r00);
IkReal x5454=((1.0)*cj5*cj6);
IkReal x5455=(r01*x5447);
IkReal x5456=(r11*x5446);
IkReal x5457=((1.0)*x5446);
IkReal x5458=(r11*x5447);
IkReal x5459=(r10*x5447);
IkReal x5460=((1.0)*x5447);
IkReal x5461=(r01*x5446);
IkReal x5462=(sj5*x5457);
evalcond[0]=((((-1.0)*r20*x5450*x5457))+(((-1.0)*r21*x5447*x5451))+(((-1.0)*r21*x5446*x5454))+((x5447*x5449))+(((-1.0)*r22*x5462)));
evalcond[1]=(((x5446*x5452))+(((-1.0)*r22*sj5*x5460))+(((-1.0)*r20*x5450*x5460))+(((-1.0)*r21*x5447*x5454))+(((-1.0)*x5449*x5457)));
evalcond[2]=((((-1.0)*r00*x5450*x5457))+sj0+(((-1.0)*x5451*x5455))+(((-1.0)*r02*x5462))+((x5447*x5453))+(((-1.0)*x5454*x5461)));
evalcond[3]=((((-1.0)*x5454*x5456))+(((-1.0)*x5451*x5458))+(((-1.0)*x5448))+(((-1.0)*r10*x5450*x5457))+(((-1.0)*r12*x5462))+((cj6*x5459)));
evalcond[4]=((((-1.0)*r00*x5450*x5460))+(((-1.0)*x5454*x5455))+(((-1.0)*x5448))+(((-1.0)*r02*sj5*x5460))+((sj6*x5461))+(((-1.0)*x5453*x5457)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5454*x5458))+(((-1.0)*r12*sj5*x5460))+((sj6*x5456))+(((-1.0)*x5450*x5459))+(((-1.0)*cj6*r10*x5457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5463=((0.01)*cj5);
IkReal x5464=(cj6*r11);
IkReal x5465=((1.0)*cj5);
IkReal x5466=(r20*sj6);
IkReal x5467=((0.01)*sj5);
IkReal x5468=(cj6*r01);
IkReal x5469=((0.37429)*cj5);
IkReal x5470=((0.37429)*sj5);
IkReal x5471=(cj6*r21);
IkReal x5472=(r10*sj5*sj6);
IkReal x5473=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.069)+((r22*x5467))+((r22*x5469))+((x5463*x5471))+(((-1.0)*x5466*x5470))+(((-1.0)*x5470*x5471))+(((-1.0)*pz))+((x5463*x5466)));
evalcond[2]=((((-1.0)*x5468*x5470))+((r02*x5469))+((r02*x5467))+((r00*sj6*x5463))+(((-0.29542)*cj0))+(((-1.0)*px))+(((-1.0)*r00*sj6*x5470))+((x5463*x5468)));
evalcond[3]=((((-1.0)*r10*sj6*x5470))+((r10*sj6*x5463))+((r12*x5467))+((r12*x5469))+(((-0.29542)*sj0))+(((-1.0)*py))+((x5463*x5464))+(((-1.0)*x5464*x5470)));
evalcond[4]=((1.0)+((sj5*x5466))+((sj5*x5471))+(((-1.0)*r22*x5465)));
evalcond[5]=(x5472+((sj5*x5464))+(((-1.0)*r12*x5465)));
evalcond[6]=(x5473+((sj5*x5468))+(((-1.0)*r02*x5465)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5474=(cj0*sj6);
IkReal x5475=(cj0*cj6);
IkReal x5476=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x5476;
j4eval[1]=((IKabs((((cj5*r21*x5475))+((cj0*r22*sj5))+((cj5*r20*x5474)))))+(IKabs((((r20*x5475))+(((-1.0)*r21*x5474))))));
j4eval[2]=IKsign(x5476);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5477=cj5*cj5;
IkReal x5478=cj6*cj6;
IkReal x5479=(r00*r20);
IkReal x5480=(r02*r22);
IkReal x5481=(r22*sj5);
IkReal x5482=(cj6*r21);
IkReal x5483=(r00*sj6);
IkReal x5484=(r20*sj6);
IkReal x5485=(cj6*r01);
IkReal x5486=(cj0*cj5);
IkReal x5487=((1.0)*x5477);
IkReal x5488=(cj5*r02*sj5);
IkReal x5489=(r01*r21*x5478);
IkReal x5490=(((x5477*x5489))+((x5477*x5479))+x5480+((x5482*x5488))+(((-1.0)*x5482*x5483))+((r01*r21))+((x5484*x5488))+(((-1.0)*x5478*x5479*x5487))+(((-1.0)*x5484*x5485))+((cj5*x5481*x5485))+((cj5*x5481*x5483))+((x5477*x5482*x5483))+((x5477*x5484*x5485))+((x5478*x5479))+(((-1.0)*x5489))+(((-1.0)*x5480*x5487)));
j4eval[0]=x5490;
j4eval[1]=IKsign(x5490);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x5482*x5486))+((cj0*x5481))+((x5484*x5486))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5491=cj6*cj6;
IkReal x5492=cj5*cj5;
IkReal x5493=(r12*sj5);
IkReal x5494=(r22*sj5);
IkReal x5495=((1.0)*r11);
IkReal x5496=(r20*sj0);
IkReal x5497=(r10*r20);
IkReal x5498=(cj5*sj6);
IkReal x5499=(cj6*r10);
IkReal x5500=(r12*r22);
IkReal x5501=(cj5*cj6*r21);
IkReal x5502=(r21*x5491);
IkReal x5503=(cj6*r20*sj6);
IkReal x5504=(r11*x5492);
IkReal x5505=((1.0)*r21*sj6);
IkReal x5506=((1.0)*x5492);
IkReal x5507=(x5500+(((-1.0)*x5491*x5497*x5506))+(((-1.0)*x5500*x5506))+((r11*r21))+((r21*sj6*x5492*x5499))+((r20*x5493*x5498))+((x5492*x5497))+((x5493*x5501))+((x5491*x5497))+((x5503*x5504))+((x5502*x5504))+((cj5*cj6*r11*x5494))+(((-1.0)*x5499*x5505))+(((-1.0)*x5495*x5502))+(((-1.0)*x5495*x5503))+((r10*x5494*x5498)));
j4eval[0]=x5507;
j4eval[1]=IKsign(x5507);
j4eval[2]=((IKabs((((sj0*x5501))+((x5496*x5498))+((sj0*x5494)))))+(IKabs(((((-1.0)*sj0*x5505))+((cj6*x5496))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5508=((1.0)*cj5);
IkReal x5509=((0.01)*cj5);
IkReal x5510=(cj6*r11);
IkReal x5511=(r20*sj6);
IkReal x5512=((0.01)*sj5);
IkReal x5513=(cj6*r01);
IkReal x5514=((0.37429)*cj5);
IkReal x5515=((0.37429)*sj5);
IkReal x5516=(cj6*r21);
IkReal x5517=(r10*sj5*sj6);
IkReal x5518=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+((x5509*x5516))+((x5509*x5511))+(((-1.0)*x5511*x5515))+(((-1.0)*x5515*x5516))+(((-1.0)*pz))+((r22*x5512))+((r22*x5514)));
evalcond[2]=((-0.29542)+(((-1.0)*x5513*x5515))+((r02*x5512))+((r02*x5514))+((x5509*x5513))+((r00*sj6*x5509))+(((-1.0)*px))+(((-1.0)*r00*sj6*x5515)));
evalcond[3]=((((-1.0)*r10*sj6*x5515))+(((-1.0)*x5510*x5515))+((x5509*x5510))+((r12*x5514))+((r12*x5512))+(((-1.0)*py))+((r10*sj6*x5509)));
evalcond[4]=((1.0)+((sj5*x5511))+((sj5*x5516))+(((-1.0)*r22*x5508)));
evalcond[5]=(x5517+((sj5*x5510))+(((-1.0)*r12*x5508)));
evalcond[6]=(x5518+((sj5*x5513))+(((-1.0)*r02*x5508)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5519=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x5519;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5519);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5520=((1.0)*sj5);
IkReal x5521=(((cj5*r22))+(((-1.0)*r20*sj6*x5520))+(((-1.0)*cj6*r21*x5520)));
j4eval[0]=x5521;
j4eval[1]=IKsign(x5521);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5522=cj6*cj6;
IkReal x5523=r01*r01;
IkReal x5524=cj5*cj5;
IkReal x5525=r00*r00;
IkReal x5526=r02*r02;
IkReal x5527=(cj6*r00);
IkReal x5528=(r02*sj5);
IkReal x5529=(cj5*cj6*r01);
IkReal x5530=((2.0)*r01*sj6);
IkReal x5531=(cj5*r00*sj6);
IkReal x5532=((1.0)*x5524);
IkReal x5533=(x5522*x5525);
IkReal x5534=(x5522*x5523);
IkReal x5535=(x5523+x5526+x5533+(((-1.0)*x5527*x5530))+(((-1.0)*x5526*x5532))+(((2.0)*x5528*x5529))+(((2.0)*x5528*x5531))+(((-1.0)*x5534))+((x5524*x5525))+((x5524*x5527*x5530))+(((-1.0)*x5532*x5533))+((x5524*x5534)));
j4eval[0]=x5535;
j4eval[1]=((IKabs((x5528+x5529+x5531)))+(IKabs((x5527+(((-1.0)*r01*sj6))))));
j4eval[2]=IKsign(x5535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5536=cj6*cj6;
IkReal x5537=r01*r01;
IkReal x5538=cj5*cj5;
IkReal x5539=r00*r00;
IkReal x5540=r02*r02;
IkReal x5541=(cj6*r00);
IkReal x5542=((2.0)*r01);
IkReal x5543=(cj5*cj6);
IkReal x5544=(r02*sj5);
IkReal x5545=(cj5*r00*sj6);
IkReal x5546=(x5538*x5539);
IkReal x5547=(x5536*x5537);
CheckValue<IkReal> x5548 = IKatan2WithCheck(IkReal((x5541+(((-1.0)*r01*sj6)))),(x5544+x5545+((r01*x5543))),IKFAST_ATAN2_MAGTHRESH);
if(!x5548.valid){
continue;
}
CheckValue<IkReal> x5549=IKPowWithIntegerCheck(IKsign((((x5536*x5539))+((x5538*x5547))+((x5542*x5543*x5544))+x5537+x5540+x5546+(((-1.0)*sj6*x5541*x5542))+(((-1.0)*x5536*x5546))+((sj6*x5538*x5541*x5542))+(((-1.0)*x5538*x5540))+(((2.0)*x5544*x5545))+(((-1.0)*x5547)))),-1);
if(!x5549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5548.value)+(((1.5707963267949)*(x5549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5550=IKsin(j4);
IkReal x5551=IKcos(j4);
IkReal x5552=(cj5*cj6);
IkReal x5553=(r11*sj6);
IkReal x5554=(cj6*r20);
IkReal x5555=(cj6*r10);
IkReal x5556=(cj5*sj6);
IkReal x5557=(r21*sj6);
IkReal x5558=(cj6*r00);
IkReal x5559=(r01*sj6);
IkReal x5560=((1.0)*x5551);
IkReal x5561=((1.0)*x5550);
IkReal x5562=(sj5*x5561);
evalcond[0]=((((-1.0)*x5557*x5560))+(((-1.0)*r22*x5562))+((x5551*x5554))+(((-1.0)*r21*x5552*x5561))+(((-1.0)*r20*x5556*x5561)));
evalcond[1]=((((-1.0)*r00*x5556*x5561))+((x5551*x5558))+(((-1.0)*r02*x5562))+(((-1.0)*r01*x5552*x5561))+(((-1.0)*x5559*x5560)));
evalcond[2]=((((-1.0)*r22*sj5*x5560))+(((-1.0)*x5554*x5561))+(((-1.0)*r21*x5552*x5560))+(((-1.0)*r20*x5556*x5560))+((x5550*x5557)));
evalcond[3]=((((-1.0)*x5555*x5561))+(((-1.0)*r11*x5552*x5560))+(((-1.0)*r12*sj5*x5560))+((x5550*x5553))+(((-1.0)*r10*x5556*x5560)));
evalcond[4]=((1.0)+(((-1.0)*r12*x5562))+((x5551*x5555))+(((-1.0)*r11*x5552*x5561))+(((-1.0)*x5553*x5560))+(((-1.0)*r10*x5556*x5561)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x5560))+(((-1.0)*r00*x5556*x5560))+(((-1.0)*r01*x5552*x5560))+(((-1.0)*x5558*x5561))+((x5550*x5559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5563=((1.0)*sj5);
CheckValue<IkReal> x5564 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x5564.valid){
continue;
}
CheckValue<IkReal> x5565=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x5563))+(((-1.0)*cj6*r21*x5563)))),-1);
if(!x5565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5564.value)+(((1.5707963267949)*(x5565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5566=IKsin(j4);
IkReal x5567=IKcos(j4);
IkReal x5568=(cj5*cj6);
IkReal x5569=(r11*sj6);
IkReal x5570=(cj6*r20);
IkReal x5571=(cj6*r10);
IkReal x5572=(cj5*sj6);
IkReal x5573=(r21*sj6);
IkReal x5574=(cj6*r00);
IkReal x5575=(r01*sj6);
IkReal x5576=((1.0)*x5567);
IkReal x5577=((1.0)*x5566);
IkReal x5578=(sj5*x5577);
evalcond[0]=((((-1.0)*r20*x5572*x5577))+(((-1.0)*x5573*x5576))+((x5567*x5570))+(((-1.0)*r21*x5568*x5577))+(((-1.0)*r22*x5578)));
evalcond[1]=((((-1.0)*r00*x5572*x5577))+(((-1.0)*r02*x5578))+(((-1.0)*r01*x5568*x5577))+((x5567*x5574))+(((-1.0)*x5575*x5576)));
evalcond[2]=((((-1.0)*r22*sj5*x5576))+((x5566*x5573))+(((-1.0)*x5570*x5577))+(((-1.0)*r20*x5572*x5576))+(((-1.0)*r21*x5568*x5576)));
evalcond[3]=(((x5566*x5569))+(((-1.0)*r10*x5572*x5576))+(((-1.0)*x5571*x5577))+(((-1.0)*r11*x5568*x5576))+(((-1.0)*r12*sj5*x5576)));
evalcond[4]=((1.0)+(((-1.0)*r12*x5578))+(((-1.0)*r10*x5572*x5577))+(((-1.0)*x5569*x5576))+(((-1.0)*r11*x5568*x5577))+((x5567*x5571)));
evalcond[5]=((1.0)+((x5566*x5575))+(((-1.0)*r00*x5572*x5576))+(((-1.0)*r01*x5568*x5576))+(((-1.0)*x5574*x5577))+(((-1.0)*r02*sj5*x5576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5579 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5579.valid){
continue;
}
CheckValue<IkReal> x5580=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x5580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5579.value)+(((1.5707963267949)*(x5580.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5581=IKsin(j4);
IkReal x5582=IKcos(j4);
IkReal x5583=(cj5*cj6);
IkReal x5584=(r11*sj6);
IkReal x5585=(cj6*r20);
IkReal x5586=(cj6*r10);
IkReal x5587=(cj5*sj6);
IkReal x5588=(r21*sj6);
IkReal x5589=(cj6*r00);
IkReal x5590=(r01*sj6);
IkReal x5591=((1.0)*x5582);
IkReal x5592=((1.0)*x5581);
IkReal x5593=(sj5*x5592);
evalcond[0]=((((-1.0)*x5588*x5591))+(((-1.0)*r21*x5583*x5592))+(((-1.0)*r20*x5587*x5592))+(((-1.0)*r22*x5593))+((x5582*x5585)));
evalcond[1]=((((-1.0)*x5590*x5591))+(((-1.0)*r02*x5593))+(((-1.0)*r00*x5587*x5592))+(((-1.0)*r01*x5583*x5592))+((x5582*x5589)));
evalcond[2]=((((-1.0)*r21*x5583*x5591))+(((-1.0)*x5585*x5592))+(((-1.0)*r22*sj5*x5591))+(((-1.0)*r20*x5587*x5591))+((x5581*x5588)));
evalcond[3]=((((-1.0)*x5586*x5592))+(((-1.0)*r12*sj5*x5591))+(((-1.0)*r11*x5583*x5591))+(((-1.0)*r10*x5587*x5591))+((x5581*x5584)));
evalcond[4]=((1.0)+(((-1.0)*r12*x5593))+(((-1.0)*x5584*x5591))+(((-1.0)*r11*x5583*x5592))+(((-1.0)*r10*x5587*x5592))+((x5582*x5586)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x5591))+(((-1.0)*r00*x5587*x5591))+(((-1.0)*r01*x5583*x5591))+((x5581*x5590))+(((-1.0)*x5589*x5592)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5594=((1.0)*cj5);
IkReal x5595=((0.01)*cj5);
IkReal x5596=(cj6*r11);
IkReal x5597=(r20*sj6);
IkReal x5598=((0.01)*sj5);
IkReal x5599=(cj6*r01);
IkReal x5600=((0.37429)*cj5);
IkReal x5601=((0.37429)*sj5);
IkReal x5602=(cj6*r21);
IkReal x5603=(r10*sj5*sj6);
IkReal x5604=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((x5595*x5597))+(((-1.0)*x5597*x5601))+(((-1.0)*pz))+(((-1.0)*x5601*x5602))+((x5595*x5602))+((r22*x5598))+((r22*x5600)));
evalcond[2]=((0.29542)+(((-1.0)*r00*sj6*x5601))+((x5595*x5599))+((r02*x5600))+((r02*x5598))+(((-1.0)*x5599*x5601))+((r00*sj6*x5595))+(((-1.0)*px)));
evalcond[3]=(((x5595*x5596))+(((-1.0)*x5596*x5601))+((r12*x5598))+((r12*x5600))+(((-1.0)*py))+(((-1.0)*r10*sj6*x5601))+((r10*sj6*x5595)));
evalcond[4]=((1.0)+((sj5*x5597))+(((-1.0)*r22*x5594))+((sj5*x5602)));
evalcond[5]=(x5603+(((-1.0)*r12*x5594))+((sj5*x5596)));
evalcond[6]=(x5604+(((-1.0)*r02*x5594))+((sj5*x5599)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5605=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5605;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x5605);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5606=((1.0)*sj6);
IkReal x5607=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x5606))+((cj5*r02)));
j4eval[0]=x5607;
j4eval[1]=IKsign(x5607);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x5606))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5608=cj6*cj6;
IkReal x5609=cj5*cj5;
IkReal x5610=r00*r00;
IkReal x5611=r01*r01;
IkReal x5612=r02*r02;
IkReal x5613=(cj6*r00);
IkReal x5614=(cj5*cj6*r01);
IkReal x5615=((2.0)*r02*sj5);
IkReal x5616=((1.0)*x5608);
IkReal x5617=((2.0)*r01*sj6);
IkReal x5618=(cj5*r00*sj6);
IkReal x5619=(x5609*x5610);
IkReal x5620=(((x5613*x5617))+(((-1.0)*x5612))+(((-1.0)*x5619))+(((-1.0)*x5611))+((x5608*x5611))+((x5608*x5619))+((x5609*x5612))+(((-1.0)*x5609*x5613*x5617))+(((-1.0)*x5609*x5611*x5616))+(((-1.0)*x5615*x5618))+(((-1.0)*x5614*x5615))+(((-1.0)*x5610*x5616)));
j4eval[0]=x5620;
j4eval[1]=((IKabs((x5613+(((-1.0)*r01*sj6)))))+(IKabs((x5618+x5614+((r02*sj5))))));
j4eval[2]=IKsign(x5620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5621=cj6*cj6;
IkReal x5622=cj5*cj5;
IkReal x5623=r00*r00;
IkReal x5624=r01*r01;
IkReal x5625=r02*r02;
IkReal x5626=(cj6*r00);
IkReal x5627=(cj5*cj6*r01);
IkReal x5628=((2.0)*r02*sj5);
IkReal x5629=((1.0)*x5621);
IkReal x5630=((2.0)*r01*sj6);
IkReal x5631=(cj5*r00*sj6);
IkReal x5632=(x5622*x5623);
CheckValue<IkReal> x5633=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5628*x5631))+(((-1.0)*x5627*x5628))+((x5626*x5630))+((x5622*x5625))+(((-1.0)*x5632))+((x5621*x5624))+(((-1.0)*x5623*x5629))+(((-1.0)*x5622*x5624*x5629))+(((-1.0)*x5622*x5626*x5630))+(((-1.0)*x5625))+(((-1.0)*x5624))+((x5621*x5632)))),-1);
if(!x5633.valid){
continue;
}
CheckValue<IkReal> x5634 = IKatan2WithCheck(IkReal((x5626+(((-1.0)*r01*sj6)))),(x5627+x5631+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5633.value)))+(x5634.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5635=IKsin(j4);
IkReal x5636=IKcos(j4);
IkReal x5637=(cj5*cj6);
IkReal x5638=(r11*sj6);
IkReal x5639=(cj6*r20);
IkReal x5640=(cj6*r10);
IkReal x5641=(cj5*sj6);
IkReal x5642=(r21*sj6);
IkReal x5643=(cj6*r00);
IkReal x5644=(r01*sj6);
IkReal x5645=((1.0)*x5636);
IkReal x5646=((1.0)*x5635);
IkReal x5647=(sj5*x5646);
evalcond[0]=((((-1.0)*r22*x5647))+(((-1.0)*x5642*x5645))+(((-1.0)*r20*x5641*x5646))+(((-1.0)*r21*x5637*x5646))+((x5636*x5639)));
evalcond[1]=((((-1.0)*r01*x5637*x5646))+(((-1.0)*x5644*x5645))+(((-1.0)*r02*x5647))+((x5636*x5643))+(((-1.0)*r00*x5641*x5646)));
evalcond[2]=((((-1.0)*r20*x5641*x5645))+(((-1.0)*r21*x5637*x5645))+((x5635*x5642))+(((-1.0)*r22*sj5*x5645))+(((-1.0)*x5639*x5646)));
evalcond[3]=((((-1.0)*r11*x5637*x5645))+(((-1.0)*r10*x5641*x5645))+(((-1.0)*x5640*x5646))+(((-1.0)*r12*sj5*x5645))+((x5635*x5638)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x5637*x5646))+(((-1.0)*r12*x5647))+(((-1.0)*x5638*x5645))+(((-1.0)*r10*x5641*x5646))+((x5636*x5640)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x5637*x5645))+((x5635*x5644))+(((-1.0)*x5643*x5646))+(((-1.0)*r02*sj5*x5645))+(((-1.0)*r00*x5641*x5645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5648=((1.0)*sj6);
CheckValue<IkReal> x5649 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5648))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5649.valid){
continue;
}
CheckValue<IkReal> x5650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x5648))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x5650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5649.value)+(((1.5707963267949)*(x5650.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5651=IKsin(j4);
IkReal x5652=IKcos(j4);
IkReal x5653=(cj5*cj6);
IkReal x5654=(r11*sj6);
IkReal x5655=(cj6*r20);
IkReal x5656=(cj6*r10);
IkReal x5657=(cj5*sj6);
IkReal x5658=(r21*sj6);
IkReal x5659=(cj6*r00);
IkReal x5660=(r01*sj6);
IkReal x5661=((1.0)*x5652);
IkReal x5662=((1.0)*x5651);
IkReal x5663=(sj5*x5662);
evalcond[0]=((((-1.0)*r22*x5663))+((x5652*x5655))+(((-1.0)*r20*x5657*x5662))+(((-1.0)*r21*x5653*x5662))+(((-1.0)*x5658*x5661)));
evalcond[1]=((((-1.0)*r02*x5663))+(((-1.0)*r01*x5653*x5662))+((x5652*x5659))+(((-1.0)*r00*x5657*x5662))+(((-1.0)*x5660*x5661)));
evalcond[2]=((((-1.0)*r22*sj5*x5661))+((x5651*x5658))+(((-1.0)*x5655*x5662))+(((-1.0)*r20*x5657*x5661))+(((-1.0)*r21*x5653*x5661)));
evalcond[3]=((((-1.0)*x5656*x5662))+((x5651*x5654))+(((-1.0)*r12*sj5*x5661))+(((-1.0)*r11*x5653*x5661))+(((-1.0)*r10*x5657*x5661)));
evalcond[4]=((-1.0)+((x5652*x5656))+(((-1.0)*r11*x5653*x5662))+(((-1.0)*r10*x5657*x5662))+(((-1.0)*x5654*x5661))+(((-1.0)*r12*x5663)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x5653*x5661))+(((-1.0)*x5659*x5662))+(((-1.0)*r00*x5657*x5661))+((x5651*x5660))+(((-1.0)*r02*sj5*x5661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5664=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5664.valid){
continue;
}
CheckValue<IkReal> x5665 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x5665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5664.value)))+(x5665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5666=IKsin(j4);
IkReal x5667=IKcos(j4);
IkReal x5668=(cj5*cj6);
IkReal x5669=(r11*sj6);
IkReal x5670=(cj6*r20);
IkReal x5671=(cj6*r10);
IkReal x5672=(cj5*sj6);
IkReal x5673=(r21*sj6);
IkReal x5674=(cj6*r00);
IkReal x5675=(r01*sj6);
IkReal x5676=((1.0)*x5667);
IkReal x5677=((1.0)*x5666);
IkReal x5678=(sj5*x5677);
evalcond[0]=((((-1.0)*r22*x5678))+(((-1.0)*r20*x5672*x5677))+(((-1.0)*r21*x5668*x5677))+((x5667*x5670))+(((-1.0)*x5673*x5676)));
evalcond[1]=((((-1.0)*r01*x5668*x5677))+((x5667*x5674))+(((-1.0)*r00*x5672*x5677))+(((-1.0)*x5675*x5676))+(((-1.0)*r02*x5678)));
evalcond[2]=((((-1.0)*x5670*x5677))+(((-1.0)*r20*x5672*x5676))+(((-1.0)*r21*x5668*x5676))+(((-1.0)*r22*sj5*x5676))+((x5666*x5673)));
evalcond[3]=((((-1.0)*r12*sj5*x5676))+(((-1.0)*x5671*x5677))+(((-1.0)*r10*x5672*x5676))+((x5666*x5669))+(((-1.0)*r11*x5668*x5676)));
evalcond[4]=((-1.0)+(((-1.0)*x5669*x5676))+(((-1.0)*r12*x5678))+(((-1.0)*r10*x5672*x5677))+((x5667*x5671))+(((-1.0)*r11*x5668*x5677)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x5668*x5676))+(((-1.0)*r02*sj5*x5676))+((x5666*x5675))+(((-1.0)*r00*x5672*x5676))+(((-1.0)*x5674*x5677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5679=((1.0)*cj5);
IkReal x5680=((0.01)*cj5);
IkReal x5681=(cj6*r11);
IkReal x5682=(r20*sj6);
IkReal x5683=((0.01)*sj5);
IkReal x5684=(cj6*r01);
IkReal x5685=((0.37429)*cj5);
IkReal x5686=((0.37429)*sj5);
IkReal x5687=(cj6*r21);
IkReal x5688=(r10*sj5*sj6);
IkReal x5689=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x5686*x5687))+((r22*x5685))+((r22*x5683))+((x5680*x5687))+((x5680*x5682))+(((-1.0)*pz))+(((-1.0)*x5682*x5686)));
evalcond[2]=(((x5680*x5684))+(((-1.0)*x5684*x5686))+((r02*x5683))+((r02*x5685))+(((-1.0)*px))+(((-1.0)*r00*sj6*x5686))+((r00*sj6*x5680)));
evalcond[3]=((-0.29542)+(((-1.0)*x5681*x5686))+((x5680*x5681))+(((-1.0)*py))+((r12*x5685))+((r12*x5683))+((r10*sj6*x5680))+(((-1.0)*r10*sj6*x5686)));
evalcond[4]=((1.0)+(((-1.0)*r22*x5679))+((sj5*x5682))+((sj5*x5687)));
evalcond[5]=(x5688+(((-1.0)*r12*x5679))+((sj5*x5681)));
evalcond[6]=(x5689+((sj5*x5684))+(((-1.0)*r02*x5679)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5690=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x5690;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x5690);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5691=((1.0)*sj5);
IkReal x5692=(((cj5*r22))+(((-1.0)*r20*sj6*x5691))+(((-1.0)*cj6*r21*x5691)));
j4eval[0]=x5692;
j4eval[1]=IKsign(x5692);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x5693=r11*r11;
IkReal x5694=cj5*cj5;
IkReal x5695=cj6*cj6;
IkReal x5696=r10*r10;
IkReal x5697=r12*r12;
IkReal x5698=(r12*sj5);
IkReal x5699=(cj6*r10);
IkReal x5700=((1.0)*x5695);
IkReal x5701=(cj5*cj6*r11);
IkReal x5702=(cj5*r10*sj6);
IkReal x5703=((2.0)*r11*sj6);
IkReal x5704=(x5694*x5696);
IkReal x5705=(x5693+x5697+((x5695*x5696))+(((-1.0)*x5693*x5700))+(((-1.0)*x5700*x5704))+(((-1.0)*x5694*x5697))+(((-1.0)*x5699*x5703))+(((2.0)*x5698*x5702))+(((2.0)*x5698*x5701))+((x5693*x5694*x5695))+((x5694*x5699*x5703))+x5704);
j4eval[0]=x5705;
j4eval[1]=IKsign(x5705);
j4eval[2]=((IKabs((x5698+x5701+x5702)))+(IKabs((x5699+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5706=r11*r11;
IkReal x5707=cj5*cj5;
IkReal x5708=cj6*cj6;
IkReal x5709=r10*r10;
IkReal x5710=r12*r12;
IkReal x5711=(r10*sj6);
IkReal x5712=(r12*sj5);
IkReal x5713=((1.0)*x5708);
IkReal x5714=(cj5*cj6*r11);
IkReal x5715=((2.0)*cj6*r11);
IkReal x5716=(x5707*x5709);
CheckValue<IkReal> x5717=IKPowWithIntegerCheck(IKsign(((((2.0)*cj5*x5711*x5712))+((x5706*x5707*x5708))+((x5708*x5709))+(((-1.0)*x5713*x5716))+(((2.0)*x5712*x5714))+(((-1.0)*x5706*x5713))+(((-1.0)*x5711*x5715))+(((-1.0)*x5707*x5710))+x5706+x5716+x5710+((x5707*x5711*x5715)))),-1);
if(!x5717.valid){
continue;
}
CheckValue<IkReal> x5718 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x5711))+x5714+x5712),IKFAST_ATAN2_MAGTHRESH);
if(!x5718.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5717.value)))+(x5718.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5719=IKsin(j4);
IkReal x5720=IKcos(j4);
IkReal x5721=(cj5*cj6);
IkReal x5722=(r11*sj6);
IkReal x5723=(cj6*r20);
IkReal x5724=(cj6*r10);
IkReal x5725=(cj5*sj6);
IkReal x5726=(r01*sj6);
IkReal x5727=(r21*sj6);
IkReal x5728=(cj6*r00);
IkReal x5729=((1.0)*x5720);
IkReal x5730=((1.0)*x5719);
IkReal x5731=(sj5*x5730);
evalcond[0]=((((-1.0)*x5727*x5729))+(((-1.0)*r20*x5725*x5730))+(((-1.0)*r22*x5731))+(((-1.0)*r21*x5721*x5730))+((x5720*x5723)));
evalcond[1]=((((-1.0)*r11*x5721*x5730))+(((-1.0)*r10*x5725*x5730))+(((-1.0)*r12*x5731))+(((-1.0)*x5722*x5729))+((x5720*x5724)));
evalcond[2]=((((-1.0)*r22*sj5*x5729))+(((-1.0)*r20*x5725*x5729))+((x5719*x5727))+(((-1.0)*r21*x5721*x5729))+(((-1.0)*x5723*x5730)));
evalcond[3]=((((-1.0)*x5728*x5730))+(((-1.0)*r01*x5721*x5729))+(((-1.0)*r00*x5725*x5729))+((x5719*x5726))+(((-1.0)*r02*sj5*x5729)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x5721*x5730))+(((-1.0)*r00*x5725*x5730))+(((-1.0)*r02*x5731))+(((-1.0)*x5726*x5729))+((x5720*x5728)));
evalcond[5]=((1.0)+(((-1.0)*x5724*x5730))+(((-1.0)*r12*sj5*x5729))+(((-1.0)*r10*x5725*x5729))+((x5719*x5722))+(((-1.0)*r11*x5721*x5729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5732=((1.0)*sj5);
CheckValue<IkReal> x5733 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5733.valid){
continue;
}
CheckValue<IkReal> x5734=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj6*x5732))+((cj5*r22))+(((-1.0)*cj6*r21*x5732)))),-1);
if(!x5734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5733.value)+(((1.5707963267949)*(x5734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5735=IKsin(j4);
IkReal x5736=IKcos(j4);
IkReal x5737=(cj5*cj6);
IkReal x5738=(r11*sj6);
IkReal x5739=(cj6*r20);
IkReal x5740=(cj6*r10);
IkReal x5741=(cj5*sj6);
IkReal x5742=(r01*sj6);
IkReal x5743=(r21*sj6);
IkReal x5744=(cj6*r00);
IkReal x5745=((1.0)*x5736);
IkReal x5746=((1.0)*x5735);
IkReal x5747=(sj5*x5746);
evalcond[0]=((((-1.0)*r20*x5741*x5746))+(((-1.0)*r21*x5737*x5746))+((x5736*x5739))+(((-1.0)*r22*x5747))+(((-1.0)*x5743*x5745)));
evalcond[1]=(((x5736*x5740))+(((-1.0)*r11*x5737*x5746))+(((-1.0)*x5738*x5745))+(((-1.0)*r12*x5747))+(((-1.0)*r10*x5741*x5746)));
evalcond[2]=((((-1.0)*r20*x5741*x5745))+(((-1.0)*r21*x5737*x5745))+((x5735*x5743))+(((-1.0)*r22*sj5*x5745))+(((-1.0)*x5739*x5746)));
evalcond[3]=((((-1.0)*r01*x5737*x5745))+((x5735*x5742))+(((-1.0)*r00*x5741*x5745))+(((-1.0)*r02*sj5*x5745))+(((-1.0)*x5744*x5746)));
evalcond[4]=((-1.0)+((x5736*x5744))+(((-1.0)*r01*x5737*x5746))+(((-1.0)*r02*x5747))+(((-1.0)*r00*x5741*x5746))+(((-1.0)*x5742*x5745)));
evalcond[5]=((1.0)+(((-1.0)*r11*x5737*x5745))+((x5735*x5738))+(((-1.0)*r12*sj5*x5745))+(((-1.0)*x5740*x5746))+(((-1.0)*r10*x5741*x5745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5748 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5748.valid){
continue;
}
CheckValue<IkReal> x5749=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x5749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5748.value)+(((1.5707963267949)*(x5749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5750=IKsin(j4);
IkReal x5751=IKcos(j4);
IkReal x5752=(cj5*cj6);
IkReal x5753=(r11*sj6);
IkReal x5754=(cj6*r20);
IkReal x5755=(cj6*r10);
IkReal x5756=(cj5*sj6);
IkReal x5757=(r01*sj6);
IkReal x5758=(r21*sj6);
IkReal x5759=(cj6*r00);
IkReal x5760=((1.0)*x5751);
IkReal x5761=((1.0)*x5750);
IkReal x5762=(sj5*x5761);
evalcond[0]=((((-1.0)*x5758*x5760))+((x5751*x5754))+(((-1.0)*r22*x5762))+(((-1.0)*r21*x5752*x5761))+(((-1.0)*r20*x5756*x5761)));
evalcond[1]=((((-1.0)*r10*x5756*x5761))+(((-1.0)*r11*x5752*x5761))+(((-1.0)*r12*x5762))+((x5751*x5755))+(((-1.0)*x5753*x5760)));
evalcond[2]=(((x5750*x5758))+(((-1.0)*r22*sj5*x5760))+(((-1.0)*r21*x5752*x5760))+(((-1.0)*x5754*x5761))+(((-1.0)*r20*x5756*x5760)));
evalcond[3]=(((x5750*x5757))+(((-1.0)*r00*x5756*x5760))+(((-1.0)*r02*sj5*x5760))+(((-1.0)*x5759*x5761))+(((-1.0)*r01*x5752*x5760)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x5756*x5761))+(((-1.0)*x5757*x5760))+((x5751*x5759))+(((-1.0)*r02*x5762))+(((-1.0)*r01*x5752*x5761)));
evalcond[5]=((1.0)+((x5750*x5753))+(((-1.0)*r10*x5756*x5760))+(((-1.0)*r11*x5752*x5760))+(((-1.0)*x5755*x5761))+(((-1.0)*r12*sj5*x5760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5763=((1.0)*cj5);
IkReal x5764=((0.01)*cj5);
IkReal x5765=(cj6*r11);
IkReal x5766=(r20*sj6);
IkReal x5767=((0.01)*sj5);
IkReal x5768=(cj6*r01);
IkReal x5769=((0.37429)*cj5);
IkReal x5770=((0.37429)*sj5);
IkReal x5771=(cj6*r21);
IkReal x5772=(r10*sj5*sj6);
IkReal x5773=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x5766*x5770))+((r22*x5769))+((r22*x5767))+(((-1.0)*x5770*x5771))+((x5764*x5766))+(((-1.0)*pz))+((x5764*x5771)));
evalcond[2]=(((r00*sj6*x5764))+(((-1.0)*r00*sj6*x5770))+((x5764*x5768))+(((-1.0)*px))+((r02*x5769))+((r02*x5767))+(((-1.0)*x5768*x5770)));
evalcond[3]=((0.29542)+(((-1.0)*r10*sj6*x5770))+((x5764*x5765))+(((-1.0)*py))+((r12*x5769))+((r12*x5767))+((r10*sj6*x5764))+(((-1.0)*x5765*x5770)));
evalcond[4]=((1.0)+((sj5*x5771))+((sj5*x5766))+(((-1.0)*r22*x5763)));
evalcond[5]=((((-1.0)*r12*x5763))+((sj5*x5765))+x5772);
evalcond[6]=(((sj5*x5768))+(((-1.0)*r02*x5763))+x5773);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5774=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5774;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5774);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5775=((1.0)*sj6);
IkReal x5776=(((cj5*r12))+(((-1.0)*r10*sj5*x5775))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x5776;
j4eval[1]=IKsign(x5776);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5775))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x5777=cj6*cj6;
IkReal x5778=cj5*cj5;
IkReal x5779=r10*r10;
IkReal x5780=r11*r11;
IkReal x5781=r12*r12;
IkReal x5782=(r10*sj6);
IkReal x5783=(r12*sj5);
IkReal x5784=((2.0)*cj6*r11);
IkReal x5785=((1.0)*x5779);
IkReal x5786=(x5777*x5780);
IkReal x5787=((((-1.0)*x5778*x5782*x5784))+(((-2.0)*cj5*x5782*x5783))+(((-1.0)*cj5*x5783*x5784))+((x5777*x5778*x5779))+((x5782*x5784))+(((-1.0)*x5777*x5785))+((x5778*x5781))+(((-1.0)*x5778*x5785))+(((-1.0)*x5780))+(((-1.0)*x5781))+(((-1.0)*x5778*x5786))+x5786);
j4eval[0]=x5787;
j4eval[1]=((IKabs((((cj5*x5782))+((cj5*cj6*r11))+x5783)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x5787);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5788=cj6*cj6;
IkReal x5789=cj5*cj5;
IkReal x5790=r10*r10;
IkReal x5791=r11*r11;
IkReal x5792=r12*r12;
IkReal x5793=(r10*sj6);
IkReal x5794=(r12*sj5);
IkReal x5795=((2.0)*cj6*r11);
IkReal x5796=(x5788*x5791);
IkReal x5797=(x5789*x5790);
CheckValue<IkReal> x5798=IKPowWithIntegerCheck(IKsign((((x5788*x5797))+((x5793*x5795))+(((-1.0)*x5788*x5790))+(((-1.0)*cj5*x5794*x5795))+((x5789*x5792))+(((-1.0)*x5789*x5796))+(((-1.0)*x5792))+(((-1.0)*x5791))+(((-1.0)*x5797))+(((-2.0)*cj5*x5793*x5794))+x5796+(((-1.0)*x5789*x5793*x5795)))),-1);
if(!x5798.valid){
continue;
}
CheckValue<IkReal> x5799 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*cj6*r11))+((cj5*x5793))+x5794),IKFAST_ATAN2_MAGTHRESH);
if(!x5799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5798.value)))+(x5799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5800=IKsin(j4);
IkReal x5801=IKcos(j4);
IkReal x5802=(cj5*cj6);
IkReal x5803=(r11*sj6);
IkReal x5804=(cj6*r20);
IkReal x5805=(cj6*r10);
IkReal x5806=(cj5*sj6);
IkReal x5807=(r01*sj6);
IkReal x5808=(r21*sj6);
IkReal x5809=(cj6*r00);
IkReal x5810=((1.0)*x5801);
IkReal x5811=((1.0)*x5800);
IkReal x5812=(sj5*x5811);
evalcond[0]=((((-1.0)*r20*x5806*x5811))+(((-1.0)*x5808*x5810))+(((-1.0)*r21*x5802*x5811))+((x5801*x5804))+(((-1.0)*r22*x5812)));
evalcond[1]=((((-1.0)*r12*x5812))+(((-1.0)*x5803*x5810))+(((-1.0)*r10*x5806*x5811))+((x5801*x5805))+(((-1.0)*r11*x5802*x5811)));
evalcond[2]=(((x5800*x5808))+(((-1.0)*r20*x5806*x5810))+(((-1.0)*r22*sj5*x5810))+(((-1.0)*x5804*x5811))+(((-1.0)*r21*x5802*x5810)));
evalcond[3]=(((x5800*x5807))+(((-1.0)*r01*x5802*x5810))+(((-1.0)*r02*sj5*x5810))+(((-1.0)*x5809*x5811))+(((-1.0)*r00*x5806*x5810)));
evalcond[4]=((1.0)+(((-1.0)*r01*x5802*x5811))+(((-1.0)*r02*x5812))+((x5801*x5809))+(((-1.0)*x5807*x5810))+(((-1.0)*r00*x5806*x5811)));
evalcond[5]=((-1.0)+((x5800*x5803))+(((-1.0)*x5805*x5811))+(((-1.0)*r10*x5806*x5810))+(((-1.0)*r12*sj5*x5810))+(((-1.0)*r11*x5802*x5810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5813=((1.0)*sj6);
CheckValue<IkReal> x5814=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x5813))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x5814.valid){
continue;
}
CheckValue<IkReal> x5815 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x5813)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x5815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5814.value)))+(x5815.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5816=IKsin(j4);
IkReal x5817=IKcos(j4);
IkReal x5818=(cj5*cj6);
IkReal x5819=(r11*sj6);
IkReal x5820=(cj6*r20);
IkReal x5821=(cj6*r10);
IkReal x5822=(cj5*sj6);
IkReal x5823=(r01*sj6);
IkReal x5824=(r21*sj6);
IkReal x5825=(cj6*r00);
IkReal x5826=((1.0)*x5817);
IkReal x5827=((1.0)*x5816);
IkReal x5828=(sj5*x5827);
evalcond[0]=((((-1.0)*r22*x5828))+(((-1.0)*r21*x5818*x5827))+(((-1.0)*x5824*x5826))+((x5817*x5820))+(((-1.0)*r20*x5822*x5827)));
evalcond[1]=((((-1.0)*r11*x5818*x5827))+(((-1.0)*r10*x5822*x5827))+(((-1.0)*r12*x5828))+((x5817*x5821))+(((-1.0)*x5819*x5826)));
evalcond[2]=(((x5816*x5824))+(((-1.0)*x5820*x5827))+(((-1.0)*r21*x5818*x5826))+(((-1.0)*r22*sj5*x5826))+(((-1.0)*r20*x5822*x5826)));
evalcond[3]=((((-1.0)*r01*x5818*x5826))+((x5816*x5823))+(((-1.0)*r00*x5822*x5826))+(((-1.0)*x5825*x5827))+(((-1.0)*r02*sj5*x5826)));
evalcond[4]=((1.0)+(((-1.0)*r01*x5818*x5827))+(((-1.0)*r02*x5828))+(((-1.0)*x5823*x5826))+(((-1.0)*r00*x5822*x5827))+((x5817*x5825)));
evalcond[5]=((-1.0)+(((-1.0)*x5821*x5827))+(((-1.0)*r11*x5818*x5826))+(((-1.0)*r12*sj5*x5826))+((x5816*x5819))+(((-1.0)*r10*x5822*x5826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5829=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x5829.valid){
continue;
}
CheckValue<IkReal> x5830 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5829.value)))+(x5830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5831=IKsin(j4);
IkReal x5832=IKcos(j4);
IkReal x5833=(cj5*cj6);
IkReal x5834=(r11*sj6);
IkReal x5835=(cj6*r20);
IkReal x5836=(cj6*r10);
IkReal x5837=(cj5*sj6);
IkReal x5838=(r01*sj6);
IkReal x5839=(r21*sj6);
IkReal x5840=(cj6*r00);
IkReal x5841=((1.0)*x5832);
IkReal x5842=((1.0)*x5831);
IkReal x5843=(sj5*x5842);
evalcond[0]=(((x5832*x5835))+(((-1.0)*r20*x5837*x5842))+(((-1.0)*x5839*x5841))+(((-1.0)*r22*x5843))+(((-1.0)*r21*x5833*x5842)));
evalcond[1]=((((-1.0)*x5834*x5841))+(((-1.0)*r10*x5837*x5842))+((x5832*x5836))+(((-1.0)*r11*x5833*x5842))+(((-1.0)*r12*x5843)));
evalcond[2]=((((-1.0)*r20*x5837*x5841))+((x5831*x5839))+(((-1.0)*r22*sj5*x5841))+(((-1.0)*r21*x5833*x5841))+(((-1.0)*x5835*x5842)));
evalcond[3]=((((-1.0)*x5840*x5842))+((x5831*x5838))+(((-1.0)*r01*x5833*x5841))+(((-1.0)*r02*sj5*x5841))+(((-1.0)*r00*x5837*x5841)));
evalcond[4]=((1.0)+((x5832*x5840))+(((-1.0)*r02*x5843))+(((-1.0)*x5838*x5841))+(((-1.0)*r01*x5833*x5842))+(((-1.0)*r00*x5837*x5842)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x5837*x5841))+((x5831*x5834))+(((-1.0)*r11*x5833*x5841))+(((-1.0)*r12*sj5*x5841))+(((-1.0)*x5836*x5842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5844=cj6*cj6;
IkReal x5845=cj5*cj5;
IkReal x5846=((1.0)*r11);
IkReal x5847=(cj5*sj0);
IkReal x5848=(cj6*r21);
IkReal x5849=(r22*sj5);
IkReal x5850=(r20*sj6);
IkReal x5851=(r12*r22);
IkReal x5852=((1.0)*sj6);
IkReal x5853=(r21*x5844);
IkReal x5854=(r10*x5845);
IkReal x5855=(r11*x5845);
IkReal x5856=(r20*x5844);
IkReal x5857=(cj5*r12*sj5);
CheckValue<IkReal> x5858=IKPowWithIntegerCheck(IKsign((((cj6*x5850*x5855))+(((-1.0)*x5845*x5851))+((r11*r21))+((r10*x5856))+((cj5*cj6*r11*x5849))+(((-1.0)*x5854*x5856))+((x5848*x5857))+(((-1.0)*r10*x5848*x5852))+(((-1.0)*x5846*x5853))+((sj6*x5848*x5854))+((x5850*x5857))+(((-1.0)*cj6*x5846*x5850))+((x5853*x5855))+((cj5*r10*sj6*x5849))+((r20*x5854))+x5851)),-1);
if(!x5858.valid){
continue;
}
CheckValue<IkReal> x5859 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*x5852)))),(((sj0*x5849))+((x5847*x5850))+((x5847*x5848))),IKFAST_ATAN2_MAGTHRESH);
if(!x5859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5858.value)))+(x5859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5860=IKsin(j4);
IkReal x5861=IKcos(j4);
IkReal x5862=(cj5*cj6);
IkReal x5863=(r11*sj6);
IkReal x5864=(cj6*r20);
IkReal x5865=(cj5*sj6);
IkReal x5866=(cj6*r10);
IkReal x5867=(r01*sj6);
IkReal x5868=(r21*sj6);
IkReal x5869=(cj6*r00);
IkReal x5870=((1.0)*x5861);
IkReal x5871=((1.0)*x5860);
IkReal x5872=(sj5*x5871);
evalcond[0]=((((-1.0)*r20*x5865*x5871))+(((-1.0)*r22*x5872))+(((-1.0)*r21*x5862*x5871))+((x5861*x5864))+(((-1.0)*x5868*x5870)));
evalcond[1]=(((x5860*x5868))+(((-1.0)*r22*sj5*x5870))+(((-1.0)*r20*x5865*x5870))+(((-1.0)*r21*x5862*x5870))+(((-1.0)*x5864*x5871)));
evalcond[2]=((((-1.0)*r12*x5872))+cj0+((x5861*x5866))+(((-1.0)*x5863*x5870))+(((-1.0)*r10*x5865*x5871))+(((-1.0)*r11*x5862*x5871)));
evalcond[3]=(((x5860*x5867))+(((-1.0)*r01*x5862*x5870))+cj0+(((-1.0)*r02*sj5*x5870))+(((-1.0)*x5869*x5871))+(((-1.0)*r00*x5865*x5870)));
evalcond[4]=(((x5860*x5863))+sj0+(((-1.0)*x5866*x5871))+(((-1.0)*r10*x5865*x5870))+(((-1.0)*r12*sj5*x5870))+(((-1.0)*r11*x5862*x5870)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x5862*x5871))+((x5861*x5869))+(((-1.0)*r02*x5872))+(((-1.0)*r00*x5865*x5871))+(((-1.0)*x5867*x5870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5873=cj5*cj5;
IkReal x5874=cj6*cj6;
IkReal x5875=(r22*sj5);
IkReal x5876=(cj6*r21);
IkReal x5877=(r20*sj6);
IkReal x5878=((1.0)*sj6);
IkReal x5879=(cj0*cj5);
IkReal x5880=(r02*r22);
IkReal x5881=(cj6*r01);
IkReal x5882=(r00*sj6);
IkReal x5883=(cj5*r02*sj5);
IkReal x5884=(r01*x5873);
IkReal x5885=(r21*x5874);
IkReal x5886=(r00*r20*x5873);
CheckValue<IkReal> x5887=IKPowWithIntegerCheck(IKsign((((x5873*x5877*x5881))+((x5873*x5876*x5882))+(((-1.0)*x5874*x5886))+((r01*r21))+(((-1.0)*x5877*x5881))+((x5884*x5885))+(((-1.0)*x5873*x5880))+((x5876*x5883))+((x5877*x5883))+((cj5*x5875*x5882))+((cj5*x5875*x5881))+((r00*r20*x5874))+x5880+x5886+(((-1.0)*r00*x5876*x5878))+(((-1.0)*r01*x5885)))),-1);
if(!x5887.valid){
continue;
}
CheckValue<IkReal> x5888 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x5878))+((cj0*cj6*r20)))),(((x5877*x5879))+((cj0*x5875))+((x5876*x5879))),IKFAST_ATAN2_MAGTHRESH);
if(!x5888.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5887.value)))+(x5888.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5889=IKsin(j4);
IkReal x5890=IKcos(j4);
IkReal x5891=(cj5*cj6);
IkReal x5892=(r11*sj6);
IkReal x5893=(cj6*r20);
IkReal x5894=(cj5*sj6);
IkReal x5895=(cj6*r10);
IkReal x5896=(r01*sj6);
IkReal x5897=(r21*sj6);
IkReal x5898=(cj6*r00);
IkReal x5899=((1.0)*x5890);
IkReal x5900=((1.0)*x5889);
IkReal x5901=(sj5*x5900);
evalcond[0]=((((-1.0)*x5897*x5899))+(((-1.0)*r22*x5901))+(((-1.0)*r20*x5894*x5900))+(((-1.0)*r21*x5891*x5900))+((x5890*x5893)));
evalcond[1]=((((-1.0)*r22*sj5*x5899))+((x5889*x5897))+(((-1.0)*x5893*x5900))+(((-1.0)*r21*x5891*x5899))+(((-1.0)*r20*x5894*x5899)));
evalcond[2]=((((-1.0)*r12*x5901))+cj0+(((-1.0)*x5892*x5899))+((x5890*x5895))+(((-1.0)*r11*x5891*x5900))+(((-1.0)*r10*x5894*x5900)));
evalcond[3]=((((-1.0)*r01*x5891*x5899))+cj0+(((-1.0)*x5898*x5900))+((x5889*x5896))+(((-1.0)*r00*x5894*x5899))+(((-1.0)*r02*sj5*x5899)));
evalcond[4]=(sj0+(((-1.0)*x5895*x5900))+((x5889*x5892))+(((-1.0)*r12*sj5*x5899))+(((-1.0)*r11*x5891*x5899))+(((-1.0)*r10*x5894*x5899)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x5891*x5900))+(((-1.0)*x5896*x5899))+(((-1.0)*r02*x5901))+((x5890*x5898))+(((-1.0)*r00*x5894*x5900)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5902=(cj0*sj6);
IkReal x5903=(cj0*cj6);
CheckValue<IkReal> x5904=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x5904.valid){
continue;
}
CheckValue<IkReal> x5905 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x5902))+((r20*x5903)))),(((cj5*r21*x5903))+((cj5*r20*x5902))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x5905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5904.value)))+(x5905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5906=IKsin(j4);
IkReal x5907=IKcos(j4);
IkReal x5908=(cj5*cj6);
IkReal x5909=(r11*sj6);
IkReal x5910=(cj6*r20);
IkReal x5911=(cj5*sj6);
IkReal x5912=(cj6*r10);
IkReal x5913=(r01*sj6);
IkReal x5914=(r21*sj6);
IkReal x5915=(cj6*r00);
IkReal x5916=((1.0)*x5907);
IkReal x5917=((1.0)*x5906);
IkReal x5918=(sj5*x5917);
evalcond[0]=((((-1.0)*r20*x5911*x5917))+(((-1.0)*r22*x5918))+((x5907*x5910))+(((-1.0)*r21*x5908*x5917))+(((-1.0)*x5914*x5916)));
evalcond[1]=((((-1.0)*r20*x5911*x5916))+(((-1.0)*x5910*x5917))+(((-1.0)*r22*sj5*x5916))+((x5906*x5914))+(((-1.0)*r21*x5908*x5916)));
evalcond[2]=((((-1.0)*r12*x5918))+cj0+(((-1.0)*x5909*x5916))+(((-1.0)*r11*x5908*x5917))+((x5907*x5912))+(((-1.0)*r10*x5911*x5917)));
evalcond[3]=(cj0+(((-1.0)*r02*sj5*x5916))+(((-1.0)*r01*x5908*x5916))+(((-1.0)*r00*x5911*x5916))+((x5906*x5913))+(((-1.0)*x5915*x5917)));
evalcond[4]=((((-1.0)*r12*sj5*x5916))+sj0+(((-1.0)*x5912*x5917))+(((-1.0)*r11*x5908*x5916))+((x5906*x5909))+(((-1.0)*r10*x5911*x5916)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x5908*x5917))+(((-1.0)*x5913*x5916))+(((-1.0)*r00*x5911*x5917))+(((-1.0)*r02*x5918))+((x5907*x5915)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5919=((0.01)*cj5);
IkReal x5920=(cj6*r11);
IkReal x5921=((1.0)*cj5);
IkReal x5922=(r20*sj6);
IkReal x5923=((0.01)*sj5);
IkReal x5924=(cj6*r01);
IkReal x5925=((0.37429)*cj5);
IkReal x5926=((0.37429)*sj5);
IkReal x5927=(cj6*r21);
IkReal x5928=(r10*sj5*sj6);
IkReal x5929=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.069)+((x5919*x5922))+((x5919*x5927))+((r22*x5925))+((r22*x5923))+(((-1.0)*pz))+(((-1.0)*x5922*x5926))+(((-1.0)*x5926*x5927)));
evalcond[2]=(((r00*sj6*x5919))+((x5919*x5924))+(((-0.29542)*cj0))+(((-1.0)*r00*sj6*x5926))+(((-1.0)*px))+(((-1.0)*x5924*x5926))+((r02*x5923))+((r02*x5925)));
evalcond[3]=(((x5919*x5920))+(((-1.0)*x5920*x5926))+(((-0.29542)*sj0))+(((-1.0)*py))+((r10*sj6*x5919))+((r12*x5925))+((r12*x5923))+(((-1.0)*r10*sj6*x5926)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x5921))+((sj5*x5927))+((sj5*x5922)));
evalcond[5]=(((sj5*x5920))+(((-1.0)*r12*x5921))+x5928);
evalcond[6]=((((-1.0)*r02*x5921))+((sj5*x5924))+x5929);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5930=(r20*sj0);
IkReal x5931=((1.0)*sj5);
IkReal x5932=(r21*sj0);
IkReal x5933=(((cj5*r12))+(((-1.0)*r10*sj6*x5931))+(((-1.0)*cj6*r11*x5931)));
j4eval[0]=x5933;
j4eval[1]=IKsign(x5933);
j4eval[2]=((IKabs((((cj5*sj6*x5930))+((r22*sj0*sj5))+((cj5*cj6*x5932)))))+(IKabs(((((-1.0)*sj6*x5932))+((cj6*x5930))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5934=cj5*cj5;
IkReal x5935=cj6*cj6;
IkReal x5936=(r00*r20);
IkReal x5937=(r02*r22);
IkReal x5938=(r22*sj5);
IkReal x5939=(cj6*r21);
IkReal x5940=(r00*sj6);
IkReal x5941=(r20*sj6);
IkReal x5942=(cj6*r01);
IkReal x5943=(cj0*cj5);
IkReal x5944=((1.0)*x5934);
IkReal x5945=(cj5*r02*sj5);
IkReal x5946=(r01*r21*x5935);
IkReal x5947=(((x5939*x5945))+((x5934*x5939*x5940))+(((-1.0)*x5941*x5942))+((x5934*x5946))+(((-1.0)*x5946))+((x5934*x5941*x5942))+((x5934*x5936))+(((-1.0)*x5937*x5944))+((r01*r21))+(((-1.0)*x5939*x5940))+((cj5*x5938*x5942))+((cj5*x5938*x5940))+(((-1.0)*x5935*x5936*x5944))+((x5941*x5945))+((x5935*x5936))+x5937);
j4eval[0]=x5947;
j4eval[1]=IKsign(x5947);
j4eval[2]=((IKabs((((x5939*x5943))+((x5941*x5943))+((cj0*x5938)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5948=cj6*cj6;
IkReal x5949=cj5*cj5;
IkReal x5950=(r12*sj5);
IkReal x5951=(r22*sj5);
IkReal x5952=((1.0)*r11);
IkReal x5953=(r20*sj0);
IkReal x5954=(r10*r20);
IkReal x5955=(cj5*sj6);
IkReal x5956=(cj6*r10);
IkReal x5957=(r12*r22);
IkReal x5958=(cj5*cj6*r21);
IkReal x5959=(r21*x5948);
IkReal x5960=(cj6*r20*sj6);
IkReal x5961=(r11*x5949);
IkReal x5962=((1.0)*r21*sj6);
IkReal x5963=((1.0)*x5949);
IkReal x5964=((((-1.0)*x5952*x5960))+((cj5*cj6*r11*x5951))+((x5960*x5961))+((r11*r21))+((x5950*x5958))+(((-1.0)*x5957*x5963))+((x5959*x5961))+(((-1.0)*x5956*x5962))+((r21*sj6*x5949*x5956))+((x5949*x5954))+((r10*x5951*x5955))+((x5948*x5954))+(((-1.0)*x5952*x5959))+(((-1.0)*x5948*x5954*x5963))+x5957+((r20*x5950*x5955)));
j4eval[0]=x5964;
j4eval[1]=IKsign(x5964);
j4eval[2]=((IKabs(((((-1.0)*sj0*x5962))+((cj6*x5953)))))+(IKabs((((x5953*x5955))+((sj0*x5951))+((sj0*x5958))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x5965=((1.0)*cj5);
IkReal x5966=((0.01)*cj5);
IkReal x5967=(cj6*r11);
IkReal x5968=(r20*sj6);
IkReal x5969=((0.01)*sj5);
IkReal x5970=(cj6*r01);
IkReal x5971=((0.37429)*cj5);
IkReal x5972=((0.37429)*sj5);
IkReal x5973=(cj6*r21);
IkReal x5974=(r10*sj5*sj6);
IkReal x5975=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x5971))+((x5966*x5973))+((r22*x5969))+((x5966*x5968))+(((-1.0)*pz))+(((-1.0)*x5972*x5973))+(((-1.0)*x5968*x5972)));
evalcond[2]=((-0.29542)+((r02*x5969))+((x5966*x5970))+(((-1.0)*px))+(((-1.0)*x5970*x5972))+((r00*sj6*x5966))+(((-1.0)*r00*sj6*x5972))+((r02*x5971)));
evalcond[3]=((((-1.0)*r10*sj6*x5972))+((x5966*x5967))+(((-1.0)*py))+((r12*x5969))+((r12*x5971))+(((-1.0)*x5967*x5972))+((r10*sj6*x5966)));
evalcond[4]=((-1.0)+((sj5*x5968))+((sj5*x5973))+(((-1.0)*r22*x5965)));
evalcond[5]=(((sj5*x5967))+(((-1.0)*r12*x5965))+x5974);
evalcond[6]=(((sj5*x5970))+x5975+(((-1.0)*r02*x5965)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5976=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x5976;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x5976);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5977=((1.0)*sj6);
IkReal x5978=((((-1.0)*cj6*r01*sj5))+(((-1.0)*r00*sj5*x5977))+((cj5*r02)));
j4eval[0]=x5978;
j4eval[1]=IKsign(x5978);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x5977))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5979=cj6*cj6;
IkReal x5980=r01*r01;
IkReal x5981=cj5*cj5;
IkReal x5982=r00*r00;
IkReal x5983=r02*r02;
IkReal x5984=(cj6*r00);
IkReal x5985=(r02*sj5);
IkReal x5986=(cj5*cj6*r01);
IkReal x5987=((2.0)*r01*sj6);
IkReal x5988=(cj5*r00*sj6);
IkReal x5989=((1.0)*x5981);
IkReal x5990=(x5979*x5982);
IkReal x5991=(x5979*x5980);
IkReal x5992=((((-1.0)*x5984*x5987))+(((2.0)*x5985*x5986))+(((2.0)*x5985*x5988))+((x5981*x5984*x5987))+(((-1.0)*x5991))+((x5981*x5982))+(((-1.0)*x5989*x5990))+x5983+x5980+x5990+((x5981*x5991))+(((-1.0)*x5983*x5989)));
j4eval[0]=x5992;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x5984)))+(IKabs((x5988+x5986+x5985))));
j4eval[2]=IKsign(x5992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5993=cj6*cj6;
IkReal x5994=r01*r01;
IkReal x5995=cj5*cj5;
IkReal x5996=r00*r00;
IkReal x5997=r02*r02;
IkReal x5998=(cj6*r00);
IkReal x5999=((2.0)*r01);
IkReal x6000=(cj5*cj6);
IkReal x6001=(r02*sj5);
IkReal x6002=(cj5*r00*sj6);
IkReal x6003=(x5995*x5996);
IkReal x6004=(x5993*x5994);
CheckValue<IkReal> x6005 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x5998)),(x6002+x6001+((r01*x6000))),IKFAST_ATAN2_MAGTHRESH);
if(!x6005.valid){
continue;
}
CheckValue<IkReal> x6006=IKPowWithIntegerCheck(IKsign((x6003+(((-1.0)*x5995*x5997))+((x5995*x6004))+((x5999*x6000*x6001))+(((-1.0)*sj6*x5998*x5999))+((x5993*x5996))+(((2.0)*x6001*x6002))+(((-1.0)*x5993*x6003))+x5994+x5997+((sj6*x5995*x5998*x5999))+(((-1.0)*x6004)))),-1);
if(!x6006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6005.value)+(((1.5707963267949)*(x6006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6007=IKsin(j4);
IkReal x6008=IKcos(j4);
IkReal x6009=(cj5*cj6);
IkReal x6010=(r11*sj6);
IkReal x6011=(cj6*r20);
IkReal x6012=(cj6*r10);
IkReal x6013=(cj5*sj6);
IkReal x6014=(r21*sj6);
IkReal x6015=(cj6*r00);
IkReal x6016=(r01*sj6);
IkReal x6017=((1.0)*x6008);
IkReal x6018=((1.0)*x6007);
IkReal x6019=(sj5*x6018);
evalcond[0]=(((x6008*x6011))+(((-1.0)*r21*x6009*x6018))+(((-1.0)*r22*x6019))+(((-1.0)*r20*x6013*x6018))+(((-1.0)*x6014*x6017)));
evalcond[1]=(((x6008*x6015))+(((-1.0)*r01*x6009*x6018))+(((-1.0)*r02*x6019))+(((-1.0)*r00*x6013*x6018))+(((-1.0)*x6016*x6017)));
evalcond[2]=((((-1.0)*r22*sj5*x6017))+(((-1.0)*r21*x6009*x6017))+(((-1.0)*x6011*x6018))+(((-1.0)*r20*x6013*x6017))+((x6007*x6014)));
evalcond[3]=((((-1.0)*r10*x6013*x6017))+(((-1.0)*r12*sj5*x6017))+(((-1.0)*r11*x6009*x6017))+(((-1.0)*x6012*x6018))+((x6007*x6010)));
evalcond[4]=((-1.0)+((x6008*x6012))+(((-1.0)*r10*x6013*x6018))+(((-1.0)*r12*x6019))+(((-1.0)*x6010*x6017))+(((-1.0)*r11*x6009*x6018)));
evalcond[5]=((1.0)+(((-1.0)*r01*x6009*x6017))+(((-1.0)*r02*sj5*x6017))+(((-1.0)*x6015*x6018))+(((-1.0)*r00*x6013*x6017))+((x6007*x6016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6020=((1.0)*sj6);
CheckValue<IkReal> x6021=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x6020))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x6021.valid){
continue;
}
CheckValue<IkReal> x6022 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x6020))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x6022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6021.value)))+(x6022.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6023=IKsin(j4);
IkReal x6024=IKcos(j4);
IkReal x6025=(cj5*cj6);
IkReal x6026=(r11*sj6);
IkReal x6027=(cj6*r20);
IkReal x6028=(cj6*r10);
IkReal x6029=(cj5*sj6);
IkReal x6030=(r21*sj6);
IkReal x6031=(cj6*r00);
IkReal x6032=(r01*sj6);
IkReal x6033=((1.0)*x6024);
IkReal x6034=((1.0)*x6023);
IkReal x6035=(sj5*x6034);
evalcond[0]=((((-1.0)*r20*x6029*x6034))+((x6024*x6027))+(((-1.0)*r21*x6025*x6034))+(((-1.0)*x6030*x6033))+(((-1.0)*r22*x6035)));
evalcond[1]=(((x6024*x6031))+(((-1.0)*x6032*x6033))+(((-1.0)*r01*x6025*x6034))+(((-1.0)*r00*x6029*x6034))+(((-1.0)*r02*x6035)));
evalcond[2]=((((-1.0)*r20*x6029*x6033))+(((-1.0)*r21*x6025*x6033))+(((-1.0)*x6027*x6034))+(((-1.0)*r22*sj5*x6033))+((x6023*x6030)));
evalcond[3]=(((x6023*x6026))+(((-1.0)*r12*sj5*x6033))+(((-1.0)*r11*x6025*x6033))+(((-1.0)*r10*x6029*x6033))+(((-1.0)*x6028*x6034)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x6035))+((x6024*x6028))+(((-1.0)*r11*x6025*x6034))+(((-1.0)*x6026*x6033))+(((-1.0)*r10*x6029*x6034)));
evalcond[5]=((1.0)+(((-1.0)*x6031*x6034))+(((-1.0)*r01*x6025*x6033))+(((-1.0)*r02*sj5*x6033))+(((-1.0)*r00*x6029*x6033))+((x6023*x6032)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6036=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6036.valid){
continue;
}
CheckValue<IkReal> x6037 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x6037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6036.value)))+(x6037.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6038=IKsin(j4);
IkReal x6039=IKcos(j4);
IkReal x6040=(cj5*cj6);
IkReal x6041=(r11*sj6);
IkReal x6042=(cj6*r20);
IkReal x6043=(cj6*r10);
IkReal x6044=(cj5*sj6);
IkReal x6045=(r21*sj6);
IkReal x6046=(cj6*r00);
IkReal x6047=(r01*sj6);
IkReal x6048=((1.0)*x6039);
IkReal x6049=((1.0)*x6038);
IkReal x6050=(sj5*x6049);
evalcond[0]=((((-1.0)*r21*x6040*x6049))+(((-1.0)*r22*x6050))+(((-1.0)*x6045*x6048))+((x6039*x6042))+(((-1.0)*r20*x6044*x6049)));
evalcond[1]=((((-1.0)*r01*x6040*x6049))+(((-1.0)*r02*x6050))+(((-1.0)*x6047*x6048))+(((-1.0)*r00*x6044*x6049))+((x6039*x6046)));
evalcond[2]=((((-1.0)*r21*x6040*x6048))+(((-1.0)*x6042*x6049))+((x6038*x6045))+(((-1.0)*r22*sj5*x6048))+(((-1.0)*r20*x6044*x6048)));
evalcond[3]=((((-1.0)*r11*x6040*x6048))+((x6038*x6041))+(((-1.0)*x6043*x6049))+(((-1.0)*r10*x6044*x6048))+(((-1.0)*r12*sj5*x6048)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x6040*x6049))+(((-1.0)*r12*x6050))+(((-1.0)*r10*x6044*x6049))+(((-1.0)*x6041*x6048))+((x6039*x6043)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x6048))+(((-1.0)*x6046*x6049))+(((-1.0)*r01*x6040*x6048))+((x6038*x6047))+(((-1.0)*r00*x6044*x6048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6051=((1.0)*cj5);
IkReal x6052=((0.01)*cj5);
IkReal x6053=(cj6*r11);
IkReal x6054=(r20*sj6);
IkReal x6055=((0.01)*sj5);
IkReal x6056=(cj6*r01);
IkReal x6057=((0.37429)*cj5);
IkReal x6058=((0.37429)*sj5);
IkReal x6059=(cj6*r21);
IkReal x6060=(r10*sj5*sj6);
IkReal x6061=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x6052*x6059))+((x6052*x6054))+((r22*x6055))+((r22*x6057))+(((-1.0)*x6058*x6059))+(((-1.0)*x6054*x6058))+(((-1.0)*pz)));
evalcond[2]=((0.29542)+((x6052*x6056))+(((-1.0)*px))+(((-1.0)*x6056*x6058))+(((-1.0)*r00*sj6*x6058))+((r02*x6055))+((r02*x6057))+((r00*sj6*x6052)));
evalcond[3]=((((-1.0)*x6053*x6058))+((r12*x6055))+((r12*x6057))+((x6052*x6053))+((r10*sj6*x6052))+(((-1.0)*py))+(((-1.0)*r10*sj6*x6058)));
evalcond[4]=((-1.0)+((sj5*x6059))+((sj5*x6054))+(((-1.0)*r22*x6051)));
evalcond[5]=(x6060+((sj5*x6053))+(((-1.0)*r12*x6051)));
evalcond[6]=(x6061+((sj5*x6056))+(((-1.0)*r02*x6051)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6062=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x6062;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6063=((1.0)*sj5);
IkReal x6064=(((cj5*r22))+(((-1.0)*cj6*r21*x6063))+(((-1.0)*r20*sj6*x6063)));
j4eval[0]=x6064;
j4eval[1]=IKsign(x6064);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6065=cj6*cj6;
IkReal x6066=cj5*cj5;
IkReal x6067=r00*r00;
IkReal x6068=r01*r01;
IkReal x6069=r02*r02;
IkReal x6070=(cj6*r00);
IkReal x6071=(cj5*cj6*r01);
IkReal x6072=((2.0)*r02*sj5);
IkReal x6073=((1.0)*x6065);
IkReal x6074=((2.0)*r01*sj6);
IkReal x6075=(cj5*r00*sj6);
IkReal x6076=(x6066*x6067);
IkReal x6077=((((-1.0)*x6067*x6073))+(((-1.0)*x6076))+((x6070*x6074))+((x6066*x6069))+(((-1.0)*x6066*x6070*x6074))+(((-1.0)*x6072*x6075))+(((-1.0)*x6066*x6068*x6073))+(((-1.0)*x6069))+(((-1.0)*x6068))+((x6065*x6068))+(((-1.0)*x6071*x6072))+((x6065*x6076)));
j4eval[0]=x6077;
j4eval[1]=((IKabs((x6075+x6071+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x6070))));
j4eval[2]=IKsign(x6077);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6078=cj6*cj6;
IkReal x6079=cj5*cj5;
IkReal x6080=r00*r00;
IkReal x6081=r01*r01;
IkReal x6082=r02*r02;
IkReal x6083=(cj6*r00);
IkReal x6084=(cj5*cj6*r01);
IkReal x6085=((2.0)*r02*sj5);
IkReal x6086=((1.0)*x6078);
IkReal x6087=((2.0)*r01*sj6);
IkReal x6088=(cj5*r00*sj6);
IkReal x6089=(x6079*x6080);
CheckValue<IkReal> x6090=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6085*x6088))+(((-1.0)*x6080*x6086))+(((-1.0)*x6079*x6083*x6087))+((x6078*x6081))+((x6078*x6089))+((x6079*x6082))+(((-1.0)*x6082))+(((-1.0)*x6081))+(((-1.0)*x6089))+((x6083*x6087))+(((-1.0)*x6084*x6085))+(((-1.0)*x6079*x6081*x6086)))),-1);
if(!x6090.valid){
continue;
}
CheckValue<IkReal> x6091 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x6083)),(x6088+x6084+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x6091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6090.value)))+(x6091.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6092=IKsin(j4);
IkReal x6093=IKcos(j4);
IkReal x6094=(cj5*cj6);
IkReal x6095=(r11*sj6);
IkReal x6096=(cj6*r20);
IkReal x6097=(cj6*r10);
IkReal x6098=(cj5*sj6);
IkReal x6099=(r21*sj6);
IkReal x6100=(cj6*r00);
IkReal x6101=(r01*sj6);
IkReal x6102=((1.0)*x6093);
IkReal x6103=((1.0)*x6092);
IkReal x6104=(sj5*x6103);
evalcond[0]=(((x6093*x6096))+(((-1.0)*r21*x6094*x6103))+(((-1.0)*x6099*x6102))+(((-1.0)*r22*x6104))+(((-1.0)*r20*x6098*x6103)));
evalcond[1]=((((-1.0)*r02*x6104))+(((-1.0)*r00*x6098*x6103))+(((-1.0)*x6101*x6102))+(((-1.0)*r01*x6094*x6103))+((x6093*x6100)));
evalcond[2]=(((x6092*x6099))+(((-1.0)*r21*x6094*x6102))+(((-1.0)*x6096*x6103))+(((-1.0)*r20*x6098*x6102))+(((-1.0)*r22*sj5*x6102)));
evalcond[3]=(((x6092*x6095))+(((-1.0)*r10*x6098*x6102))+(((-1.0)*r11*x6094*x6102))+(((-1.0)*r12*sj5*x6102))+(((-1.0)*x6097*x6103)));
evalcond[4]=((1.0)+((x6093*x6097))+(((-1.0)*x6095*x6102))+(((-1.0)*r10*x6098*x6103))+(((-1.0)*r11*x6094*x6103))+(((-1.0)*r12*x6104)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x6098*x6102))+(((-1.0)*r01*x6094*x6102))+((x6092*x6101))+(((-1.0)*r02*sj5*x6102))+(((-1.0)*x6100*x6103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6105=((1.0)*sj5);
CheckValue<IkReal> x6106 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x6106.valid){
continue;
}
CheckValue<IkReal> x6107=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x6105))+(((-1.0)*cj6*r21*x6105)))),-1);
if(!x6107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6106.value)+(((1.5707963267949)*(x6107.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6108=IKsin(j4);
IkReal x6109=IKcos(j4);
IkReal x6110=(cj5*cj6);
IkReal x6111=(r11*sj6);
IkReal x6112=(cj6*r20);
IkReal x6113=(cj6*r10);
IkReal x6114=(cj5*sj6);
IkReal x6115=(r21*sj6);
IkReal x6116=(cj6*r00);
IkReal x6117=(r01*sj6);
IkReal x6118=((1.0)*x6109);
IkReal x6119=((1.0)*x6108);
IkReal x6120=(sj5*x6119);
evalcond[0]=((((-1.0)*x6115*x6118))+(((-1.0)*r22*x6120))+(((-1.0)*r20*x6114*x6119))+((x6109*x6112))+(((-1.0)*r21*x6110*x6119)));
evalcond[1]=((((-1.0)*r00*x6114*x6119))+(((-1.0)*r02*x6120))+((x6109*x6116))+(((-1.0)*r01*x6110*x6119))+(((-1.0)*x6117*x6118)));
evalcond[2]=((((-1.0)*x6112*x6119))+(((-1.0)*r20*x6114*x6118))+((x6108*x6115))+(((-1.0)*r21*x6110*x6118))+(((-1.0)*r22*sj5*x6118)));
evalcond[3]=((((-1.0)*r12*sj5*x6118))+(((-1.0)*x6113*x6119))+(((-1.0)*r11*x6110*x6118))+((x6108*x6111))+(((-1.0)*r10*x6114*x6118)));
evalcond[4]=((1.0)+(((-1.0)*x6111*x6118))+(((-1.0)*r12*x6120))+((x6109*x6113))+(((-1.0)*r11*x6110*x6119))+(((-1.0)*r10*x6114*x6119)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x6114*x6118))+(((-1.0)*r02*sj5*x6118))+(((-1.0)*x6116*x6119))+((x6108*x6117))+(((-1.0)*r01*x6110*x6118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6121 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x6121.valid){
continue;
}
CheckValue<IkReal> x6122=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x6122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6121.value)+(((1.5707963267949)*(x6122.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6123=IKsin(j4);
IkReal x6124=IKcos(j4);
IkReal x6125=(cj5*cj6);
IkReal x6126=(r11*sj6);
IkReal x6127=(cj6*r20);
IkReal x6128=(cj6*r10);
IkReal x6129=(cj5*sj6);
IkReal x6130=(r21*sj6);
IkReal x6131=(cj6*r00);
IkReal x6132=(r01*sj6);
IkReal x6133=((1.0)*x6124);
IkReal x6134=((1.0)*x6123);
IkReal x6135=(sj5*x6134);
evalcond[0]=(((x6124*x6127))+(((-1.0)*x6130*x6133))+(((-1.0)*r22*x6135))+(((-1.0)*r20*x6129*x6134))+(((-1.0)*r21*x6125*x6134)));
evalcond[1]=((((-1.0)*x6132*x6133))+((x6124*x6131))+(((-1.0)*r02*x6135))+(((-1.0)*r01*x6125*x6134))+(((-1.0)*r00*x6129*x6134)));
evalcond[2]=((((-1.0)*r20*x6129*x6133))+((x6123*x6130))+(((-1.0)*x6127*x6134))+(((-1.0)*r21*x6125*x6133))+(((-1.0)*r22*sj5*x6133)));
evalcond[3]=((((-1.0)*x6128*x6134))+((x6123*x6126))+(((-1.0)*r12*sj5*x6133))+(((-1.0)*r10*x6129*x6133))+(((-1.0)*r11*x6125*x6133)));
evalcond[4]=((1.0)+((x6124*x6128))+(((-1.0)*x6126*x6133))+(((-1.0)*r12*x6135))+(((-1.0)*r10*x6129*x6134))+(((-1.0)*r11*x6125*x6134)));
evalcond[5]=((-1.0)+(((-1.0)*x6131*x6134))+((x6123*x6132))+(((-1.0)*r02*sj5*x6133))+(((-1.0)*r01*x6125*x6133))+(((-1.0)*r00*x6129*x6133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6136=((1.0)*cj5);
IkReal x6137=((0.01)*cj5);
IkReal x6138=(cj6*r11);
IkReal x6139=(r20*sj6);
IkReal x6140=((0.01)*sj5);
IkReal x6141=(cj6*r01);
IkReal x6142=((0.37429)*cj5);
IkReal x6143=((0.37429)*sj5);
IkReal x6144=(cj6*r21);
IkReal x6145=(r10*sj5*sj6);
IkReal x6146=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x6139*x6143))+((x6137*x6139))+((r22*x6142))+((r22*x6140))+(((-1.0)*pz))+(((-1.0)*x6143*x6144))+((x6137*x6144)));
evalcond[2]=(((r00*sj6*x6137))+(((-1.0)*r00*sj6*x6143))+(((-1.0)*px))+((x6137*x6141))+(((-1.0)*x6141*x6143))+((r02*x6142))+((r02*x6140)));
evalcond[3]=((-0.29542)+((x6137*x6138))+(((-1.0)*r10*sj6*x6143))+(((-1.0)*x6138*x6143))+((r10*sj6*x6137))+(((-1.0)*py))+((r12*x6140))+((r12*x6142)));
evalcond[4]=((-1.0)+((sj5*x6139))+(((-1.0)*r22*x6136))+((sj5*x6144)));
evalcond[5]=(((sj5*x6138))+x6145+(((-1.0)*r12*x6136)));
evalcond[6]=(x6146+((sj5*x6141))+(((-1.0)*r02*x6136)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6147=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x6147;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x6147);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6148=((1.0)*sj6);
IkReal x6149=(((cj5*r12))+(((-1.0)*r10*sj5*x6148))+(((-1.0)*cj6*r11*sj5)));
j4eval[0]=x6149;
j4eval[1]=IKsign(x6149);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x6148))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6150=r11*r11;
IkReal x6151=cj5*cj5;
IkReal x6152=cj6*cj6;
IkReal x6153=r10*r10;
IkReal x6154=r12*r12;
IkReal x6155=(r12*sj5);
IkReal x6156=(cj6*r10);
IkReal x6157=((1.0)*x6152);
IkReal x6158=(cj5*cj6*r11);
IkReal x6159=(cj5*r10*sj6);
IkReal x6160=((2.0)*r11*sj6);
IkReal x6161=(x6151*x6153);
IkReal x6162=((((2.0)*x6155*x6158))+(((2.0)*x6155*x6159))+((x6152*x6153))+(((-1.0)*x6150*x6157))+x6161+x6150+x6154+(((-1.0)*x6156*x6160))+((x6150*x6151*x6152))+(((-1.0)*x6157*x6161))+((x6151*x6156*x6160))+(((-1.0)*x6151*x6154)));
j4eval[0]=x6162;
j4eval[1]=IKsign(x6162);
j4eval[2]=((IKabs((x6156+(((-1.0)*r11*sj6)))))+(IKabs((x6155+x6158+x6159))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6163=r11*r11;
IkReal x6164=cj5*cj5;
IkReal x6165=cj6*cj6;
IkReal x6166=r10*r10;
IkReal x6167=r12*r12;
IkReal x6168=(r10*sj6);
IkReal x6169=(r12*sj5);
IkReal x6170=((1.0)*x6165);
IkReal x6171=(cj5*cj6*r11);
IkReal x6172=((2.0)*cj6*r11);
IkReal x6173=(x6164*x6166);
CheckValue<IkReal> x6174 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x6171+x6169+((cj5*x6168))),IKFAST_ATAN2_MAGTHRESH);
if(!x6174.valid){
continue;
}
CheckValue<IkReal> x6175=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6168*x6172))+(((-1.0)*x6163*x6170))+(((2.0)*cj5*x6168*x6169))+x6173+x6163+x6167+((x6163*x6164*x6165))+((x6165*x6166))+(((-1.0)*x6170*x6173))+(((-1.0)*x6164*x6167))+(((2.0)*x6169*x6171))+((x6164*x6168*x6172)))),-1);
if(!x6175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6174.value)+(((1.5707963267949)*(x6175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6176=IKsin(j4);
IkReal x6177=IKcos(j4);
IkReal x6178=(cj5*cj6);
IkReal x6179=(r11*sj6);
IkReal x6180=(cj6*r20);
IkReal x6181=(cj6*r10);
IkReal x6182=(cj5*sj6);
IkReal x6183=(r01*sj6);
IkReal x6184=(r21*sj6);
IkReal x6185=(cj6*r00);
IkReal x6186=((1.0)*x6177);
IkReal x6187=((1.0)*x6176);
IkReal x6188=(sj5*x6187);
evalcond[0]=((((-1.0)*r22*x6188))+((x6177*x6180))+(((-1.0)*x6184*x6186))+(((-1.0)*r21*x6178*x6187))+(((-1.0)*r20*x6182*x6187)));
evalcond[1]=((((-1.0)*r10*x6182*x6187))+((x6177*x6181))+(((-1.0)*r12*x6188))+(((-1.0)*x6179*x6186))+(((-1.0)*r11*x6178*x6187)));
evalcond[2]=((((-1.0)*r21*x6178*x6186))+(((-1.0)*r20*x6182*x6186))+(((-1.0)*r22*sj5*x6186))+((x6176*x6184))+(((-1.0)*x6180*x6187)));
evalcond[3]=((((-1.0)*r00*x6182*x6186))+(((-1.0)*x6185*x6187))+(((-1.0)*r02*sj5*x6186))+(((-1.0)*r01*x6178*x6186))+((x6176*x6183)));
evalcond[4]=((1.0)+((x6177*x6185))+(((-1.0)*r00*x6182*x6187))+(((-1.0)*r02*x6188))+(((-1.0)*r01*x6178*x6187))+(((-1.0)*x6183*x6186)));
evalcond[5]=((1.0)+(((-1.0)*r10*x6182*x6186))+((x6176*x6179))+(((-1.0)*r11*x6178*x6186))+(((-1.0)*r12*sj5*x6186))+(((-1.0)*x6181*x6187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6189=((1.0)*sj6);
CheckValue<IkReal> x6190 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x6189)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x6190.valid){
continue;
}
CheckValue<IkReal> x6191=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x6189)))),-1);
if(!x6191.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6190.value)+(((1.5707963267949)*(x6191.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6192=IKsin(j4);
IkReal x6193=IKcos(j4);
IkReal x6194=(cj5*cj6);
IkReal x6195=(r11*sj6);
IkReal x6196=(cj6*r20);
IkReal x6197=(cj6*r10);
IkReal x6198=(cj5*sj6);
IkReal x6199=(r01*sj6);
IkReal x6200=(r21*sj6);
IkReal x6201=(cj6*r00);
IkReal x6202=((1.0)*x6193);
IkReal x6203=((1.0)*x6192);
IkReal x6204=(sj5*x6203);
evalcond[0]=((((-1.0)*r20*x6198*x6203))+(((-1.0)*r21*x6194*x6203))+(((-1.0)*r22*x6204))+((x6193*x6196))+(((-1.0)*x6200*x6202)));
evalcond[1]=((((-1.0)*x6195*x6202))+(((-1.0)*r10*x6198*x6203))+((x6193*x6197))+(((-1.0)*r12*x6204))+(((-1.0)*r11*x6194*x6203)));
evalcond[2]=((((-1.0)*r22*sj5*x6202))+((x6192*x6200))+(((-1.0)*x6196*x6203))+(((-1.0)*r20*x6198*x6202))+(((-1.0)*r21*x6194*x6202)));
evalcond[3]=((((-1.0)*r02*sj5*x6202))+(((-1.0)*r01*x6194*x6202))+(((-1.0)*r00*x6198*x6202))+((x6192*x6199))+(((-1.0)*x6201*x6203)));
evalcond[4]=((1.0)+(((-1.0)*x6199*x6202))+((x6193*x6201))+(((-1.0)*r02*x6204))+(((-1.0)*r01*x6194*x6203))+(((-1.0)*r00*x6198*x6203)));
evalcond[5]=((1.0)+(((-1.0)*x6197*x6203))+(((-1.0)*r12*sj5*x6202))+(((-1.0)*r10*x6198*x6202))+((x6192*x6195))+(((-1.0)*r11*x6194*x6202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6205=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x6205.valid){
continue;
}
CheckValue<IkReal> x6206 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x6206.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6205.value)))+(x6206.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6207=IKsin(j4);
IkReal x6208=IKcos(j4);
IkReal x6209=(cj5*cj6);
IkReal x6210=(r11*sj6);
IkReal x6211=(cj6*r20);
IkReal x6212=(cj6*r10);
IkReal x6213=(cj5*sj6);
IkReal x6214=(r01*sj6);
IkReal x6215=(r21*sj6);
IkReal x6216=(cj6*r00);
IkReal x6217=((1.0)*x6208);
IkReal x6218=((1.0)*x6207);
IkReal x6219=(sj5*x6218);
evalcond[0]=((((-1.0)*r20*x6213*x6218))+((x6208*x6211))+(((-1.0)*x6215*x6217))+(((-1.0)*r21*x6209*x6218))+(((-1.0)*r22*x6219)));
evalcond[1]=((((-1.0)*r12*x6219))+(((-1.0)*x6210*x6217))+(((-1.0)*r10*x6213*x6218))+(((-1.0)*r11*x6209*x6218))+((x6208*x6212)));
evalcond[2]=((((-1.0)*r20*x6213*x6217))+((x6207*x6215))+(((-1.0)*r22*sj5*x6217))+(((-1.0)*x6211*x6218))+(((-1.0)*r21*x6209*x6217)));
evalcond[3]=((((-1.0)*r00*x6213*x6217))+(((-1.0)*r02*sj5*x6217))+((x6207*x6214))+(((-1.0)*x6216*x6218))+(((-1.0)*r01*x6209*x6217)));
evalcond[4]=((1.0)+(((-1.0)*r00*x6213*x6218))+((x6208*x6216))+(((-1.0)*r02*x6219))+(((-1.0)*r01*x6209*x6218))+(((-1.0)*x6214*x6217)));
evalcond[5]=((1.0)+(((-1.0)*r10*x6213*x6217))+((x6207*x6210))+(((-1.0)*r12*sj5*x6217))+(((-1.0)*r11*x6209*x6217))+(((-1.0)*x6212*x6218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6220=((1.0)*cj5);
IkReal x6221=((0.01)*cj5);
IkReal x6222=(cj6*r11);
IkReal x6223=(r20*sj6);
IkReal x6224=((0.01)*sj5);
IkReal x6225=(cj6*r01);
IkReal x6226=((0.37429)*cj5);
IkReal x6227=((0.37429)*sj5);
IkReal x6228=(cj6*r21);
IkReal x6229=(r10*sj5*sj6);
IkReal x6230=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*pz))+((r22*x6224))+((r22*x6226))+((x6221*x6228))+((x6221*x6223))+(((-1.0)*x6227*x6228))+(((-1.0)*x6223*x6227)));
evalcond[2]=(((r02*x6226))+((r02*x6224))+((r00*sj6*x6221))+(((-1.0)*r00*sj6*x6227))+(((-1.0)*px))+((x6221*x6225))+(((-1.0)*x6225*x6227)));
evalcond[3]=((0.29542)+(((-1.0)*x6222*x6227))+((r10*sj6*x6221))+(((-1.0)*py))+(((-1.0)*r10*sj6*x6227))+((x6221*x6222))+((r12*x6224))+((r12*x6226)));
evalcond[4]=((-1.0)+((sj5*x6228))+((sj5*x6223))+(((-1.0)*r22*x6220)));
evalcond[5]=(x6229+(((-1.0)*r12*x6220))+((sj5*x6222)));
evalcond[6]=(x6230+(((-1.0)*r02*x6220))+((sj5*x6225)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6231=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x6231;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x6231);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6232=((1.0)*sj5);
IkReal x6233=((((-1.0)*r20*sj6*x6232))+(((-1.0)*cj6*r21*x6232))+((cj5*r22)));
j4eval[0]=x6233;
j4eval[1]=IKsign(x6233);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6234=cj6*cj6;
IkReal x6235=cj5*cj5;
IkReal x6236=r10*r10;
IkReal x6237=r11*r11;
IkReal x6238=r12*r12;
IkReal x6239=(r10*sj6);
IkReal x6240=(r12*sj5);
IkReal x6241=((2.0)*cj6*r11);
IkReal x6242=((1.0)*x6236);
IkReal x6243=(x6234*x6237);
IkReal x6244=(x6243+(((-1.0)*cj5*x6240*x6241))+(((-1.0)*x6234*x6242))+((x6235*x6238))+((x6234*x6235*x6236))+((x6239*x6241))+(((-1.0)*x6237))+(((-1.0)*x6238))+(((-1.0)*x6235*x6239*x6241))+(((-1.0)*x6235*x6242))+(((-2.0)*cj5*x6239*x6240))+(((-1.0)*x6235*x6243)));
j4eval[0]=x6244;
j4eval[1]=((IKabs(((((-1.0)*r11*sj6))+((cj6*r10)))))+(IKabs((x6240+((cj5*x6239))+((cj5*cj6*r11))))));
j4eval[2]=IKsign(x6244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6245=cj6*cj6;
IkReal x6246=cj5*cj5;
IkReal x6247=r10*r10;
IkReal x6248=r11*r11;
IkReal x6249=r12*r12;
IkReal x6250=(r10*sj6);
IkReal x6251=(r12*sj5);
IkReal x6252=((2.0)*cj6*r11);
IkReal x6253=(x6245*x6248);
IkReal x6254=(x6246*x6247);
CheckValue<IkReal> x6255=IKPowWithIntegerCheck(IKsign((((x6246*x6249))+(((-1.0)*x6246*x6250*x6252))+x6253+(((-1.0)*x6245*x6247))+((x6245*x6254))+(((-1.0)*cj5*x6251*x6252))+(((-1.0)*x6248))+(((-1.0)*x6249))+(((-1.0)*x6254))+((x6250*x6252))+(((-2.0)*cj5*x6250*x6251))+(((-1.0)*x6246*x6253)))),-1);
if(!x6255.valid){
continue;
}
CheckValue<IkReal> x6256 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x6251+((cj5*x6250))+((cj5*cj6*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x6256.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6255.value)))+(x6256.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6257=IKsin(j4);
IkReal x6258=IKcos(j4);
IkReal x6259=(cj5*cj6);
IkReal x6260=(r11*sj6);
IkReal x6261=(cj6*r20);
IkReal x6262=(cj6*r10);
IkReal x6263=(cj5*sj6);
IkReal x6264=(r01*sj6);
IkReal x6265=(r21*sj6);
IkReal x6266=(cj6*r00);
IkReal x6267=((1.0)*x6258);
IkReal x6268=((1.0)*x6257);
IkReal x6269=(sj5*x6268);
evalcond[0]=((((-1.0)*r21*x6259*x6268))+(((-1.0)*r20*x6263*x6268))+((x6258*x6261))+(((-1.0)*x6265*x6267))+(((-1.0)*r22*x6269)));
evalcond[1]=((((-1.0)*r11*x6259*x6268))+((x6258*x6262))+(((-1.0)*x6260*x6267))+(((-1.0)*r10*x6263*x6268))+(((-1.0)*r12*x6269)));
evalcond[2]=((((-1.0)*r21*x6259*x6267))+(((-1.0)*r20*x6263*x6267))+(((-1.0)*x6261*x6268))+((x6257*x6265))+(((-1.0)*r22*sj5*x6267)));
evalcond[3]=((((-1.0)*x6266*x6268))+(((-1.0)*r00*x6263*x6267))+(((-1.0)*r02*sj5*x6267))+((x6257*x6264))+(((-1.0)*r01*x6259*x6267)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x6269))+(((-1.0)*r00*x6263*x6268))+((x6258*x6266))+(((-1.0)*r01*x6259*x6268))+(((-1.0)*x6264*x6267)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x6259*x6267))+(((-1.0)*r12*sj5*x6267))+(((-1.0)*x6262*x6268))+(((-1.0)*r10*x6263*x6267))+((x6257*x6260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6270=((1.0)*sj5);
CheckValue<IkReal> x6271 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x6271.valid){
continue;
}
CheckValue<IkReal> x6272=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x6270))+(((-1.0)*cj6*r21*x6270)))),-1);
if(!x6272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6271.value)+(((1.5707963267949)*(x6272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6273=IKsin(j4);
IkReal x6274=IKcos(j4);
IkReal x6275=(cj5*cj6);
IkReal x6276=(r11*sj6);
IkReal x6277=(cj6*r20);
IkReal x6278=(cj6*r10);
IkReal x6279=(cj5*sj6);
IkReal x6280=(r01*sj6);
IkReal x6281=(r21*sj6);
IkReal x6282=(cj6*r00);
IkReal x6283=((1.0)*x6274);
IkReal x6284=((1.0)*x6273);
IkReal x6285=(sj5*x6284);
evalcond[0]=((((-1.0)*r21*x6275*x6284))+(((-1.0)*r22*x6285))+(((-1.0)*x6281*x6283))+((x6274*x6277))+(((-1.0)*r20*x6279*x6284)));
evalcond[1]=((((-1.0)*r10*x6279*x6284))+(((-1.0)*r11*x6275*x6284))+(((-1.0)*r12*x6285))+((x6274*x6278))+(((-1.0)*x6276*x6283)));
evalcond[2]=((((-1.0)*r21*x6275*x6283))+(((-1.0)*r22*sj5*x6283))+((x6273*x6281))+(((-1.0)*x6277*x6284))+(((-1.0)*r20*x6279*x6283)));
evalcond[3]=((((-1.0)*x6282*x6284))+((x6273*x6280))+(((-1.0)*r01*x6275*x6283))+(((-1.0)*r00*x6279*x6283))+(((-1.0)*r02*sj5*x6283)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x6285))+(((-1.0)*r01*x6275*x6284))+((x6274*x6282))+(((-1.0)*r00*x6279*x6284))+(((-1.0)*x6280*x6283)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x6283))+((x6273*x6276))+(((-1.0)*r10*x6279*x6283))+(((-1.0)*r11*x6275*x6283))+(((-1.0)*x6278*x6284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6286 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x6286.valid){
continue;
}
CheckValue<IkReal> x6287=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x6287.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6286.value)+(((1.5707963267949)*(x6287.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6288=IKsin(j4);
IkReal x6289=IKcos(j4);
IkReal x6290=(cj5*cj6);
IkReal x6291=(r11*sj6);
IkReal x6292=(cj6*r20);
IkReal x6293=(cj6*r10);
IkReal x6294=(cj5*sj6);
IkReal x6295=(r01*sj6);
IkReal x6296=(r21*sj6);
IkReal x6297=(cj6*r00);
IkReal x6298=((1.0)*x6289);
IkReal x6299=((1.0)*x6288);
IkReal x6300=(sj5*x6299);
evalcond[0]=((((-1.0)*x6296*x6298))+(((-1.0)*r21*x6290*x6299))+(((-1.0)*r22*x6300))+((x6289*x6292))+(((-1.0)*r20*x6294*x6299)));
evalcond[1]=((((-1.0)*r10*x6294*x6299))+(((-1.0)*r12*x6300))+(((-1.0)*x6291*x6298))+((x6289*x6293))+(((-1.0)*r11*x6290*x6299)));
evalcond[2]=((((-1.0)*r21*x6290*x6298))+(((-1.0)*r22*sj5*x6298))+(((-1.0)*x6292*x6299))+((x6288*x6296))+(((-1.0)*r20*x6294*x6298)));
evalcond[3]=((((-1.0)*r01*x6290*x6298))+(((-1.0)*r00*x6294*x6298))+(((-1.0)*r02*sj5*x6298))+((x6288*x6295))+(((-1.0)*x6297*x6299)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x6290*x6299))+(((-1.0)*r02*x6300))+(((-1.0)*r00*x6294*x6299))+(((-1.0)*x6295*x6298))+((x6289*x6297)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x6294*x6298))+(((-1.0)*r12*sj5*x6298))+(((-1.0)*x6293*x6299))+((x6288*x6291))+(((-1.0)*r11*x6290*x6298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6301=cj6*cj6;
IkReal x6302=cj5*cj5;
IkReal x6303=((1.0)*r11);
IkReal x6304=(cj5*sj0);
IkReal x6305=(cj6*r21);
IkReal x6306=(r22*sj5);
IkReal x6307=(r20*sj6);
IkReal x6308=(r12*r22);
IkReal x6309=((1.0)*sj6);
IkReal x6310=(r21*x6301);
IkReal x6311=(r10*x6302);
IkReal x6312=(r11*x6302);
IkReal x6313=(r20*x6301);
IkReal x6314=(cj5*r12*sj5);
CheckValue<IkReal> x6315 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*x6309)))),(((x6304*x6305))+((x6304*x6307))+((sj0*x6306))),IKFAST_ATAN2_MAGTHRESH);
if(!x6315.valid){
continue;
}
CheckValue<IkReal> x6316=IKPowWithIntegerCheck(IKsign((((r20*x6311))+((cj6*x6307*x6312))+((sj6*x6305*x6311))+(((-1.0)*x6311*x6313))+x6308+((x6310*x6312))+((cj5*cj6*r11*x6306))+((r11*r21))+(((-1.0)*r10*x6305*x6309))+((x6305*x6314))+((cj5*r10*sj6*x6306))+((x6307*x6314))+(((-1.0)*x6303*x6310))+(((-1.0)*cj6*x6303*x6307))+((r10*x6313))+(((-1.0)*x6302*x6308)))),-1);
if(!x6316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6315.value)+(((1.5707963267949)*(x6316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6317=IKsin(j4);
IkReal x6318=IKcos(j4);
IkReal x6319=(cj5*cj6);
IkReal x6320=(r11*sj6);
IkReal x6321=(cj6*r20);
IkReal x6322=(cj6*r10);
IkReal x6323=(cj5*sj6);
IkReal x6324=(r01*sj6);
IkReal x6325=(r21*sj6);
IkReal x6326=(cj6*r00);
IkReal x6327=((1.0)*x6318);
IkReal x6328=((1.0)*x6317);
IkReal x6329=(sj5*x6328);
evalcond[0]=((((-1.0)*x6325*x6327))+((x6318*x6321))+(((-1.0)*r22*x6329))+(((-1.0)*r20*x6323*x6328))+(((-1.0)*r21*x6319*x6328)));
evalcond[1]=(((x6317*x6325))+(((-1.0)*r22*sj5*x6327))+(((-1.0)*x6321*x6328))+(((-1.0)*r20*x6323*x6327))+(((-1.0)*r21*x6319*x6327)));
evalcond[2]=(sj0+((x6318*x6326))+(((-1.0)*r01*x6319*x6328))+(((-1.0)*x6324*x6327))+(((-1.0)*r02*x6329))+(((-1.0)*r00*x6323*x6328)));
evalcond[3]=((((-1.0)*x6326*x6328))+cj0+((x6317*x6324))+(((-1.0)*r01*x6319*x6327))+(((-1.0)*r00*x6323*x6327))+(((-1.0)*r02*sj5*x6327)));
evalcond[4]=(sj0+((x6317*x6320))+(((-1.0)*r12*sj5*x6327))+(((-1.0)*r11*x6319*x6327))+(((-1.0)*x6322*x6328))+(((-1.0)*r10*x6323*x6327)));
evalcond[5]=(((x6318*x6322))+(((-1.0)*x6320*x6327))+(((-1.0)*r11*x6319*x6328))+(((-1.0)*r10*x6323*x6328))+(((-1.0)*r12*x6329))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6330=cj5*cj5;
IkReal x6331=cj6*cj6;
IkReal x6332=(r22*sj5);
IkReal x6333=(cj6*r21);
IkReal x6334=(r20*sj6);
IkReal x6335=((1.0)*sj6);
IkReal x6336=(cj0*cj5);
IkReal x6337=(r02*r22);
IkReal x6338=(cj6*r01);
IkReal x6339=(r00*sj6);
IkReal x6340=(cj5*r02*sj5);
IkReal x6341=(r01*x6330);
IkReal x6342=(r21*x6331);
IkReal x6343=(r00*r20*x6330);
CheckValue<IkReal> x6344=IKPowWithIntegerCheck(IKsign((((x6341*x6342))+((r00*r20*x6331))+x6343+x6337+(((-1.0)*x6334*x6338))+(((-1.0)*x6330*x6337))+((x6330*x6333*x6339))+(((-1.0)*r00*x6333*x6335))+((r01*r21))+((x6333*x6340))+((x6330*x6334*x6338))+((cj5*x6332*x6338))+((cj5*x6332*x6339))+(((-1.0)*r01*x6342))+((x6334*x6340))+(((-1.0)*x6331*x6343)))),-1);
if(!x6344.valid){
continue;
}
CheckValue<IkReal> x6345 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x6335)))),(((x6334*x6336))+((x6333*x6336))+((cj0*x6332))),IKFAST_ATAN2_MAGTHRESH);
if(!x6345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6344.value)))+(x6345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6346=IKsin(j4);
IkReal x6347=IKcos(j4);
IkReal x6348=(cj5*cj6);
IkReal x6349=(r11*sj6);
IkReal x6350=(cj6*r20);
IkReal x6351=(cj6*r10);
IkReal x6352=(cj5*sj6);
IkReal x6353=(r01*sj6);
IkReal x6354=(r21*sj6);
IkReal x6355=(cj6*r00);
IkReal x6356=((1.0)*x6347);
IkReal x6357=((1.0)*x6346);
IkReal x6358=(sj5*x6357);
evalcond[0]=((((-1.0)*r21*x6348*x6357))+(((-1.0)*x6354*x6356))+((x6347*x6350))+(((-1.0)*r22*x6358))+(((-1.0)*r20*x6352*x6357)));
evalcond[1]=((((-1.0)*r21*x6348*x6356))+((x6346*x6354))+(((-1.0)*x6350*x6357))+(((-1.0)*r22*sj5*x6356))+(((-1.0)*r20*x6352*x6356)));
evalcond[2]=(sj0+(((-1.0)*x6353*x6356))+(((-1.0)*r01*x6348*x6357))+((x6347*x6355))+(((-1.0)*r02*x6358))+(((-1.0)*r00*x6352*x6357)));
evalcond[3]=((((-1.0)*x6355*x6357))+cj0+((x6346*x6353))+(((-1.0)*r02*sj5*x6356))+(((-1.0)*r01*x6348*x6356))+(((-1.0)*r00*x6352*x6356)));
evalcond[4]=((((-1.0)*r12*sj5*x6356))+sj0+(((-1.0)*x6351*x6357))+((x6346*x6349))+(((-1.0)*r10*x6352*x6356))+(((-1.0)*r11*x6348*x6356)));
evalcond[5]=((((-1.0)*x6349*x6356))+((x6347*x6351))+(((-1.0)*r12*x6358))+(((-1.0)*r10*x6352*x6357))+(((-1.0)*cj0))+(((-1.0)*r11*x6348*x6357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6359=(cj5*sj0);
IkReal x6360=((1.0)*sj5);
CheckValue<IkReal> x6361=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x6360))+(((-1.0)*cj6*r11*x6360)))),-1);
if(!x6361.valid){
continue;
}
CheckValue<IkReal> x6362 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((cj6*r21*x6359))+((r22*sj0*sj5))+((r20*sj6*x6359))),IKFAST_ATAN2_MAGTHRESH);
if(!x6362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6361.value)))+(x6362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6363=IKsin(j4);
IkReal x6364=IKcos(j4);
IkReal x6365=(cj5*cj6);
IkReal x6366=(r11*sj6);
IkReal x6367=(cj6*r20);
IkReal x6368=(cj6*r10);
IkReal x6369=(cj5*sj6);
IkReal x6370=(r01*sj6);
IkReal x6371=(r21*sj6);
IkReal x6372=(cj6*r00);
IkReal x6373=((1.0)*x6364);
IkReal x6374=((1.0)*x6363);
IkReal x6375=(sj5*x6374);
evalcond[0]=((((-1.0)*r21*x6365*x6374))+(((-1.0)*x6371*x6373))+(((-1.0)*r22*x6375))+(((-1.0)*r20*x6369*x6374))+((x6364*x6367)));
evalcond[1]=((((-1.0)*r21*x6365*x6373))+(((-1.0)*r22*sj5*x6373))+(((-1.0)*x6367*x6374))+((x6363*x6371))+(((-1.0)*r20*x6369*x6373)));
evalcond[2]=(((x6364*x6372))+sj0+(((-1.0)*r02*x6375))+(((-1.0)*x6370*x6373))+(((-1.0)*r00*x6369*x6374))+(((-1.0)*r01*x6365*x6374)));
evalcond[3]=((((-1.0)*x6372*x6374))+cj0+(((-1.0)*r02*sj5*x6373))+((x6363*x6370))+(((-1.0)*r00*x6369*x6373))+(((-1.0)*r01*x6365*x6373)));
evalcond[4]=((((-1.0)*x6368*x6374))+(((-1.0)*r10*x6369*x6373))+sj0+(((-1.0)*r11*x6365*x6373))+((x6363*x6366))+(((-1.0)*r12*sj5*x6373)));
evalcond[5]=((((-1.0)*r10*x6369*x6374))+(((-1.0)*x6366*x6373))+(((-1.0)*r11*x6365*x6374))+(((-1.0)*r12*x6375))+(((-1.0)*cj0))+((x6364*x6368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6376=cj5*cj5;
IkReal x6377=cj6*cj6;
IkReal x6378=r20*r20;
IkReal x6379=r21*r21;
IkReal x6380=r22*r22;
IkReal x6381=(r22*sj5);
IkReal x6382=(cj6*r20);
IkReal x6383=(cj1*sj2);
IkReal x6384=(r21*sj6);
IkReal x6385=(cj5*r20*sj6);
IkReal x6386=(cj5*cj6*r21);
IkReal x6387=((1.0)*x6376);
IkReal x6388=(x6377*x6378);
IkReal x6389=(x6377*x6379);
CheckValue<IkReal> x6390=IKPowWithIntegerCheck(IKsign(((((2.0)*x6381*x6386))+(((2.0)*x6381*x6385))+(((-1.0)*x6389))+x6379+x6380+x6388+(((-1.0)*x6380*x6387))+(((-2.0)*x6382*x6384))+((x6376*x6389))+(((2.0)*x6376*x6382*x6384))+((x6376*x6378))+(((-1.0)*x6387*x6388)))),-1);
if(!x6390.valid){
continue;
}
CheckValue<IkReal> x6391 = IKatan2WithCheck(IkReal((((x6381*x6383))+((x6383*x6386))+((x6383*x6385))+(((-1.0)*sj1*x6384))+((sj1*x6382)))),((((-1.0)*x6382*x6383))+((x6383*x6384))+((sj1*x6381))+((sj1*x6386))+((sj1*x6385))),IKFAST_ATAN2_MAGTHRESH);
if(!x6391.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6390.value)))+(x6391.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6392=IKsin(j4);
IkReal x6393=IKcos(j4);
IkReal x6394=(cj5*cj6);
IkReal x6395=((1.0)*cj1);
IkReal x6396=(sj1*sj2);
IkReal x6397=(r11*sj6);
IkReal x6398=(cj6*r20);
IkReal x6399=(cj6*r10);
IkReal x6400=(cj5*sj6);
IkReal x6401=(r01*sj6);
IkReal x6402=(r21*sj6);
IkReal x6403=(cj6*r00);
IkReal x6404=((1.0)*x6393);
IkReal x6405=((1.0)*x6392);
IkReal x6406=(sj5*x6405);
evalcond[0]=((((-1.0)*r21*x6394*x6404))+sj1+(((-1.0)*r22*sj5*x6404))+(((-1.0)*r20*x6400*x6404))+((x6392*x6402))+(((-1.0)*x6398*x6405)));
evalcond[1]=((((-1.0)*r21*x6394*x6405))+(((-1.0)*x6402*x6404))+((cj1*sj2))+(((-1.0)*r20*x6400*x6405))+((x6393*x6398))+(((-1.0)*r22*x6406)));
evalcond[2]=((((-1.0)*x6403*x6405))+(((-1.0)*r02*sj5*x6404))+(((-1.0)*cj0*x6395))+((x6392*x6401))+(((-1.0)*r00*x6400*x6404))+(((-1.0)*r01*x6394*x6404)));
evalcond[3]=((((-1.0)*sj0*x6395))+(((-1.0)*r10*x6400*x6404))+((x6392*x6397))+(((-1.0)*r11*x6394*x6404))+(((-1.0)*r12*sj5*x6404))+(((-1.0)*x6399*x6405)));
evalcond[4]=((((-1.0)*r10*x6400*x6405))+(((-1.0)*r11*x6394*x6405))+((cj0*cj2))+((sj0*x6396))+((x6393*x6399))+(((-1.0)*r12*x6406))+(((-1.0)*x6397*x6404)));
evalcond[5]=(((cj0*x6396))+((x6393*x6403))+(((-1.0)*x6401*x6404))+(((-1.0)*cj2*sj0))+(((-1.0)*r02*x6406))+(((-1.0)*r00*x6400*x6405))+(((-1.0)*r01*x6394*x6405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6407=(cj6*sj1);
IkReal x6408=((1.0)*cj5);
IkReal x6409=((1.0)*sj5);
IkReal x6410=(cj1*sj0);
IkReal x6411=((1.0)*sj6);
CheckValue<IkReal> x6412=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x6409))+(((-1.0)*cj6*r01*x6409))+((cj5*r02)))),-1);
if(!x6412.valid){
continue;
}
CheckValue<IkReal> x6413 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x6408*x6410))+(((-1.0)*r10*sj1*sj6*x6408))+(((-1.0)*r22*x6409*x6410))+(((-1.0)*r12*sj1*x6409))+(((-1.0)*r11*x6407*x6408))+(((-1.0)*cj6*r21*x6408*x6410)))),(((r10*x6407))+(((-1.0)*r11*sj1*x6411))+((cj6*r20*x6410))+(((-1.0)*r21*x6410*x6411))),IKFAST_ATAN2_MAGTHRESH);
if(!x6413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6412.value)))+(x6413.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6414=IKsin(j4);
IkReal x6415=IKcos(j4);
IkReal x6416=(cj5*cj6);
IkReal x6417=((1.0)*cj1);
IkReal x6418=(sj1*sj2);
IkReal x6419=(r11*sj6);
IkReal x6420=(cj6*r20);
IkReal x6421=(cj6*r10);
IkReal x6422=(cj5*sj6);
IkReal x6423=(r01*sj6);
IkReal x6424=(r21*sj6);
IkReal x6425=(cj6*r00);
IkReal x6426=((1.0)*x6415);
IkReal x6427=((1.0)*x6414);
IkReal x6428=(sj5*x6427);
evalcond[0]=(sj1+(((-1.0)*r22*sj5*x6426))+(((-1.0)*r21*x6416*x6426))+(((-1.0)*r20*x6422*x6426))+((x6414*x6424))+(((-1.0)*x6420*x6427)));
evalcond[1]=((((-1.0)*r22*x6428))+((cj1*sj2))+(((-1.0)*x6424*x6426))+(((-1.0)*r21*x6416*x6427))+(((-1.0)*r20*x6422*x6427))+((x6415*x6420)));
evalcond[2]=((((-1.0)*r01*x6416*x6426))+(((-1.0)*r00*x6422*x6426))+(((-1.0)*r02*sj5*x6426))+(((-1.0)*x6425*x6427))+((x6414*x6423))+(((-1.0)*cj0*x6417)));
evalcond[3]=((((-1.0)*x6421*x6427))+(((-1.0)*r11*x6416*x6426))+((x6414*x6419))+(((-1.0)*sj0*x6417))+(((-1.0)*r12*sj5*x6426))+(((-1.0)*r10*x6422*x6426)));
evalcond[4]=(((sj0*x6418))+(((-1.0)*x6419*x6426))+(((-1.0)*r11*x6416*x6427))+((cj0*cj2))+((x6415*x6421))+(((-1.0)*r10*x6422*x6427))+(((-1.0)*r12*x6428)));
evalcond[5]=((((-1.0)*cj2*sj0))+((cj0*x6418))+(((-1.0)*r01*x6416*x6427))+(((-1.0)*r00*x6422*x6427))+((x6415*x6425))+(((-1.0)*r02*x6428))+(((-1.0)*x6423*x6426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6429=(cj0*cj1);
IkReal x6430=((1.0)*sj1);
IkReal x6431=((1.0)*cj5);
IkReal x6432=(cj5*x6430);
CheckValue<IkReal> x6433 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x6429*x6431))+(((-1.0)*r00*sj6*x6432))+(((-1.0)*cj6*r21*x6429*x6431))+(((-1.0)*r02*sj5*x6430))+(((-1.0)*r22*sj5*x6429))+(((-1.0)*cj6*r01*x6432)))),(((cj6*r00*sj1))+(((-1.0)*r21*sj6*x6429))+((cj6*r20*x6429))+(((-1.0)*r01*sj6*x6430))),IKFAST_ATAN2_MAGTHRESH);
if(!x6433.valid){
continue;
}
CheckValue<IkReal> x6434=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x6431))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x6434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6433.value)+(((1.5707963267949)*(x6434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6435=IKsin(j4);
IkReal x6436=IKcos(j4);
IkReal x6437=(cj5*cj6);
IkReal x6438=((1.0)*cj1);
IkReal x6439=(sj1*sj2);
IkReal x6440=(r11*sj6);
IkReal x6441=(cj6*r20);
IkReal x6442=(cj6*r10);
IkReal x6443=(cj5*sj6);
IkReal x6444=(r01*sj6);
IkReal x6445=(r21*sj6);
IkReal x6446=(cj6*r00);
IkReal x6447=((1.0)*x6436);
IkReal x6448=((1.0)*x6435);
IkReal x6449=(sj5*x6448);
evalcond[0]=((((-1.0)*r21*x6437*x6447))+sj1+(((-1.0)*r22*sj5*x6447))+(((-1.0)*r20*x6443*x6447))+((x6435*x6445))+(((-1.0)*x6441*x6448)));
evalcond[1]=((((-1.0)*r21*x6437*x6448))+((cj1*sj2))+(((-1.0)*r20*x6443*x6448))+(((-1.0)*x6445*x6447))+((x6436*x6441))+(((-1.0)*r22*x6449)));
evalcond[2]=((((-1.0)*x6446*x6448))+(((-1.0)*cj0*x6438))+(((-1.0)*r00*x6443*x6447))+(((-1.0)*r02*sj5*x6447))+(((-1.0)*r01*x6437*x6447))+((x6435*x6444)));
evalcond[3]=((((-1.0)*r12*sj5*x6447))+(((-1.0)*sj0*x6438))+(((-1.0)*r10*x6443*x6447))+(((-1.0)*r11*x6437*x6447))+(((-1.0)*x6442*x6448))+((x6435*x6440)));
evalcond[4]=(((cj0*cj2))+(((-1.0)*r12*x6449))+(((-1.0)*r10*x6443*x6448))+(((-1.0)*r11*x6437*x6448))+((sj0*x6439))+((x6436*x6442))+(((-1.0)*x6440*x6447)));
evalcond[5]=(((cj0*x6439))+(((-1.0)*r02*x6449))+(((-1.0)*cj2*sj0))+(((-1.0)*x6444*x6447))+(((-1.0)*r00*x6443*x6448))+(((-1.0)*r01*x6437*x6448))+((x6436*x6446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6450=cj5*cj5;
IkReal x6451=cj6*cj6;
IkReal x6452=r20*r20;
IkReal x6453=r21*r21;
IkReal x6454=r22*r22;
IkReal x6455=(r22*sj5);
IkReal x6456=(cj6*r20);
IkReal x6457=(cj1*sj2);
IkReal x6458=(r21*sj6);
IkReal x6459=(cj5*r20*sj6);
IkReal x6460=(cj5*cj6*r21);
IkReal x6461=((1.0)*x6450);
IkReal x6462=(x6451*x6452);
IkReal x6463=(x6451*x6453);
CheckValue<IkReal> x6464 = IKatan2WithCheck(IkReal((((x6457*x6459))+((x6455*x6457))+((sj1*x6456))+(((-1.0)*sj1*x6458))+((x6457*x6460)))),(((x6457*x6458))+((sj1*x6460))+((sj1*x6459))+((sj1*x6455))+(((-1.0)*x6456*x6457))),IKFAST_ATAN2_MAGTHRESH);
if(!x6464.valid){
continue;
}
CheckValue<IkReal> x6465=IKPowWithIntegerCheck(IKsign((((x6450*x6452))+x6453+x6454+x6462+(((-1.0)*x6454*x6461))+(((2.0)*x6455*x6460))+(((2.0)*x6450*x6456*x6458))+(((2.0)*x6455*x6459))+(((-1.0)*x6461*x6462))+((x6450*x6463))+(((-1.0)*x6463))+(((-2.0)*x6456*x6458)))),-1);
if(!x6465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6464.value)+(((1.5707963267949)*(x6465.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6466=IKsin(j4);
IkReal x6467=IKcos(j4);
IkReal x6468=((1.0)*r21);
IkReal x6469=(r22*sj5);
IkReal x6470=(cj5*cj6);
IkReal x6471=(cj6*r20);
IkReal x6472=(cj5*r20);
IkReal x6473=(sj6*x6467);
IkReal x6474=((1.0)*x6466);
evalcond[0]=(sj1+(((-1.0)*x6467*x6469))+(((-1.0)*x6467*x6468*x6470))+((r21*sj6*x6466))+(((-1.0)*x6471*x6474))+(((-1.0)*x6472*x6473)));
evalcond[1]=(((x6467*x6471))+((cj1*sj2))+(((-1.0)*x6468*x6473))+(((-1.0)*sj6*x6472*x6474))+(((-1.0)*x6469*x6474))+(((-1.0)*x6466*x6468*x6470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x6475=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x6475;
j0eval[1]=IKsign(x6475);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x6476=((1.0)*cj5);
IkReal x6477=(cj4*sj6);
IkReal x6478=((0.01)*cj5);
IkReal x6479=(r20*sj6);
IkReal x6480=(cj6*r21);
IkReal x6481=(sj4*sj6);
IkReal x6482=(r22*sj5);
IkReal x6483=(cj4*cj6);
IkReal x6484=((0.37429)*sj5);
IkReal x6485=((1.0)*cj6*sj4);
IkReal x6486=((1.0)*cj4*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r21*x6477))+(((-1.0)*sj4*x6476*x6479))+((r20*x6483))+(((-1.0)*sj4*x6482))+(((-1.0)*sj4*x6476*x6480)));
evalcond[2]=((-0.36442)+(((-1.0)*x6480*x6484))+((x6478*x6479))+(((-1.0)*pz))+(((-1.0)*x6479*x6484))+(((0.01)*x6482))+(((0.37429)*cj5*r22))+((x6478*x6480)));
evalcond[3]=((1.0)+((r21*x6481))+(((-1.0)*r20*x6476*x6477))+(((-1.0)*cj4*x6476*x6480))+(((-1.0)*cj4*x6482))+(((-1.0)*r20*x6485)));
evalcond[4]=(((sj5*x6479))+(((-1.0)*r22*x6476))+((sj5*x6480)));
evalcond[5]=(((r01*x6481))+(((-1.0)*r00*x6485))+(((-1.0)*r02*x6486))+(((-1.0)*r01*x6476*x6483))+(((-1.0)*r00*x6476*x6477)));
evalcond[6]=(((r11*x6481))+(((-1.0)*r12*x6486))+(((-1.0)*r10*x6485))+(((-1.0)*r11*x6476*x6483))+(((-1.0)*r10*x6476*x6477)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6487=(sj2*sj5);
IkReal x6488=(cj6*r01);
IkReal x6489=(r00*sj6);
IkReal x6490=(cj6*r11);
IkReal x6491=(cj2*sj5);
IkReal x6492=(r10*sj6);
IkReal x6493=(cj5*sj2);
IkReal x6494=((1.0)*cj2*cj5);
if( IKabs(((((-1.0)*r02*x6493))+((x6491*x6492))+(((-1.0)*r12*x6494))+((x6487*x6489))+((x6487*x6488))+((x6490*x6491)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x6494))+((r12*x6493))+((x6489*x6491))+(((-1.0)*x6487*x6492))+(((-1.0)*x6487*x6490))+((x6488*x6491)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x6493))+((x6491*x6492))+(((-1.0)*r12*x6494))+((x6487*x6489))+((x6487*x6488))+((x6490*x6491))))+IKsqr(((((-1.0)*r02*x6494))+((r12*x6493))+((x6489*x6491))+(((-1.0)*x6487*x6492))+(((-1.0)*x6487*x6490))+((x6488*x6491))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r02*x6493))+((x6491*x6492))+(((-1.0)*r12*x6494))+((x6487*x6489))+((x6487*x6488))+((x6490*x6491))), ((((-1.0)*r02*x6494))+((r12*x6493))+((x6489*x6491))+(((-1.0)*x6487*x6492))+(((-1.0)*x6487*x6490))+((x6488*x6491))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6495=IKcos(j0);
IkReal x6496=IKsin(j0);
IkReal x6497=((1.0)*sj4);
IkReal x6498=((0.37429)*sj5);
IkReal x6499=(r10*sj6);
IkReal x6500=(cj5*r12);
IkReal x6501=(cj6*r01);
IkReal x6502=(r00*sj6);
IkReal x6503=(r12*sj5);
IkReal x6504=(cj6*r11);
IkReal x6505=(r02*sj5);
IkReal x6506=((0.01)*cj5);
IkReal x6507=(cj4*cj6);
IkReal x6508=(cj5*r02);
IkReal x6509=(sj2*x6495);
IkReal x6510=(cj5*x6504);
IkReal x6511=((0.069)*x6496);
IkReal x6512=(cj2*x6495);
IkReal x6513=((0.069)*x6495);
IkReal x6514=(sj2*x6496);
IkReal x6515=((1.0)*cj4*sj6);
IkReal x6516=((1.0)*cj2*x6496);
evalcond[0]=((((-1.0)*x6500))+x6509+((sj5*x6499))+(((-1.0)*x6516))+((sj5*x6504)));
evalcond[1]=((((-1.0)*x6508))+((sj5*x6501))+((sj5*x6502))+(((-1.0)*x6514))+(((-1.0)*x6512)));
evalcond[2]=(((r10*x6507))+x6512+x6514+(((-1.0)*x6497*x6503))+(((-1.0)*r11*x6515))+(((-1.0)*cj5*x6497*x6499))+(((-1.0)*x6497*x6510)));
evalcond[3]=((((-1.0)*cj5*x6497*x6501))+(((-1.0)*cj5*x6497*x6502))+x6509+(((-1.0)*x6497*x6505))+(((-1.0)*x6516))+((r00*x6507))+(((-1.0)*r01*x6515)));
evalcond[4]=((((0.01)*x6505))+((x6502*x6506))+(((-1.0)*sj2*x6511))+(((-1.0)*x6498*x6501))+(((-1.0)*x6498*x6502))+x6513+(((-1.0)*px))+(((-0.069)*x6512))+(((0.37429)*x6508))+((x6501*x6506)));
evalcond[5]=((((0.01)*x6503))+(((-1.0)*cj2*x6511))+(((-1.0)*x6498*x6504))+(((0.069)*x6509))+x6511+(((-1.0)*py))+((x6504*x6506))+((x6499*x6506))+(((0.37429)*x6500))+(((-1.0)*x6498*x6499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6517=((1.0)*cj5);
IkReal x6518=(cj4*sj6);
IkReal x6519=((0.01)*cj5);
IkReal x6520=(r20*sj6);
IkReal x6521=(cj6*r21);
IkReal x6522=(sj4*sj6);
IkReal x6523=(r22*sj5);
IkReal x6524=(cj4*cj6);
IkReal x6525=((0.37429)*sj5);
IkReal x6526=((1.0)*cj6*sj4);
IkReal x6527=((1.0)*cj4*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r21*x6518))+((r20*x6524))+(((-1.0)*sj4*x6517*x6521))+(((-1.0)*sj4*x6517*x6520))+(((-1.0)*sj4*x6523)));
evalcond[2]=((0.36442)+(((-1.0)*x6521*x6525))+(((-1.0)*pz))+(((0.01)*x6523))+(((-1.0)*x6520*x6525))+((x6519*x6521))+((x6519*x6520))+(((0.37429)*cj5*r22)));
evalcond[3]=((-1.0)+(((-1.0)*cj4*x6523))+(((-1.0)*r20*x6526))+(((-1.0)*cj4*x6517*x6521))+((r21*x6522))+(((-1.0)*r20*x6517*x6518)));
evalcond[4]=((((-1.0)*r22*x6517))+((sj5*x6520))+((sj5*x6521)));
evalcond[5]=((((-1.0)*r00*x6517*x6518))+(((-1.0)*r01*x6517*x6524))+(((-1.0)*r02*x6527))+((r01*x6522))+(((-1.0)*r00*x6526)));
evalcond[6]=((((-1.0)*r11*x6517*x6524))+(((-1.0)*r12*x6527))+(((-1.0)*r10*x6517*x6518))+(((-1.0)*r10*x6526))+((r11*x6522)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6528=(cj5*r02);
IkReal x6529=(sj2*sj5);
IkReal x6530=(cj6*r01);
IkReal x6531=(cj5*r12);
IkReal x6532=(cj2*sj5);
IkReal x6533=((1.0)*cj6*r11);
IkReal x6534=((1.0)*sj6*x6532);
if( IKabs(((((-1.0)*r10*x6534))+(((-1.0)*sj2*x6528))+(((-1.0)*x6532*x6533))+((r00*sj6*x6529))+((cj2*x6531))+((x6529*x6530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x6534))+(((-1.0)*x6529*x6533))+(((-1.0)*x6530*x6532))+((cj2*x6528))+((sj2*x6531))+(((-1.0)*r10*sj6*x6529)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x6534))+(((-1.0)*sj2*x6528))+(((-1.0)*x6532*x6533))+((r00*sj6*x6529))+((cj2*x6531))+((x6529*x6530))))+IKsqr(((((-1.0)*r00*x6534))+(((-1.0)*x6529*x6533))+(((-1.0)*x6530*x6532))+((cj2*x6528))+((sj2*x6531))+(((-1.0)*r10*sj6*x6529))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x6534))+(((-1.0)*sj2*x6528))+(((-1.0)*x6532*x6533))+((r00*sj6*x6529))+((cj2*x6531))+((x6529*x6530))), ((((-1.0)*r00*x6534))+(((-1.0)*x6529*x6533))+(((-1.0)*x6530*x6532))+((cj2*x6528))+((sj2*x6531))+(((-1.0)*r10*sj6*x6529))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6535=IKcos(j0);
IkReal x6536=IKsin(j0);
IkReal x6537=((1.0)*sj4);
IkReal x6538=((0.37429)*sj5);
IkReal x6539=(r10*sj6);
IkReal x6540=(cj5*r12);
IkReal x6541=(cj6*r01);
IkReal x6542=(r00*sj6);
IkReal x6543=(r12*sj5);
IkReal x6544=(cj6*r11);
IkReal x6545=(r02*sj5);
IkReal x6546=((0.01)*cj5);
IkReal x6547=(cj4*cj6);
IkReal x6548=(cj5*r02);
IkReal x6549=(cj2*x6535);
IkReal x6550=(cj5*x6544);
IkReal x6551=((0.069)*x6536);
IkReal x6552=(sj2*x6535);
IkReal x6553=(cj2*x6536);
IkReal x6554=((1.0)*cj4*sj6);
IkReal x6555=((1.0)*sj2*x6536);
evalcond[0]=(((sj5*x6544))+x6552+x6553+(((-1.0)*x6540))+((sj5*x6539)));
evalcond[1]=(((sj5*x6541))+((sj5*x6542))+(((-1.0)*x6555))+x6549+(((-1.0)*x6548)));
evalcond[2]=((((-1.0)*x6555))+(((-1.0)*r11*x6554))+x6549+(((-1.0)*x6537*x6550))+(((-1.0)*x6537*x6543))+(((-1.0)*cj5*x6537*x6539))+((r10*x6547)));
evalcond[3]=((((-1.0)*x6537*x6545))+(((-1.0)*x6552))+(((-1.0)*x6553))+(((-1.0)*cj5*x6537*x6541))+(((-1.0)*cj5*x6537*x6542))+((r00*x6547))+(((-1.0)*r01*x6554)));
evalcond[4]=((((0.37429)*x6548))+(((0.069)*x6549))+(((-1.0)*sj2*x6551))+(((0.01)*x6545))+(((0.069)*x6535))+((x6541*x6546))+(((-1.0)*px))+((x6542*x6546))+(((-1.0)*x6538*x6542))+(((-1.0)*x6538*x6541)));
evalcond[5]=(((x6539*x6546))+(((0.069)*x6552))+(((0.37429)*x6540))+((x6544*x6546))+(((0.01)*x6543))+x6551+((cj2*x6551))+(((-1.0)*py))+(((-1.0)*x6538*x6544))+(((-1.0)*x6538*x6539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6556=(cj6*r21);
IkReal x6557=((1.0)*cj5);
IkReal x6558=(r21*sj6);
IkReal x6559=(r22*sj5);
IkReal x6560=((0.37429)*sj5);
IkReal x6561=((1.0)*sj4);
IkReal x6562=((1.0)*cj4);
IkReal x6563=((0.01)*cj5);
IkReal x6564=(cj4*r20);
IkReal x6565=(r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(cj1+((cj6*x6564))+(((-1.0)*sj4*x6557*x6565))+(((-1.0)*sj4*x6556*x6557))+(((-1.0)*x6559*x6561))+(((-1.0)*x6558*x6562)));
evalcond[2]=(((x6563*x6565))+(((0.01)*x6559))+(((-1.0)*x6556*x6560))+(((-1.0)*pz))+((x6556*x6563))+(((-1.0)*x6560*x6565))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*sj6*x6557*x6564))+((sj4*x6558))+(((-1.0)*cj4*x6556*x6557))+(((-1.0)*cj6*r20*x6561))+(((-1.0)*x6559*x6562)));
evalcond[4]=(((sj5*x6556))+((sj5*x6565))+(((-1.0)*r22*x6557)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6566=(cj6*sj5);
IkReal x6567=(sj5*sj6);
if( IKabs((((r00*x6567))+((r01*x6566))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r10*x6567))+(((-1.0)*r11*x6566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x6567))+((r01*x6566))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r10*x6567))+(((-1.0)*r11*x6566))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x6567))+((r01*x6566))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r10*x6567))+(((-1.0)*r11*x6566))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6568=IKsin(j0);
IkReal x6569=IKcos(j0);
IkReal x6570=((1.0)*cj5);
IkReal x6571=(r11*sj4);
IkReal x6572=(r00*sj6);
IkReal x6573=((0.37429)*sj5);
IkReal x6574=(r10*sj6);
IkReal x6575=(cj6*sj4);
IkReal x6576=((0.36442)*cj1);
IkReal x6577=(cj6*r01);
IkReal x6578=(cj6*r11);
IkReal x6579=((0.01)*cj5);
IkReal x6580=(cj4*cj6);
IkReal x6581=((0.37429)*cj5);
IkReal x6582=((1.0)*cj4);
IkReal x6583=(r12*sj5);
IkReal x6584=(r01*sj6);
IkReal x6585=(r02*sj5);
IkReal x6586=((0.069)*x6568);
IkReal x6587=((0.069)*x6569);
IkReal x6588=((1.0)*sj4*sj5);
IkReal x6589=((1.0)*x6568);
evalcond[0]=(((sj5*x6578))+((sj5*x6574))+x6569+(((-1.0)*r12*x6570)));
evalcond[1]=(((sj5*x6572))+((sj5*x6577))+(((-1.0)*r02*x6570))+(((-1.0)*x6589)));
evalcond[2]=((((-1.0)*sj4*x6570*x6574))+(((-1.0)*cj6*x6570*x6571))+(((-1.0)*sj4*x6583))+(((-1.0)*r11*sj6*x6582))+((sj1*x6568))+((r10*x6580)));
evalcond[3]=((((-1.0)*sj4*x6570*x6572))+(((-1.0)*r01*x6570*x6575))+((r00*x6580))+(((-1.0)*sj4*x6585))+(((-1.0)*x6582*x6584))+((sj1*x6569)));
evalcond[4]=((((-1.0)*r00*x6575))+((sj4*x6584))+(((-1.0)*cj4*x6570*x6577))+(((-1.0)*cj4*x6570*x6572))+(((-1.0)*x6582*x6585))+(((-1.0)*cj1*x6569)));
evalcond[5]=((((-1.0)*cj4*x6570*x6574))+(((-1.0)*cj4*x6570*x6578))+((sj6*x6571))+(((-1.0)*r10*x6575))+(((-1.0)*x6582*x6583))+(((-1.0)*cj1*x6589)));
evalcond[6]=(((r02*x6581))+(((-1.0)*x6572*x6573))+(((0.01)*x6585))+(((-1.0)*x6573*x6577))+((x6572*x6579))+x6587+(((-1.0)*px))+((x6569*x6576))+(((-1.0)*x6586))+((x6577*x6579)));
evalcond[7]=((((0.01)*x6583))+(((-1.0)*x6573*x6578))+(((-1.0)*x6573*x6574))+((x6568*x6576))+((x6578*x6579))+x6587+x6586+(((-1.0)*py))+((x6574*x6579))+((r12*x6581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6590=((1.0)*cj5);
IkReal x6591=(r20*sj6);
IkReal x6592=((0.01)*cj5);
IkReal x6593=(cj6*r21);
IkReal x6594=(r22*sj5);
IkReal x6595=(r21*sj6);
IkReal x6596=((1.0)*cj4);
IkReal x6597=((1.0)*sj4);
IkReal x6598=(cj6*r20);
IkReal x6599=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x6594*x6597))+((cj4*x6598))+(((-1.0)*x6595*x6596))+(((-1.0)*cj1))+(((-1.0)*sj4*x6590*x6591))+(((-1.0)*sj4*x6590*x6593)));
evalcond[2]=((((0.01)*x6594))+(((-1.0)*x6591*x6599))+((x6591*x6592))+((x6592*x6593))+(((-1.0)*pz))+(((-1.0)*x6593*x6599))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((sj4*x6595))+sj1+(((-1.0)*x6594*x6596))+(((-1.0)*cj4*x6590*x6593))+(((-1.0)*cj4*x6590*x6591))+(((-1.0)*x6597*x6598)));
evalcond[4]=(((sj5*x6591))+((sj5*x6593))+(((-1.0)*r22*x6590)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6600=(sj5*sj6);
IkReal x6601=(cj6*sj5);
if( IKabs(((((-1.0)*r01*x6601))+(((-1.0)*r00*x6600))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x6600))+((r11*x6601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x6601))+(((-1.0)*r00*x6600))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x6600))+((r11*x6601))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x6601))+(((-1.0)*r00*x6600))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x6600))+((r11*x6601))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6602=IKsin(j0);
IkReal x6603=IKcos(j0);
IkReal x6604=((1.0)*cj5);
IkReal x6605=(r11*sj4);
IkReal x6606=(r00*sj6);
IkReal x6607=((0.37429)*sj5);
IkReal x6608=(r10*sj6);
IkReal x6609=(cj6*sj4);
IkReal x6610=((0.36442)*cj1);
IkReal x6611=(cj6*r01);
IkReal x6612=(cj6*r11);
IkReal x6613=((0.01)*cj5);
IkReal x6614=(cj4*cj6);
IkReal x6615=((0.37429)*cj5);
IkReal x6616=((1.0)*cj4);
IkReal x6617=(r12*sj5);
IkReal x6618=(r01*sj6);
IkReal x6619=(r02*sj5);
IkReal x6620=((0.069)*x6602);
IkReal x6621=((0.069)*x6603);
IkReal x6622=((1.0)*sj4*sj5);
IkReal x6623=((1.0)*x6603);
IkReal x6624=((1.0)*x6602);
evalcond[0]=(x6602+((sj5*x6606))+(((-1.0)*r02*x6604))+((sj5*x6611)));
evalcond[1]=((((-1.0)*x6623))+((sj5*x6608))+((sj5*x6612))+(((-1.0)*r12*x6604)));
evalcond[2]=((((-1.0)*sj4*x6604*x6608))+(((-1.0)*cj6*x6604*x6605))+((r10*x6614))+(((-1.0)*sj4*x6617))+(((-1.0)*sj1*x6624))+(((-1.0)*r11*sj6*x6616)));
evalcond[3]=((((-1.0)*sj4*x6604*x6606))+((r00*x6614))+(((-1.0)*sj4*x6619))+(((-1.0)*sj1*x6623))+(((-1.0)*x6616*x6618))+(((-1.0)*r01*x6604*x6609)));
evalcond[4]=(((sj4*x6618))+(((-1.0)*x6616*x6619))+(((-1.0)*cj4*x6604*x6606))+(((-1.0)*r00*x6609))+(((-1.0)*cj4*x6604*x6611))+(((-1.0)*cj1*x6623)));
evalcond[5]=(((sj6*x6605))+(((-1.0)*x6616*x6617))+(((-1.0)*cj4*x6604*x6608))+(((-1.0)*r10*x6609))+(((-1.0)*cj4*x6604*x6612))+(((-1.0)*cj1*x6624)));
evalcond[6]=(((r02*x6615))+((x6603*x6610))+(((-1.0)*x6607*x6611))+((x6611*x6613))+x6620+x6621+((x6606*x6613))+(((-1.0)*px))+(((-1.0)*x6606*x6607))+(((0.01)*x6619)));
evalcond[7]=((((-1.0)*x6621))+((x6602*x6610))+(((-1.0)*x6607*x6612))+((x6612*x6613))+x6620+((x6608*x6613))+(((-1.0)*py))+((r12*x6615))+(((-1.0)*x6607*x6608))+(((0.01)*x6617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6625=((1.0)*cj5);
IkReal x6626=(r20*sj6);
IkReal x6627=((0.01)*cj5);
IkReal x6628=(cj6*r21);
IkReal x6629=(r22*sj5);
IkReal x6630=(r21*sj6);
IkReal x6631=((1.0)*cj4);
IkReal x6632=((1.0)*sj4);
IkReal x6633=(cj6*r20);
IkReal x6634=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(sj2+(((-1.0)*sj4*x6625*x6628))+(((-1.0)*sj4*x6625*x6626))+(((-1.0)*x6630*x6631))+((cj4*x6633))+(((-1.0)*x6629*x6632)));
evalcond[2]=((((-1.0)*x6628*x6634))+(((0.01)*x6629))+((x6626*x6627))+((x6627*x6628))+(((-0.069)*cj2))+(((-1.0)*pz))+(((-1.0)*x6626*x6634))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*cj4*x6625*x6628))+(((-1.0)*cj4*x6625*x6626))+(((-1.0)*x6629*x6631))+(((-1.0)*x6632*x6633))+((sj4*x6630)));
evalcond[4]=((((-1.0)*r22*x6625))+((sj5*x6628))+((sj5*x6626))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x6635=(cj6*sj5);
IkReal x6636=(sj5*sj6);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r10*x6636))+(((-1.0)*r11*x6635)))))+(IKabs((((r00*x6636))+((r01*x6635))+(((-1.0)*cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
j0eval[1]=cj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x6637=((1.0)*cj5);
IkReal x6638=(r20*sj6);
IkReal x6639=(sj5*sj6);
IkReal x6640=(cj6*sj5);
IkReal x6641=((0.01)*cj5);
IkReal x6642=(cj6*r21);
IkReal x6643=(r22*sj5);
IkReal x6644=(r21*sj6);
IkReal x6645=((1.0)*cj4);
IkReal x6646=((1.0)*sj4);
IkReal x6647=(cj6*r20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x6637*x6638))+(((-1.0)*sj4*x6637*x6642))+(((-1.0)*x6643*x6646))+((cj4*x6647))+(((-1.0)*x6644*x6645)));
evalcond[2]=((-0.069)+((x6638*x6641))+((x6641*x6642))+(((-1.0)*pz))+(((0.01)*x6643))+(((-0.37429)*r21*x6640))+(((-0.37429)*sj5*x6638))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*x6646*x6647))+(((-1.0)*cj4*x6637*x6642))+(((-1.0)*cj4*x6637*x6638))+(((-1.0)*x6643*x6645))+((sj4*x6644)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x6637))+((r21*x6640))+((sj5*x6638)));
evalcond[5]=(((r10*x6639))+((r11*x6640))+(((-1.0)*r12*x6637)));
evalcond[6]=(((r00*x6639))+((r01*x6640))+(((-1.0)*r02*x6637)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6648=(cj4*sj6);
IkReal x6649=((1.0)*r01);
IkReal x6650=(cj5*sj4);
IkReal x6651=(sj4*sj5);
IkReal x6652=(cj4*cj6);
if( IKabs(((((-1.0)*r00*sj6*x6650))+((r00*x6652))+(((-1.0)*cj6*x6649*x6650))+(((-1.0)*r02*x6651))+(((-1.0)*x6648*x6649)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x6652))+((r10*sj6*x6650))+((cj6*r11*x6650))+((r12*x6651))+((r11*x6648)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj6*x6650))+((r00*x6652))+(((-1.0)*cj6*x6649*x6650))+(((-1.0)*r02*x6651))+(((-1.0)*x6648*x6649))))+IKsqr(((((-1.0)*r10*x6652))+((r10*sj6*x6650))+((cj6*r11*x6650))+((r12*x6651))+((r11*x6648))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*sj6*x6650))+((r00*x6652))+(((-1.0)*cj6*x6649*x6650))+(((-1.0)*r02*x6651))+(((-1.0)*x6648*x6649))), ((((-1.0)*r10*x6652))+((r10*sj6*x6650))+((cj6*r11*x6650))+((r12*x6651))+((r11*x6648))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6653=IKcos(j0);
IkReal x6654=IKsin(j0);
IkReal x6655=((1.0)*sj4);
IkReal x6656=(r10*sj6);
IkReal x6657=((0.37429)*sj5);
IkReal x6658=(cj6*r00);
IkReal x6659=((0.37429)*cj5);
IkReal x6660=((0.01)*cj5);
IkReal x6661=((1.0)*cj4);
IkReal x6662=(r00*sj6);
IkReal x6663=(r02*sj5);
IkReal x6664=(r12*sj5);
IkReal x6665=(cj6*r10);
IkReal x6666=(r01*sj6);
IkReal x6667=(r11*sj6);
IkReal x6668=((1.0)*x6654);
IkReal x6669=(cj5*cj6*r11);
IkReal x6670=(cj5*cj6*r01);
evalcond[0]=(x6653+(((-1.0)*x6661*x6667))+(((-1.0)*cj5*x6655*x6656))+((cj4*x6665))+(((-1.0)*x6655*x6664))+(((-1.0)*x6655*x6669)));
evalcond[1]=((((-1.0)*x6655*x6670))+(((-1.0)*x6668))+(((-1.0)*x6661*x6666))+(((-1.0)*cj5*x6655*x6662))+((cj4*x6658))+(((-1.0)*x6655*x6663)));
evalcond[2]=((((-1.0)*x6661*x6663))+(((-1.0)*x6653))+((sj4*x6666))+(((-1.0)*x6655*x6658))+(((-1.0)*x6661*x6670))+(((-1.0)*cj5*x6661*x6662)));
evalcond[3]=((((-1.0)*x6668))+(((-1.0)*x6661*x6669))+(((-1.0)*x6661*x6664))+((sj4*x6667))+(((-1.0)*x6655*x6665))+(((-1.0)*cj5*x6656*x6661)));
evalcond[4]=(((x6660*x6662))+(((-1.0)*x6657*x6662))+(((0.01)*x6663))+((r02*x6659))+(((0.43342)*x6653))+(((-1.0)*px))+(((-1.0)*cj6*r01*x6657))+((cj6*r01*x6660)));
evalcond[5]=(((x6656*x6660))+((cj6*r11*x6660))+((r12*x6659))+(((0.01)*x6664))+(((0.43342)*x6654))+(((-1.0)*py))+(((-1.0)*cj6*r11*x6657))+(((-1.0)*x6656*x6657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6671=((1.0)*cj5);
IkReal x6672=(r20*sj6);
IkReal x6673=(sj5*sj6);
IkReal x6674=(cj6*sj5);
IkReal x6675=((0.01)*cj5);
IkReal x6676=(cj6*r21);
IkReal x6677=(r22*sj5);
IkReal x6678=(r21*sj6);
IkReal x6679=((1.0)*cj4);
IkReal x6680=((1.0)*sj4);
IkReal x6681=(cj6*r20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x6671*x6676))+(((-1.0)*sj4*x6671*x6672))+((cj4*x6681))+(((-1.0)*x6678*x6679))+(((-1.0)*x6677*x6680)));
evalcond[2]=((0.069)+(((0.01)*x6677))+((x6672*x6675))+(((-0.37429)*sj5*x6672))+(((-1.0)*pz))+(((-0.37429)*r21*x6674))+((x6675*x6676))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*x6680*x6681))+((sj4*x6678))+(((-1.0)*cj4*x6671*x6672))+(((-1.0)*cj4*x6671*x6676))+(((-1.0)*x6677*x6679)));
evalcond[4]=((1.0)+(((-1.0)*r22*x6671))+((sj5*x6672))+((r21*x6674)));
evalcond[5]=(((r11*x6674))+(((-1.0)*r12*x6671))+((r10*x6673)));
evalcond[6]=((((-1.0)*r02*x6671))+((r00*x6673))+((r01*x6674)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6682=((1.0)*cj4);
IkReal x6683=(sj4*sj5);
IkReal x6684=(cj5*sj4*sj6);
IkReal x6685=(cj5*cj6*sj4);
if( IKabs((((r02*x6683))+((r01*x6685))+((r00*x6684))+((cj4*r01*sj6))+(((-1.0)*cj6*r00*x6682)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x6684))+(((-1.0)*r11*sj6*x6682))+((cj4*cj6*r10))+(((-1.0)*r12*x6683))+(((-1.0)*r11*x6685)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x6683))+((r01*x6685))+((r00*x6684))+((cj4*r01*sj6))+(((-1.0)*cj6*r00*x6682))))+IKsqr(((((-1.0)*r10*x6684))+(((-1.0)*r11*sj6*x6682))+((cj4*cj6*r10))+(((-1.0)*r12*x6683))+(((-1.0)*r11*x6685))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r02*x6683))+((r01*x6685))+((r00*x6684))+((cj4*r01*sj6))+(((-1.0)*cj6*r00*x6682))), ((((-1.0)*r10*x6684))+(((-1.0)*r11*sj6*x6682))+((cj4*cj6*r10))+(((-1.0)*r12*x6683))+(((-1.0)*r11*x6685))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6686=IKsin(j0);
IkReal x6687=IKcos(j0);
IkReal x6688=((1.0)*sj4);
IkReal x6689=(r10*sj6);
IkReal x6690=((0.37429)*sj5);
IkReal x6691=(cj6*r00);
IkReal x6692=((0.37429)*cj5);
IkReal x6693=((0.01)*cj5);
IkReal x6694=((1.0)*cj4);
IkReal x6695=(r00*sj6);
IkReal x6696=(r02*sj5);
IkReal x6697=(r12*sj5);
IkReal x6698=(cj6*r10);
IkReal x6699=(r01*sj6);
IkReal x6700=(r11*sj6);
IkReal x6701=((1.0)*x6687);
IkReal x6702=(cj5*cj6*r11);
IkReal x6703=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*x6694*x6699))+(((-1.0)*cj5*x6688*x6695))+((cj4*x6691))+x6686+(((-1.0)*x6688*x6696))+(((-1.0)*x6688*x6703)));
evalcond[1]=(((cj4*x6698))+(((-1.0)*x6688*x6697))+(((-1.0)*x6701))+(((-1.0)*x6694*x6700))+(((-1.0)*x6688*x6702))+(((-1.0)*cj5*x6688*x6689)));
evalcond[2]=((((-1.0)*x6694*x6696))+(((-1.0)*cj5*x6694*x6695))+(((-1.0)*x6688*x6691))+(((-1.0)*x6701))+(((-1.0)*x6694*x6703))+((sj4*x6699)));
evalcond[3]=((((-1.0)*x6694*x6697))+((sj4*x6700))+(((-1.0)*cj5*x6689*x6694))+(((-1.0)*x6688*x6698))+(((-1.0)*x6694*x6702))+(((-1.0)*x6686)));
evalcond[4]=(((cj6*r01*x6693))+((x6693*x6695))+(((-1.0)*px))+(((-1.0)*x6690*x6695))+(((0.01)*x6696))+(((0.43342)*x6687))+(((-1.0)*cj6*r01*x6690))+((r02*x6692)));
evalcond[5]=(((cj6*r11*x6693))+((r12*x6692))+(((-1.0)*x6689*x6690))+(((-1.0)*cj6*r11*x6690))+((x6689*x6693))+(((-1.0)*py))+(((0.01)*x6697))+(((0.43342)*x6686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6704=((1.0)*cj5);
IkReal x6705=(r20*sj6);
IkReal x6706=((0.01)*cj5);
IkReal x6707=(cj4*cj6);
IkReal x6708=(r22*sj5);
IkReal x6709=(r21*sj6);
IkReal x6710=((1.0)*cj4);
IkReal x6711=(cj6*r21);
IkReal x6712=(sj4*sj6);
IkReal x6713=((0.37429)*sj5);
IkReal x6714=((1.0)*sj4*sj5);
IkReal x6715=(cj6*sj4*x6704);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*sj4*x6708))+(((-1.0)*sj4*x6704*x6711))+((r20*x6707))+(((-1.0)*sj4*x6704*x6705))+(((-1.0)*x6709*x6710)));
evalcond[2]=(((x6705*x6706))+(((0.01)*x6708))+(((-1.0)*x6711*x6713))+(((-1.0)*x6705*x6713))+(((-1.0)*pz))+((x6706*x6711))+(((0.37429)*cj5*r22)));
evalcond[3]=(((r10*x6707))+(((-1.0)*r10*x6704*x6712))+(((-1.0)*r11*x6715))+(((-1.0)*r11*sj6*x6710))+(((-1.0)*r12*x6714)));
evalcond[4]=((((-1.0)*r01*sj6*x6710))+((r00*x6707))+(((-1.0)*r00*x6704*x6712))+(((-1.0)*r02*x6714))+(((-1.0)*r01*x6715)));
evalcond[5]=(((sj4*x6709))+(((-1.0)*r21*x6704*x6707))+(((-1.0)*cj4*x6704*x6705))+(((-1.0)*x6708*x6710))+(((-1.0)*cj6*r20*sj4)));
evalcond[6]=(((sj5*x6711))+(((-1.0)*r22*x6704))+((sj5*x6705)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6716=(cj6*sj5);
IkReal x6717=(sj5*sj6);
if( IKabs((((r01*x6716))+(((-1.0)*cj5*r02))+((r00*x6717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r11*x6716))+(((-1.0)*r10*x6717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x6716))+(((-1.0)*cj5*r02))+((r00*x6717))))+IKsqr((((cj5*r12))+(((-1.0)*r11*x6716))+(((-1.0)*r10*x6717))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x6716))+(((-1.0)*cj5*r02))+((r00*x6717))), (((cj5*r12))+(((-1.0)*r11*x6716))+(((-1.0)*r10*x6717))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6718=IKcos(j0);
IkReal x6719=IKsin(j0);
IkReal x6720=((1.0)*cj5);
IkReal x6721=(sj5*sj6);
IkReal x6722=(r10*sj6);
IkReal x6723=(cj6*r11);
IkReal x6724=((0.01)*cj5);
IkReal x6725=(cj6*r01);
IkReal x6726=((0.37429)*cj5);
IkReal x6727=(r12*sj5);
IkReal x6728=((1.0)*cj4);
IkReal x6729=(r00*sj6);
IkReal x6730=((0.37429)*sj5);
IkReal x6731=(r02*sj5);
IkReal x6732=(sj4*sj6);
IkReal x6733=((1.0)*x6719);
IkReal x6734=((1.0)*cj6*sj4);
evalcond[0]=(((sj5*x6723))+x6718+(((-1.0)*r12*x6720))+((r10*x6721)));
evalcond[1]=(((sj5*x6725))+(((-1.0)*r02*x6720))+(((-1.0)*x6733))+((r00*x6721)));
evalcond[2]=((((-1.0)*r00*x6734))+(((-1.0)*x6718))+(((-1.0)*x6728*x6731))+((r01*x6732))+(((-1.0)*cj4*x6720*x6725))+(((-1.0)*cj4*x6720*x6729)));
evalcond[3]=((((-1.0)*r10*x6734))+((r11*x6732))+(((-1.0)*x6733))+(((-1.0)*x6727*x6728))+(((-1.0)*cj4*x6720*x6723))+(((-1.0)*cj4*x6720*x6722)));
evalcond[4]=(((x6724*x6725))+((x6724*x6729))+(((-1.0)*x6725*x6730))+(((0.01)*x6731))+((r02*x6726))+(((-1.0)*px))+(((0.43342)*x6718))+(((-0.069)*x6719))+(((-0.37429)*r00*x6721)));
evalcond[5]=(((r12*x6726))+(((-1.0)*x6723*x6730))+(((-1.0)*py))+((x6723*x6724))+(((0.43342)*x6719))+(((0.01)*x6727))+((x6722*x6724))+(((0.069)*x6718))+(((-0.37429)*r10*x6721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6735=((1.0)*cj5);
IkReal x6736=(r20*sj6);
IkReal x6737=((0.01)*cj5);
IkReal x6738=(cj4*cj6);
IkReal x6739=(r22*sj5);
IkReal x6740=(r21*sj6);
IkReal x6741=((1.0)*cj4);
IkReal x6742=(cj6*r21);
IkReal x6743=(sj4*sj6);
IkReal x6744=((0.37429)*sj5);
IkReal x6745=((1.0)*sj4*sj5);
IkReal x6746=(cj6*sj4*x6735);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj4*x6739))+(((-1.0)*sj4*x6735*x6736))+(((-1.0)*sj4*x6735*x6742))+((r20*x6738))+(((-1.0)*x6740*x6741)));
evalcond[2]=((((-1.0)*x6742*x6744))+(((0.01)*x6739))+((x6737*x6742))+(((-1.0)*pz))+((x6736*x6737))+(((-1.0)*x6736*x6744))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r12*x6745))+(((-1.0)*r11*x6746))+(((-1.0)*r11*sj6*x6741))+(((-1.0)*r10*x6735*x6743))+((r10*x6738)));
evalcond[4]=((((-1.0)*r01*x6746))+(((-1.0)*r01*sj6*x6741))+(((-1.0)*r02*x6745))+(((-1.0)*r00*x6735*x6743))+((r00*x6738)));
evalcond[5]=((((-1.0)*r21*x6735*x6738))+(((-1.0)*cj4*x6735*x6736))+((sj4*x6740))+(((-1.0)*cj6*r20*sj4))+(((-1.0)*x6739*x6741)));
evalcond[6]=(((sj5*x6742))+(((-1.0)*r22*x6735))+((sj5*x6736)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6747=(sj5*sj6);
IkReal x6748=(cj6*sj5);
if( IKabs(((((-1.0)*r01*x6748))+(((-1.0)*r00*x6747))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r11*x6748))+((r10*x6747)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x6748))+(((-1.0)*r00*x6747))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r11*x6748))+((r10*x6747))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x6748))+(((-1.0)*r00*x6747))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r11*x6748))+((r10*x6747))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6749=IKsin(j0);
IkReal x6750=IKcos(j0);
IkReal x6751=((1.0)*cj5);
IkReal x6752=(sj5*sj6);
IkReal x6753=(r10*sj6);
IkReal x6754=(cj6*r11);
IkReal x6755=((0.01)*cj5);
IkReal x6756=(cj6*r01);
IkReal x6757=((0.37429)*cj5);
IkReal x6758=(r12*sj5);
IkReal x6759=((1.0)*cj4);
IkReal x6760=(r00*sj6);
IkReal x6761=((0.37429)*sj5);
IkReal x6762=(r02*sj5);
IkReal x6763=(sj4*sj6);
IkReal x6764=((1.0)*x6750);
IkReal x6765=((1.0)*cj6*sj4);
evalcond[0]=(((r00*x6752))+x6749+((sj5*x6756))+(((-1.0)*r02*x6751)));
evalcond[1]=((((-1.0)*x6764))+((sj5*x6754))+((r10*x6752))+(((-1.0)*r12*x6751)));
evalcond[2]=(((r01*x6763))+(((-1.0)*x6759*x6762))+(((-1.0)*cj4*x6751*x6756))+(((-1.0)*cj4*x6751*x6760))+(((-1.0)*x6764))+(((-1.0)*r00*x6765)));
evalcond[3]=((((-1.0)*x6749))+(((-1.0)*x6758*x6759))+(((-1.0)*cj4*x6751*x6754))+(((-1.0)*cj4*x6751*x6753))+((r11*x6763))+(((-1.0)*r10*x6765)));
evalcond[4]=((((0.43342)*x6750))+(((-1.0)*px))+(((-1.0)*x6756*x6761))+(((-0.37429)*r00*x6752))+((r02*x6757))+(((0.01)*x6762))+((x6755*x6756))+(((0.069)*x6749))+((x6755*x6760)));
evalcond[5]=((((-0.37429)*r10*x6752))+(((0.43342)*x6749))+(((-0.069)*x6750))+((r12*x6757))+((x6754*x6755))+(((-1.0)*py))+((x6753*x6755))+(((0.01)*x6758))+(((-1.0)*x6754*x6761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6766=(cj5*sj4);
CheckValue<IkReal> x6767=IKPowWithIntegerCheck(sj2,-1);
if(!x6767.valid){
continue;
}
CheckValue<IkReal> x6768=IKPowWithIntegerCheck(cj2,-1);
if(!x6768.valid){
continue;
}
if( IKabs(((x6767.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6768.value)*((((cj6*r11*x6766))+(((-1.0)*cj4*cj6*r10))+((r10*sj6*x6766))+((cj4*r11*sj6))+((r12*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6767.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))+IKsqr(((x6768.value)*((((cj6*r11*x6766))+(((-1.0)*cj4*cj6*r10))+((r10*sj6*x6766))+((cj4*r11*sj6))+((r12*sj4*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6767.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))), ((x6768.value)*((((cj6*r11*x6766))+(((-1.0)*cj4*cj6*r10))+((r10*sj6*x6766))+((cj4*r11*sj6))+((r12*sj4*sj5))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6769=IKcos(j0);
IkReal x6770=IKsin(j0);
IkReal x6771=((1.0)*cj5);
IkReal x6772=(cj6*sj4);
IkReal x6773=((0.37429)*sj5);
IkReal x6774=(r10*sj6);
IkReal x6775=((0.069)*sj2);
IkReal x6776=(cj6*r01);
IkReal x6777=(r00*sj6);
IkReal x6778=(cj6*r11);
IkReal x6779=((0.01)*cj5);
IkReal x6780=(sj4*sj6);
IkReal x6781=(cj4*cj6);
IkReal x6782=((0.37429)*cj5);
IkReal x6783=(r12*sj5);
IkReal x6784=((1.0)*cj4);
IkReal x6785=(r02*sj5);
IkReal x6786=((1.0)*sj4*sj5);
IkReal x6787=((1.0)*x6770);
evalcond[0]=((((-1.0)*r12*x6771))+((sj5*x6778))+((sj5*x6774))+((sj2*x6769)));
evalcond[1]=(((sj5*x6776))+((sj5*x6777))+(((-1.0)*r02*x6771))+(((-1.0)*sj2*x6787)));
evalcond[2]=((((-1.0)*sj4*x6783))+(((-1.0)*sj4*x6771*x6774))+(((-1.0)*r11*x6771*x6772))+((cj2*x6769))+((r10*x6781))+(((-1.0)*r11*sj6*x6784)));
evalcond[3]=((((-1.0)*x6784*x6785))+(((-1.0)*x6769))+(((-1.0)*cj4*x6771*x6776))+(((-1.0)*cj4*x6771*x6777))+(((-1.0)*r00*x6772))+((r01*x6780)));
evalcond[4]=((((-1.0)*x6787))+((r11*x6780))+(((-1.0)*cj4*x6771*x6774))+(((-1.0)*cj4*x6771*x6778))+(((-1.0)*r10*x6772))+(((-1.0)*x6783*x6784)));
evalcond[5]=((((-1.0)*sj4*x6785))+(((-1.0)*sj4*x6771*x6777))+(((-1.0)*cj2*x6787))+(((-1.0)*r01*x6771*x6772))+(((-1.0)*r01*sj6*x6784))+((r00*x6781)));
evalcond[6]=((((0.43342)*x6769))+((x6777*x6779))+((x6776*x6779))+(((-1.0)*x6770*x6775))+(((-1.0)*px))+((r02*x6782))+(((-1.0)*x6773*x6777))+(((-1.0)*x6773*x6776))+(((0.01)*x6785)));
evalcond[7]=(((r12*x6782))+((x6769*x6775))+(((-1.0)*py))+(((0.43342)*x6770))+(((-1.0)*x6773*x6774))+(((-1.0)*x6773*x6778))+((x6778*x6779))+(((0.01)*x6783))+((x6774*x6779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6788=((1.0)*cj6);
IkReal x6789=((1.0)*sj5);
IkReal x6790=(r10*sj6);
IkReal x6791=(cj4*cj5);
CheckValue<IkReal> x6792=IKPowWithIntegerCheck(sj2,-1);
if(!x6792.valid){
continue;
}
if( IKabs(((((-1.0)*x6790*x6791))+(((-1.0)*cj4*r12*x6789))+((r11*sj4*sj6))+(((-1.0)*r10*sj4*x6788))+(((-1.0)*r11*x6788*x6791)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6792.value)*((((cj5*r12))+(((-1.0)*x6789*x6790))+(((-1.0)*r11*sj5*x6788)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x6790*x6791))+(((-1.0)*cj4*r12*x6789))+((r11*sj4*sj6))+(((-1.0)*r10*sj4*x6788))+(((-1.0)*r11*x6788*x6791))))+IKsqr(((x6792.value)*((((cj5*r12))+(((-1.0)*x6789*x6790))+(((-1.0)*r11*sj5*x6788))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x6790*x6791))+(((-1.0)*cj4*r12*x6789))+((r11*sj4*sj6))+(((-1.0)*r10*sj4*x6788))+(((-1.0)*r11*x6788*x6791))), ((x6792.value)*((((cj5*r12))+(((-1.0)*x6789*x6790))+(((-1.0)*r11*sj5*x6788))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6793=IKcos(j0);
IkReal x6794=IKsin(j0);
IkReal x6795=((1.0)*cj5);
IkReal x6796=(cj6*sj4);
IkReal x6797=((0.37429)*sj5);
IkReal x6798=(r10*sj6);
IkReal x6799=((0.069)*sj2);
IkReal x6800=(cj6*r01);
IkReal x6801=(r00*sj6);
IkReal x6802=(cj6*r11);
IkReal x6803=((0.01)*cj5);
IkReal x6804=(sj4*sj6);
IkReal x6805=(cj4*cj6);
IkReal x6806=((0.37429)*cj5);
IkReal x6807=(r12*sj5);
IkReal x6808=((1.0)*cj4);
IkReal x6809=(r02*sj5);
IkReal x6810=((1.0)*sj4*sj5);
IkReal x6811=((1.0)*x6794);
evalcond[0]=(((sj5*x6802))+((sj5*x6798))+((sj2*x6793))+(((-1.0)*r12*x6795)));
evalcond[1]=(((sj5*x6801))+((sj5*x6800))+(((-1.0)*sj2*x6811))+(((-1.0)*r02*x6795)));
evalcond[2]=((((-1.0)*sj4*x6795*x6798))+((cj2*x6793))+((r10*x6805))+(((-1.0)*r11*x6795*x6796))+(((-1.0)*sj4*x6807))+(((-1.0)*r11*sj6*x6808)));
evalcond[3]=(((r01*x6804))+(((-1.0)*r00*x6796))+(((-1.0)*x6793))+(((-1.0)*cj4*x6795*x6800))+(((-1.0)*cj4*x6795*x6801))+(((-1.0)*x6808*x6809)));
evalcond[4]=((((-1.0)*r10*x6796))+((r11*x6804))+(((-1.0)*x6811))+(((-1.0)*cj4*x6795*x6798))+(((-1.0)*x6807*x6808))+(((-1.0)*cj4*x6795*x6802)));
evalcond[5]=((((-1.0)*sj4*x6795*x6801))+(((-1.0)*r01*x6795*x6796))+((r00*x6805))+(((-1.0)*cj2*x6811))+(((-1.0)*sj4*x6809))+(((-1.0)*r01*sj6*x6808)));
evalcond[6]=((((0.43342)*x6793))+((x6801*x6803))+((x6800*x6803))+(((-1.0)*px))+(((-1.0)*x6797*x6801))+(((-1.0)*x6797*x6800))+(((-1.0)*x6794*x6799))+((r02*x6806))+(((0.01)*x6809)));
evalcond[7]=((((0.43342)*x6794))+((x6793*x6799))+(((-1.0)*py))+((r12*x6806))+(((-1.0)*x6797*x6802))+(((-1.0)*x6797*x6798))+((x6798*x6803))+((x6802*x6803))+(((0.01)*x6807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6812=(cj6*sj5);
IkReal x6813=(sj5*sj6);
CheckValue<IkReal> x6814=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x6814.valid){
continue;
}
CheckValue<IkReal> x6815 = IKatan2WithCheck(IkReal((((r01*x6812))+(((-1.0)*cj5*r02))+((r00*x6813)))),(((cj5*r12))+(((-1.0)*r11*x6812))+(((-1.0)*r10*x6813))),IKFAST_ATAN2_MAGTHRESH);
if(!x6815.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6814.value)))+(x6815.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6816=IKcos(j0);
IkReal x6817=IKsin(j0);
IkReal x6818=((1.0)*cj5);
IkReal x6819=(cj6*sj4);
IkReal x6820=((0.37429)*sj5);
IkReal x6821=(r10*sj6);
IkReal x6822=((0.069)*sj2);
IkReal x6823=(cj6*r01);
IkReal x6824=(r00*sj6);
IkReal x6825=(cj6*r11);
IkReal x6826=((0.01)*cj5);
IkReal x6827=(sj4*sj6);
IkReal x6828=(cj4*cj6);
IkReal x6829=((0.37429)*cj5);
IkReal x6830=(r12*sj5);
IkReal x6831=((1.0)*cj4);
IkReal x6832=(r02*sj5);
IkReal x6833=((1.0)*sj4*sj5);
IkReal x6834=((1.0)*x6817);
evalcond[0]=(((sj5*x6821))+((sj5*x6825))+(((-1.0)*r12*x6818))+((sj2*x6816)));
evalcond[1]=((((-1.0)*sj2*x6834))+((sj5*x6824))+((sj5*x6823))+(((-1.0)*r02*x6818)));
evalcond[2]=((((-1.0)*r11*x6818*x6819))+((r10*x6828))+(((-1.0)*sj4*x6830))+(((-1.0)*r11*sj6*x6831))+(((-1.0)*sj4*x6818*x6821))+((cj2*x6816)));
evalcond[3]=((((-1.0)*x6816))+(((-1.0)*cj4*x6818*x6824))+(((-1.0)*cj4*x6818*x6823))+((r01*x6827))+(((-1.0)*x6831*x6832))+(((-1.0)*r00*x6819)));
evalcond[4]=((((-1.0)*cj4*x6818*x6825))+(((-1.0)*cj4*x6818*x6821))+((r11*x6827))+(((-1.0)*x6830*x6831))+(((-1.0)*r10*x6819))+(((-1.0)*x6834)));
evalcond[5]=((((-1.0)*cj2*x6834))+((r00*x6828))+(((-1.0)*r01*x6818*x6819))+(((-1.0)*sj4*x6832))+(((-1.0)*r01*sj6*x6831))+(((-1.0)*sj4*x6818*x6824)));
evalcond[6]=((((-1.0)*x6817*x6822))+((r02*x6829))+((x6824*x6826))+(((-1.0)*px))+((x6823*x6826))+(((-1.0)*x6820*x6823))+(((-1.0)*x6820*x6824))+(((0.43342)*x6816))+(((0.01)*x6832)));
evalcond[7]=(((x6816*x6822))+((x6825*x6826))+((r12*x6829))+(((-1.0)*py))+(((-1.0)*x6820*x6825))+(((-1.0)*x6820*x6821))+(((0.43342)*x6817))+(((0.01)*x6830))+((x6821*x6826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6835=((1.0)*cj5);
IkReal x6836=(r20*sj6);
IkReal x6837=((0.01)*cj5);
IkReal x6838=(cj6*r21);
IkReal x6839=(r22*sj5);
IkReal x6840=(r21*sj6);
IkReal x6841=((1.0)*cj4);
IkReal x6842=((1.0)*sj4);
IkReal x6843=(cj6*r20);
IkReal x6844=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+(((-1.0)*x6839*x6842))+((cj4*x6843))+(((-1.0)*sj4*x6835*x6838))+(((-1.0)*sj4*x6835*x6836))+(((-1.0)*x6840*x6841)));
evalcond[2]=((((0.069)*cj2))+(((-1.0)*pz))+(((-1.0)*x6836*x6844))+((x6837*x6838))+((x6836*x6837))+(((0.01)*x6839))+(((-1.0)*x6838*x6844))+(((0.37429)*cj5*r22)));
evalcond[3]=(((sj4*x6840))+(((-1.0)*x6839*x6841))+(((-1.0)*cj4*x6835*x6836))+(((-1.0)*cj4*x6835*x6838))+(((-1.0)*x6842*x6843)));
evalcond[4]=(cj2+((sj5*x6836))+((sj5*x6838))+(((-1.0)*r22*x6835)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x6845=(cj6*sj5);
IkReal x6846=(sj5*sj6);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs(((((-1.0)*r10*x6846))+((cj5*r12))+(((-1.0)*r11*x6845)))))+(IKabs((((r01*x6845))+((r00*x6846))+(((-1.0)*cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x6847=((1.0)*cj5);
IkReal x6848=(r20*sj6);
IkReal x6849=((0.01)*cj5);
IkReal x6850=(cj4*cj6);
IkReal x6851=(r22*sj5);
IkReal x6852=(r21*sj6);
IkReal x6853=((1.0)*cj4);
IkReal x6854=(cj6*r21);
IkReal x6855=(sj4*sj6);
IkReal x6856=((0.37429)*sj5);
IkReal x6857=((1.0)*sj4*sj5);
IkReal x6858=(cj6*sj4*x6847);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*sj4*x6847*x6854))+(((-1.0)*sj4*x6847*x6848))+((r20*x6850))+(((-1.0)*x6852*x6853))+(((-1.0)*sj4*x6851)));
evalcond[2]=((((0.01)*x6851))+((x6848*x6849))+((x6849*x6854))+(((-1.0)*pz))+(((-1.0)*x6854*x6856))+(((-1.0)*x6848*x6856))+(((0.37429)*cj5*r22)));
evalcond[3]=(((r10*x6850))+(((-1.0)*r12*x6857))+(((-1.0)*r10*x6847*x6855))+(((-1.0)*r11*x6858))+(((-1.0)*r11*sj6*x6853)));
evalcond[4]=((((-1.0)*r02*x6857))+((r00*x6850))+(((-1.0)*r01*x6858))+(((-1.0)*r00*x6847*x6855))+(((-1.0)*r01*sj6*x6853)));
evalcond[5]=((((-1.0)*r21*x6847*x6850))+(((-1.0)*x6851*x6853))+(((-1.0)*cj6*r20*sj4))+((sj4*x6852))+(((-1.0)*cj4*x6847*x6848)));
evalcond[6]=((((-1.0)*r22*x6847))+((sj5*x6854))+((sj5*x6848)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6859=(cj6*sj5);
IkReal x6860=(sj5*sj6);
if( IKabs((((r01*x6859))+((r00*x6860))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r11*x6859))+(((-1.0)*r10*x6860)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x6859))+((r00*x6860))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r11*x6859))+(((-1.0)*r10*x6860))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x6859))+((r00*x6860))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r11*x6859))+(((-1.0)*r10*x6860))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6861=IKcos(j0);
IkReal x6862=IKsin(j0);
IkReal x6863=((1.0)*cj5);
IkReal x6864=(sj5*sj6);
IkReal x6865=((0.37429)*cj5);
IkReal x6866=(r10*sj6);
IkReal x6867=(cj6*r11);
IkReal x6868=((0.01)*cj5);
IkReal x6869=(cj6*r01);
IkReal x6870=(r12*sj5);
IkReal x6871=((1.0)*cj4);
IkReal x6872=(r00*sj6);
IkReal x6873=((0.37429)*sj5);
IkReal x6874=(r02*sj5);
IkReal x6875=(sj4*sj6);
IkReal x6876=((1.0)*cj6*sj4);
evalcond[0]=((((-1.0)*r12*x6863))+x6861+((sj5*x6867))+((r10*x6864)));
evalcond[1]=((((-1.0)*x6862))+(((-1.0)*r02*x6863))+((r00*x6864))+((sj5*x6869)));
evalcond[2]=((((-1.0)*r00*x6876))+(((-1.0)*x6871*x6874))+(((-1.0)*cj4*x6863*x6869))+(((-1.0)*cj4*x6863*x6872))+x6861+((r01*x6875)));
evalcond[3]=(((r11*x6875))+(((-1.0)*cj4*x6863*x6866))+(((-1.0)*cj4*x6863*x6867))+(((-1.0)*x6870*x6871))+x6862+(((-1.0)*r10*x6876)));
evalcond[4]=(((r02*x6865))+(((-1.0)*x6869*x6873))+(((-0.37429)*r00*x6864))+(((-1.0)*px))+(((-0.29542)*x6861))+((x6868*x6869))+((x6868*x6872))+(((-0.069)*x6862))+(((0.01)*x6874)));
evalcond[5]=(((x6866*x6868))+(((-0.37429)*r10*x6864))+((r12*x6865))+(((0.069)*x6861))+(((-1.0)*py))+(((-0.29542)*x6862))+(((-1.0)*x6867*x6873))+((x6867*x6868))+(((0.01)*x6870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6877=((1.0)*cj5);
IkReal x6878=(r20*sj6);
IkReal x6879=((0.01)*cj5);
IkReal x6880=(cj4*cj6);
IkReal x6881=(r22*sj5);
IkReal x6882=(r21*sj6);
IkReal x6883=((1.0)*cj4);
IkReal x6884=(cj6*r21);
IkReal x6885=(sj4*sj6);
IkReal x6886=((0.37429)*sj5);
IkReal x6887=((1.0)*sj4*sj5);
IkReal x6888=(cj6*sj4*x6877);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+((r20*x6880))+(((-1.0)*sj4*x6877*x6884))+(((-1.0)*sj4*x6881))+(((-1.0)*sj4*x6877*x6878))+(((-1.0)*x6882*x6883)));
evalcond[2]=(((x6878*x6879))+(((-1.0)*x6884*x6886))+((x6879*x6884))+(((0.01)*x6881))+(((-1.0)*pz))+(((-1.0)*x6878*x6886))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r11*sj6*x6883))+(((-1.0)*r10*x6877*x6885))+(((-1.0)*r11*x6888))+(((-1.0)*r12*x6887))+((r10*x6880)));
evalcond[4]=((((-1.0)*r01*sj6*x6883))+(((-1.0)*r02*x6887))+(((-1.0)*r00*x6877*x6885))+(((-1.0)*r01*x6888))+((r00*x6880)));
evalcond[5]=((((-1.0)*x6881*x6883))+(((-1.0)*cj4*x6877*x6878))+((sj4*x6882))+(((-1.0)*r21*x6877*x6880))+(((-1.0)*cj6*r20*sj4)));
evalcond[6]=((((-1.0)*r22*x6877))+((sj5*x6884))+((sj5*x6878)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6889=(sj5*sj6);
IkReal x6890=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x6889))+(((-1.0)*r01*x6890))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r11*x6890))+((r10*x6889)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x6889))+(((-1.0)*r01*x6890))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r11*x6890))+((r10*x6889))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x6889))+(((-1.0)*r01*x6890))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r11*x6890))+((r10*x6889))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6891=IKcos(j0);
IkReal x6892=IKsin(j0);
IkReal x6893=((1.0)*cj5);
IkReal x6894=(sj5*sj6);
IkReal x6895=((0.37429)*cj5);
IkReal x6896=(r10*sj6);
IkReal x6897=(cj6*r11);
IkReal x6898=((0.01)*cj5);
IkReal x6899=(cj6*r01);
IkReal x6900=(r12*sj5);
IkReal x6901=((1.0)*cj4);
IkReal x6902=(r00*sj6);
IkReal x6903=((0.37429)*sj5);
IkReal x6904=(r02*sj5);
IkReal x6905=(sj4*sj6);
IkReal x6906=((1.0)*cj6*sj4);
evalcond[0]=(x6892+(((-1.0)*r02*x6893))+((sj5*x6899))+((r00*x6894)));
evalcond[1]=((((-1.0)*x6891))+((r10*x6894))+(((-1.0)*r12*x6893))+((sj5*x6897)));
evalcond[2]=(((r01*x6905))+x6891+(((-1.0)*cj4*x6893*x6902))+(((-1.0)*r00*x6906))+(((-1.0)*x6901*x6904))+(((-1.0)*cj4*x6893*x6899)));
evalcond[3]=((((-1.0)*x6900*x6901))+((r11*x6905))+x6892+(((-1.0)*r10*x6906))+(((-1.0)*cj4*x6893*x6897))+(((-1.0)*cj4*x6893*x6896)));
evalcond[4]=((((0.069)*x6892))+(((-0.29542)*x6891))+((r02*x6895))+(((-1.0)*px))+(((-1.0)*x6899*x6903))+((x6898*x6899))+(((-0.37429)*r00*x6894))+(((0.01)*x6904))+((x6898*x6902)));
evalcond[5]=((((-0.069)*x6891))+((r12*x6895))+(((-0.29542)*x6892))+(((-1.0)*py))+(((-0.37429)*r10*x6894))+(((0.01)*x6900))+((x6896*x6898))+(((-1.0)*x6897*x6903))+((x6897*x6898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6907=((1.0)*cj5);
IkReal x6908=(r20*sj6);
IkReal x6909=(sj5*sj6);
IkReal x6910=(cj6*sj5);
IkReal x6911=((0.01)*cj5);
IkReal x6912=(cj6*r21);
IkReal x6913=(r22*sj5);
IkReal x6914=(r21*sj6);
IkReal x6915=((1.0)*cj4);
IkReal x6916=((1.0)*sj4);
IkReal x6917=(cj6*r20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((cj4*x6917))+(((-1.0)*sj4*x6907*x6912))+(((-1.0)*sj4*x6907*x6908))+(((-1.0)*x6914*x6915))+(((-1.0)*x6913*x6916)));
evalcond[2]=((0.069)+(((-0.37429)*r21*x6910))+(((-1.0)*pz))+((x6908*x6911))+(((-0.37429)*sj5*x6908))+((x6911*x6912))+(((0.37429)*cj5*r22))+(((0.01)*x6913)));
evalcond[3]=((((-1.0)*cj4*x6907*x6908))+(((-1.0)*cj4*x6907*x6912))+(((-1.0)*x6916*x6917))+((sj4*x6914))+(((-1.0)*x6913*x6915)));
evalcond[4]=((1.0)+((sj5*x6908))+(((-1.0)*r22*x6907))+((r21*x6910)));
evalcond[5]=((((-1.0)*r12*x6907))+((r10*x6909))+((r11*x6910)));
evalcond[6]=((((-1.0)*r02*x6907))+((r00*x6909))+((r01*x6910)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6918=(r11*sj6);
IkReal x6919=(cj6*r10);
IkReal x6920=(r12*sj5);
IkReal x6921=(cj5*cj6*r11);
IkReal x6922=(cj5*r10*sj6);
if( IKabs(((((-1.0)*sj4*x6918))+((sj4*x6919))+((cj4*x6922))+((cj4*x6920))+((cj4*x6921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x6918))+(((-1.0)*cj4*x6919))+((sj4*x6922))+((sj4*x6920))+((sj4*x6921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x6918))+((sj4*x6919))+((cj4*x6922))+((cj4*x6920))+((cj4*x6921))))+IKsqr((((cj4*x6918))+(((-1.0)*cj4*x6919))+((sj4*x6922))+((sj4*x6920))+((sj4*x6921))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*sj4*x6918))+((sj4*x6919))+((cj4*x6922))+((cj4*x6920))+((cj4*x6921))), (((cj4*x6918))+(((-1.0)*cj4*x6919))+((sj4*x6922))+((sj4*x6920))+((sj4*x6921))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6923=IKcos(j0);
IkReal x6924=IKsin(j0);
IkReal x6925=((1.0)*sj4);
IkReal x6926=(r10*sj6);
IkReal x6927=((0.37429)*sj5);
IkReal x6928=(cj6*r00);
IkReal x6929=((0.01)*cj5);
IkReal x6930=((1.0)*cj4);
IkReal x6931=(r00*sj6);
IkReal x6932=(r02*sj5);
IkReal x6933=(r12*sj5);
IkReal x6934=((0.37429)*cj5);
IkReal x6935=(cj6*r10);
IkReal x6936=(r01*sj6);
IkReal x6937=(r11*sj6);
IkReal x6938=(cj5*cj6*r11);
IkReal x6939=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*x6930*x6937))+(((-1.0)*x6925*x6938))+(((-1.0)*x6925*x6933))+(((-1.0)*cj5*x6925*x6926))+x6923+((cj4*x6935)));
evalcond[1]=((((-1.0)*x6930*x6939))+(((-1.0)*x6930*x6932))+(((-1.0)*x6925*x6928))+(((-1.0)*cj5*x6930*x6931))+x6923+((sj4*x6936)));
evalcond[2]=((((-1.0)*x6930*x6938))+(((-1.0)*x6930*x6933))+(((-1.0)*x6925*x6935))+x6924+((sj4*x6937))+(((-1.0)*cj5*x6926*x6930)));
evalcond[3]=((((-1.0)*x6930*x6936))+(((-1.0)*x6925*x6939))+(((-1.0)*x6925*x6932))+(((-1.0)*x6924))+(((-1.0)*cj5*x6925*x6931))+((cj4*x6928)));
evalcond[4]=((((-0.29542)*x6923))+(((0.01)*x6932))+(((-1.0)*px))+((r02*x6934))+(((-1.0)*cj6*r01*x6927))+((x6929*x6931))+((cj6*r01*x6929))+(((-1.0)*x6927*x6931)));
evalcond[5]=(((x6926*x6929))+(((-0.29542)*x6924))+(((0.01)*x6933))+((cj6*r11*x6929))+(((-1.0)*py))+(((-1.0)*cj6*r11*x6927))+((r12*x6934))+(((-1.0)*x6926*x6927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6940=((1.0)*cj5);
IkReal x6941=(r20*sj6);
IkReal x6942=(sj5*sj6);
IkReal x6943=(cj6*sj5);
IkReal x6944=((0.01)*cj5);
IkReal x6945=(cj6*r21);
IkReal x6946=(r22*sj5);
IkReal x6947=(r21*sj6);
IkReal x6948=((1.0)*cj4);
IkReal x6949=((1.0)*sj4);
IkReal x6950=(cj6*r20);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*x6950))+(((-1.0)*sj4*x6940*x6941))+(((-1.0)*sj4*x6940*x6945))+(((-1.0)*x6947*x6948))+(((-1.0)*x6946*x6949)));
evalcond[2]=((-0.069)+((x6944*x6945))+((x6941*x6944))+(((-1.0)*pz))+(((-0.37429)*sj5*x6941))+(((-0.37429)*r21*x6943))+(((0.01)*x6946))+(((0.37429)*cj5*r22)));
evalcond[3]=(((sj4*x6947))+(((-1.0)*cj4*x6940*x6941))+(((-1.0)*cj4*x6940*x6945))+(((-1.0)*x6949*x6950))+(((-1.0)*x6946*x6948)));
evalcond[4]=((-1.0)+((sj5*x6941))+(((-1.0)*r22*x6940))+((r21*x6943)));
evalcond[5]=(((r10*x6942))+(((-1.0)*r12*x6940))+((r11*x6943)));
evalcond[6]=((((-1.0)*r02*x6940))+((r01*x6943))+((r00*x6942)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6951=(cj6*r00);
IkReal x6952=(r02*sj5);
IkReal x6953=(r01*sj6);
IkReal x6954=(cj5*r00*sj6);
IkReal x6955=(cj5*cj6*r01);
if( IKabs((((sj4*x6955))+((sj4*x6954))+((sj4*x6952))+((cj4*x6953))+(((-1.0)*cj4*x6951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x6951))+((cj4*x6955))+((cj4*x6954))+((cj4*x6952))+(((-1.0)*sj4*x6953)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x6955))+((sj4*x6954))+((sj4*x6952))+((cj4*x6953))+(((-1.0)*cj4*x6951))))+IKsqr((((sj4*x6951))+((cj4*x6955))+((cj4*x6954))+((cj4*x6952))+(((-1.0)*sj4*x6953))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj4*x6955))+((sj4*x6954))+((sj4*x6952))+((cj4*x6953))+(((-1.0)*cj4*x6951))), (((sj4*x6951))+((cj4*x6955))+((cj4*x6954))+((cj4*x6952))+(((-1.0)*sj4*x6953))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x6956=IKsin(j0);
IkReal x6957=IKcos(j0);
IkReal x6958=((1.0)*sj4);
IkReal x6959=(r10*sj6);
IkReal x6960=((0.37429)*sj5);
IkReal x6961=(cj6*r00);
IkReal x6962=((0.01)*cj5);
IkReal x6963=(r12*sj5);
IkReal x6964=(r00*sj6);
IkReal x6965=(r02*sj5);
IkReal x6966=(sj4*sj6);
IkReal x6967=((1.0)*cj4);
IkReal x6968=((0.37429)*cj5);
IkReal x6969=(cj6*r10);
IkReal x6970=(cj5*cj6*r11);
IkReal x6971=(cj5*cj6*r01);
evalcond[0]=((((-1.0)*x6958*x6965))+(((-1.0)*x6958*x6971))+(((-1.0)*r01*sj6*x6967))+(((-1.0)*cj5*x6958*x6964))+x6956+((cj4*x6961)));
evalcond[1]=((((-1.0)*x6965*x6967))+(((-1.0)*cj5*x6964*x6967))+((r01*x6966))+(((-1.0)*x6958*x6961))+(((-1.0)*x6967*x6971))+x6957);
evalcond[2]=((((-1.0)*x6958*x6969))+(((-1.0)*x6967*x6970))+x6956+(((-1.0)*x6963*x6967))+((r11*x6966))+(((-1.0)*cj5*x6959*x6967)));
evalcond[3]=((((-1.0)*x6958*x6963))+(((-1.0)*x6958*x6970))+(((-1.0)*x6957))+(((-1.0)*r11*sj6*x6967))+(((-1.0)*cj5*x6958*x6959))+((cj4*x6969)));
evalcond[4]=((((-0.29542)*x6957))+((x6962*x6964))+(((-1.0)*cj6*r01*x6960))+(((0.01)*x6965))+((r02*x6968))+(((-1.0)*px))+((cj6*r01*x6962))+(((-1.0)*x6960*x6964)));
evalcond[5]=((((-0.29542)*x6956))+(((-1.0)*x6959*x6960))+(((0.01)*x6963))+(((-1.0)*cj6*r11*x6960))+(((-1.0)*py))+((x6959*x6962))+((cj6*r11*x6962))+((r12*x6968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6972=((1.0)*sj6);
IkReal x6973=(cj5*sj4);
IkReal x6974=((1.0)*sj5);
CheckValue<IkReal> x6975=IKPowWithIntegerCheck(cj2,-1);
if(!x6975.valid){
continue;
}
CheckValue<IkReal> x6976=IKPowWithIntegerCheck(sj2,-1);
if(!x6976.valid){
continue;
}
if( IKabs(((x6975.value)*(((((-1.0)*r00*x6972*x6973))+(((-1.0)*cj4*r01*x6972))+(((-1.0)*r02*sj4*x6974))+((cj4*cj6*r00))+(((-1.0)*cj6*r01*x6973)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x6976.value)*((((cj5*r12))+(((-1.0)*r10*sj5*x6972))+(((-1.0)*cj6*r11*x6974)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x6975.value)*(((((-1.0)*r00*x6972*x6973))+(((-1.0)*cj4*r01*x6972))+(((-1.0)*r02*sj4*x6974))+((cj4*cj6*r00))+(((-1.0)*cj6*r01*x6973))))))+IKsqr(((x6976.value)*((((cj5*r12))+(((-1.0)*r10*sj5*x6972))+(((-1.0)*cj6*r11*x6974))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x6975.value)*(((((-1.0)*r00*x6972*x6973))+(((-1.0)*cj4*r01*x6972))+(((-1.0)*r02*sj4*x6974))+((cj4*cj6*r00))+(((-1.0)*cj6*r01*x6973))))), ((x6976.value)*((((cj5*r12))+(((-1.0)*r10*sj5*x6972))+(((-1.0)*cj6*r11*x6974))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6977=IKcos(j0);
IkReal x6978=IKsin(j0);
IkReal x6979=((1.0)*cj5);
IkReal x6980=(cj6*sj4);
IkReal x6981=((0.37429)*sj5);
IkReal x6982=(r10*sj6);
IkReal x6983=((0.37429)*cj5);
IkReal x6984=((0.069)*sj2);
IkReal x6985=(cj6*r01);
IkReal x6986=(r00*sj6);
IkReal x6987=(cj6*r11);
IkReal x6988=((0.01)*cj5);
IkReal x6989=(r12*sj5);
IkReal x6990=(cj4*cj6);
IkReal x6991=((1.0)*cj4);
IkReal x6992=(r01*sj6);
IkReal x6993=(r02*sj5);
IkReal x6994=(r11*sj6);
IkReal x6995=((1.0)*sj4*sj5);
IkReal x6996=((1.0)*x6978);
evalcond[0]=(((sj2*x6977))+(((-1.0)*r12*x6979))+((sj5*x6987))+((sj5*x6982)));
evalcond[1]=((((-1.0)*r02*x6979))+(((-1.0)*sj2*x6996))+((sj5*x6986))+((sj5*x6985)));
evalcond[2]=((((-1.0)*cj4*x6979*x6985))+(((-1.0)*cj4*x6979*x6986))+x6977+(((-1.0)*r00*x6980))+(((-1.0)*x6991*x6993))+((sj4*x6992)));
evalcond[3]=((((-1.0)*cj4*x6979*x6982))+(((-1.0)*cj4*x6979*x6987))+(((-1.0)*r10*x6980))+x6978+(((-1.0)*x6989*x6991))+((sj4*x6994)));
evalcond[4]=((((-1.0)*r11*x6979*x6980))+((r10*x6990))+(((-1.0)*sj4*x6979*x6982))+(((-1.0)*sj4*x6989))+((cj2*x6977))+(((-1.0)*x6991*x6994)));
evalcond[5]=((((-1.0)*sj4*x6979*x6986))+(((-1.0)*r01*x6979*x6980))+((r00*x6990))+(((-1.0)*cj2*x6996))+(((-1.0)*sj4*x6993))+(((-1.0)*x6991*x6992)));
evalcond[6]=((((-1.0)*x6978*x6984))+(((0.01)*x6993))+(((-1.0)*px))+((r02*x6983))+((x6986*x6988))+(((-0.29542)*x6977))+((x6985*x6988))+(((-1.0)*x6981*x6985))+(((-1.0)*x6981*x6986)));
evalcond[7]=(((x6982*x6988))+(((0.01)*x6989))+((x6987*x6988))+(((-1.0)*py))+((x6977*x6984))+(((-0.29542)*x6978))+(((-1.0)*x6981*x6982))+(((-1.0)*x6981*x6987))+((r12*x6983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6997=(cj6*r01);
IkReal x6998=(r00*sj6);
IkReal x6999=(cj4*cj5);
CheckValue<IkReal> x7000=IKPowWithIntegerCheck(sj2,-1);
if(!x7000.valid){
continue;
}
if( IKabs(((x7000.value)*((((sj5*x6998))+((sj5*x6997))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r00*sj4))+((x6997*x6999))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x6998*x6999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7000.value)*((((sj5*x6998))+((sj5*x6997))+(((-1.0)*cj5*r02))))))+IKsqr((((cj6*r00*sj4))+((x6997*x6999))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x6998*x6999))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7000.value)*((((sj5*x6998))+((sj5*x6997))+(((-1.0)*cj5*r02))))), (((cj6*r00*sj4))+((x6997*x6999))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x6998*x6999))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7001=IKcos(j0);
IkReal x7002=IKsin(j0);
IkReal x7003=((1.0)*cj5);
IkReal x7004=(cj6*sj4);
IkReal x7005=((0.37429)*sj5);
IkReal x7006=(r10*sj6);
IkReal x7007=((0.37429)*cj5);
IkReal x7008=((0.069)*sj2);
IkReal x7009=(cj6*r01);
IkReal x7010=(r00*sj6);
IkReal x7011=(cj6*r11);
IkReal x7012=((0.01)*cj5);
IkReal x7013=(r12*sj5);
IkReal x7014=(cj4*cj6);
IkReal x7015=((1.0)*cj4);
IkReal x7016=(r01*sj6);
IkReal x7017=(r02*sj5);
IkReal x7018=(r11*sj6);
IkReal x7019=((1.0)*sj4*sj5);
IkReal x7020=((1.0)*x7002);
evalcond[0]=((((-1.0)*r12*x7003))+((sj5*x7011))+((sj5*x7006))+((sj2*x7001)));
evalcond[1]=((((-1.0)*r02*x7003))+(((-1.0)*sj2*x7020))+((sj5*x7010))+((sj5*x7009)));
evalcond[2]=(x7001+(((-1.0)*cj4*x7003*x7010))+(((-1.0)*x7015*x7017))+(((-1.0)*r00*x7004))+((sj4*x7016))+(((-1.0)*cj4*x7003*x7009)));
evalcond[3]=(x7002+(((-1.0)*cj4*x7003*x7011))+(((-1.0)*r10*x7004))+(((-1.0)*x7013*x7015))+((sj4*x7018))+(((-1.0)*cj4*x7003*x7006)));
evalcond[4]=(((cj2*x7001))+(((-1.0)*x7015*x7018))+(((-1.0)*r11*x7003*x7004))+(((-1.0)*sj4*x7013))+(((-1.0)*sj4*x7003*x7006))+((r10*x7014)));
evalcond[5]=((((-1.0)*cj2*x7020))+(((-1.0)*sj4*x7003*x7010))+(((-1.0)*x7015*x7016))+(((-1.0)*sj4*x7017))+(((-1.0)*r01*x7003*x7004))+((r00*x7014)));
evalcond[6]=(((x7010*x7012))+(((-0.29542)*x7001))+(((-1.0)*x7005*x7009))+(((-1.0)*x7002*x7008))+(((0.01)*x7017))+((x7009*x7012))+(((-1.0)*px))+((r02*x7007))+(((-1.0)*x7005*x7010)));
evalcond[7]=((((-0.29542)*x7002))+(((-1.0)*x7005*x7006))+((x7006*x7012))+(((0.01)*x7013))+((x7001*x7008))+(((-1.0)*py))+((r12*x7007))+((x7011*x7012))+(((-1.0)*x7005*x7011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7021=(cj6*sj5);
IkReal x7022=(sj5*sj6);
CheckValue<IkReal> x7023=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x7023.valid){
continue;
}
CheckValue<IkReal> x7024 = IKatan2WithCheck(IkReal((((r00*x7022))+((r01*x7021))+(((-1.0)*cj5*r02)))),((((-1.0)*r10*x7022))+((cj5*r12))+(((-1.0)*r11*x7021))),IKFAST_ATAN2_MAGTHRESH);
if(!x7024.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7023.value)))+(x7024.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7025=IKcos(j0);
IkReal x7026=IKsin(j0);
IkReal x7027=((1.0)*cj5);
IkReal x7028=(cj6*sj4);
IkReal x7029=((0.37429)*sj5);
IkReal x7030=(r10*sj6);
IkReal x7031=((0.37429)*cj5);
IkReal x7032=((0.069)*sj2);
IkReal x7033=(cj6*r01);
IkReal x7034=(r00*sj6);
IkReal x7035=(cj6*r11);
IkReal x7036=((0.01)*cj5);
IkReal x7037=(r12*sj5);
IkReal x7038=(cj4*cj6);
IkReal x7039=((1.0)*cj4);
IkReal x7040=(r01*sj6);
IkReal x7041=(r02*sj5);
IkReal x7042=(r11*sj6);
IkReal x7043=((1.0)*sj4*sj5);
IkReal x7044=((1.0)*x7026);
evalcond[0]=((((-1.0)*r12*x7027))+((sj5*x7035))+((sj5*x7030))+((sj2*x7025)));
evalcond[1]=((((-1.0)*sj2*x7044))+(((-1.0)*r02*x7027))+((sj5*x7034))+((sj5*x7033)));
evalcond[2]=(x7025+((sj4*x7040))+(((-1.0)*r00*x7028))+(((-1.0)*cj4*x7027*x7034))+(((-1.0)*cj4*x7027*x7033))+(((-1.0)*x7039*x7041)));
evalcond[3]=((((-1.0)*r10*x7028))+x7026+(((-1.0)*x7037*x7039))+((sj4*x7042))+(((-1.0)*cj4*x7027*x7035))+(((-1.0)*cj4*x7027*x7030)));
evalcond[4]=(((cj2*x7025))+(((-1.0)*sj4*x7027*x7030))+((r10*x7038))+(((-1.0)*sj4*x7037))+(((-1.0)*x7039*x7042))+(((-1.0)*r11*x7027*x7028)));
evalcond[5]=(((r00*x7038))+(((-1.0)*sj4*x7027*x7034))+(((-1.0)*cj2*x7044))+(((-1.0)*r01*x7027*x7028))+(((-1.0)*sj4*x7041))+(((-1.0)*x7039*x7040)));
evalcond[6]=((((-0.29542)*x7025))+((x7034*x7036))+(((-1.0)*x7026*x7032))+(((-1.0)*px))+((r02*x7031))+(((-1.0)*x7029*x7033))+(((-1.0)*x7029*x7034))+((x7033*x7036))+(((0.01)*x7041)));
evalcond[7]=(((x7030*x7036))+(((-0.29542)*x7026))+((r12*x7031))+((x7035*x7036))+(((-1.0)*py))+(((-1.0)*x7029*x7030))+(((-1.0)*x7029*x7035))+((x7025*x7032))+(((0.01)*x7037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7045=((1.0)*cj5);
IkReal x7046=(r20*sj6);
IkReal x7047=((0.01)*cj5);
IkReal x7048=(cj6*r21);
IkReal x7049=(r22*sj5);
IkReal x7050=(r21*sj6);
IkReal x7051=((1.0)*cj4);
IkReal x7052=((1.0)*sj4);
IkReal x7053=(cj6*r20);
IkReal x7054=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x7049*x7052))+(((-1.0)*sj4*x7045*x7048))+(((-1.0)*sj4*x7045*x7046))+((cj4*x7053))+(((-1.0)*x7050*x7051)));
evalcond[2]=(((x7047*x7048))+((x7046*x7047))+(((-1.0)*x7046*x7054))+(((-1.0)*x7048*x7054))+(((-0.069)*cj1))+(((-1.0)*pz))+(((0.01)*x7049))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(((sj4*x7050))+sj1+(((-1.0)*x7049*x7051))+(((-1.0)*x7052*x7053))+(((-1.0)*cj4*x7045*x7048))+(((-1.0)*cj4*x7045*x7046)));
evalcond[4]=((((-1.0)*r22*x7045))+((sj5*x7048))+((sj5*x7046))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x7055=(cj6*sj5);
IkReal x7056=(sj5*sj6);
IkReal x7057=((1.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs((((r01*x7055))+((r00*x7056))+(((-1.0)*r02*x7057)))))+(IKabs((((r10*x7056))+((r11*x7055))+(((-1.0)*r12*x7057))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x7058=(r20*sj6);
IkReal x7059=((1.0)*cj5);
IkReal x7060=((0.01)*cj5);
IkReal x7061=(cj6*r11);
IkReal x7062=(r10*sj6);
IkReal x7063=((0.37429)*sj5);
IkReal x7064=(r00*sj6);
IkReal x7065=(cj6*r21);
IkReal x7066=(sj4*sj6);
IkReal x7067=((0.01)*sj5);
IkReal x7068=(cj6*r01);
IkReal x7069=((0.37429)*cj5);
IkReal x7070=((1.0)*cj4);
IkReal x7071=(r22*sj5);
IkReal x7072=((1.0)*cj6*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r21*sj6*x7070))+(((-1.0)*sj4*x7058*x7059))+((cj4*cj6*r20))+(((-1.0)*sj4*x7071))+(((-1.0)*sj4*x7059*x7065)));
evalcond[2]=((-0.36442)+((r22*x7069))+((r22*x7067))+(((-1.0)*x7058*x7063))+(((-1.0)*x7063*x7065))+((x7060*x7065))+(((-1.0)*pz))+((x7058*x7060)));
evalcond[3]=((((-1.0)*x7063*x7064))+(((-1.0)*x7063*x7068))+((x7060*x7068))+((x7060*x7064))+(((-1.0)*px))+((r02*x7067))+((r02*x7069)));
evalcond[4]=(((r12*x7069))+((r12*x7067))+(((-1.0)*x7062*x7063))+((x7060*x7062))+((x7060*x7061))+(((-1.0)*py))+(((-1.0)*x7061*x7063)));
evalcond[5]=((1.0)+(((-1.0)*r20*x7072))+(((-1.0)*cj4*x7058*x7059))+(((-1.0)*x7070*x7071))+((r21*x7066))+(((-1.0)*cj4*x7059*x7065)));
evalcond[6]=((((-1.0)*r22*x7059))+((sj5*x7065))+((sj5*x7058)));
evalcond[7]=((((-1.0)*r00*x7072))+((r01*x7066))+(((-1.0)*r02*sj5*x7070))+(((-1.0)*cj4*x7059*x7064))+(((-1.0)*cj4*x7059*x7068)));
evalcond[8]=((((-1.0)*r12*sj5*x7070))+(((-1.0)*r10*x7072))+(((-1.0)*cj4*x7059*x7061))+(((-1.0)*cj4*x7059*x7062))+((r11*x7066)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7073=(cj6*sj5);
IkReal x7074=(sj5*sj6);
IkReal x7075=((1.0)*cj5);
if( IKabs((((r11*x7073))+(((-1.0)*r12*x7075))+((r10*x7074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x7073))+((r00*x7074))+(((-1.0)*r02*x7075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x7073))+(((-1.0)*r12*x7075))+((r10*x7074))))+IKsqr((((r01*x7073))+((r00*x7074))+(((-1.0)*r02*x7075))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x7073))+(((-1.0)*r12*x7075))+((r10*x7074))), (((r01*x7073))+((r00*x7074))+(((-1.0)*r02*x7075))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7076=IKcos(j0);
IkReal x7077=(cj6*sj5);
IkReal x7078=((1.0)*sj6);
IkReal x7079=(sj5*sj6);
IkReal x7080=(cj4*cj6);
IkReal x7081=(cj5*sj4);
IkReal x7082=((1.0)*r02);
IkReal x7083=(sj4*sj5);
IkReal x7084=((1.0)*r12);
IkReal x7085=((1.0)*cj6);
IkReal x7086=((1.0)*(IKsin(j0)));
evalcond[0]=(((r11*x7077))+(((-1.0)*cj5*x7084))+((r10*x7079))+(((-1.0)*x7086)));
evalcond[1]=(((r01*x7077))+(((-1.0)*cj5*x7082))+((r00*x7079))+(((-1.0)*x7076)));
evalcond[2]=(x7076+(((-1.0)*r11*x7081*x7085))+(((-1.0)*cj4*r11*x7078))+(((-1.0)*r10*x7078*x7081))+(((-1.0)*x7083*x7084))+((r10*x7080)));
evalcond[3]=(((r00*x7080))+(((-1.0)*r01*x7081*x7085))+(((-1.0)*x7082*x7083))+(((-1.0)*cj4*r01*x7078))+(((-1.0)*x7086))+(((-1.0)*r00*x7078*x7081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7087=((1.0)*cj5);
IkReal x7088=(cj4*sj6);
IkReal x7089=((0.01)*cj5);
IkReal x7090=(r20*sj6);
IkReal x7091=(cj6*r21);
IkReal x7092=(sj4*sj6);
IkReal x7093=(r22*sj5);
IkReal x7094=(cj4*cj6);
IkReal x7095=((0.37429)*sj5);
IkReal x7096=((1.0)*cj6*sj4);
IkReal x7097=((1.0)*cj4*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r21*x7088))+(((-1.0)*sj4*x7087*x7091))+(((-1.0)*sj4*x7087*x7090))+(((-1.0)*sj4*x7093))+((r20*x7094)));
evalcond[2]=((0.36442)+(((0.01)*x7093))+(((-1.0)*pz))+(((-1.0)*x7090*x7095))+(((-1.0)*x7091*x7095))+(((0.37429)*cj5*r22))+((x7089*x7090))+((x7089*x7091)));
evalcond[3]=((-1.0)+(((-1.0)*r20*x7087*x7088))+(((-1.0)*cj4*x7093))+((r21*x7092))+(((-1.0)*r20*x7096))+(((-1.0)*cj4*x7087*x7091)));
evalcond[4]=(((sj5*x7090))+((sj5*x7091))+(((-1.0)*r22*x7087)));
evalcond[5]=(((r01*x7092))+(((-1.0)*r00*x7096))+(((-1.0)*r00*x7087*x7088))+(((-1.0)*r01*x7087*x7094))+(((-1.0)*r02*x7097)));
evalcond[6]=(((r11*x7092))+(((-1.0)*r10*x7087*x7088))+(((-1.0)*r10*x7096))+(((-1.0)*r12*x7097))+(((-1.0)*r11*x7087*x7094)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7098=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x7098))+(((-1.0)*r10*sj6*x7098)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x7098))+(((-1.0)*cj6*r01*x7098))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x7098))+(((-1.0)*r10*sj6*x7098))))+IKsqr(((((-1.0)*r00*sj6*x7098))+(((-1.0)*cj6*r01*x7098))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x7098))+(((-1.0)*r10*sj6*x7098))), ((((-1.0)*r00*sj6*x7098))+(((-1.0)*cj6*r01*x7098))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7099=IKcos(j0);
IkReal x7100=IKsin(j0);
IkReal x7101=((1.0)*sj4);
IkReal x7102=(sj5*sj6);
IkReal x7103=(cj5*r12);
IkReal x7104=(r12*sj5);
IkReal x7105=(cj6*sj5);
IkReal x7106=(r02*sj5);
IkReal x7107=(cj4*cj6);
IkReal x7108=(cj5*r02);
IkReal x7109=(cj5*sj6);
IkReal x7110=(cj5*cj6*r11);
IkReal x7111=(cj5*cj6*r01);
IkReal x7112=((0.01)*x7109);
IkReal x7113=((1.0)*cj4*sj6);
evalcond[0]=(x7100+(((-1.0)*x7103))+((r10*x7102))+((r11*x7105)));
evalcond[1]=(x7099+(((-1.0)*x7108))+((r00*x7102))+((r01*x7105)));
evalcond[2]=(x7099+(((-1.0)*r11*x7113))+(((-1.0)*x7101*x7110))+(((-1.0)*x7101*x7104))+((r10*x7107))+(((-1.0)*r10*x7101*x7109)));
evalcond[3]=((((-1.0)*x7100))+(((-1.0)*x7101*x7111))+(((-1.0)*x7101*x7106))+(((-1.0)*r00*x7101*x7109))+(((-1.0)*r01*x7113))+((r00*x7107)));
evalcond[4]=((((-0.37429)*r00*x7102))+(((0.01)*x7106))+(((0.01)*x7111))+(((-1.0)*px))+(((0.37429)*x7108))+(((0.138)*x7099))+((r00*x7112))+(((-0.37429)*r01*x7105)));
evalcond[5]=((((-0.37429)*r10*x7102))+(((0.01)*x7104))+(((0.01)*x7110))+(((0.138)*x7100))+(((-1.0)*py))+((r10*x7112))+(((-0.37429)*r11*x7105))+(((0.37429)*x7103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7114=((1.0)*cj6);
IkReal x7115=(cj4*cj5);
CheckValue<IkReal> x7116=IKPowWithIntegerCheck(sj1,-1);
if(!x7116.valid){
continue;
}
CheckValue<IkReal> x7117=IKPowWithIntegerCheck(cj1,-1);
if(!x7117.valid){
continue;
}
if( IKabs(((x7116.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7117.value)*(((((-1.0)*r00*sj4*x7114))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r01*x7114*x7115))+(((-1.0)*r00*sj6*x7115)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7116.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))+IKsqr(((x7117.value)*(((((-1.0)*r00*sj4*x7114))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r01*x7114*x7115))+(((-1.0)*r00*sj6*x7115))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7116.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))), ((x7117.value)*(((((-1.0)*r00*sj4*x7114))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))+(((-1.0)*r01*x7114*x7115))+(((-1.0)*r00*sj6*x7115))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7118=IKcos(j0);
IkReal x7119=IKsin(j0);
IkReal x7120=((1.0)*cj5);
IkReal x7121=(r11*sj4);
IkReal x7122=(r00*sj6);
IkReal x7123=((0.37429)*sj5);
IkReal x7124=(r10*sj6);
IkReal x7125=(cj6*sj4);
IkReal x7126=((0.36442)*cj1);
IkReal x7127=(cj6*r01);
IkReal x7128=(cj6*r11);
IkReal x7129=((0.01)*cj5);
IkReal x7130=(cj4*cj6);
IkReal x7131=((0.37429)*cj5);
IkReal x7132=((1.0)*cj4);
IkReal x7133=(r12*sj5);
IkReal x7134=(r01*sj6);
IkReal x7135=(r02*sj5);
IkReal x7136=((1.0)*sj4*sj5);
IkReal x7137=((0.069)*x7119);
IkReal x7138=((1.0)*x7119);
IkReal x7139=((1.0)*x7118);
IkReal x7140=((0.069)*x7118);
evalcond[0]=(((sj5*x7128))+((sj5*x7124))+(((-1.0)*r12*x7120))+(((-1.0)*sj1*x7138)));
evalcond[1]=(((sj5*x7127))+((sj5*x7122))+(((-1.0)*r02*x7120))+(((-1.0)*sj1*x7139)));
evalcond[2]=(x7118+(((-1.0)*r11*sj6*x7132))+((r10*x7130))+(((-1.0)*sj4*x7120*x7124))+(((-1.0)*cj6*x7120*x7121))+(((-1.0)*sj4*x7133)));
evalcond[3]=((((-1.0)*x7132*x7134))+((r00*x7130))+(((-1.0)*r01*x7120*x7125))+(((-1.0)*sj4*x7120*x7122))+(((-1.0)*x7138))+(((-1.0)*sj4*x7135)));
evalcond[4]=((((-1.0)*x7132*x7135))+((sj4*x7134))+(((-1.0)*cj4*x7120*x7122))+(((-1.0)*cj4*x7120*x7127))+(((-1.0)*r00*x7125))+(((-1.0)*cj1*x7139)));
evalcond[5]=(((sj6*x7121))+(((-1.0)*x7132*x7133))+(((-1.0)*cj4*x7120*x7128))+(((-1.0)*cj4*x7120*x7124))+(((-1.0)*r10*x7125))+(((-1.0)*cj1*x7138)));
evalcond[6]=(x7140+(((-1.0)*x7123*x7127))+(((-1.0)*x7122*x7123))+((x7118*x7126))+(((-1.0)*px))+(((0.01)*x7135))+(((-1.0)*sj1*x7140))+((x7127*x7129))+((r02*x7131))+((x7122*x7129)));
evalcond[7]=(x7137+(((-1.0)*x7123*x7124))+(((-1.0)*x7123*x7128))+((x7119*x7126))+(((-1.0)*py))+(((0.01)*x7133))+((x7128*x7129))+(((-1.0)*sj1*x7137))+((r12*x7131))+((x7124*x7129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7141=(cj6*r11);
IkReal x7142=(cj5*sj4);
IkReal x7143=(r10*sj6);
CheckValue<IkReal> x7144=IKPowWithIntegerCheck(sj1,-1);
if(!x7144.valid){
continue;
}
if( IKabs(((x7144.value)*(((((-1.0)*cj5*r12))+((sj5*x7141))+((sj5*x7143)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x7141*x7142))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))+((x7142*x7143)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7144.value)*(((((-1.0)*cj5*r12))+((sj5*x7141))+((sj5*x7143))))))+IKsqr((((x7141*x7142))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))+((x7142*x7143))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7144.value)*(((((-1.0)*cj5*r12))+((sj5*x7141))+((sj5*x7143))))), (((x7141*x7142))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))+((x7142*x7143))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7145=IKcos(j0);
IkReal x7146=IKsin(j0);
IkReal x7147=((1.0)*cj5);
IkReal x7148=(r11*sj4);
IkReal x7149=(r00*sj6);
IkReal x7150=((0.37429)*sj5);
IkReal x7151=(r10*sj6);
IkReal x7152=(cj6*sj4);
IkReal x7153=((0.36442)*cj1);
IkReal x7154=(cj6*r01);
IkReal x7155=(cj6*r11);
IkReal x7156=((0.01)*cj5);
IkReal x7157=(cj4*cj6);
IkReal x7158=((0.37429)*cj5);
IkReal x7159=((1.0)*cj4);
IkReal x7160=(r12*sj5);
IkReal x7161=(r01*sj6);
IkReal x7162=(r02*sj5);
IkReal x7163=((1.0)*sj4*sj5);
IkReal x7164=((0.069)*x7146);
IkReal x7165=((1.0)*x7146);
IkReal x7166=((1.0)*x7145);
IkReal x7167=((0.069)*x7145);
evalcond[0]=(((sj5*x7155))+((sj5*x7151))+(((-1.0)*r12*x7147))+(((-1.0)*sj1*x7165)));
evalcond[1]=(((sj5*x7149))+((sj5*x7154))+(((-1.0)*r02*x7147))+(((-1.0)*sj1*x7166)));
evalcond[2]=(x7145+(((-1.0)*sj4*x7147*x7151))+(((-1.0)*sj4*x7160))+(((-1.0)*cj6*x7147*x7148))+((r10*x7157))+(((-1.0)*r11*sj6*x7159)));
evalcond[3]=((((-1.0)*sj4*x7147*x7149))+(((-1.0)*x7159*x7161))+((r00*x7157))+(((-1.0)*x7165))+(((-1.0)*r01*x7147*x7152))+(((-1.0)*sj4*x7162)));
evalcond[4]=((((-1.0)*cj1*x7166))+(((-1.0)*x7159*x7162))+(((-1.0)*cj4*x7147*x7154))+(((-1.0)*r00*x7152))+(((-1.0)*cj4*x7147*x7149))+((sj4*x7161)));
evalcond[5]=((((-1.0)*cj1*x7165))+(((-1.0)*x7159*x7160))+(((-1.0)*cj4*x7147*x7155))+(((-1.0)*cj4*x7147*x7151))+(((-1.0)*r10*x7152))+((sj6*x7148)));
evalcond[6]=(((r02*x7158))+x7167+((x7149*x7156))+((x7145*x7153))+(((-1.0)*px))+(((-1.0)*x7149*x7150))+((x7154*x7156))+(((-1.0)*x7150*x7154))+(((-1.0)*sj1*x7167))+(((0.01)*x7162)));
evalcond[7]=(x7164+((x7146*x7153))+((r12*x7158))+(((-1.0)*py))+(((-1.0)*x7150*x7151))+(((-1.0)*x7150*x7155))+((x7155*x7156))+((x7151*x7156))+(((-1.0)*sj1*x7164))+(((0.01)*x7160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7168=(cj6*sj5);
IkReal x7169=(sj5*sj6);
IkReal x7170=((1.0)*cj5);
CheckValue<IkReal> x7171=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x7171.valid){
continue;
}
CheckValue<IkReal> x7172 = IKatan2WithCheck(IkReal((((r11*x7168))+(((-1.0)*r12*x7170))+((r10*x7169)))),(((r00*x7169))+(((-1.0)*r02*x7170))+((r01*x7168))),IKFAST_ATAN2_MAGTHRESH);
if(!x7172.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7171.value)))+(x7172.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7173=IKcos(j0);
IkReal x7174=IKsin(j0);
IkReal x7175=((1.0)*cj5);
IkReal x7176=(r11*sj4);
IkReal x7177=(r00*sj6);
IkReal x7178=((0.37429)*sj5);
IkReal x7179=(r10*sj6);
IkReal x7180=(cj6*sj4);
IkReal x7181=((0.36442)*cj1);
IkReal x7182=(cj6*r01);
IkReal x7183=(cj6*r11);
IkReal x7184=((0.01)*cj5);
IkReal x7185=(cj4*cj6);
IkReal x7186=((0.37429)*cj5);
IkReal x7187=((1.0)*cj4);
IkReal x7188=(r12*sj5);
IkReal x7189=(r01*sj6);
IkReal x7190=(r02*sj5);
IkReal x7191=((1.0)*sj4*sj5);
IkReal x7192=((0.069)*x7174);
IkReal x7193=((1.0)*x7174);
IkReal x7194=((1.0)*x7173);
IkReal x7195=((0.069)*x7173);
evalcond[0]=(((sj5*x7183))+(((-1.0)*sj1*x7193))+(((-1.0)*r12*x7175))+((sj5*x7179)));
evalcond[1]=(((sj5*x7182))+(((-1.0)*sj1*x7194))+(((-1.0)*r02*x7175))+((sj5*x7177)));
evalcond[2]=(x7173+(((-1.0)*r11*sj6*x7187))+(((-1.0)*sj4*x7188))+((r10*x7185))+(((-1.0)*cj6*x7175*x7176))+(((-1.0)*sj4*x7175*x7179)));
evalcond[3]=((((-1.0)*r01*x7175*x7180))+(((-1.0)*sj4*x7190))+((r00*x7185))+(((-1.0)*x7187*x7189))+(((-1.0)*x7193))+(((-1.0)*sj4*x7175*x7177)));
evalcond[4]=((((-1.0)*cj4*x7175*x7177))+(((-1.0)*x7187*x7190))+(((-1.0)*r00*x7180))+(((-1.0)*cj4*x7175*x7182))+(((-1.0)*cj1*x7194))+((sj4*x7189)));
evalcond[5]=((((-1.0)*cj4*x7175*x7179))+(((-1.0)*r10*x7180))+(((-1.0)*x7187*x7188))+((sj6*x7176))+(((-1.0)*cj4*x7175*x7183))+(((-1.0)*cj1*x7193)));
evalcond[6]=(x7195+(((-1.0)*x7177*x7178))+(((-1.0)*x7178*x7182))+(((0.01)*x7190))+(((-1.0)*sj1*x7195))+((x7182*x7184))+(((-1.0)*px))+((r02*x7186))+((x7173*x7181))+((x7177*x7184)));
evalcond[7]=(x7192+((r12*x7186))+(((-1.0)*x7178*x7183))+((x7179*x7184))+(((0.01)*x7188))+(((-1.0)*x7178*x7179))+(((-1.0)*sj1*x7192))+((x7183*x7184))+(((-1.0)*py))+((x7174*x7181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7196=((1.0)*cj5);
IkReal x7197=(r20*sj6);
IkReal x7198=((0.01)*cj5);
IkReal x7199=(cj6*r21);
IkReal x7200=(r22*sj5);
IkReal x7201=(r21*sj6);
IkReal x7202=((1.0)*cj4);
IkReal x7203=((1.0)*sj4);
IkReal x7204=(cj6*r20);
IkReal x7205=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*x7204))+(((-1.0)*sj4*x7196*x7197))+(((-1.0)*sj4*x7196*x7199))+(((-1.0)*x7201*x7202))+(((-1.0)*x7200*x7203)));
evalcond[2]=((((0.069)*cj1))+(((-1.0)*x7199*x7205))+(((-1.0)*pz))+((x7197*x7198))+(((-1.0)*x7197*x7205))+(((0.01)*x7200))+((x7198*x7199))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*cj4*x7196*x7199))+(((-1.0)*cj4*x7196*x7197))+(((-1.0)*x7203*x7204))+((sj4*x7201))+(((-1.0)*x7200*x7202)));
evalcond[4]=(cj1+((sj5*x7197))+((sj5*x7199))+(((-1.0)*r22*x7196)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x7206=((1.0)*cj6*sj5);
IkReal x7207=((1.0)*sj5*sj6);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r10*x7207))+(((-1.0)*r11*x7206)))))+(IKabs(((((-1.0)*r00*x7207))+(((-1.0)*r01*x7206))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x7208=((1.0)*cj5);
IkReal x7209=(cj4*sj6);
IkReal x7210=((0.01)*cj5);
IkReal x7211=(r20*sj6);
IkReal x7212=(cj6*r21);
IkReal x7213=(sj4*sj6);
IkReal x7214=(r22*sj5);
IkReal x7215=(cj4*cj6);
IkReal x7216=((0.37429)*sj5);
IkReal x7217=((1.0)*cj6*sj4);
IkReal x7218=((1.0)*cj4*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x7208*x7211))+(((-1.0)*sj4*x7208*x7212))+(((-1.0)*sj4*x7214))+(((-1.0)*r21*x7209))+((r20*x7215)));
evalcond[2]=((-0.36442)+(((-1.0)*x7212*x7216))+(((0.01)*x7214))+((x7210*x7212))+((x7210*x7211))+(((-1.0)*pz))+(((-1.0)*x7211*x7216))+(((0.37429)*cj5*r22)));
evalcond[3]=((1.0)+((r21*x7213))+(((-1.0)*cj4*x7214))+(((-1.0)*r20*x7208*x7209))+(((-1.0)*cj4*x7208*x7212))+(((-1.0)*r20*x7217)));
evalcond[4]=((((-1.0)*r22*x7208))+((sj5*x7211))+((sj5*x7212)));
evalcond[5]=((((-1.0)*r00*x7208*x7209))+(((-1.0)*r00*x7217))+(((-1.0)*r02*x7218))+(((-1.0)*r01*x7208*x7215))+((r01*x7213)));
evalcond[6]=(((r11*x7213))+(((-1.0)*r11*x7208*x7215))+(((-1.0)*r10*x7217))+(((-1.0)*r12*x7218))+(((-1.0)*r10*x7208*x7209)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7219=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x7219))+(((-1.0)*cj6*r11*x7219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x7219))+(((-1.0)*r00*sj6*x7219))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x7219))+(((-1.0)*cj6*r11*x7219))))+IKsqr(((((-1.0)*cj6*r01*x7219))+(((-1.0)*r00*sj6*x7219))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x7219))+(((-1.0)*cj6*r11*x7219))), ((((-1.0)*cj6*r01*x7219))+(((-1.0)*r00*sj6*x7219))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x7220=IKsin(j0);
IkReal x7221=IKcos(j0);
IkReal x7222=((1.0)*sj4);
IkReal x7223=(sj5*sj6);
IkReal x7224=(cj5*r12);
IkReal x7225=(r12*sj5);
IkReal x7226=(cj6*sj5);
IkReal x7227=(r02*sj5);
IkReal x7228=(cj4*cj6);
IkReal x7229=(cj5*r02);
IkReal x7230=(cj5*sj6);
IkReal x7231=(cj5*cj6*r11);
IkReal x7232=(cj5*cj6*r01);
IkReal x7233=((0.01)*x7230);
IkReal x7234=((1.0)*cj4*sj6);
evalcond[0]=(x7220+((r10*x7223))+((r11*x7226))+(((-1.0)*x7224)));
evalcond[1]=(x7221+((r00*x7223))+((r01*x7226))+(((-1.0)*x7229)));
evalcond[2]=((((-1.0)*r00*x7222*x7230))+x7220+((r00*x7228))+(((-1.0)*x7222*x7227))+(((-1.0)*x7222*x7232))+(((-1.0)*r01*x7234)));
evalcond[3]=((((-1.0)*r10*x7222*x7230))+((r10*x7228))+(((-1.0)*x7222*x7225))+(((-1.0)*x7222*x7231))+(((-1.0)*x7221))+(((-1.0)*r11*x7234)));
evalcond[4]=(((r00*x7233))+(((0.138)*x7221))+(((0.37429)*x7229))+(((-1.0)*px))+(((-0.37429)*r01*x7226))+(((-0.37429)*r00*x7223))+(((0.01)*x7227))+(((0.01)*x7232)));
evalcond[5]=(((r10*x7233))+(((0.138)*x7220))+(((0.37429)*x7224))+(((-1.0)*py))+(((0.01)*x7225))+(((-0.37429)*r10*x7223))+(((0.01)*x7231))+(((-0.37429)*r11*x7226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7235=(r20*sj6);
IkReal x7236=((1.0)*cj5);
IkReal x7237=((0.01)*cj5);
IkReal x7238=(cj6*r11);
IkReal x7239=(r10*sj6);
IkReal x7240=((0.37429)*sj5);
IkReal x7241=(r00*sj6);
IkReal x7242=(cj6*r21);
IkReal x7243=(sj4*sj6);
IkReal x7244=((0.01)*sj5);
IkReal x7245=(cj6*r01);
IkReal x7246=((0.37429)*cj5);
IkReal x7247=((1.0)*cj4);
IkReal x7248=(r22*sj5);
IkReal x7249=((1.0)*cj6*sj4);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((cj4*cj6*r20))+(((-1.0)*sj4*x7236*x7242))+(((-1.0)*sj4*x7235*x7236))+(((-1.0)*r21*sj6*x7247))+(((-1.0)*sj4*x7248)));
evalcond[2]=((0.36442)+((x7235*x7237))+(((-1.0)*pz))+(((-1.0)*x7240*x7242))+((x7237*x7242))+(((-1.0)*x7235*x7240))+((r22*x7244))+((r22*x7246)));
evalcond[3]=(((r02*x7246))+((r02*x7244))+(((-1.0)*px))+(((-1.0)*x7240*x7245))+(((-1.0)*x7240*x7241))+((x7237*x7245))+((x7237*x7241)));
evalcond[4]=((((-1.0)*py))+(((-1.0)*x7239*x7240))+((r12*x7244))+((r12*x7246))+(((-1.0)*x7238*x7240))+((x7237*x7239))+((x7237*x7238)));
evalcond[5]=((-1.0)+(((-1.0)*cj4*x7236*x7242))+(((-1.0)*x7247*x7248))+(((-1.0)*r20*x7249))+(((-1.0)*cj4*x7235*x7236))+((r21*x7243)));
evalcond[6]=(((sj5*x7235))+((sj5*x7242))+(((-1.0)*r22*x7236)));
evalcond[7]=((((-1.0)*cj4*x7236*x7245))+(((-1.0)*cj4*x7236*x7241))+(((-1.0)*r00*x7249))+((r01*x7243))+(((-1.0)*r02*sj5*x7247)));
evalcond[8]=((((-1.0)*r10*x7249))+((r11*x7243))+(((-1.0)*r12*sj5*x7247))+(((-1.0)*cj4*x7236*x7238))+(((-1.0)*cj4*x7236*x7239)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7250=(cj6*sj5);
IkReal x7251=(sj5*sj6);
IkReal x7252=((1.0)*cj5);
if( IKabs((((r10*x7251))+(((-1.0)*r12*x7252))+((r11*x7250)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x7251))+(((-1.0)*r02*x7252))+((r01*x7250)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x7251))+(((-1.0)*r12*x7252))+((r11*x7250))))+IKsqr((((r00*x7251))+(((-1.0)*r02*x7252))+((r01*x7250))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x7251))+(((-1.0)*r12*x7252))+((r11*x7250))), (((r00*x7251))+(((-1.0)*r02*x7252))+((r01*x7250))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7253=IKsin(j0);
IkReal x7254=(cj6*sj5);
IkReal x7255=((1.0)*sj6);
IkReal x7256=(sj5*sj6);
IkReal x7257=(cj5*sj4);
IkReal x7258=((1.0)*r02);
IkReal x7259=(sj4*sj5);
IkReal x7260=(cj4*cj6);
IkReal x7261=((1.0)*r12);
IkReal x7262=((1.0)*cj6);
IkReal x7263=((1.0)*(IKcos(j0)));
evalcond[0]=(((r10*x7256))+((r11*x7254))+(((-1.0)*cj5*x7261))+(((-1.0)*x7253)));
evalcond[1]=((((-1.0)*cj5*x7258))+(((-1.0)*x7263))+((r00*x7256))+((r01*x7254)));
evalcond[2]=(x7253+(((-1.0)*cj4*r01*x7255))+(((-1.0)*r01*x7257*x7262))+((r00*x7260))+(((-1.0)*r00*x7255*x7257))+(((-1.0)*x7258*x7259)));
evalcond[3]=((((-1.0)*r10*x7255*x7257))+(((-1.0)*x7263))+(((-1.0)*x7259*x7261))+((r10*x7260))+(((-1.0)*cj4*r11*x7255))+(((-1.0)*r11*x7257*x7262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7264=((1.0)*cj6);
IkReal x7265=(cj4*cj5);
IkReal x7266=((1.0)*sj6);
CheckValue<IkReal> x7267=IKPowWithIntegerCheck(sj1,-1);
if(!x7267.valid){
continue;
}
CheckValue<IkReal> x7268=IKPowWithIntegerCheck(cj1,-1);
if(!x7268.valid){
continue;
}
if( IKabs(((x7267.value)*(((((-1.0)*r10*sj5*x7266))+(((-1.0)*r11*sj5*x7264))+((cj5*r12)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7268.value)*(((((-1.0)*r00*sj4*x7264))+(((-1.0)*r00*x7265*x7266))+(((-1.0)*r01*x7264*x7265))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7267.value)*(((((-1.0)*r10*sj5*x7266))+(((-1.0)*r11*sj5*x7264))+((cj5*r12))))))+IKsqr(((x7268.value)*(((((-1.0)*r00*sj4*x7264))+(((-1.0)*r00*x7265*x7266))+(((-1.0)*r01*x7264*x7265))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7267.value)*(((((-1.0)*r10*sj5*x7266))+(((-1.0)*r11*sj5*x7264))+((cj5*r12))))), ((x7268.value)*(((((-1.0)*r00*sj4*x7264))+(((-1.0)*r00*x7265*x7266))+(((-1.0)*r01*x7264*x7265))+(((-1.0)*cj4*r02*sj5))+((r01*sj4*sj6))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7269=IKsin(j0);
IkReal x7270=IKcos(j0);
IkReal x7271=((1.0)*cj5);
IkReal x7272=(r11*sj4);
IkReal x7273=(r00*sj6);
IkReal x7274=((0.37429)*sj5);
IkReal x7275=(r10*sj6);
IkReal x7276=(cj6*sj4);
IkReal x7277=((0.36442)*cj1);
IkReal x7278=(cj6*r01);
IkReal x7279=(cj6*r11);
IkReal x7280=((0.01)*cj5);
IkReal x7281=(cj4*cj6);
IkReal x7282=((0.37429)*cj5);
IkReal x7283=((1.0)*cj4);
IkReal x7284=(r12*sj5);
IkReal x7285=(r01*sj6);
IkReal x7286=(r02*sj5);
IkReal x7287=((1.0)*sj4*sj5);
IkReal x7288=((0.069)*x7269);
IkReal x7289=((1.0)*x7270);
IkReal x7290=((0.069)*x7270);
evalcond[0]=(((sj1*x7269))+(((-1.0)*r12*x7271))+((sj5*x7279))+((sj5*x7275)));
evalcond[1]=(((sj5*x7273))+((sj5*x7278))+(((-1.0)*r02*x7271))+((sj1*x7270)));
evalcond[2]=(x7269+(((-1.0)*x7283*x7285))+(((-1.0)*sj4*x7286))+(((-1.0)*r01*x7271*x7276))+((r00*x7281))+(((-1.0)*sj4*x7271*x7273)));
evalcond[3]=((((-1.0)*x7289))+(((-1.0)*cj6*x7271*x7272))+(((-1.0)*sj4*x7284))+((r10*x7281))+(((-1.0)*sj4*x7271*x7275))+(((-1.0)*r11*sj6*x7283)));
evalcond[4]=((((-1.0)*cj1*x7289))+((sj4*x7285))+(((-1.0)*r00*x7276))+(((-1.0)*x7283*x7286))+(((-1.0)*cj4*x7271*x7278))+(((-1.0)*cj4*x7271*x7273)));
evalcond[5]=(((sj6*x7272))+(((-1.0)*cj1*x7269))+(((-1.0)*x7283*x7284))+(((-1.0)*r10*x7276))+(((-1.0)*cj4*x7271*x7279))+(((-1.0)*cj4*x7271*x7275)));
evalcond[6]=(x7290+(((0.01)*x7286))+((x7278*x7280))+((r02*x7282))+(((-1.0)*x7273*x7274))+((sj1*x7290))+(((-1.0)*x7274*x7278))+(((-1.0)*px))+((x7270*x7277))+((x7273*x7280)));
evalcond[7]=(x7288+(((0.01)*x7284))+((r12*x7282))+((x7269*x7277))+((sj1*x7288))+(((-1.0)*x7274*x7279))+(((-1.0)*x7274*x7275))+(((-1.0)*py))+((x7279*x7280))+((x7275*x7280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7291=((1.0)*r00);
IkReal x7292=(cj6*r01);
IkReal x7293=(cj5*sj4);
CheckValue<IkReal> x7294=IKPowWithIntegerCheck(sj1,-1);
if(!x7294.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*cj6*x7291))+((r00*sj6*x7293))+((x7292*x7293))+((cj4*r01*sj6))+((r02*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7294.value)*(((((-1.0)*sj5*sj6*x7291))+(((-1.0)*sj5*x7292))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*cj6*x7291))+((r00*sj6*x7293))+((x7292*x7293))+((cj4*r01*sj6))+((r02*sj4*sj5))))+IKsqr(((x7294.value)*(((((-1.0)*sj5*sj6*x7291))+(((-1.0)*sj5*x7292))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*cj6*x7291))+((r00*sj6*x7293))+((x7292*x7293))+((cj4*r01*sj6))+((r02*sj4*sj5))), ((x7294.value)*(((((-1.0)*sj5*sj6*x7291))+(((-1.0)*sj5*x7292))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7295=IKsin(j0);
IkReal x7296=IKcos(j0);
IkReal x7297=((1.0)*cj5);
IkReal x7298=(r11*sj4);
IkReal x7299=(r00*sj6);
IkReal x7300=((0.37429)*sj5);
IkReal x7301=(r10*sj6);
IkReal x7302=(cj6*sj4);
IkReal x7303=((0.36442)*cj1);
IkReal x7304=(cj6*r01);
IkReal x7305=(cj6*r11);
IkReal x7306=((0.01)*cj5);
IkReal x7307=(cj4*cj6);
IkReal x7308=((0.37429)*cj5);
IkReal x7309=((1.0)*cj4);
IkReal x7310=(r12*sj5);
IkReal x7311=(r01*sj6);
IkReal x7312=(r02*sj5);
IkReal x7313=((1.0)*sj4*sj5);
IkReal x7314=((0.069)*x7295);
IkReal x7315=((1.0)*x7296);
IkReal x7316=((0.069)*x7296);
evalcond[0]=(((sj1*x7295))+(((-1.0)*r12*x7297))+((sj5*x7301))+((sj5*x7305)));
evalcond[1]=(((sj1*x7296))+((sj5*x7299))+(((-1.0)*r02*x7297))+((sj5*x7304)));
evalcond[2]=((((-1.0)*sj4*x7312))+x7295+(((-1.0)*r01*x7297*x7302))+(((-1.0)*sj4*x7297*x7299))+(((-1.0)*x7309*x7311))+((r00*x7307)));
evalcond[3]=((((-1.0)*sj4*x7310))+(((-1.0)*cj6*x7297*x7298))+((r10*x7307))+(((-1.0)*sj4*x7297*x7301))+(((-1.0)*r11*sj6*x7309))+(((-1.0)*x7315)));
evalcond[4]=(((sj4*x7311))+(((-1.0)*r00*x7302))+(((-1.0)*x7309*x7312))+(((-1.0)*cj4*x7297*x7299))+(((-1.0)*cj4*x7297*x7304))+(((-1.0)*cj1*x7315)));
evalcond[5]=((((-1.0)*r10*x7302))+(((-1.0)*cj1*x7295))+(((-1.0)*x7309*x7310))+(((-1.0)*cj4*x7297*x7301))+(((-1.0)*cj4*x7297*x7305))+((sj6*x7298)));
evalcond[6]=(x7316+((r02*x7308))+((x7304*x7306))+((x7296*x7303))+(((0.01)*x7312))+((sj1*x7316))+(((-1.0)*px))+(((-1.0)*x7300*x7304))+((x7299*x7306))+(((-1.0)*x7299*x7300)));
evalcond[7]=(x7314+((r12*x7308))+((x7301*x7306))+((x7295*x7303))+(((0.01)*x7310))+((sj1*x7314))+(((-1.0)*py))+(((-1.0)*x7300*x7301))+(((-1.0)*x7300*x7305))+((x7305*x7306)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7317=((1.0)*sj5);
CheckValue<IkReal> x7318=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x7318.valid){
continue;
}
CheckValue<IkReal> x7319 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*cj6*r11*x7317))+(((-1.0)*r10*sj6*x7317)))),((((-1.0)*r00*sj6*x7317))+(((-1.0)*cj6*r01*x7317))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x7319.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7318.value)))+(x7319.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7320=IKsin(j0);
IkReal x7321=IKcos(j0);
IkReal x7322=((1.0)*cj5);
IkReal x7323=(r11*sj4);
IkReal x7324=(r00*sj6);
IkReal x7325=((0.37429)*sj5);
IkReal x7326=(r10*sj6);
IkReal x7327=(cj6*sj4);
IkReal x7328=((0.36442)*cj1);
IkReal x7329=(cj6*r01);
IkReal x7330=(cj6*r11);
IkReal x7331=((0.01)*cj5);
IkReal x7332=(cj4*cj6);
IkReal x7333=((0.37429)*cj5);
IkReal x7334=((1.0)*cj4);
IkReal x7335=(r12*sj5);
IkReal x7336=(r01*sj6);
IkReal x7337=(r02*sj5);
IkReal x7338=((1.0)*sj4*sj5);
IkReal x7339=((0.069)*x7320);
IkReal x7340=((1.0)*x7321);
IkReal x7341=((0.069)*x7321);
evalcond[0]=(((sj1*x7320))+((sj5*x7326))+((sj5*x7330))+(((-1.0)*r12*x7322)));
evalcond[1]=(((sj1*x7321))+((sj5*x7329))+((sj5*x7324))+(((-1.0)*r02*x7322)));
evalcond[2]=((((-1.0)*r01*x7322*x7327))+x7320+(((-1.0)*sj4*x7322*x7324))+((r00*x7332))+(((-1.0)*x7334*x7336))+(((-1.0)*sj4*x7337)));
evalcond[3]=(((r10*x7332))+(((-1.0)*sj4*x7322*x7326))+(((-1.0)*x7340))+(((-1.0)*r11*sj6*x7334))+(((-1.0)*cj6*x7322*x7323))+(((-1.0)*sj4*x7335)));
evalcond[4]=((((-1.0)*cj4*x7322*x7324))+(((-1.0)*cj4*x7322*x7329))+(((-1.0)*r00*x7327))+(((-1.0)*cj1*x7340))+(((-1.0)*x7334*x7337))+((sj4*x7336)));
evalcond[5]=((((-1.0)*cj1*x7320))+(((-1.0)*cj4*x7322*x7326))+((sj6*x7323))+(((-1.0)*r10*x7327))+(((-1.0)*cj4*x7322*x7330))+(((-1.0)*x7334*x7335)));
evalcond[6]=(x7341+(((-1.0)*x7324*x7325))+((x7329*x7331))+((r02*x7333))+((x7324*x7331))+(((0.01)*x7337))+(((-1.0)*x7325*x7329))+(((-1.0)*px))+((sj1*x7341))+((x7321*x7328)));
evalcond[7]=(x7339+((x7320*x7328))+((r12*x7333))+(((-1.0)*x7325*x7330))+(((0.01)*x7335))+((sj1*x7339))+(((-1.0)*x7325*x7326))+(((-1.0)*py))+((x7330*x7331))+((x7326*x7331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7350=IKPowWithIntegerCheck(cj1,-1);
if(!x7350.valid){
continue;
}
IkReal x7342=x7350.value;
IkReal x7343=(cj1*sj5);
IkReal x7344=((1.0)*cj6);
IkReal x7345=(r00*sj2);
IkReal x7346=(cj4*cj5);
IkReal x7347=((1.0)*sj6);
IkReal x7348=(r01*sj4*sj6);
IkReal x7349=((1.0)*cj4*r02*sj5);
CheckValue<IkReal> x7351=IKPowWithIntegerCheck(cj2,-1);
if(!x7351.valid){
continue;
}
CheckValue<IkReal> x7352=IKPowWithIntegerCheck(sj1,-1);
if(!x7352.valid){
continue;
}
if( IKabs((x7342*(x7351.value)*(x7352.value)*((((sj2*x7348))+((cj6*r11*x7343))+(((-1.0)*cj1*cj5*r12))+(((-1.0)*x7345*x7346*x7347))+(((-1.0)*sj4*x7344*x7345))+((r10*sj6*x7343))+(((-1.0)*sj2*x7349))+(((-1.0)*r01*sj2*x7344*x7346)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7342*((x7348+(((-1.0)*r00*sj4*x7344))+(((-1.0)*r01*x7344*x7346))+(((-1.0)*x7349))+(((-1.0)*r00*x7346*x7347)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7342*(x7351.value)*(x7352.value)*((((sj2*x7348))+((cj6*r11*x7343))+(((-1.0)*cj1*cj5*r12))+(((-1.0)*x7345*x7346*x7347))+(((-1.0)*sj4*x7344*x7345))+((r10*sj6*x7343))+(((-1.0)*sj2*x7349))+(((-1.0)*r01*sj2*x7344*x7346))))))+IKsqr((x7342*((x7348+(((-1.0)*r00*sj4*x7344))+(((-1.0)*r01*x7344*x7346))+(((-1.0)*x7349))+(((-1.0)*r00*x7346*x7347))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x7342*(x7351.value)*(x7352.value)*((((sj2*x7348))+((cj6*r11*x7343))+(((-1.0)*cj1*cj5*r12))+(((-1.0)*x7345*x7346*x7347))+(((-1.0)*sj4*x7344*x7345))+((r10*sj6*x7343))+(((-1.0)*sj2*x7349))+(((-1.0)*r01*sj2*x7344*x7346))))), (x7342*((x7348+(((-1.0)*r00*sj4*x7344))+(((-1.0)*r01*x7344*x7346))+(((-1.0)*x7349))+(((-1.0)*r00*x7346*x7347))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7353=IKsin(j0);
IkReal x7354=IKcos(j0);
IkReal x7355=((1.0)*cj5);
IkReal x7356=(cj6*sj4);
IkReal x7357=((0.37429)*sj5);
IkReal x7358=(r10*sj6);
IkReal x7359=((0.36442)*cj1);
IkReal x7360=((0.069)*sj2);
IkReal x7361=(cj6*r01);
IkReal x7362=(r00*sj6);
IkReal x7363=(cj6*r11);
IkReal x7364=((1.0)*sj1);
IkReal x7365=((0.01)*cj5);
IkReal x7366=((1.0)*cj1);
IkReal x7367=(r12*sj5);
IkReal x7368=(cj4*cj6);
IkReal x7369=((0.37429)*cj5);
IkReal x7370=((1.0)*cj4);
IkReal x7371=(r02*sj5);
IkReal x7372=(r01*sj6);
IkReal x7373=(r11*sj6);
IkReal x7374=(cj2*x7354);
IkReal x7375=((0.069)*x7353);
IkReal x7376=((1.0)*sj4*sj5);
IkReal x7377=(sj2*x7354);
IkReal x7378=((1.0)*x7353);
evalcond[0]=(x7377+(((-1.0)*cj2*x7353*x7364))+(((-1.0)*r12*x7355))+((sj5*x7358))+((sj5*x7363)));
evalcond[1]=((((-1.0)*sj2*x7378))+(((-1.0)*r02*x7355))+(((-1.0)*x7364*x7374))+((sj5*x7362))+((sj5*x7361)));
evalcond[2]=((((-1.0)*x7370*x7371))+(((-1.0)*x7354*x7366))+(((-1.0)*r00*x7356))+(((-1.0)*cj4*x7355*x7362))+(((-1.0)*cj4*x7355*x7361))+((sj4*x7372)));
evalcond[3]=((((-1.0)*r10*x7356))+(((-1.0)*x7367*x7370))+(((-1.0)*cj4*x7355*x7363))+((sj4*x7373))+(((-1.0)*x7353*x7366))+(((-1.0)*cj4*x7355*x7358)));
evalcond[4]=(x7374+(((-1.0)*sj4*x7367))+((sj1*sj2*x7353))+(((-1.0)*x7370*x7373))+(((-1.0)*sj4*x7355*x7358))+((r10*x7368))+(((-1.0)*r11*x7355*x7356)));
evalcond[5]=(((r00*x7368))+(((-1.0)*r01*x7355*x7356))+(((-1.0)*sj4*x7371))+(((-1.0)*x7370*x7372))+((sj1*x7377))+(((-1.0)*cj2*x7378))+(((-1.0)*sj4*x7355*x7362)));
evalcond[6]=((((0.069)*x7354))+(((0.01)*x7371))+(((-0.069)*sj1*x7374))+(((-1.0)*px))+(((-1.0)*x7357*x7361))+(((-1.0)*x7357*x7362))+((x7361*x7365))+((x7362*x7365))+((r02*x7369))+(((-1.0)*x7353*x7360))+((x7354*x7359)));
evalcond[7]=(((r12*x7369))+x7375+((x7353*x7359))+((x7363*x7365))+((x7358*x7365))+(((-1.0)*cj2*sj1*x7375))+(((-1.0)*py))+(((-1.0)*x7357*x7358))+((x7354*x7360))+(((0.01)*x7367))+(((-1.0)*x7357*x7363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x7390=IKPowWithIntegerCheck(cj1,-1);
if(!x7390.valid){
continue;
}
IkReal x7379=x7390.value;
IkReal x7380=(r02*sj5);
IkReal x7381=((1.0)*sj4);
IkReal x7382=(cj2*sj1);
IkReal x7383=(r01*sj6);
IkReal x7384=((1.0)*cj4);
IkReal x7385=(r00*sj6);
IkReal x7386=(cj1*sj5);
IkReal x7387=(cj6*r00);
IkReal x7388=(cj4*x7382);
IkReal x7389=(cj5*cj6*r01);
CheckValue<IkReal> x7391=IKPowWithIntegerCheck(sj2,-1);
if(!x7391.valid){
continue;
}
if( IKabs((x7379*(x7391.value)*((((cj5*x7385*x7388))+(((-1.0)*x7381*x7382*x7383))+((sj4*x7382*x7387))+(((-1.0)*cj1*cj5*r02))+((x7380*x7388))+((x7385*x7386))+((x7388*x7389))+((cj6*r01*x7386)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x7379*(((((-1.0)*x7381*x7387))+(((-1.0)*x7380*x7384))+(((-1.0)*x7384*x7389))+(((-1.0)*cj5*x7384*x7385))+((sj4*x7383)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x7379*(x7391.value)*((((cj5*x7385*x7388))+(((-1.0)*x7381*x7382*x7383))+((sj4*x7382*x7387))+(((-1.0)*cj1*cj5*r02))+((x7380*x7388))+((x7385*x7386))+((x7388*x7389))+((cj6*r01*x7386))))))+IKsqr((x7379*(((((-1.0)*x7381*x7387))+(((-1.0)*x7380*x7384))+(((-1.0)*x7384*x7389))+(((-1.0)*cj5*x7384*x7385))+((sj4*x7383))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x7379*(x7391.value)*((((cj5*x7385*x7388))+(((-1.0)*x7381*x7382*x7383))+((sj4*x7382*x7387))+(((-1.0)*cj1*cj5*r02))+((x7380*x7388))+((x7385*x7386))+((x7388*x7389))+((cj6*r01*x7386))))), (x7379*(((((-1.0)*x7381*x7387))+(((-1.0)*x7380*x7384))+(((-1.0)*x7384*x7389))+(((-1.0)*cj5*x7384*x7385))+((sj4*x7383))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7392=IKsin(j0);
IkReal x7393=IKcos(j0);
IkReal x7394=((1.0)*cj5);
IkReal x7395=(cj6*sj4);
IkReal x7396=((0.37429)*sj5);
IkReal x7397=(r10*sj6);
IkReal x7398=((0.36442)*cj1);
IkReal x7399=((0.069)*sj2);
IkReal x7400=(cj6*r01);
IkReal x7401=(r00*sj6);
IkReal x7402=(cj6*r11);
IkReal x7403=((1.0)*sj1);
IkReal x7404=((0.01)*cj5);
IkReal x7405=((1.0)*cj1);
IkReal x7406=(r12*sj5);
IkReal x7407=(cj4*cj6);
IkReal x7408=((0.37429)*cj5);
IkReal x7409=((1.0)*cj4);
IkReal x7410=(r02*sj5);
IkReal x7411=(r01*sj6);
IkReal x7412=(r11*sj6);
IkReal x7413=(cj2*x7393);
IkReal x7414=((0.069)*x7392);
IkReal x7415=((1.0)*sj4*sj5);
IkReal x7416=(sj2*x7393);
IkReal x7417=((1.0)*x7392);
evalcond[0]=((((-1.0)*r12*x7394))+((sj5*x7397))+((sj5*x7402))+(((-1.0)*cj2*x7392*x7403))+x7416);
evalcond[1]=((((-1.0)*r02*x7394))+(((-1.0)*sj2*x7417))+((sj5*x7401))+((sj5*x7400))+(((-1.0)*x7403*x7413)));
evalcond[2]=((((-1.0)*x7393*x7405))+((sj4*x7411))+(((-1.0)*x7409*x7410))+(((-1.0)*cj4*x7394*x7401))+(((-1.0)*cj4*x7394*x7400))+(((-1.0)*r00*x7395)));
evalcond[3]=((((-1.0)*x7392*x7405))+((sj4*x7412))+(((-1.0)*r10*x7395))+(((-1.0)*cj4*x7394*x7397))+(((-1.0)*cj4*x7394*x7402))+(((-1.0)*x7406*x7409)));
evalcond[4]=((((-1.0)*x7409*x7412))+(((-1.0)*sj4*x7394*x7397))+((sj1*sj2*x7392))+(((-1.0)*r11*x7394*x7395))+(((-1.0)*sj4*x7406))+x7413+((r10*x7407)));
evalcond[5]=((((-1.0)*cj2*x7417))+(((-1.0)*r01*x7394*x7395))+(((-1.0)*x7409*x7411))+((r00*x7407))+(((-1.0)*sj4*x7410))+(((-1.0)*sj4*x7394*x7401))+((sj1*x7416)));
evalcond[6]=(((r02*x7408))+(((-1.0)*x7392*x7399))+((x7401*x7404))+(((-1.0)*x7396*x7401))+(((-1.0)*x7396*x7400))+(((0.069)*x7393))+(((-0.069)*sj1*x7413))+((x7400*x7404))+(((-1.0)*px))+((x7393*x7398))+(((0.01)*x7410)));
evalcond[7]=(((x7397*x7404))+((x7402*x7404))+(((-1.0)*x7396*x7397))+(((-1.0)*x7396*x7402))+(((-1.0)*py))+((x7393*x7399))+(((-1.0)*cj2*sj1*x7414))+x7414+((r12*x7408))+(((0.01)*x7406))+((x7392*x7398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7418=(r10*sj6);
IkReal x7419=(cj6*r11);
IkReal x7420=(sj2*sj5);
IkReal x7421=(cj6*r01);
IkReal x7422=(r00*sj6);
IkReal x7423=(cj5*sj2);
IkReal x7424=(cj2*sj1*sj5);
IkReal x7425=((1.0)*cj2*cj5*sj1);
CheckValue<IkReal> x7426=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x7426.valid){
continue;
}
CheckValue<IkReal> x7427 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7423))+((x7419*x7424))+((x7418*x7424))+(((-1.0)*r12*x7425))+((x7420*x7421))+((x7420*x7422)))),((((-1.0)*x7419*x7420))+(((-1.0)*x7418*x7420))+(((-1.0)*r02*x7425))+((r12*x7423))+((x7421*x7424))+((x7422*x7424))),IKFAST_ATAN2_MAGTHRESH);
if(!x7427.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7426.value)))+(x7427.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x7428=IKsin(j0);
IkReal x7429=IKcos(j0);
IkReal x7430=((1.0)*cj5);
IkReal x7431=(cj6*sj4);
IkReal x7432=((0.37429)*sj5);
IkReal x7433=(r10*sj6);
IkReal x7434=((0.36442)*cj1);
IkReal x7435=((0.069)*sj2);
IkReal x7436=(cj6*r01);
IkReal x7437=(r00*sj6);
IkReal x7438=(cj6*r11);
IkReal x7439=((1.0)*sj1);
IkReal x7440=((0.01)*cj5);
IkReal x7441=((1.0)*cj1);
IkReal x7442=(r12*sj5);
IkReal x7443=(cj4*cj6);
IkReal x7444=((0.37429)*cj5);
IkReal x7445=((1.0)*cj4);
IkReal x7446=(r02*sj5);
IkReal x7447=(r01*sj6);
IkReal x7448=(r11*sj6);
IkReal x7449=(cj2*x7429);
IkReal x7450=((0.069)*x7428);
IkReal x7451=((1.0)*sj4*sj5);
IkReal x7452=(sj2*x7429);
IkReal x7453=((1.0)*x7428);
evalcond[0]=(((sj5*x7433))+((sj5*x7438))+(((-1.0)*r12*x7430))+(((-1.0)*cj2*x7428*x7439))+x7452);
evalcond[1]=(((sj5*x7437))+((sj5*x7436))+(((-1.0)*r02*x7430))+(((-1.0)*sj2*x7453))+(((-1.0)*x7439*x7449)));
evalcond[2]=((((-1.0)*x7429*x7441))+((sj4*x7447))+(((-1.0)*cj4*x7430*x7436))+(((-1.0)*cj4*x7430*x7437))+(((-1.0)*r00*x7431))+(((-1.0)*x7445*x7446)));
evalcond[3]=(((sj4*x7448))+(((-1.0)*cj4*x7430*x7433))+(((-1.0)*cj4*x7430*x7438))+(((-1.0)*x7442*x7445))+(((-1.0)*r10*x7431))+(((-1.0)*x7428*x7441)));
evalcond[4]=((((-1.0)*sj4*x7442))+((sj1*sj2*x7428))+(((-1.0)*sj4*x7430*x7433))+((r10*x7443))+(((-1.0)*x7445*x7448))+x7449+(((-1.0)*r11*x7430*x7431)));
evalcond[5]=((((-1.0)*sj4*x7446))+((sj1*x7452))+(((-1.0)*sj4*x7430*x7437))+(((-1.0)*r01*x7430*x7431))+(((-1.0)*cj2*x7453))+((r00*x7443))+(((-1.0)*x7445*x7447)));
evalcond[6]=(((x7429*x7434))+(((-0.069)*sj1*x7449))+(((0.069)*x7429))+(((-1.0)*px))+(((-1.0)*x7428*x7435))+(((0.01)*x7446))+((x7437*x7440))+((x7436*x7440))+((r02*x7444))+(((-1.0)*x7432*x7437))+(((-1.0)*x7432*x7436)));
evalcond[7]=(((x7429*x7435))+((r12*x7444))+((x7433*x7440))+((x7438*x7440))+(((-1.0)*py))+((x7428*x7434))+(((0.01)*x7442))+x7450+(((-1.0)*cj2*sj1*x7450))+(((-1.0)*x7432*x7438))+(((-1.0)*x7432*x7433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7454=(r10*sj6);
IkReal x7455=(cj6*r11);
IkReal x7456=(sj2*sj5);
IkReal x7457=(cj6*r01);
IkReal x7458=(r00*sj6);
IkReal x7459=(cj5*sj2);
IkReal x7460=(cj2*sj1*sj5);
IkReal x7461=((1.0)*cj2*cj5*sj1);
CheckValue<IkReal> x7462=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x7462.valid){
continue;
}
CheckValue<IkReal> x7463 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7461))+(((-1.0)*r02*x7459))+((x7456*x7458))+((x7456*x7457))+((x7454*x7460))+((x7455*x7460)))),(((x7458*x7460))+((x7457*x7460))+((r12*x7459))+(((-1.0)*x7454*x7456))+(((-1.0)*x7455*x7456))+(((-1.0)*r02*x7461))),IKFAST_ATAN2_MAGTHRESH);
if(!x7463.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7462.value)))+(x7463.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7464=IKsin(j0);
IkReal x7465=IKcos(j0);
IkReal x7466=(cj6*r11);
IkReal x7467=((0.01)*cj5);
IkReal x7468=(sj5*sj6);
IkReal x7469=((0.36442)*cj1);
IkReal x7470=(cj2*sj1);
IkReal x7471=(cj6*r01);
IkReal x7472=((0.37429)*sj5);
IkReal x7473=(cj5*r02);
IkReal x7474=((0.01)*sj5);
IkReal x7475=(cj5*r12);
IkReal x7476=((0.069)*x7464);
IkReal x7477=((0.069)*x7465);
IkReal x7478=((1.0)*x7464);
evalcond[0]=(((sj5*x7466))+((r10*x7468))+((sj2*x7465))+(((-1.0)*x7475))+(((-1.0)*x7470*x7478)));
evalcond[1]=((((-1.0)*sj2*x7478))+(((-1.0)*x7473))+(((-1.0)*x7465*x7470))+((r00*x7468))+((sj5*x7471)));
evalcond[2]=((((-0.37429)*r00*x7468))+((x7467*x7471))+((r02*x7474))+(((-1.0)*sj2*x7476))+(((0.37429)*x7473))+(((-1.0)*px))+(((-1.0)*x7471*x7472))+((x7465*x7469))+x7477+(((-1.0)*x7470*x7477))+((r00*sj6*x7467)));
evalcond[3]=((((-1.0)*x7466*x7472))+(((0.37429)*x7475))+((x7464*x7469))+((r10*sj6*x7467))+(((-1.0)*py))+((x7466*x7467))+((sj2*x7477))+x7476+(((-1.0)*x7470*x7476))+(((-0.37429)*r10*x7468))+((r12*x7474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7479=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7479;
j4eval[1]=IKsign(x7479);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7480=((1.0)*sj5);
IkReal x7481=((((-1.0)*cj6*r01*x7480))+(((-1.0)*r00*sj6*x7480))+((cj5*r02)));
j4eval[0]=x7481;
j4eval[1]=IKsign(x7481);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x7482=cj5*cj5;
IkReal x7483=cj6*cj6;
IkReal x7484=r20*r20;
IkReal x7485=r21*r21;
IkReal x7486=r22*r22;
IkReal x7487=(r22*sj5);
IkReal x7488=(cj6*r20);
IkReal x7489=(cj1*sj2);
IkReal x7490=(cj6*r21);
IkReal x7491=(cj5*sj1);
IkReal x7492=(r20*sj6);
IkReal x7493=(r21*sj6);
IkReal x7494=((2.0)*x7492);
IkReal x7495=((1.0)*x7482);
IkReal x7496=(x7483*x7484);
IkReal x7497=(x7483*x7485);
IkReal x7498=(((cj5*x7487*x7494))+(((-2.0)*x7488*x7493))+(((2.0)*cj5*x7487*x7490))+(((-1.0)*x7497))+(((-1.0)*x7495*x7496))+(((-1.0)*x7486*x7495))+(((2.0)*x7482*x7488*x7493))+((x7482*x7484))+((x7482*x7497))+x7496+x7485+x7486);
j4eval[0]=x7498;
j4eval[1]=((IKabs((((x7491*x7492))+((x7490*x7491))+(((-1.0)*x7488*x7489))+((sj1*x7487))+((x7489*x7493)))))+(IKabs((((x7487*x7489))+((cj5*x7489*x7490))+((cj5*x7489*x7492))+(((-1.0)*sj1*x7493))+((sj1*x7488))))));
j4eval[2]=IKsign(x7498);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7499=((1.0)*cj5);
IkReal x7500=((0.01)*cj5);
IkReal x7501=(cj6*r11);
IkReal x7502=(r20*sj6);
IkReal x7503=((0.01)*sj5);
IkReal x7504=(cj6*r01);
IkReal x7505=((0.37429)*cj5);
IkReal x7506=((0.37429)*sj5);
IkReal x7507=(cj6*r21);
IkReal x7508=(r10*sj5*sj6);
IkReal x7509=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((-0.069)+(((-1.0)*x7502*x7506))+(((-1.0)*pz))+(((-1.0)*x7506*x7507))+((r22*x7505))+((r22*x7503))+((x7500*x7507))+((x7500*x7502)));
evalcond[2]=(((r00*sj6*x7500))+(((-1.0)*r00*sj6*x7506))+((r02*x7505))+((r02*x7503))+(((-1.0)*px))+(((-1.0)*x7504*x7506))+(((0.43342)*cj0))+((x7500*x7504)));
evalcond[3]=((((-1.0)*x7501*x7506))+((r12*x7503))+((r12*x7505))+((r10*sj6*x7500))+(((-1.0)*py))+(((0.43342)*sj0))+(((-1.0)*r10*sj6*x7506))+((x7500*x7501)));
evalcond[4]=((-1.0)+((sj5*x7507))+((sj5*x7502))+(((-1.0)*r22*x7499)));
evalcond[5]=(((sj5*x7501))+x7508+(((-1.0)*r12*x7499)));
evalcond[6]=(((sj5*x7504))+x7509+(((-1.0)*r02*x7499)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7510=(cj0*sj6);
IkReal x7511=(cj0*cj6);
IkReal x7512=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x7512;
j4eval[1]=((IKabs(((((-1.0)*r21*x7510))+((r20*x7511)))))+(IKabs((((cj5*r20*x7510))+((cj5*r21*x7511))+((cj0*r22*sj5))))));
j4eval[2]=IKsign(x7512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7513=(r21*sj0);
IkReal x7514=(r20*sj0);
IkReal x7515=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7515;
j4eval[1]=((IKabs((((cj6*x7514))+(((-1.0)*sj6*x7513)))))+(IKabs((((cj5*cj6*x7513))+((r22*sj0*sj5))+((cj5*sj6*x7514))))));
j4eval[2]=IKsign(x7515);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7516=cj6*cj6;
IkReal x7517=cj5*cj5;
IkReal x7518=(r02*r22);
IkReal x7519=(r22*sj5);
IkReal x7520=(r00*r20);
IkReal x7521=((1.0)*r21);
IkReal x7522=(r20*sj6);
IkReal x7523=(cj6*r01);
IkReal x7524=(cj0*cj5);
IkReal x7525=(r00*sj6);
IkReal x7526=((1.0)*cj5);
IkReal x7527=(cj6*r21);
IkReal x7528=(cj5*r02*sj5);
IkReal x7529=((1.0)*x7517);
IkReal x7530=(x7516*x7517);
IkReal x7531=(((x7525*x7527))+(((-1.0)*r02*sj5*x7522*x7526))+(((-1.0)*r01*x7521))+(((-1.0)*x7522*x7523*x7529))+(((-1.0)*cj6*x7521*x7528))+(((-1.0)*cj6*x7517*x7521*x7525))+((x7517*x7518))+((r01*r21*x7516))+(((-1.0)*x7519*x7523*x7526))+(((-1.0)*x7520*x7529))+((x7520*x7530))+(((-1.0)*x7516*x7520))+(((-1.0)*x7518))+((x7522*x7523))+(((-1.0)*x7519*x7525*x7526))+(((-1.0)*r01*x7521*x7530)));
j4eval[0]=x7531;
j4eval[1]=((IKabs((((x7524*x7527))+((cj0*x7519))+((x7522*x7524)))))+(IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x7521))))));
j4eval[2]=IKsign(x7531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7532=((1.0)*cj5);
IkReal x7533=((0.01)*cj5);
IkReal x7534=(cj6*r11);
IkReal x7535=(r20*sj6);
IkReal x7536=((0.01)*sj5);
IkReal x7537=(cj6*r01);
IkReal x7538=((0.37429)*cj5);
IkReal x7539=((0.37429)*sj5);
IkReal x7540=(cj6*r21);
IkReal x7541=(r10*sj5*sj6);
IkReal x7542=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x7538))+((r22*x7536))+((x7533*x7540))+((x7533*x7535))+(((-1.0)*x7539*x7540))+(((-1.0)*pz))+(((-1.0)*x7535*x7539)));
evalcond[2]=(((x7533*x7537))+(((-1.0)*x7537*x7539))+(((-1.0)*px))+((r00*sj6*x7533))+((r02*x7538))+((r02*x7536))+(((-1.0)*r00*sj6*x7539)));
evalcond[3]=((0.43342)+((x7533*x7534))+(((-1.0)*py))+(((-1.0)*x7534*x7539))+((r12*x7538))+((r12*x7536))+((r10*sj6*x7533))+(((-1.0)*r10*sj6*x7539)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7532))+((sj5*x7535))+((sj5*x7540)));
evalcond[5]=((((-1.0)*r12*x7532))+x7541+((sj5*x7534)));
evalcond[6]=(x7542+(((-1.0)*r02*x7532))+((sj5*x7537)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7543=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x7543;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x7543);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7544=((1.0)*sj5);
IkReal x7545=(((cj5*r22))+(((-1.0)*cj6*r21*x7544))+(((-1.0)*r20*sj6*x7544)));
j4eval[0]=x7545;
j4eval[1]=IKsign(x7545);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7546=cj6*cj6;
IkReal x7547=cj5*cj5;
IkReal x7548=r10*r10;
IkReal x7549=r11*r11;
IkReal x7550=r12*r12;
IkReal x7551=(r10*sj6);
IkReal x7552=(r12*sj5);
IkReal x7553=((2.0)*cj6*r11);
IkReal x7554=((1.0)*x7548);
IkReal x7555=(x7546*x7549);
IkReal x7556=((((-1.0)*x7547*x7551*x7553))+((x7551*x7553))+(((-1.0)*cj5*x7552*x7553))+((x7547*x7550))+(((-1.0)*x7550))+(((-1.0)*x7549))+(((-1.0)*x7546*x7554))+x7555+(((-1.0)*x7547*x7554))+(((-2.0)*cj5*x7551*x7552))+(((-1.0)*x7547*x7555))+((x7546*x7547*x7548)));
j4eval[0]=x7556;
j4eval[1]=((IKabs((((cj5*x7551))+((cj5*cj6*r11))+x7552)))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x7556);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7557=cj6*cj6;
IkReal x7558=cj5*cj5;
IkReal x7559=r10*r10;
IkReal x7560=r11*r11;
IkReal x7561=r12*r12;
IkReal x7562=(r10*sj6);
IkReal x7563=(r12*sj5);
IkReal x7564=((2.0)*cj6*r11);
IkReal x7565=(x7557*x7560);
IkReal x7566=(x7558*x7559);
CheckValue<IkReal> x7567 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*cj6*r11))+x7563+((cj5*x7562))),IKFAST_ATAN2_MAGTHRESH);
if(!x7567.valid){
continue;
}
CheckValue<IkReal> x7568=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7558*x7565))+(((-1.0)*cj5*x7563*x7564))+(((-1.0)*x7558*x7562*x7564))+(((-1.0)*x7557*x7559))+((x7557*x7566))+(((-1.0)*x7560))+(((-1.0)*x7561))+(((-1.0)*x7566))+((x7562*x7564))+(((-2.0)*cj5*x7562*x7563))+x7565+((x7558*x7561)))),-1);
if(!x7568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7567.value)+(((1.5707963267949)*(x7568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7569=IKsin(j4);
IkReal x7570=IKcos(j4);
IkReal x7571=(cj5*cj6);
IkReal x7572=(r11*sj6);
IkReal x7573=(cj6*r20);
IkReal x7574=(cj6*r10);
IkReal x7575=(cj5*sj6);
IkReal x7576=(r01*sj6);
IkReal x7577=(r21*sj6);
IkReal x7578=(cj6*r00);
IkReal x7579=((1.0)*x7570);
IkReal x7580=((1.0)*x7569);
IkReal x7581=(sj5*x7580);
evalcond[0]=((((-1.0)*r20*x7575*x7580))+(((-1.0)*r22*x7581))+(((-1.0)*r21*x7571*x7580))+(((-1.0)*x7577*x7579))+((x7570*x7573)));
evalcond[1]=((((-1.0)*r10*x7575*x7580))+((x7570*x7574))+(((-1.0)*r11*x7571*x7580))+(((-1.0)*r12*x7581))+(((-1.0)*x7572*x7579)));
evalcond[2]=((((-1.0)*r21*x7571*x7579))+(((-1.0)*x7573*x7580))+(((-1.0)*r22*sj5*x7579))+(((-1.0)*r20*x7575*x7579))+((x7569*x7577)));
evalcond[3]=((((-1.0)*r02*sj5*x7579))+(((-1.0)*r00*x7575*x7579))+(((-1.0)*r01*x7571*x7579))+((x7569*x7576))+(((-1.0)*x7578*x7580)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x7575*x7580))+(((-1.0)*x7576*x7579))+(((-1.0)*r02*x7581))+((x7570*x7578))+(((-1.0)*r01*x7571*x7580)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x7579))+((x7569*x7572))+(((-1.0)*r11*x7571*x7579))+(((-1.0)*x7574*x7580))+(((-1.0)*r10*x7575*x7579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7582=((1.0)*sj5);
CheckValue<IkReal> x7583 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x7583.valid){
continue;
}
CheckValue<IkReal> x7584=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x7582))+(((-1.0)*r20*sj6*x7582)))),-1);
if(!x7584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7583.value)+(((1.5707963267949)*(x7584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7585=IKsin(j4);
IkReal x7586=IKcos(j4);
IkReal x7587=(cj5*cj6);
IkReal x7588=(r11*sj6);
IkReal x7589=(cj6*r20);
IkReal x7590=(cj6*r10);
IkReal x7591=(cj5*sj6);
IkReal x7592=(r01*sj6);
IkReal x7593=(r21*sj6);
IkReal x7594=(cj6*r00);
IkReal x7595=((1.0)*x7586);
IkReal x7596=((1.0)*x7585);
IkReal x7597=(sj5*x7596);
evalcond[0]=((((-1.0)*r22*x7597))+((x7586*x7589))+(((-1.0)*x7593*x7595))+(((-1.0)*r21*x7587*x7596))+(((-1.0)*r20*x7591*x7596)));
evalcond[1]=((((-1.0)*r12*x7597))+((x7586*x7590))+(((-1.0)*x7588*x7595))+(((-1.0)*r11*x7587*x7596))+(((-1.0)*r10*x7591*x7596)));
evalcond[2]=((((-1.0)*x7589*x7596))+((x7585*x7593))+(((-1.0)*r21*x7587*x7595))+(((-1.0)*r22*sj5*x7595))+(((-1.0)*r20*x7591*x7595)));
evalcond[3]=((((-1.0)*r02*sj5*x7595))+((x7585*x7592))+(((-1.0)*x7594*x7596))+(((-1.0)*r00*x7591*x7595))+(((-1.0)*r01*x7587*x7595)));
evalcond[4]=((-1.0)+(((-1.0)*x7592*x7595))+((x7586*x7594))+(((-1.0)*r00*x7591*x7596))+(((-1.0)*r02*x7597))+(((-1.0)*r01*x7587*x7596)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x7595))+(((-1.0)*x7590*x7596))+((x7585*x7588))+(((-1.0)*r11*x7587*x7595))+(((-1.0)*r10*x7591*x7595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7598 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x7598.valid){
continue;
}
CheckValue<IkReal> x7599=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x7599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7598.value)+(((1.5707963267949)*(x7599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7600=IKsin(j4);
IkReal x7601=IKcos(j4);
IkReal x7602=(cj5*cj6);
IkReal x7603=(r11*sj6);
IkReal x7604=(cj6*r20);
IkReal x7605=(cj6*r10);
IkReal x7606=(cj5*sj6);
IkReal x7607=(r01*sj6);
IkReal x7608=(r21*sj6);
IkReal x7609=(cj6*r00);
IkReal x7610=((1.0)*x7601);
IkReal x7611=((1.0)*x7600);
IkReal x7612=(sj5*x7611);
evalcond[0]=((((-1.0)*r20*x7606*x7611))+(((-1.0)*r22*x7612))+(((-1.0)*r21*x7602*x7611))+((x7601*x7604))+(((-1.0)*x7608*x7610)));
evalcond[1]=((((-1.0)*r12*x7612))+(((-1.0)*r11*x7602*x7611))+((x7601*x7605))+(((-1.0)*r10*x7606*x7611))+(((-1.0)*x7603*x7610)));
evalcond[2]=((((-1.0)*r20*x7606*x7610))+((x7600*x7608))+(((-1.0)*r21*x7602*x7610))+(((-1.0)*r22*sj5*x7610))+(((-1.0)*x7604*x7611)));
evalcond[3]=((((-1.0)*r01*x7602*x7610))+((x7600*x7607))+(((-1.0)*r02*sj5*x7610))+(((-1.0)*r00*x7606*x7610))+(((-1.0)*x7609*x7611)));
evalcond[4]=((-1.0)+(((-1.0)*r01*x7602*x7611))+(((-1.0)*r00*x7606*x7611))+((x7601*x7609))+(((-1.0)*r02*x7612))+(((-1.0)*x7607*x7610)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x7602*x7610))+((x7600*x7603))+(((-1.0)*x7605*x7611))+(((-1.0)*r12*sj5*x7610))+(((-1.0)*r10*x7606*x7610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7613=((1.0)*cj5);
IkReal x7614=((0.01)*cj5);
IkReal x7615=(cj6*r11);
IkReal x7616=(r20*sj6);
IkReal x7617=((0.01)*sj5);
IkReal x7618=(cj6*r01);
IkReal x7619=((0.37429)*cj5);
IkReal x7620=((0.37429)*sj5);
IkReal x7621=(cj6*r21);
IkReal x7622=(r10*sj5*sj6);
IkReal x7623=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x7616*x7620))+(((-1.0)*x7620*x7621))+(((-1.0)*pz))+((r22*x7619))+((r22*x7617))+((x7614*x7621))+((x7614*x7616)));
evalcond[2]=((((-1.0)*r00*sj6*x7620))+(((-1.0)*px))+((r00*sj6*x7614))+((r02*x7619))+((r02*x7617))+(((-1.0)*x7618*x7620))+((x7614*x7618)));
evalcond[3]=((-0.43342)+(((-1.0)*x7615*x7620))+((r12*x7617))+((r12*x7619))+(((-1.0)*r10*sj6*x7620))+(((-1.0)*py))+((r10*sj6*x7614))+((x7614*x7615)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7613))+((sj5*x7616))+((sj5*x7621)));
evalcond[5]=((((-1.0)*r12*x7613))+((sj5*x7615))+x7622);
evalcond[6]=(((sj5*x7618))+(((-1.0)*r02*x7613))+x7623);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7624=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x7624;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x7624);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7625=((1.0)*sj6);
IkReal x7626=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x7625)));
j4eval[0]=x7626;
j4eval[1]=IKsign(x7626);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x7625))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x7627=r11*r11;
IkReal x7628=cj5*cj5;
IkReal x7629=cj6*cj6;
IkReal x7630=r10*r10;
IkReal x7631=r12*r12;
IkReal x7632=(r12*sj5);
IkReal x7633=(cj6*r10);
IkReal x7634=((1.0)*x7629);
IkReal x7635=(cj5*cj6*r11);
IkReal x7636=(cj5*r10*sj6);
IkReal x7637=((2.0)*r11*sj6);
IkReal x7638=(x7628*x7630);
IkReal x7639=((((-1.0)*x7628*x7631))+((x7628*x7633*x7637))+(((2.0)*x7632*x7635))+(((2.0)*x7632*x7636))+(((-1.0)*x7633*x7637))+((x7629*x7630))+((x7627*x7628*x7629))+(((-1.0)*x7634*x7638))+(((-1.0)*x7627*x7634))+x7638+x7631+x7627);
j4eval[0]=x7639;
j4eval[1]=IKsign(x7639);
j4eval[2]=((IKabs((x7632+x7636+x7635)))+(IKabs(((((-1.0)*r11*sj6))+x7633))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7640=r11*r11;
IkReal x7641=cj5*cj5;
IkReal x7642=cj6*cj6;
IkReal x7643=r10*r10;
IkReal x7644=r12*r12;
IkReal x7645=(r10*sj6);
IkReal x7646=(r12*sj5);
IkReal x7647=((1.0)*x7642);
IkReal x7648=(cj5*cj6*r11);
IkReal x7649=((2.0)*cj6*r11);
IkReal x7650=(x7641*x7643);
CheckValue<IkReal> x7651=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7641*x7644))+(((2.0)*x7646*x7648))+((x7640*x7641*x7642))+(((-1.0)*x7647*x7650))+((x7641*x7645*x7649))+(((2.0)*cj5*x7645*x7646))+((x7642*x7643))+(((-1.0)*x7645*x7649))+(((-1.0)*x7640*x7647))+x7650+x7640+x7644)),-1);
if(!x7651.valid){
continue;
}
CheckValue<IkReal> x7652 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x7645))+x7646+x7648),IKFAST_ATAN2_MAGTHRESH);
if(!x7652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7651.value)))+(x7652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7653=IKsin(j4);
IkReal x7654=IKcos(j4);
IkReal x7655=(cj5*cj6);
IkReal x7656=(r11*sj6);
IkReal x7657=(cj6*r20);
IkReal x7658=(cj6*r10);
IkReal x7659=(cj5*sj6);
IkReal x7660=(r01*sj6);
IkReal x7661=(r21*sj6);
IkReal x7662=(cj6*r00);
IkReal x7663=((1.0)*x7654);
IkReal x7664=((1.0)*x7653);
IkReal x7665=(sj5*x7664);
evalcond[0]=((((-1.0)*r20*x7659*x7664))+(((-1.0)*r22*x7665))+((x7654*x7657))+(((-1.0)*x7661*x7663))+(((-1.0)*r21*x7655*x7664)));
evalcond[1]=((((-1.0)*r12*x7665))+(((-1.0)*r11*x7655*x7664))+((x7654*x7658))+(((-1.0)*x7656*x7663))+(((-1.0)*r10*x7659*x7664)));
evalcond[2]=((((-1.0)*r20*x7659*x7663))+(((-1.0)*r22*sj5*x7663))+(((-1.0)*x7657*x7664))+(((-1.0)*r21*x7655*x7663))+((x7653*x7661)));
evalcond[3]=((((-1.0)*r02*sj5*x7663))+(((-1.0)*r01*x7655*x7663))+(((-1.0)*x7662*x7664))+(((-1.0)*r00*x7659*x7663))+((x7653*x7660)));
evalcond[4]=((1.0)+((x7654*x7662))+(((-1.0)*r01*x7655*x7664))+(((-1.0)*r02*x7665))+(((-1.0)*x7660*x7663))+(((-1.0)*r00*x7659*x7664)));
evalcond[5]=((1.0)+(((-1.0)*r11*x7655*x7663))+(((-1.0)*r12*sj5*x7663))+(((-1.0)*x7658*x7664))+(((-1.0)*r10*x7659*x7663))+((x7653*x7656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7666=((1.0)*sj6);
CheckValue<IkReal> x7667 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x7666)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x7667.valid){
continue;
}
CheckValue<IkReal> x7668=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x7666))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x7668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7667.value)+(((1.5707963267949)*(x7668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7669=IKsin(j4);
IkReal x7670=IKcos(j4);
IkReal x7671=(cj5*cj6);
IkReal x7672=(r11*sj6);
IkReal x7673=(cj6*r20);
IkReal x7674=(cj6*r10);
IkReal x7675=(cj5*sj6);
IkReal x7676=(r01*sj6);
IkReal x7677=(r21*sj6);
IkReal x7678=(cj6*r00);
IkReal x7679=((1.0)*x7670);
IkReal x7680=((1.0)*x7669);
IkReal x7681=(sj5*x7680);
evalcond[0]=((((-1.0)*r21*x7671*x7680))+(((-1.0)*r22*x7681))+(((-1.0)*x7677*x7679))+((x7670*x7673))+(((-1.0)*r20*x7675*x7680)));
evalcond[1]=((((-1.0)*r10*x7675*x7680))+(((-1.0)*r11*x7671*x7680))+(((-1.0)*r12*x7681))+(((-1.0)*x7672*x7679))+((x7670*x7674)));
evalcond[2]=(((x7669*x7677))+(((-1.0)*x7673*x7680))+(((-1.0)*r22*sj5*x7679))+(((-1.0)*r20*x7675*x7679))+(((-1.0)*r21*x7671*x7679)));
evalcond[3]=(((x7669*x7676))+(((-1.0)*r01*x7671*x7679))+(((-1.0)*r02*sj5*x7679))+(((-1.0)*r00*x7675*x7679))+(((-1.0)*x7678*x7680)));
evalcond[4]=((1.0)+(((-1.0)*r01*x7671*x7680))+(((-1.0)*x7676*x7679))+((x7670*x7678))+(((-1.0)*r00*x7675*x7680))+(((-1.0)*r02*x7681)));
evalcond[5]=((1.0)+((x7669*x7672))+(((-1.0)*r10*x7675*x7679))+(((-1.0)*r11*x7671*x7679))+(((-1.0)*r12*sj5*x7679))+(((-1.0)*x7674*x7680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7682=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x7682.valid){
continue;
}
CheckValue<IkReal> x7683 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x7683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7682.value)))+(x7683.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7684=IKsin(j4);
IkReal x7685=IKcos(j4);
IkReal x7686=(cj5*cj6);
IkReal x7687=(r11*sj6);
IkReal x7688=(cj6*r20);
IkReal x7689=(cj6*r10);
IkReal x7690=(cj5*sj6);
IkReal x7691=(r01*sj6);
IkReal x7692=(r21*sj6);
IkReal x7693=(cj6*r00);
IkReal x7694=((1.0)*x7685);
IkReal x7695=((1.0)*x7684);
IkReal x7696=(sj5*x7695);
evalcond[0]=((((-1.0)*r22*x7696))+((x7685*x7688))+(((-1.0)*r21*x7686*x7695))+(((-1.0)*r20*x7690*x7695))+(((-1.0)*x7692*x7694)));
evalcond[1]=((((-1.0)*r11*x7686*x7695))+(((-1.0)*x7687*x7694))+(((-1.0)*r10*x7690*x7695))+((x7685*x7689))+(((-1.0)*r12*x7696)));
evalcond[2]=(((x7684*x7692))+(((-1.0)*r21*x7686*x7694))+(((-1.0)*r22*sj5*x7694))+(((-1.0)*x7688*x7695))+(((-1.0)*r20*x7690*x7694)));
evalcond[3]=((((-1.0)*x7693*x7695))+((x7684*x7691))+(((-1.0)*r00*x7690*x7694))+(((-1.0)*r01*x7686*x7694))+(((-1.0)*r02*sj5*x7694)));
evalcond[4]=((1.0)+(((-1.0)*x7691*x7694))+(((-1.0)*r02*x7696))+((x7685*x7693))+(((-1.0)*r00*x7690*x7695))+(((-1.0)*r01*x7686*x7695)));
evalcond[5]=((1.0)+(((-1.0)*r11*x7686*x7694))+(((-1.0)*r10*x7690*x7694))+((x7684*x7687))+(((-1.0)*x7689*x7695))+(((-1.0)*r12*sj5*x7694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7697=((1.0)*cj5);
IkReal x7698=((0.01)*cj5);
IkReal x7699=(cj6*r11);
IkReal x7700=(r20*sj6);
IkReal x7701=((0.01)*sj5);
IkReal x7702=(cj6*r01);
IkReal x7703=((0.37429)*cj5);
IkReal x7704=((0.37429)*sj5);
IkReal x7705=(cj6*r21);
IkReal x7706=(r10*sj5*sj6);
IkReal x7707=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x7698*x7705))+((x7698*x7700))+(((-1.0)*pz))+(((-1.0)*x7700*x7704))+(((-1.0)*x7704*x7705))+((r22*x7703))+((r22*x7701)));
evalcond[2]=((0.43342)+((x7698*x7702))+(((-1.0)*r00*sj6*x7704))+((r00*sj6*x7698))+((r02*x7703))+((r02*x7701))+(((-1.0)*x7702*x7704))+(((-1.0)*px)));
evalcond[3]=(((r12*x7701))+((r12*x7703))+(((-1.0)*py))+((r10*sj6*x7698))+((x7698*x7699))+(((-1.0)*x7699*x7704))+(((-1.0)*r10*sj6*x7704)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7697))+((sj5*x7705))+((sj5*x7700)));
evalcond[5]=(((sj5*x7699))+(((-1.0)*r12*x7697))+x7706);
evalcond[6]=((((-1.0)*r02*x7697))+((sj5*x7702))+x7707);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7708=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x7708;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x7708);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7709=((1.0)*sj5);
IkReal x7710=(((cj5*r22))+(((-1.0)*r20*sj6*x7709))+(((-1.0)*cj6*r21*x7709)));
j4eval[0]=x7710;
j4eval[1]=IKsign(x7710);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7711=cj6*cj6;
IkReal x7712=cj5*cj5;
IkReal x7713=r00*r00;
IkReal x7714=r01*r01;
IkReal x7715=r02*r02;
IkReal x7716=(cj6*r00);
IkReal x7717=(cj5*cj6*r01);
IkReal x7718=((2.0)*r02*sj5);
IkReal x7719=((1.0)*x7711);
IkReal x7720=((2.0)*r01*sj6);
IkReal x7721=(cj5*r00*sj6);
IkReal x7722=(x7712*x7713);
IkReal x7723=(((x7711*x7722))+(((-1.0)*x7717*x7718))+(((-1.0)*x7712*x7714*x7719))+(((-1.0)*x7715))+(((-1.0)*x7714))+(((-1.0)*x7718*x7721))+((x7716*x7720))+(((-1.0)*x7712*x7716*x7720))+((x7711*x7714))+(((-1.0)*x7722))+((x7712*x7715))+(((-1.0)*x7713*x7719)));
j4eval[0]=x7723;
j4eval[1]=((IKabs((((r02*sj5))+x7717+x7721)))+(IKabs(((((-1.0)*r01*sj6))+x7716))));
j4eval[2]=IKsign(x7723);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7724=cj6*cj6;
IkReal x7725=cj5*cj5;
IkReal x7726=r00*r00;
IkReal x7727=r01*r01;
IkReal x7728=r02*r02;
IkReal x7729=(cj6*r00);
IkReal x7730=(cj5*cj6*r01);
IkReal x7731=((2.0)*r02*sj5);
IkReal x7732=((1.0)*x7724);
IkReal x7733=((2.0)*r01*sj6);
IkReal x7734=(cj5*r00*sj6);
IkReal x7735=(x7725*x7726);
CheckValue<IkReal> x7736=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7735))+((x7724*x7727))+(((-1.0)*x7725*x7727*x7732))+(((-1.0)*x7725*x7729*x7733))+(((-1.0)*x7731*x7734))+(((-1.0)*x7730*x7731))+((x7729*x7733))+((x7725*x7728))+(((-1.0)*x7726*x7732))+(((-1.0)*x7728))+(((-1.0)*x7727))+((x7724*x7735)))),-1);
if(!x7736.valid){
continue;
}
CheckValue<IkReal> x7737 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x7729)),(((r02*sj5))+x7730+x7734),IKFAST_ATAN2_MAGTHRESH);
if(!x7737.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7736.value)))+(x7737.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7738=IKsin(j4);
IkReal x7739=IKcos(j4);
IkReal x7740=(cj5*cj6);
IkReal x7741=(r11*sj6);
IkReal x7742=(cj6*r20);
IkReal x7743=(cj6*r10);
IkReal x7744=(cj5*sj6);
IkReal x7745=(r21*sj6);
IkReal x7746=(cj6*r00);
IkReal x7747=(r01*sj6);
IkReal x7748=((1.0)*x7739);
IkReal x7749=((1.0)*x7738);
IkReal x7750=(sj5*x7749);
evalcond[0]=((((-1.0)*r22*x7750))+(((-1.0)*r21*x7740*x7749))+((x7739*x7742))+(((-1.0)*x7745*x7748))+(((-1.0)*r20*x7744*x7749)));
evalcond[1]=((((-1.0)*r00*x7744*x7749))+(((-1.0)*r02*x7750))+((x7739*x7746))+(((-1.0)*x7747*x7748))+(((-1.0)*r01*x7740*x7749)));
evalcond[2]=((((-1.0)*x7742*x7749))+((x7738*x7745))+(((-1.0)*r22*sj5*x7748))+(((-1.0)*r21*x7740*x7748))+(((-1.0)*r20*x7744*x7748)));
evalcond[3]=(((x7738*x7741))+(((-1.0)*x7743*x7749))+(((-1.0)*r10*x7744*x7748))+(((-1.0)*r11*x7740*x7748))+(((-1.0)*r12*sj5*x7748)));
evalcond[4]=((1.0)+(((-1.0)*x7741*x7748))+(((-1.0)*r10*x7744*x7749))+(((-1.0)*r12*x7750))+((x7739*x7743))+(((-1.0)*r11*x7740*x7749)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x7744*x7748))+(((-1.0)*r02*sj5*x7748))+((x7738*x7747))+(((-1.0)*x7746*x7749))+(((-1.0)*r01*x7740*x7748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7751=((1.0)*sj5);
CheckValue<IkReal> x7752 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x7752.valid){
continue;
}
CheckValue<IkReal> x7753=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x7751))+(((-1.0)*cj6*r21*x7751)))),-1);
if(!x7753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7752.value)+(((1.5707963267949)*(x7753.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7754=IKsin(j4);
IkReal x7755=IKcos(j4);
IkReal x7756=(cj5*cj6);
IkReal x7757=(r11*sj6);
IkReal x7758=(cj6*r20);
IkReal x7759=(cj6*r10);
IkReal x7760=(cj5*sj6);
IkReal x7761=(r21*sj6);
IkReal x7762=(cj6*r00);
IkReal x7763=(r01*sj6);
IkReal x7764=((1.0)*x7755);
IkReal x7765=((1.0)*x7754);
IkReal x7766=(sj5*x7765);
evalcond[0]=((((-1.0)*r22*x7766))+(((-1.0)*r20*x7760*x7765))+((x7755*x7758))+(((-1.0)*r21*x7756*x7765))+(((-1.0)*x7761*x7764)));
evalcond[1]=((((-1.0)*r02*x7766))+(((-1.0)*r01*x7756*x7765))+((x7755*x7762))+(((-1.0)*x7763*x7764))+(((-1.0)*r00*x7760*x7765)));
evalcond[2]=((((-1.0)*r20*x7760*x7764))+(((-1.0)*r22*sj5*x7764))+(((-1.0)*x7758*x7765))+(((-1.0)*r21*x7756*x7764))+((x7754*x7761)));
evalcond[3]=((((-1.0)*x7759*x7765))+(((-1.0)*r10*x7760*x7764))+(((-1.0)*r12*sj5*x7764))+(((-1.0)*r11*x7756*x7764))+((x7754*x7757)));
evalcond[4]=((1.0)+(((-1.0)*x7757*x7764))+((x7755*x7759))+(((-1.0)*r10*x7760*x7765))+(((-1.0)*r12*x7766))+(((-1.0)*r11*x7756*x7765)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x7764))+(((-1.0)*r01*x7756*x7764))+(((-1.0)*r00*x7760*x7764))+(((-1.0)*x7762*x7765))+((x7754*x7763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7767 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x7767.valid){
continue;
}
CheckValue<IkReal> x7768=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x7768.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7767.value)+(((1.5707963267949)*(x7768.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7769=IKsin(j4);
IkReal x7770=IKcos(j4);
IkReal x7771=(cj5*cj6);
IkReal x7772=(r11*sj6);
IkReal x7773=(cj6*r20);
IkReal x7774=(cj6*r10);
IkReal x7775=(cj5*sj6);
IkReal x7776=(r21*sj6);
IkReal x7777=(cj6*r00);
IkReal x7778=(r01*sj6);
IkReal x7779=((1.0)*x7770);
IkReal x7780=((1.0)*x7769);
IkReal x7781=(sj5*x7780);
evalcond[0]=(((x7770*x7773))+(((-1.0)*x7776*x7779))+(((-1.0)*r21*x7771*x7780))+(((-1.0)*r22*x7781))+(((-1.0)*r20*x7775*x7780)));
evalcond[1]=(((x7770*x7777))+(((-1.0)*r01*x7771*x7780))+(((-1.0)*r02*x7781))+(((-1.0)*x7778*x7779))+(((-1.0)*r00*x7775*x7780)));
evalcond[2]=((((-1.0)*r21*x7771*x7779))+(((-1.0)*r22*sj5*x7779))+(((-1.0)*r20*x7775*x7779))+((x7769*x7776))+(((-1.0)*x7773*x7780)));
evalcond[3]=(((x7769*x7772))+(((-1.0)*x7774*x7780))+(((-1.0)*r12*sj5*x7779))+(((-1.0)*r10*x7775*x7779))+(((-1.0)*r11*x7771*x7779)));
evalcond[4]=((1.0)+(((-1.0)*r10*x7775*x7780))+(((-1.0)*x7772*x7779))+((x7770*x7774))+(((-1.0)*r11*x7771*x7780))+(((-1.0)*r12*x7781)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x7779))+((x7769*x7778))+(((-1.0)*r00*x7775*x7779))+(((-1.0)*r01*x7771*x7779))+(((-1.0)*x7777*x7780)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7782=((1.0)*cj5);
IkReal x7783=((0.01)*cj5);
IkReal x7784=(cj6*r11);
IkReal x7785=(r20*sj6);
IkReal x7786=((0.01)*sj5);
IkReal x7787=(cj6*r01);
IkReal x7788=((0.37429)*cj5);
IkReal x7789=((0.37429)*sj5);
IkReal x7790=(cj6*r21);
IkReal x7791=(r10*sj5*sj6);
IkReal x7792=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x7785*x7789))+((r22*x7788))+((r22*x7786))+((x7783*x7785))+(((-1.0)*pz))+((x7783*x7790))+(((-1.0)*x7789*x7790)));
evalcond[2]=((-0.43342)+(((-1.0)*x7787*x7789))+((x7783*x7787))+(((-1.0)*px))+(((-1.0)*r00*sj6*x7789))+((r02*x7788))+((r02*x7786))+((r00*sj6*x7783)));
evalcond[3]=(((r10*sj6*x7783))+(((-1.0)*x7784*x7789))+(((-1.0)*r10*sj6*x7789))+((x7783*x7784))+(((-1.0)*py))+((r12*x7788))+((r12*x7786)));
evalcond[4]=((-1.0)+((sj5*x7785))+((sj5*x7790))+(((-1.0)*r22*x7782)));
evalcond[5]=(((sj5*x7784))+(((-1.0)*r12*x7782))+x7791);
evalcond[6]=(((sj5*x7787))+(((-1.0)*r02*x7782))+x7792);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7793=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x7793;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x7793);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7794=((1.0)*sj6);
IkReal x7795=((((-1.0)*r00*sj5*x7794))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x7795;
j4eval[1]=IKsign(x7795);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x7794))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7796=cj6*cj6;
IkReal x7797=r01*r01;
IkReal x7798=cj5*cj5;
IkReal x7799=r00*r00;
IkReal x7800=r02*r02;
IkReal x7801=(cj6*r00);
IkReal x7802=(r02*sj5);
IkReal x7803=(cj5*cj6*r01);
IkReal x7804=((2.0)*r01*sj6);
IkReal x7805=(cj5*r00*sj6);
IkReal x7806=((1.0)*x7798);
IkReal x7807=(x7796*x7799);
IkReal x7808=(x7796*x7797);
IkReal x7809=((((-1.0)*x7801*x7804))+(((-1.0)*x7808))+((x7798*x7799))+((x7798*x7808))+((x7798*x7801*x7804))+x7800+x7807+(((-1.0)*x7800*x7806))+(((2.0)*x7802*x7805))+(((2.0)*x7802*x7803))+x7797+(((-1.0)*x7806*x7807)));
j4eval[0]=x7809;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x7801)))+(IKabs((x7803+x7802+x7805))));
j4eval[2]=IKsign(x7809);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7810=cj6*cj6;
IkReal x7811=r01*r01;
IkReal x7812=cj5*cj5;
IkReal x7813=r00*r00;
IkReal x7814=r02*r02;
IkReal x7815=(cj6*r00);
IkReal x7816=((2.0)*r01);
IkReal x7817=(cj5*cj6);
IkReal x7818=(r02*sj5);
IkReal x7819=(cj5*r00*sj6);
IkReal x7820=(x7812*x7813);
IkReal x7821=(x7810*x7811);
CheckValue<IkReal> x7822=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7821))+((x7812*x7821))+((sj6*x7812*x7815*x7816))+((x7810*x7813))+(((2.0)*x7818*x7819))+((x7816*x7817*x7818))+x7820+x7814+x7811+(((-1.0)*sj6*x7815*x7816))+(((-1.0)*x7810*x7820))+(((-1.0)*x7812*x7814)))),-1);
if(!x7822.valid){
continue;
}
CheckValue<IkReal> x7823 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x7815)),(x7818+x7819+((r01*x7817))),IKFAST_ATAN2_MAGTHRESH);
if(!x7823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7822.value)))+(x7823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7824=IKsin(j4);
IkReal x7825=IKcos(j4);
IkReal x7826=(cj5*cj6);
IkReal x7827=(r11*sj6);
IkReal x7828=(cj6*r20);
IkReal x7829=(cj6*r10);
IkReal x7830=(cj5*sj6);
IkReal x7831=(r21*sj6);
IkReal x7832=(cj6*r00);
IkReal x7833=(r01*sj6);
IkReal x7834=((1.0)*x7825);
IkReal x7835=((1.0)*x7824);
IkReal x7836=(sj5*x7835);
evalcond[0]=((((-1.0)*r22*x7836))+(((-1.0)*r21*x7826*x7835))+((x7825*x7828))+(((-1.0)*x7831*x7834))+(((-1.0)*r20*x7830*x7835)));
evalcond[1]=((((-1.0)*r01*x7826*x7835))+(((-1.0)*r00*x7830*x7835))+(((-1.0)*r02*x7836))+((x7825*x7832))+(((-1.0)*x7833*x7834)));
evalcond[2]=((((-1.0)*x7828*x7835))+((x7824*x7831))+(((-1.0)*r21*x7826*x7834))+(((-1.0)*r20*x7830*x7834))+(((-1.0)*r22*sj5*x7834)));
evalcond[3]=((((-1.0)*x7829*x7835))+(((-1.0)*r11*x7826*x7834))+(((-1.0)*r10*x7830*x7834))+((x7824*x7827))+(((-1.0)*r12*sj5*x7834)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x7826*x7835))+((x7825*x7829))+(((-1.0)*r10*x7830*x7835))+(((-1.0)*r12*x7836))+(((-1.0)*x7827*x7834)));
evalcond[5]=((1.0)+(((-1.0)*r01*x7826*x7834))+((x7824*x7833))+(((-1.0)*r00*x7830*x7834))+(((-1.0)*r02*sj5*x7834))+(((-1.0)*x7832*x7835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7837=((1.0)*sj6);
CheckValue<IkReal> x7838=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x7837))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x7838.valid){
continue;
}
CheckValue<IkReal> x7839 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x7837))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x7839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7838.value)))+(x7839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7840=IKsin(j4);
IkReal x7841=IKcos(j4);
IkReal x7842=(cj5*cj6);
IkReal x7843=(r11*sj6);
IkReal x7844=(cj6*r20);
IkReal x7845=(cj6*r10);
IkReal x7846=(cj5*sj6);
IkReal x7847=(r21*sj6);
IkReal x7848=(cj6*r00);
IkReal x7849=(r01*sj6);
IkReal x7850=((1.0)*x7841);
IkReal x7851=((1.0)*x7840);
IkReal x7852=(sj5*x7851);
evalcond[0]=((((-1.0)*r20*x7846*x7851))+(((-1.0)*x7847*x7850))+(((-1.0)*r21*x7842*x7851))+(((-1.0)*r22*x7852))+((x7841*x7844)));
evalcond[1]=((((-1.0)*x7849*x7850))+(((-1.0)*r01*x7842*x7851))+(((-1.0)*r00*x7846*x7851))+(((-1.0)*r02*x7852))+((x7841*x7848)));
evalcond[2]=((((-1.0)*r20*x7846*x7850))+(((-1.0)*r22*sj5*x7850))+(((-1.0)*x7844*x7851))+((x7840*x7847))+(((-1.0)*r21*x7842*x7850)));
evalcond[3]=((((-1.0)*r11*x7842*x7850))+(((-1.0)*r12*sj5*x7850))+((x7840*x7843))+(((-1.0)*r10*x7846*x7850))+(((-1.0)*x7845*x7851)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x7842*x7851))+(((-1.0)*x7843*x7850))+(((-1.0)*r10*x7846*x7851))+(((-1.0)*r12*x7852))+((x7841*x7845)));
evalcond[5]=((1.0)+(((-1.0)*x7848*x7851))+(((-1.0)*r01*x7842*x7850))+(((-1.0)*r00*x7846*x7850))+(((-1.0)*r02*sj5*x7850))+((x7840*x7849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7853=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x7853.valid){
continue;
}
CheckValue<IkReal> x7854 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x7854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7853.value)))+(x7854.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7855=IKsin(j4);
IkReal x7856=IKcos(j4);
IkReal x7857=(cj5*cj6);
IkReal x7858=(r11*sj6);
IkReal x7859=(cj6*r20);
IkReal x7860=(cj6*r10);
IkReal x7861=(cj5*sj6);
IkReal x7862=(r21*sj6);
IkReal x7863=(cj6*r00);
IkReal x7864=(r01*sj6);
IkReal x7865=((1.0)*x7856);
IkReal x7866=((1.0)*x7855);
IkReal x7867=(sj5*x7866);
evalcond[0]=((((-1.0)*x7862*x7865))+(((-1.0)*r21*x7857*x7866))+((x7856*x7859))+(((-1.0)*r20*x7861*x7866))+(((-1.0)*r22*x7867)));
evalcond[1]=((((-1.0)*x7864*x7865))+((x7856*x7863))+(((-1.0)*r00*x7861*x7866))+(((-1.0)*r02*x7867))+(((-1.0)*r01*x7857*x7866)));
evalcond[2]=((((-1.0)*x7859*x7866))+(((-1.0)*r21*x7857*x7865))+(((-1.0)*r20*x7861*x7865))+((x7855*x7862))+(((-1.0)*r22*sj5*x7865)));
evalcond[3]=((((-1.0)*r10*x7861*x7865))+(((-1.0)*r11*x7857*x7865))+(((-1.0)*r12*sj5*x7865))+(((-1.0)*x7860*x7866))+((x7855*x7858)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x7861*x7866))+(((-1.0)*x7858*x7865))+(((-1.0)*r11*x7857*x7866))+((x7856*x7860))+(((-1.0)*r12*x7867)));
evalcond[5]=((1.0)+(((-1.0)*x7863*x7866))+(((-1.0)*r00*x7861*x7865))+(((-1.0)*r02*sj5*x7865))+(((-1.0)*r01*x7857*x7865))+((x7855*x7864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7868=cj6*cj6;
IkReal x7869=cj5*cj5;
IkReal x7870=(r22*sj5);
IkReal x7871=(cj0*r20);
IkReal x7872=((1.0)*r21);
IkReal x7873=(cj5*sj6);
IkReal x7874=(r02*r22);
IkReal x7875=(cj5*cj6);
IkReal x7876=(r02*sj5);
IkReal x7877=(cj6*sj6);
IkReal x7878=((1.0)*r20);
IkReal x7879=(r01*x7872);
IkReal x7880=(r00*r20*x7869);
CheckValue<IkReal> x7881 = IKatan2WithCheck(IkReal((((cj6*x7871))+(((-1.0)*cj0*sj6*x7872)))),(((cj0*x7870))+((x7871*x7873))+((cj0*r21*x7875))),IKFAST_ATAN2_MAGTHRESH);
if(!x7881.valid){
continue;
}
CheckValue<IkReal> x7882=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x7869*x7878))+(((-1.0)*r01*x7870*x7875))+(((-1.0)*x7874))+((r01*r20*x7877))+((x7869*x7874))+((r00*r21*x7877))+(((-1.0)*x7872*x7875*x7876))+(((-1.0)*x7879))+(((-1.0)*r00*x7868*x7878))+(((-1.0)*r00*x7869*x7872*x7877))+((r01*r21*x7868))+(((-1.0)*x7868*x7869*x7879))+(((-1.0)*r01*x7869*x7877*x7878))+(((-1.0)*x7873*x7876*x7878))+((x7868*x7880))+(((-1.0)*r00*x7870*x7873)))),-1);
if(!x7882.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7881.value)+(((1.5707963267949)*(x7882.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7883=IKsin(j4);
IkReal x7884=IKcos(j4);
IkReal x7885=((1.0)*sj0);
IkReal x7886=((1.0)*cj6);
IkReal x7887=((1.0)*sj6);
IkReal x7888=(cj5*x7884);
IkReal x7889=(r20*x7883);
IkReal x7890=(cj6*x7884);
IkReal x7891=(r11*x7883);
IkReal x7892=(r21*x7883);
IkReal x7893=(r01*x7883);
IkReal x7894=((1.0)*sj5*x7883);
IkReal x7895=((1.0)*sj5*x7884);
IkReal x7896=(cj5*x7883*x7887);
evalcond[0]=((((-1.0)*r21*x7884*x7887))+(((-1.0)*cj5*x7886*x7892))+(((-1.0)*r22*x7894))+((r20*x7890))+(((-1.0)*cj5*x7887*x7889)));
evalcond[1]=(((sj6*x7892))+(((-1.0)*r21*x7886*x7888))+(((-1.0)*r22*x7895))+(((-1.0)*x7886*x7889))+(((-1.0)*r20*x7887*x7888)));
evalcond[2]=((((-1.0)*r11*x7884*x7887))+cj0+(((-1.0)*r12*x7894))+(((-1.0)*cj5*x7886*x7891))+(((-1.0)*r10*x7896))+((r10*x7890)));
evalcond[3]=((((-1.0)*r01*x7884*x7887))+(((-1.0)*cj5*x7886*x7893))+(((-1.0)*x7885))+(((-1.0)*r00*x7896))+((r00*x7890))+(((-1.0)*r02*x7894)));
evalcond[4]=(((sj6*x7893))+(((-1.0)*r00*x7883*x7886))+(((-1.0)*r00*x7887*x7888))+(((-1.0)*r01*x7886*x7888))+(((-1.0)*cj0))+(((-1.0)*r02*x7895)));
evalcond[5]=((((-1.0)*r10*x7883*x7886))+((sj6*x7891))+(((-1.0)*r12*x7895))+(((-1.0)*x7885))+(((-1.0)*r10*x7887*x7888))+(((-1.0)*r11*x7886*x7888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7897=(cj5*sj0);
CheckValue<IkReal> x7898=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x7898.valid){
continue;
}
CheckValue<IkReal> x7899 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r22*sj0*sj5))+((r20*sj6*x7897))+((cj6*r21*x7897))),IKFAST_ATAN2_MAGTHRESH);
if(!x7899.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7898.value)))+(x7899.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7900=IKsin(j4);
IkReal x7901=IKcos(j4);
IkReal x7902=((1.0)*sj0);
IkReal x7903=((1.0)*cj6);
IkReal x7904=((1.0)*sj6);
IkReal x7905=(cj5*x7901);
IkReal x7906=(r20*x7900);
IkReal x7907=(cj6*x7901);
IkReal x7908=(r11*x7900);
IkReal x7909=(r21*x7900);
IkReal x7910=(r01*x7900);
IkReal x7911=((1.0)*sj5*x7900);
IkReal x7912=((1.0)*sj5*x7901);
IkReal x7913=(cj5*x7900*x7904);
evalcond[0]=((((-1.0)*cj5*x7904*x7906))+(((-1.0)*r22*x7911))+(((-1.0)*r21*x7901*x7904))+(((-1.0)*cj5*x7903*x7909))+((r20*x7907)));
evalcond[1]=(((sj6*x7909))+(((-1.0)*r22*x7912))+(((-1.0)*r21*x7903*x7905))+(((-1.0)*x7903*x7906))+(((-1.0)*r20*x7904*x7905)));
evalcond[2]=(cj0+((r10*x7907))+(((-1.0)*r10*x7913))+(((-1.0)*r12*x7911))+(((-1.0)*cj5*x7903*x7908))+(((-1.0)*r11*x7901*x7904)));
evalcond[3]=((((-1.0)*r01*x7901*x7904))+(((-1.0)*r02*x7911))+(((-1.0)*cj5*x7903*x7910))+((r00*x7907))+(((-1.0)*x7902))+(((-1.0)*r00*x7913)));
evalcond[4]=(((sj6*x7910))+(((-1.0)*r02*x7912))+(((-1.0)*r00*x7904*x7905))+(((-1.0)*r00*x7900*x7903))+(((-1.0)*cj0))+(((-1.0)*r01*x7903*x7905)));
evalcond[5]=((((-1.0)*r10*x7904*x7905))+((sj6*x7908))+(((-1.0)*r11*x7903*x7905))+(((-1.0)*r12*x7912))+(((-1.0)*x7902))+(((-1.0)*r10*x7900*x7903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7914=(cj0*sj6);
IkReal x7915=(cj0*cj6);
CheckValue<IkReal> x7916 = IKatan2WithCheck(IkReal((((r20*x7915))+(((-1.0)*r21*x7914)))),(((cj5*r20*x7914))+((cj5*r21*x7915))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x7916.valid){
continue;
}
CheckValue<IkReal> x7917=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x7917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7916.value)+(((1.5707963267949)*(x7917.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7918=IKsin(j4);
IkReal x7919=IKcos(j4);
IkReal x7920=((1.0)*sj0);
IkReal x7921=((1.0)*cj6);
IkReal x7922=((1.0)*sj6);
IkReal x7923=(cj5*x7919);
IkReal x7924=(r20*x7918);
IkReal x7925=(cj6*x7919);
IkReal x7926=(r11*x7918);
IkReal x7927=(r21*x7918);
IkReal x7928=(r01*x7918);
IkReal x7929=((1.0)*sj5*x7918);
IkReal x7930=((1.0)*sj5*x7919);
IkReal x7931=(cj5*x7918*x7922);
evalcond[0]=((((-1.0)*r22*x7929))+((r20*x7925))+(((-1.0)*r21*x7919*x7922))+(((-1.0)*cj5*x7922*x7924))+(((-1.0)*cj5*x7921*x7927)));
evalcond[1]=((((-1.0)*x7921*x7924))+(((-1.0)*r21*x7921*x7923))+(((-1.0)*r22*x7930))+(((-1.0)*r20*x7922*x7923))+((sj6*x7927)));
evalcond[2]=(cj0+((r10*x7925))+(((-1.0)*r11*x7919*x7922))+(((-1.0)*r12*x7929))+(((-1.0)*r10*x7931))+(((-1.0)*cj5*x7921*x7926)));
evalcond[3]=((((-1.0)*x7920))+(((-1.0)*r00*x7931))+(((-1.0)*r02*x7929))+(((-1.0)*r01*x7919*x7922))+((r00*x7925))+(((-1.0)*cj5*x7921*x7928)));
evalcond[4]=((((-1.0)*r02*x7930))+(((-1.0)*r01*x7921*x7923))+(((-1.0)*r00*x7918*x7921))+(((-1.0)*r00*x7922*x7923))+(((-1.0)*cj0))+((sj6*x7928)));
evalcond[5]=((((-1.0)*x7920))+(((-1.0)*r12*x7930))+(((-1.0)*r10*x7922*x7923))+(((-1.0)*r10*x7918*x7921))+(((-1.0)*r11*x7921*x7923))+((sj6*x7926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7932=((1.0)*cj5);
IkReal x7933=((0.01)*cj5);
IkReal x7934=(cj6*r11);
IkReal x7935=(r20*sj6);
IkReal x7936=((0.01)*sj5);
IkReal x7937=(cj6*r01);
IkReal x7938=((0.37429)*cj5);
IkReal x7939=((0.37429)*sj5);
IkReal x7940=(cj6*r21);
IkReal x7941=(r10*sj5*sj6);
IkReal x7942=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.069)+(((-1.0)*x7935*x7939))+((x7933*x7935))+(((-1.0)*x7939*x7940))+((x7933*x7940))+(((-1.0)*pz))+((r22*x7936))+((r22*x7938)));
evalcond[2]=(((x7933*x7937))+(((-1.0)*x7937*x7939))+((r02*x7936))+((r02*x7938))+(((-1.0)*r00*sj6*x7939))+(((-1.0)*px))+(((0.43342)*cj0))+((r00*sj6*x7933)));
evalcond[3]=((((-1.0)*x7934*x7939))+((x7933*x7934))+(((-1.0)*py))+(((0.43342)*sj0))+((r10*sj6*x7933))+((r12*x7936))+((r12*x7938))+(((-1.0)*r10*sj6*x7939)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7932))+((sj5*x7940))+((sj5*x7935)));
evalcond[5]=((((-1.0)*r12*x7932))+((sj5*x7934))+x7941);
evalcond[6]=((((-1.0)*r02*x7932))+((sj5*x7937))+x7942);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7943=(r20*sj0);
IkReal x7944=((1.0)*sj5);
IkReal x7945=(r21*sj0);
IkReal x7946=((((-1.0)*cj6*r11*x7944))+((cj5*r12))+(((-1.0)*r10*sj6*x7944)));
j4eval[0]=x7946;
j4eval[1]=IKsign(x7946);
j4eval[2]=((IKabs((((cj5*cj6*x7945))+((r22*sj0*sj5))+((cj5*sj6*x7943)))))+(IKabs(((((-1.0)*sj6*x7945))+((cj6*x7943))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7947=(cj0*sj6);
IkReal x7948=((1.0)*sj5);
IkReal x7949=(cj0*cj6);
IkReal x7950=((((-1.0)*cj6*r01*x7948))+(((-1.0)*r00*sj6*x7948))+((cj5*r02)));
j4eval[0]=x7950;
j4eval[1]=IKsign(x7950);
j4eval[2]=((IKabs((((cj5*r20*x7947))+((cj5*r21*x7949))+((cj0*r22*sj5)))))+(IKabs((((r20*x7949))+(((-1.0)*r21*x7947))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7951=cj6*cj6;
IkReal x7952=cj5*cj5;
IkReal x7953=(r02*r22);
IkReal x7954=(r22*sj5);
IkReal x7955=(r00*r20);
IkReal x7956=((1.0)*r21);
IkReal x7957=(r20*sj6);
IkReal x7958=(cj6*r01);
IkReal x7959=(cj0*cj5);
IkReal x7960=(r00*sj6);
IkReal x7961=((1.0)*cj5);
IkReal x7962=(cj6*r21);
IkReal x7963=(cj5*r02*sj5);
IkReal x7964=((1.0)*x7952);
IkReal x7965=(x7951*x7952);
IkReal x7966=((((-1.0)*r01*x7956*x7965))+(((-1.0)*x7951*x7955))+(((-1.0)*r02*sj5*x7957*x7961))+(((-1.0)*x7954*x7960*x7961))+(((-1.0)*x7953))+(((-1.0)*x7957*x7958*x7964))+((x7960*x7962))+(((-1.0)*r01*x7956))+(((-1.0)*x7955*x7964))+(((-1.0)*cj6*x7956*x7963))+(((-1.0)*x7954*x7958*x7961))+((x7952*x7953))+(((-1.0)*cj6*x7952*x7956*x7960))+((r01*r21*x7951))+((x7957*x7958))+((x7955*x7965)));
j4eval[0]=x7966;
j4eval[1]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*sj6*x7956)))))+(IKabs((((cj0*x7954))+((x7957*x7959))+((x7959*x7962))))));
j4eval[2]=IKsign(x7966);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x7967=((1.0)*cj5);
IkReal x7968=((0.01)*cj5);
IkReal x7969=(cj6*r11);
IkReal x7970=(r20*sj6);
IkReal x7971=((0.01)*sj5);
IkReal x7972=(cj6*r01);
IkReal x7973=((0.37429)*cj5);
IkReal x7974=((0.37429)*sj5);
IkReal x7975=(cj6*r21);
IkReal x7976=(r10*sj5*sj6);
IkReal x7977=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x7970*x7974))+(((-1.0)*pz))+((x7968*x7975))+((x7968*x7970))+(((-1.0)*x7974*x7975))+((r22*x7971))+((r22*x7973)));
evalcond[2]=((((-1.0)*r00*sj6*x7974))+((r02*x7971))+((r02*x7973))+(((-1.0)*px))+((r00*sj6*x7968))+((x7968*x7972))+(((-1.0)*x7972*x7974)));
evalcond[3]=((0.43342)+(((-1.0)*r10*sj6*x7974))+((r12*x7973))+((r12*x7971))+(((-1.0)*py))+((r10*sj6*x7968))+(((-1.0)*x7969*x7974))+((x7968*x7969)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7967))+((sj5*x7975))+((sj5*x7970)));
evalcond[5]=(x7976+(((-1.0)*r12*x7967))+((sj5*x7969)));
evalcond[6]=(x7977+((sj5*x7972))+(((-1.0)*r02*x7967)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7978=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x7978;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x7978);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7979=((1.0)*sj6);
IkReal x7980=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x7979)));
j4eval[0]=x7980;
j4eval[1]=IKsign(x7980);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x7979))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x7981=cj6*cj6;
IkReal x7982=cj5*cj5;
IkReal x7983=r10*r10;
IkReal x7984=r11*r11;
IkReal x7985=r12*r12;
IkReal x7986=(r10*sj6);
IkReal x7987=(r12*sj5);
IkReal x7988=((2.0)*cj6*r11);
IkReal x7989=((1.0)*x7983);
IkReal x7990=(x7981*x7984);
IkReal x7991=(((x7986*x7988))+(((-1.0)*x7982*x7990))+((x7982*x7985))+(((-1.0)*x7981*x7989))+x7990+(((-1.0)*x7982*x7989))+(((-1.0)*x7984))+(((-1.0)*x7985))+(((-2.0)*cj5*x7986*x7987))+((x7981*x7982*x7983))+(((-1.0)*x7982*x7986*x7988))+(((-1.0)*cj5*x7987*x7988)));
j4eval[0]=x7991;
j4eval[1]=((IKabs((x7987+((cj5*cj6*r11))+((cj5*x7986)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x7991);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7992=cj6*cj6;
IkReal x7993=cj5*cj5;
IkReal x7994=r10*r10;
IkReal x7995=r11*r11;
IkReal x7996=r12*r12;
IkReal x7997=(r10*sj6);
IkReal x7998=(r12*sj5);
IkReal x7999=((2.0)*cj6*r11);
IkReal x8000=(x7992*x7995);
IkReal x8001=(x7993*x7994);
CheckValue<IkReal> x8002 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x7998+((cj5*cj6*r11))+((cj5*x7997))),IKFAST_ATAN2_MAGTHRESH);
if(!x8002.valid){
continue;
}
CheckValue<IkReal> x8003=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*x7997*x7998))+((x7992*x8001))+((x7997*x7999))+(((-1.0)*x7993*x8000))+(((-1.0)*x7993*x7997*x7999))+(((-1.0)*cj5*x7998*x7999))+(((-1.0)*x7992*x7994))+(((-1.0)*x7996))+(((-1.0)*x7995))+((x7993*x7996))+(((-1.0)*x8001))+x8000)),-1);
if(!x8003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8002.value)+(((1.5707963267949)*(x8003.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8004=IKsin(j4);
IkReal x8005=IKcos(j4);
IkReal x8006=(cj5*cj6);
IkReal x8007=(r11*sj6);
IkReal x8008=(cj6*r20);
IkReal x8009=(cj6*r10);
IkReal x8010=(cj5*sj6);
IkReal x8011=(r01*sj6);
IkReal x8012=(r21*sj6);
IkReal x8013=(cj6*r00);
IkReal x8014=((1.0)*x8005);
IkReal x8015=((1.0)*x8004);
IkReal x8016=(sj5*x8015);
evalcond[0]=((((-1.0)*r22*x8016))+((x8005*x8008))+(((-1.0)*x8012*x8014))+(((-1.0)*r20*x8010*x8015))+(((-1.0)*r21*x8006*x8015)));
evalcond[1]=(((x8005*x8009))+(((-1.0)*r10*x8010*x8015))+(((-1.0)*r11*x8006*x8015))+(((-1.0)*r12*x8016))+(((-1.0)*x8007*x8014)));
evalcond[2]=((((-1.0)*x8008*x8015))+((x8004*x8012))+(((-1.0)*r22*sj5*x8014))+(((-1.0)*r20*x8010*x8014))+(((-1.0)*r21*x8006*x8014)));
evalcond[3]=(((x8004*x8011))+(((-1.0)*r00*x8010*x8014))+(((-1.0)*r01*x8006*x8014))+(((-1.0)*r02*sj5*x8014))+(((-1.0)*x8013*x8015)));
evalcond[4]=((1.0)+(((-1.0)*x8011*x8014))+(((-1.0)*r02*x8016))+((x8005*x8013))+(((-1.0)*r00*x8010*x8015))+(((-1.0)*r01*x8006*x8015)));
evalcond[5]=((-1.0)+(((-1.0)*x8009*x8015))+(((-1.0)*r10*x8010*x8014))+((x8004*x8007))+(((-1.0)*r12*sj5*x8014))+(((-1.0)*r11*x8006*x8014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8017=((1.0)*sj6);
CheckValue<IkReal> x8018=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x8017)))),-1);
if(!x8018.valid){
continue;
}
CheckValue<IkReal> x8019 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8017))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8018.value)))+(x8019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8020=IKsin(j4);
IkReal x8021=IKcos(j4);
IkReal x8022=(cj5*cj6);
IkReal x8023=(r11*sj6);
IkReal x8024=(cj6*r20);
IkReal x8025=(cj6*r10);
IkReal x8026=(cj5*sj6);
IkReal x8027=(r01*sj6);
IkReal x8028=(r21*sj6);
IkReal x8029=(cj6*r00);
IkReal x8030=((1.0)*x8021);
IkReal x8031=((1.0)*x8020);
IkReal x8032=(sj5*x8031);
evalcond[0]=((((-1.0)*x8028*x8030))+(((-1.0)*r20*x8026*x8031))+(((-1.0)*r22*x8032))+((x8021*x8024))+(((-1.0)*r21*x8022*x8031)));
evalcond[1]=((((-1.0)*r12*x8032))+(((-1.0)*x8023*x8030))+(((-1.0)*r10*x8026*x8031))+(((-1.0)*r11*x8022*x8031))+((x8021*x8025)));
evalcond[2]=((((-1.0)*x8024*x8031))+(((-1.0)*r22*sj5*x8030))+(((-1.0)*r20*x8026*x8030))+((x8020*x8028))+(((-1.0)*r21*x8022*x8030)));
evalcond[3]=((((-1.0)*r01*x8022*x8030))+(((-1.0)*r02*sj5*x8030))+((x8020*x8027))+(((-1.0)*r00*x8026*x8030))+(((-1.0)*x8029*x8031)));
evalcond[4]=((1.0)+(((-1.0)*r02*x8032))+(((-1.0)*r01*x8022*x8031))+(((-1.0)*r00*x8026*x8031))+(((-1.0)*x8027*x8030))+((x8021*x8029)));
evalcond[5]=((-1.0)+(((-1.0)*r12*sj5*x8030))+((x8020*x8023))+(((-1.0)*r10*x8026*x8030))+(((-1.0)*r11*x8022*x8030))+(((-1.0)*x8025*x8031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8033=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8033.valid){
continue;
}
CheckValue<IkReal> x8034 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8033.value)))+(x8034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8035=IKsin(j4);
IkReal x8036=IKcos(j4);
IkReal x8037=(cj5*cj6);
IkReal x8038=(r11*sj6);
IkReal x8039=(cj6*r20);
IkReal x8040=(cj6*r10);
IkReal x8041=(cj5*sj6);
IkReal x8042=(r01*sj6);
IkReal x8043=(r21*sj6);
IkReal x8044=(cj6*r00);
IkReal x8045=((1.0)*x8036);
IkReal x8046=((1.0)*x8035);
IkReal x8047=(sj5*x8046);
evalcond[0]=((((-1.0)*r21*x8037*x8046))+(((-1.0)*r20*x8041*x8046))+(((-1.0)*x8043*x8045))+((x8036*x8039))+(((-1.0)*r22*x8047)));
evalcond[1]=((((-1.0)*r10*x8041*x8046))+(((-1.0)*r11*x8037*x8046))+(((-1.0)*x8038*x8045))+((x8036*x8040))+(((-1.0)*r12*x8047)));
evalcond[2]=(((x8035*x8043))+(((-1.0)*r21*x8037*x8045))+(((-1.0)*r20*x8041*x8045))+(((-1.0)*r22*sj5*x8045))+(((-1.0)*x8039*x8046)));
evalcond[3]=((((-1.0)*r00*x8041*x8045))+((x8035*x8042))+(((-1.0)*r02*sj5*x8045))+(((-1.0)*x8044*x8046))+(((-1.0)*r01*x8037*x8045)));
evalcond[4]=((1.0)+(((-1.0)*r00*x8041*x8046))+(((-1.0)*x8042*x8045))+(((-1.0)*r02*x8047))+((x8036*x8044))+(((-1.0)*r01*x8037*x8046)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x8041*x8045))+(((-1.0)*x8040*x8046))+(((-1.0)*r11*x8037*x8045))+(((-1.0)*r12*sj5*x8045))+((x8035*x8038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8048=((1.0)*cj5);
IkReal x8049=((0.01)*cj5);
IkReal x8050=(cj6*r11);
IkReal x8051=(r20*sj6);
IkReal x8052=((0.01)*sj5);
IkReal x8053=(cj6*r01);
IkReal x8054=((0.37429)*cj5);
IkReal x8055=((0.37429)*sj5);
IkReal x8056=(cj6*r21);
IkReal x8057=(r10*sj5*sj6);
IkReal x8058=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x8055*x8056))+(((-1.0)*x8051*x8055))+(((-1.0)*pz))+((r22*x8052))+((r22*x8054))+((x8049*x8056))+((x8049*x8051)));
evalcond[2]=(((r02*x8052))+((r02*x8054))+(((-1.0)*r00*sj6*x8055))+(((-1.0)*px))+(((-1.0)*x8053*x8055))+((r00*sj6*x8049))+((x8049*x8053)));
evalcond[3]=((-0.43342)+(((-1.0)*r10*sj6*x8055))+(((-1.0)*x8050*x8055))+(((-1.0)*py))+((r10*sj6*x8049))+((r12*x8054))+((r12*x8052))+((x8049*x8050)));
evalcond[4]=((1.0)+((sj5*x8051))+((sj5*x8056))+(((-1.0)*r22*x8048)));
evalcond[5]=(((sj5*x8050))+x8057+(((-1.0)*r12*x8048)));
evalcond[6]=(((sj5*x8053))+(((-1.0)*r02*x8048))+x8058);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8059=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x8059;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8060=((1.0)*sj5);
IkReal x8061=((((-1.0)*cj6*r21*x8060))+((cj5*r22))+(((-1.0)*r20*sj6*x8060)));
j4eval[0]=x8061;
j4eval[1]=IKsign(x8061);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8062=r11*r11;
IkReal x8063=cj5*cj5;
IkReal x8064=cj6*cj6;
IkReal x8065=r10*r10;
IkReal x8066=r12*r12;
IkReal x8067=(r12*sj5);
IkReal x8068=(cj6*r10);
IkReal x8069=((1.0)*x8064);
IkReal x8070=(cj5*cj6*r11);
IkReal x8071=(cj5*r10*sj6);
IkReal x8072=((2.0)*r11*sj6);
IkReal x8073=(x8063*x8065);
IkReal x8074=((((-1.0)*x8063*x8066))+(((-1.0)*x8068*x8072))+((x8064*x8065))+((x8063*x8068*x8072))+((x8062*x8063*x8064))+(((-1.0)*x8069*x8073))+x8066+x8062+x8073+(((-1.0)*x8062*x8069))+(((2.0)*x8067*x8071))+(((2.0)*x8067*x8070)));
j4eval[0]=x8074;
j4eval[1]=IKsign(x8074);
j4eval[2]=((IKabs((x8067+x8071+x8070)))+(IKabs(((((-1.0)*r11*sj6))+x8068))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8075=r11*r11;
IkReal x8076=cj5*cj5;
IkReal x8077=cj6*cj6;
IkReal x8078=r10*r10;
IkReal x8079=r12*r12;
IkReal x8080=(r10*sj6);
IkReal x8081=(r12*sj5);
IkReal x8082=((1.0)*x8077);
IkReal x8083=(cj5*cj6*r11);
IkReal x8084=((2.0)*cj6*r11);
IkReal x8085=(x8076*x8078);
CheckValue<IkReal> x8086 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x8081+x8083+((cj5*x8080))),IKFAST_ATAN2_MAGTHRESH);
if(!x8086.valid){
continue;
}
CheckValue<IkReal> x8087=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8080*x8084))+(((-1.0)*x8082*x8085))+((x8075*x8076*x8077))+(((-1.0)*x8075*x8082))+((x8077*x8078))+(((-1.0)*x8076*x8079))+x8079+x8075+x8085+((x8076*x8080*x8084))+(((2.0)*x8081*x8083))+(((2.0)*cj5*x8080*x8081)))),-1);
if(!x8087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8086.value)+(((1.5707963267949)*(x8087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8088=IKsin(j4);
IkReal x8089=IKcos(j4);
IkReal x8090=(cj5*cj6);
IkReal x8091=(r11*sj6);
IkReal x8092=(cj6*r20);
IkReal x8093=(cj6*r10);
IkReal x8094=(cj5*sj6);
IkReal x8095=(r01*sj6);
IkReal x8096=(r21*sj6);
IkReal x8097=(cj6*r00);
IkReal x8098=((1.0)*x8089);
IkReal x8099=((1.0)*x8088);
IkReal x8100=(sj5*x8099);
evalcond[0]=(((x8089*x8092))+(((-1.0)*r20*x8094*x8099))+(((-1.0)*r21*x8090*x8099))+(((-1.0)*r22*x8100))+(((-1.0)*x8096*x8098)));
evalcond[1]=(((x8089*x8093))+(((-1.0)*x8091*x8098))+(((-1.0)*r11*x8090*x8099))+(((-1.0)*r10*x8094*x8099))+(((-1.0)*r12*x8100)));
evalcond[2]=((((-1.0)*x8092*x8099))+(((-1.0)*r22*sj5*x8098))+(((-1.0)*r20*x8094*x8098))+((x8088*x8096))+(((-1.0)*r21*x8090*x8098)));
evalcond[3]=((((-1.0)*x8097*x8099))+(((-1.0)*r00*x8094*x8098))+((x8088*x8095))+(((-1.0)*r01*x8090*x8098))+(((-1.0)*r02*sj5*x8098)));
evalcond[4]=((-1.0)+((x8089*x8097))+(((-1.0)*r00*x8094*x8099))+(((-1.0)*x8095*x8098))+(((-1.0)*r01*x8090*x8099))+(((-1.0)*r02*x8100)));
evalcond[5]=((1.0)+(((-1.0)*x8093*x8099))+((x8088*x8091))+(((-1.0)*r11*x8090*x8098))+(((-1.0)*r12*sj5*x8098))+(((-1.0)*r10*x8094*x8098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8101=((1.0)*sj5);
CheckValue<IkReal> x8102 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8102.valid){
continue;
}
CheckValue<IkReal> x8103=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x8101))+(((-1.0)*r20*sj6*x8101)))),-1);
if(!x8103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8102.value)+(((1.5707963267949)*(x8103.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8104=IKsin(j4);
IkReal x8105=IKcos(j4);
IkReal x8106=(cj5*cj6);
IkReal x8107=(r11*sj6);
IkReal x8108=(cj6*r20);
IkReal x8109=(cj6*r10);
IkReal x8110=(cj5*sj6);
IkReal x8111=(r01*sj6);
IkReal x8112=(r21*sj6);
IkReal x8113=(cj6*r00);
IkReal x8114=((1.0)*x8105);
IkReal x8115=((1.0)*x8104);
IkReal x8116=(sj5*x8115);
evalcond[0]=((((-1.0)*x8112*x8114))+(((-1.0)*r21*x8106*x8115))+((x8105*x8108))+(((-1.0)*r22*x8116))+(((-1.0)*r20*x8110*x8115)));
evalcond[1]=((((-1.0)*r10*x8110*x8115))+(((-1.0)*r12*x8116))+((x8105*x8109))+(((-1.0)*r11*x8106*x8115))+(((-1.0)*x8107*x8114)));
evalcond[2]=((((-1.0)*r21*x8106*x8114))+(((-1.0)*x8108*x8115))+(((-1.0)*r22*sj5*x8114))+((x8104*x8112))+(((-1.0)*r20*x8110*x8114)));
evalcond[3]=((((-1.0)*x8113*x8115))+(((-1.0)*r00*x8110*x8114))+((x8104*x8111))+(((-1.0)*r02*sj5*x8114))+(((-1.0)*r01*x8106*x8114)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x8110*x8115))+(((-1.0)*x8111*x8114))+(((-1.0)*r02*x8116))+((x8105*x8113))+(((-1.0)*r01*x8106*x8115)));
evalcond[5]=((1.0)+(((-1.0)*x8109*x8115))+(((-1.0)*r12*sj5*x8114))+(((-1.0)*r10*x8110*x8114))+((x8104*x8107))+(((-1.0)*r11*x8106*x8114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8117 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8117.valid){
continue;
}
CheckValue<IkReal> x8118=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x8118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8117.value)+(((1.5707963267949)*(x8118.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8119=IKsin(j4);
IkReal x8120=IKcos(j4);
IkReal x8121=(cj5*cj6);
IkReal x8122=(r11*sj6);
IkReal x8123=(cj6*r20);
IkReal x8124=(cj6*r10);
IkReal x8125=(cj5*sj6);
IkReal x8126=(r01*sj6);
IkReal x8127=(r21*sj6);
IkReal x8128=(cj6*r00);
IkReal x8129=((1.0)*x8120);
IkReal x8130=((1.0)*x8119);
IkReal x8131=(sj5*x8130);
evalcond[0]=(((x8120*x8123))+(((-1.0)*r22*x8131))+(((-1.0)*r20*x8125*x8130))+(((-1.0)*r21*x8121*x8130))+(((-1.0)*x8127*x8129)));
evalcond[1]=((((-1.0)*x8122*x8129))+(((-1.0)*r11*x8121*x8130))+((x8120*x8124))+(((-1.0)*r10*x8125*x8130))+(((-1.0)*r12*x8131)));
evalcond[2]=((((-1.0)*r20*x8125*x8129))+(((-1.0)*x8123*x8130))+(((-1.0)*r21*x8121*x8129))+(((-1.0)*r22*sj5*x8129))+((x8119*x8127)));
evalcond[3]=((((-1.0)*r01*x8121*x8129))+(((-1.0)*x8128*x8130))+((x8119*x8126))+(((-1.0)*r02*sj5*x8129))+(((-1.0)*r00*x8125*x8129)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x8131))+(((-1.0)*r00*x8125*x8130))+((x8120*x8128))+(((-1.0)*r01*x8121*x8130))+(((-1.0)*x8126*x8129)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x8129))+(((-1.0)*r11*x8121*x8129))+(((-1.0)*x8124*x8130))+((x8119*x8122))+(((-1.0)*r10*x8125*x8129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8132=((1.0)*cj5);
IkReal x8133=((0.01)*cj5);
IkReal x8134=(cj6*r11);
IkReal x8135=(r20*sj6);
IkReal x8136=((0.01)*sj5);
IkReal x8137=(cj6*r01);
IkReal x8138=((0.37429)*cj5);
IkReal x8139=((0.37429)*sj5);
IkReal x8140=(cj6*r21);
IkReal x8141=(r10*sj5*sj6);
IkReal x8142=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+((r22*x8138))+((r22*x8136))+((x8133*x8140))+(((-1.0)*x8139*x8140))+(((-1.0)*pz))+((x8133*x8135))+(((-1.0)*x8135*x8139)));
evalcond[2]=((0.43342)+((r02*x8136))+((r02*x8138))+(((-1.0)*x8137*x8139))+(((-1.0)*r00*sj6*x8139))+(((-1.0)*px))+((r00*sj6*x8133))+((x8133*x8137)));
evalcond[3]=((((-1.0)*x8134*x8139))+(((-1.0)*r10*sj6*x8139))+((r12*x8138))+((r12*x8136))+((r10*sj6*x8133))+(((-1.0)*py))+((x8133*x8134)));
evalcond[4]=((1.0)+((sj5*x8135))+(((-1.0)*r22*x8132))+((sj5*x8140)));
evalcond[5]=(((sj5*x8134))+(((-1.0)*r12*x8132))+x8141);
evalcond[6]=(((sj5*x8137))+(((-1.0)*r02*x8132))+x8142);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8143=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8143;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x8143);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8144=((1.0)*sj6);
IkReal x8145=((((-1.0)*r00*sj5*x8144))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x8145;
j4eval[1]=IKsign(x8145);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x8144))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8146=cj6*cj6;
IkReal x8147=cj5*cj5;
IkReal x8148=r00*r00;
IkReal x8149=r01*r01;
IkReal x8150=r02*r02;
IkReal x8151=(cj6*r00);
IkReal x8152=(cj5*cj6*r01);
IkReal x8153=((2.0)*r02*sj5);
IkReal x8154=((1.0)*x8146);
IkReal x8155=((2.0)*r01*sj6);
IkReal x8156=(cj5*r00*sj6);
IkReal x8157=(x8147*x8148);
IkReal x8158=((((-1.0)*x8153*x8156))+(((-1.0)*x8147*x8151*x8155))+(((-1.0)*x8147*x8149*x8154))+(((-1.0)*x8148*x8154))+((x8151*x8155))+(((-1.0)*x8150))+(((-1.0)*x8157))+(((-1.0)*x8149))+((x8146*x8149))+((x8147*x8150))+(((-1.0)*x8152*x8153))+((x8146*x8157)));
j4eval[0]=x8158;
j4eval[1]=((IKabs((((r02*sj5))+x8156+x8152)))+(IKabs(((((-1.0)*r01*sj6))+x8151))));
j4eval[2]=IKsign(x8158);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8159=cj6*cj6;
IkReal x8160=cj5*cj5;
IkReal x8161=r00*r00;
IkReal x8162=r01*r01;
IkReal x8163=r02*r02;
IkReal x8164=(cj6*r00);
IkReal x8165=(cj5*cj6*r01);
IkReal x8166=((2.0)*r02*sj5);
IkReal x8167=((1.0)*x8159);
IkReal x8168=((2.0)*r01*sj6);
IkReal x8169=(cj5*r00*sj6);
IkReal x8170=(x8160*x8161);
CheckValue<IkReal> x8171=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8165*x8166))+(((-1.0)*x8170))+((x8160*x8163))+(((-1.0)*x8166*x8169))+((x8164*x8168))+(((-1.0)*x8161*x8167))+(((-1.0)*x8160*x8164*x8168))+((x8159*x8162))+(((-1.0)*x8160*x8162*x8167))+(((-1.0)*x8163))+(((-1.0)*x8162))+((x8159*x8170)))),-1);
if(!x8171.valid){
continue;
}
CheckValue<IkReal> x8172 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8164)),(((r02*sj5))+x8165+x8169),IKFAST_ATAN2_MAGTHRESH);
if(!x8172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8171.value)))+(x8172.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8173=IKsin(j4);
IkReal x8174=IKcos(j4);
IkReal x8175=(cj5*cj6);
IkReal x8176=(r11*sj6);
IkReal x8177=(cj6*r20);
IkReal x8178=(cj6*r10);
IkReal x8179=(cj5*sj6);
IkReal x8180=(r21*sj6);
IkReal x8181=(cj6*r00);
IkReal x8182=(r01*sj6);
IkReal x8183=((1.0)*x8174);
IkReal x8184=((1.0)*x8173);
IkReal x8185=(sj5*x8184);
evalcond[0]=(((x8174*x8177))+(((-1.0)*r22*x8185))+(((-1.0)*r21*x8175*x8184))+(((-1.0)*r20*x8179*x8184))+(((-1.0)*x8180*x8183)));
evalcond[1]=((((-1.0)*r02*x8185))+(((-1.0)*x8182*x8183))+(((-1.0)*r00*x8179*x8184))+(((-1.0)*r01*x8175*x8184))+((x8174*x8181)));
evalcond[2]=((((-1.0)*r21*x8175*x8183))+(((-1.0)*r20*x8179*x8183))+((x8173*x8180))+(((-1.0)*r22*sj5*x8183))+(((-1.0)*x8177*x8184)));
evalcond[3]=(((x8173*x8176))+(((-1.0)*r11*x8175*x8183))+(((-1.0)*r12*sj5*x8183))+(((-1.0)*r10*x8179*x8183))+(((-1.0)*x8178*x8184)));
evalcond[4]=((-1.0)+((x8174*x8178))+(((-1.0)*r11*x8175*x8184))+(((-1.0)*x8176*x8183))+(((-1.0)*r12*x8185))+(((-1.0)*r10*x8179*x8184)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x8179*x8183))+(((-1.0)*r01*x8175*x8183))+(((-1.0)*r02*sj5*x8183))+((x8173*x8182))+(((-1.0)*x8181*x8184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8186=((1.0)*sj6);
CheckValue<IkReal> x8187 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x8186)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8187.valid){
continue;
}
CheckValue<IkReal> x8188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x8186))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x8188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8187.value)+(((1.5707963267949)*(x8188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8189=IKsin(j4);
IkReal x8190=IKcos(j4);
IkReal x8191=(cj5*cj6);
IkReal x8192=(r11*sj6);
IkReal x8193=(cj6*r20);
IkReal x8194=(cj6*r10);
IkReal x8195=(cj5*sj6);
IkReal x8196=(r21*sj6);
IkReal x8197=(cj6*r00);
IkReal x8198=(r01*sj6);
IkReal x8199=((1.0)*x8190);
IkReal x8200=((1.0)*x8189);
IkReal x8201=(sj5*x8200);
evalcond[0]=((((-1.0)*x8196*x8199))+(((-1.0)*r20*x8195*x8200))+((x8190*x8193))+(((-1.0)*r22*x8201))+(((-1.0)*r21*x8191*x8200)));
evalcond[1]=((((-1.0)*r00*x8195*x8200))+(((-1.0)*r02*x8201))+((x8190*x8197))+(((-1.0)*r01*x8191*x8200))+(((-1.0)*x8198*x8199)));
evalcond[2]=((((-1.0)*r21*x8191*x8199))+(((-1.0)*r20*x8195*x8199))+(((-1.0)*x8193*x8200))+(((-1.0)*r22*sj5*x8199))+((x8189*x8196)));
evalcond[3]=((((-1.0)*x8194*x8200))+(((-1.0)*r10*x8195*x8199))+(((-1.0)*r12*sj5*x8199))+(((-1.0)*r11*x8191*x8199))+((x8189*x8192)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x8195*x8200))+(((-1.0)*r12*x8201))+((x8190*x8194))+(((-1.0)*x8192*x8199))+(((-1.0)*r11*x8191*x8200)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x8191*x8199))+(((-1.0)*r00*x8195*x8199))+(((-1.0)*r02*sj5*x8199))+((x8189*x8198))+(((-1.0)*x8197*x8200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8202=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8202.valid){
continue;
}
CheckValue<IkReal> x8203 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x8203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8202.value)))+(x8203.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8204=IKsin(j4);
IkReal x8205=IKcos(j4);
IkReal x8206=(cj5*cj6);
IkReal x8207=(r11*sj6);
IkReal x8208=(cj6*r20);
IkReal x8209=(cj6*r10);
IkReal x8210=(cj5*sj6);
IkReal x8211=(r21*sj6);
IkReal x8212=(cj6*r00);
IkReal x8213=(r01*sj6);
IkReal x8214=((1.0)*x8205);
IkReal x8215=((1.0)*x8204);
IkReal x8216=(sj5*x8215);
evalcond[0]=(((x8205*x8208))+(((-1.0)*x8211*x8214))+(((-1.0)*r20*x8210*x8215))+(((-1.0)*r22*x8216))+(((-1.0)*r21*x8206*x8215)));
evalcond[1]=((((-1.0)*r00*x8210*x8215))+((x8205*x8212))+(((-1.0)*r02*x8216))+(((-1.0)*x8213*x8214))+(((-1.0)*r01*x8206*x8215)));
evalcond[2]=(((x8204*x8211))+(((-1.0)*x8208*x8215))+(((-1.0)*r22*sj5*x8214))+(((-1.0)*r20*x8210*x8214))+(((-1.0)*r21*x8206*x8214)));
evalcond[3]=((((-1.0)*r11*x8206*x8214))+(((-1.0)*r10*x8210*x8214))+((x8204*x8207))+(((-1.0)*x8209*x8215))+(((-1.0)*r12*sj5*x8214)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x8206*x8215))+(((-1.0)*r10*x8210*x8215))+((x8205*x8209))+(((-1.0)*r12*x8216))+(((-1.0)*x8207*x8214)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x8214))+(((-1.0)*r00*x8210*x8214))+((x8204*x8213))+(((-1.0)*x8212*x8215))+(((-1.0)*r01*x8206*x8214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8217=((1.0)*cj5);
IkReal x8218=((0.01)*cj5);
IkReal x8219=(cj6*r11);
IkReal x8220=(r20*sj6);
IkReal x8221=((0.01)*sj5);
IkReal x8222=(cj6*r01);
IkReal x8223=((0.37429)*cj5);
IkReal x8224=((0.37429)*sj5);
IkReal x8225=(cj6*r21);
IkReal x8226=(r10*sj5*sj6);
IkReal x8227=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x8220*x8224))+((x8218*x8220))+((x8218*x8225))+((r22*x8221))+((r22*x8223))+(((-1.0)*pz))+(((-1.0)*x8224*x8225)));
evalcond[2]=((-0.43342)+((r02*x8221))+((r02*x8223))+((x8218*x8222))+(((-1.0)*px))+((r00*sj6*x8218))+(((-1.0)*r00*sj6*x8224))+(((-1.0)*x8222*x8224)));
evalcond[3]=((((-1.0)*x8219*x8224))+((r12*x8223))+((r12*x8221))+(((-1.0)*r10*sj6*x8224))+((x8218*x8219))+(((-1.0)*py))+((r10*sj6*x8218)));
evalcond[4]=((1.0)+((sj5*x8225))+((sj5*x8220))+(((-1.0)*r22*x8217)));
evalcond[5]=(((sj5*x8219))+(((-1.0)*r12*x8217))+x8226);
evalcond[6]=(((sj5*x8222))+(((-1.0)*r02*x8217))+x8227);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8228=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8228;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8228);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8229=((1.0)*sj5);
IkReal x8230=((((-1.0)*cj6*r21*x8229))+((cj5*r22))+(((-1.0)*r20*sj6*x8229)));
j4eval[0]=x8230;
j4eval[1]=IKsign(x8230);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8231=cj6*cj6;
IkReal x8232=r01*r01;
IkReal x8233=cj5*cj5;
IkReal x8234=r00*r00;
IkReal x8235=r02*r02;
IkReal x8236=(cj6*r00);
IkReal x8237=(r02*sj5);
IkReal x8238=(cj5*cj6*r01);
IkReal x8239=((2.0)*r01*sj6);
IkReal x8240=(cj5*r00*sj6);
IkReal x8241=((1.0)*x8233);
IkReal x8242=(x8231*x8234);
IkReal x8243=(x8231*x8232);
IkReal x8244=((((2.0)*x8237*x8240))+(((2.0)*x8237*x8238))+(((-1.0)*x8241*x8242))+(((-1.0)*x8236*x8239))+((x8233*x8236*x8239))+((x8233*x8243))+((x8233*x8234))+(((-1.0)*x8243))+(((-1.0)*x8235*x8241))+x8232+x8235+x8242);
j4eval[0]=x8244;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x8236)))+(IKabs((x8237+x8238+x8240))));
j4eval[2]=IKsign(x8244);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8245=cj6*cj6;
IkReal x8246=r01*r01;
IkReal x8247=cj5*cj5;
IkReal x8248=r00*r00;
IkReal x8249=r02*r02;
IkReal x8250=(cj6*r00);
IkReal x8251=((2.0)*r01);
IkReal x8252=(cj5*cj6);
IkReal x8253=(r02*sj5);
IkReal x8254=(cj5*r00*sj6);
IkReal x8255=(x8247*x8248);
IkReal x8256=(x8245*x8246);
CheckValue<IkReal> x8257=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8256))+((x8247*x8256))+(((2.0)*x8253*x8254))+((x8251*x8252*x8253))+((sj6*x8247*x8250*x8251))+(((-1.0)*sj6*x8250*x8251))+(((-1.0)*x8247*x8249))+((x8245*x8248))+(((-1.0)*x8245*x8255))+x8249+x8246+x8255)),-1);
if(!x8257.valid){
continue;
}
CheckValue<IkReal> x8258 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8250)),(((r01*x8252))+x8254+x8253),IKFAST_ATAN2_MAGTHRESH);
if(!x8258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8257.value)))+(x8258.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8259=IKsin(j4);
IkReal x8260=IKcos(j4);
IkReal x8261=(cj5*cj6);
IkReal x8262=(r11*sj6);
IkReal x8263=(cj6*r20);
IkReal x8264=(cj6*r10);
IkReal x8265=(cj5*sj6);
IkReal x8266=(r21*sj6);
IkReal x8267=(cj6*r00);
IkReal x8268=(r01*sj6);
IkReal x8269=((1.0)*x8260);
IkReal x8270=((1.0)*x8259);
IkReal x8271=(sj5*x8270);
evalcond[0]=((((-1.0)*r20*x8265*x8270))+(((-1.0)*r22*x8271))+(((-1.0)*r21*x8261*x8270))+(((-1.0)*x8266*x8269))+((x8260*x8263)));
evalcond[1]=((((-1.0)*r00*x8265*x8270))+(((-1.0)*r01*x8261*x8270))+((x8260*x8267))+(((-1.0)*r02*x8271))+(((-1.0)*x8268*x8269)));
evalcond[2]=((((-1.0)*r22*sj5*x8269))+((x8259*x8266))+(((-1.0)*r21*x8261*x8269))+(((-1.0)*x8263*x8270))+(((-1.0)*r20*x8265*x8269)));
evalcond[3]=((((-1.0)*r12*sj5*x8269))+(((-1.0)*r10*x8265*x8269))+((x8259*x8262))+(((-1.0)*x8264*x8270))+(((-1.0)*r11*x8261*x8269)));
evalcond[4]=((1.0)+(((-1.0)*x8262*x8269))+(((-1.0)*r10*x8265*x8270))+(((-1.0)*r11*x8261*x8270))+((x8260*x8264))+(((-1.0)*r12*x8271)));
evalcond[5]=((1.0)+(((-1.0)*x8267*x8270))+(((-1.0)*r00*x8265*x8269))+(((-1.0)*r01*x8261*x8269))+((x8259*x8268))+(((-1.0)*r02*sj5*x8269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8272=((1.0)*sj5);
CheckValue<IkReal> x8273=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj6*x8272))+((cj5*r22))+(((-1.0)*cj6*r21*x8272)))),-1);
if(!x8273.valid){
continue;
}
CheckValue<IkReal> x8274 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x8274.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8273.value)))+(x8274.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8275=IKsin(j4);
IkReal x8276=IKcos(j4);
IkReal x8277=(cj5*cj6);
IkReal x8278=(r11*sj6);
IkReal x8279=(cj6*r20);
IkReal x8280=(cj6*r10);
IkReal x8281=(cj5*sj6);
IkReal x8282=(r21*sj6);
IkReal x8283=(cj6*r00);
IkReal x8284=(r01*sj6);
IkReal x8285=((1.0)*x8276);
IkReal x8286=((1.0)*x8275);
IkReal x8287=(sj5*x8286);
evalcond[0]=((((-1.0)*r21*x8277*x8286))+((x8276*x8279))+(((-1.0)*r20*x8281*x8286))+(((-1.0)*x8282*x8285))+(((-1.0)*r22*x8287)));
evalcond[1]=((((-1.0)*r02*x8287))+(((-1.0)*r00*x8281*x8286))+((x8276*x8283))+(((-1.0)*r01*x8277*x8286))+(((-1.0)*x8284*x8285)));
evalcond[2]=((((-1.0)*r21*x8277*x8285))+(((-1.0)*x8279*x8286))+(((-1.0)*r20*x8281*x8285))+((x8275*x8282))+(((-1.0)*r22*sj5*x8285)));
evalcond[3]=(((x8275*x8278))+(((-1.0)*r11*x8277*x8285))+(((-1.0)*x8280*x8286))+(((-1.0)*r10*x8281*x8285))+(((-1.0)*r12*sj5*x8285)));
evalcond[4]=((1.0)+(((-1.0)*r12*x8287))+(((-1.0)*r11*x8277*x8286))+(((-1.0)*r10*x8281*x8286))+((x8276*x8280))+(((-1.0)*x8278*x8285)));
evalcond[5]=((1.0)+(((-1.0)*r00*x8281*x8285))+(((-1.0)*x8283*x8286))+(((-1.0)*r02*sj5*x8285))+(((-1.0)*r01*x8277*x8285))+((x8275*x8284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8288 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8288.valid){
continue;
}
CheckValue<IkReal> x8289=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8288.value)+(((1.5707963267949)*(x8289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8290=IKsin(j4);
IkReal x8291=IKcos(j4);
IkReal x8292=(cj5*cj6);
IkReal x8293=(r11*sj6);
IkReal x8294=(cj6*r20);
IkReal x8295=(cj6*r10);
IkReal x8296=(cj5*sj6);
IkReal x8297=(r21*sj6);
IkReal x8298=(cj6*r00);
IkReal x8299=(r01*sj6);
IkReal x8300=((1.0)*x8291);
IkReal x8301=((1.0)*x8290);
IkReal x8302=(sj5*x8301);
evalcond[0]=((((-1.0)*r22*x8302))+(((-1.0)*r21*x8292*x8301))+(((-1.0)*x8297*x8300))+((x8291*x8294))+(((-1.0)*r20*x8296*x8301)));
evalcond[1]=((((-1.0)*r00*x8296*x8301))+((x8291*x8298))+(((-1.0)*r02*x8302))+(((-1.0)*x8299*x8300))+(((-1.0)*r01*x8292*x8301)));
evalcond[2]=((((-1.0)*r21*x8292*x8300))+((x8290*x8297))+(((-1.0)*r20*x8296*x8300))+(((-1.0)*r22*sj5*x8300))+(((-1.0)*x8294*x8301)));
evalcond[3]=((((-1.0)*x8295*x8301))+(((-1.0)*r12*sj5*x8300))+((x8290*x8293))+(((-1.0)*r11*x8292*x8300))+(((-1.0)*r10*x8296*x8300)));
evalcond[4]=((1.0)+(((-1.0)*r12*x8302))+((x8291*x8295))+(((-1.0)*x8293*x8300))+(((-1.0)*r11*x8292*x8301))+(((-1.0)*r10*x8296*x8301)));
evalcond[5]=((1.0)+(((-1.0)*x8298*x8301))+(((-1.0)*r00*x8296*x8300))+((x8290*x8299))+(((-1.0)*r02*sj5*x8300))+(((-1.0)*r01*x8292*x8300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8303=cj6*cj6;
IkReal x8304=cj5*cj5;
IkReal x8305=(r22*sj5);
IkReal x8306=(cj0*r20);
IkReal x8307=((1.0)*r21);
IkReal x8308=(cj5*sj6);
IkReal x8309=(r02*r22);
IkReal x8310=(cj5*cj6);
IkReal x8311=(r02*sj5);
IkReal x8312=(cj6*sj6);
IkReal x8313=((1.0)*r20);
IkReal x8314=(r01*x8307);
IkReal x8315=(r00*r20*x8304);
CheckValue<IkReal> x8316=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8304*x8312*x8313))+((r01*r20*x8312))+(((-1.0)*r00*x8304*x8307*x8312))+((x8304*x8309))+(((-1.0)*r00*x8304*x8313))+(((-1.0)*x8314))+(((-1.0)*x8307*x8310*x8311))+(((-1.0)*r00*x8305*x8308))+((x8303*x8315))+(((-1.0)*x8303*x8304*x8314))+(((-1.0)*r00*x8303*x8313))+((r01*r21*x8303))+(((-1.0)*r01*x8305*x8310))+(((-1.0)*x8309))+((r00*r21*x8312))+(((-1.0)*x8308*x8311*x8313)))),-1);
if(!x8316.valid){
continue;
}
CheckValue<IkReal> x8317 = IKatan2WithCheck(IkReal((((cj6*x8306))+(((-1.0)*cj0*sj6*x8307)))),(((x8306*x8308))+((cj0*x8305))+((cj0*r21*x8310))),IKFAST_ATAN2_MAGTHRESH);
if(!x8317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8316.value)))+(x8317.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8318=IKsin(j4);
IkReal x8319=IKcos(j4);
IkReal x8320=((1.0)*cj0);
IkReal x8321=(cj6*r20);
IkReal x8322=(cj5*sj6);
IkReal x8323=((1.0)*sj6);
IkReal x8324=(r21*sj6);
IkReal x8325=(cj6*r00);
IkReal x8326=((1.0)*cj5*cj6);
IkReal x8327=(r01*x8319);
IkReal x8328=(r11*x8318);
IkReal x8329=((1.0)*x8318);
IkReal x8330=(r11*x8319);
IkReal x8331=(r10*x8319);
IkReal x8332=((1.0)*x8319);
IkReal x8333=(r01*x8318);
IkReal x8334=(sj5*x8329);
evalcond[0]=(((x8319*x8321))+(((-1.0)*r22*x8334))+(((-1.0)*r21*x8319*x8323))+(((-1.0)*r20*x8322*x8329))+(((-1.0)*r21*x8318*x8326)));
evalcond[1]=(((x8318*x8324))+(((-1.0)*r21*x8319*x8326))+(((-1.0)*r20*x8322*x8332))+(((-1.0)*r22*sj5*x8332))+(((-1.0)*x8321*x8329)));
evalcond[2]=(((x8319*x8325))+sj0+(((-1.0)*x8326*x8333))+(((-1.0)*r00*x8322*x8329))+(((-1.0)*r02*x8334))+(((-1.0)*x8323*x8327)));
evalcond[3]=((((-1.0)*r10*x8322*x8329))+(((-1.0)*x8320))+(((-1.0)*r12*x8334))+((cj6*x8331))+(((-1.0)*x8323*x8330))+(((-1.0)*x8326*x8328)));
evalcond[4]=(((sj6*x8333))+(((-1.0)*x8320))+(((-1.0)*x8325*x8329))+(((-1.0)*x8326*x8327))+(((-1.0)*r02*sj5*x8332))+(((-1.0)*r00*x8322*x8332)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*cj6*r10*x8329))+(((-1.0)*x8326*x8330))+(((-1.0)*r12*sj5*x8332))+((sj6*x8328))+(((-1.0)*x8322*x8331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8335=(cj0*sj6);
IkReal x8336=((1.0)*sj5);
IkReal x8337=(cj0*cj6);
CheckValue<IkReal> x8338=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x8336))+(((-1.0)*cj6*r01*x8336))+((cj5*r02)))),-1);
if(!x8338.valid){
continue;
}
CheckValue<IkReal> x8339 = IKatan2WithCheck(IkReal((((r20*x8337))+(((-1.0)*r21*x8335)))),(((cj5*r20*x8335))+((cj5*r21*x8337))+((cj0*r22*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8338.value)))+(x8339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8340=IKsin(j4);
IkReal x8341=IKcos(j4);
IkReal x8342=((1.0)*cj0);
IkReal x8343=(cj6*r20);
IkReal x8344=(cj5*sj6);
IkReal x8345=((1.0)*sj6);
IkReal x8346=(r21*sj6);
IkReal x8347=(cj6*r00);
IkReal x8348=((1.0)*cj5*cj6);
IkReal x8349=(r01*x8341);
IkReal x8350=(r11*x8340);
IkReal x8351=((1.0)*x8340);
IkReal x8352=(r11*x8341);
IkReal x8353=(r10*x8341);
IkReal x8354=((1.0)*x8341);
IkReal x8355=(r01*x8340);
IkReal x8356=(sj5*x8351);
evalcond[0]=((((-1.0)*r21*x8340*x8348))+(((-1.0)*r22*x8356))+(((-1.0)*r21*x8341*x8345))+((x8341*x8343))+(((-1.0)*r20*x8344*x8351)));
evalcond[1]=((((-1.0)*r22*sj5*x8354))+(((-1.0)*r21*x8341*x8348))+(((-1.0)*x8343*x8351))+((x8340*x8346))+(((-1.0)*r20*x8344*x8354)));
evalcond[2]=(sj0+(((-1.0)*r02*x8356))+(((-1.0)*x8345*x8349))+((x8341*x8347))+(((-1.0)*r00*x8344*x8351))+(((-1.0)*x8348*x8355)));
evalcond[3]=(((cj6*x8353))+(((-1.0)*x8345*x8352))+(((-1.0)*r12*x8356))+(((-1.0)*r10*x8344*x8351))+(((-1.0)*x8342))+(((-1.0)*x8348*x8350)));
evalcond[4]=((((-1.0)*r02*sj5*x8354))+(((-1.0)*x8347*x8351))+((sj6*x8355))+(((-1.0)*x8342))+(((-1.0)*r00*x8344*x8354))+(((-1.0)*x8348*x8349)));
evalcond[5]=((((-1.0)*cj6*r10*x8351))+(((-1.0)*sj0))+((sj6*x8350))+(((-1.0)*x8348*x8352))+(((-1.0)*r12*sj5*x8354))+(((-1.0)*x8344*x8353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8357=(cj5*sj0);
IkReal x8358=((1.0)*sj5);
CheckValue<IkReal> x8359 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((r20*sj6*x8357))+((cj6*r21*x8357))+((r22*sj0*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8359.valid){
continue;
}
CheckValue<IkReal> x8360=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x8358))+(((-1.0)*r10*sj6*x8358)))),-1);
if(!x8360.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8359.value)+(((1.5707963267949)*(x8360.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8361=IKsin(j4);
IkReal x8362=IKcos(j4);
IkReal x8363=((1.0)*cj0);
IkReal x8364=(cj6*r20);
IkReal x8365=(cj5*sj6);
IkReal x8366=((1.0)*sj6);
IkReal x8367=(r21*sj6);
IkReal x8368=(cj6*r00);
IkReal x8369=((1.0)*cj5*cj6);
IkReal x8370=(r01*x8362);
IkReal x8371=(r11*x8361);
IkReal x8372=((1.0)*x8361);
IkReal x8373=(r11*x8362);
IkReal x8374=(r10*x8362);
IkReal x8375=((1.0)*x8362);
IkReal x8376=(r01*x8361);
IkReal x8377=(sj5*x8372);
evalcond[0]=((((-1.0)*r21*x8361*x8369))+(((-1.0)*r22*x8377))+(((-1.0)*r20*x8365*x8372))+(((-1.0)*r21*x8362*x8366))+((x8362*x8364)));
evalcond[1]=((((-1.0)*x8364*x8372))+(((-1.0)*r22*sj5*x8375))+((x8361*x8367))+(((-1.0)*r20*x8365*x8375))+(((-1.0)*r21*x8362*x8369)));
evalcond[2]=(sj0+(((-1.0)*r02*x8377))+(((-1.0)*x8366*x8370))+(((-1.0)*x8369*x8376))+(((-1.0)*r00*x8365*x8372))+((x8362*x8368)));
evalcond[3]=((((-1.0)*r12*x8377))+(((-1.0)*r10*x8365*x8372))+(((-1.0)*x8366*x8373))+(((-1.0)*x8369*x8371))+((cj6*x8374))+(((-1.0)*x8363)));
evalcond[4]=((((-1.0)*x8368*x8372))+(((-1.0)*r02*sj5*x8375))+((sj6*x8376))+(((-1.0)*x8369*x8370))+(((-1.0)*r00*x8365*x8375))+(((-1.0)*x8363)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*cj6*r10*x8372))+((sj6*x8371))+(((-1.0)*x8365*x8374))+(((-1.0)*x8369*x8373))+(((-1.0)*r12*sj5*x8375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8378=((0.01)*cj5);
IkReal x8379=(cj6*r11);
IkReal x8380=((1.0)*cj5);
IkReal x8381=(r20*sj6);
IkReal x8382=((0.01)*sj5);
IkReal x8383=(cj6*r01);
IkReal x8384=((0.37429)*cj5);
IkReal x8385=((0.37429)*sj5);
IkReal x8386=(cj6*r21);
IkReal x8387=(r10*sj5*sj6);
IkReal x8388=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.069)+(((-1.0)*x8381*x8385))+(((-1.0)*pz))+((x8378*x8381))+((x8378*x8386))+((r22*x8384))+((r22*x8382))+(((-1.0)*x8385*x8386)));
evalcond[2]=((((-1.0)*r00*sj6*x8385))+(((-0.29542)*cj0))+(((-1.0)*px))+((r02*x8384))+((r02*x8382))+(((-1.0)*x8383*x8385))+((x8378*x8383))+((r00*sj6*x8378)));
evalcond[3]=((((-1.0)*x8379*x8385))+((r10*sj6*x8378))+(((-1.0)*r10*sj6*x8385))+(((-0.29542)*sj0))+(((-1.0)*py))+((r12*x8384))+((r12*x8382))+((x8378*x8379)));
evalcond[4]=((1.0)+(((-1.0)*r22*x8380))+((sj5*x8386))+((sj5*x8381)));
evalcond[5]=(x8387+(((-1.0)*r12*x8380))+((sj5*x8379)));
evalcond[6]=(x8388+(((-1.0)*r02*x8380))+((sj5*x8383)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x8389=(cj0*sj6);
IkReal x8390=(cj0*cj6);
IkReal x8391=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8391;
j4eval[1]=((IKabs((((r20*x8390))+(((-1.0)*r21*x8389)))))+(IKabs((((cj5*r20*x8389))+((cj5*r21*x8390))+((cj0*r22*sj5))))));
j4eval[2]=IKsign(x8391);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x8392=cj5*cj5;
IkReal x8393=cj6*cj6;
IkReal x8394=(r00*r20);
IkReal x8395=(r02*r22);
IkReal x8396=(r22*sj5);
IkReal x8397=(cj6*r21);
IkReal x8398=(r00*sj6);
IkReal x8399=(r20*sj6);
IkReal x8400=(cj6*r01);
IkReal x8401=(cj0*cj5);
IkReal x8402=((1.0)*x8392);
IkReal x8403=(cj5*r02*sj5);
IkReal x8404=(r01*r21*x8393);
IkReal x8405=((((-1.0)*x8397*x8398))+x8395+(((-1.0)*x8395*x8402))+(((-1.0)*x8404))+((x8392*x8394))+((x8393*x8394))+((x8399*x8403))+((cj5*x8396*x8398))+((r01*r21))+((cj5*x8396*x8400))+(((-1.0)*x8399*x8400))+(((-1.0)*x8393*x8394*x8402))+((x8392*x8397*x8398))+((x8392*x8404))+((x8397*x8403))+((x8392*x8399*x8400)));
j4eval[0]=x8405;
j4eval[1]=IKsign(x8405);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((x8399*x8401))+((x8397*x8401))+((cj0*x8396))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x8406=cj6*cj6;
IkReal x8407=cj5*cj5;
IkReal x8408=(r12*sj5);
IkReal x8409=(r22*sj5);
IkReal x8410=((1.0)*r11);
IkReal x8411=(r20*sj0);
IkReal x8412=(r10*r20);
IkReal x8413=(cj5*sj6);
IkReal x8414=(cj6*r10);
IkReal x8415=(r12*r22);
IkReal x8416=(cj5*cj6*r21);
IkReal x8417=(r21*x8406);
IkReal x8418=(cj6*r20*sj6);
IkReal x8419=(r11*x8407);
IkReal x8420=((1.0)*r21*sj6);
IkReal x8421=((1.0)*x8407);
IkReal x8422=((((-1.0)*x8406*x8412*x8421))+((r10*x8409*x8413))+x8415+((cj5*cj6*r11*x8409))+((r11*r21))+(((-1.0)*x8410*x8417))+(((-1.0)*x8410*x8418))+((x8406*x8412))+((x8407*x8412))+((r20*x8408*x8413))+(((-1.0)*x8415*x8421))+((x8408*x8416))+(((-1.0)*x8414*x8420))+((x8418*x8419))+((x8417*x8419))+((r21*sj6*x8407*x8414)));
j4eval[0]=x8422;
j4eval[1]=IKsign(x8422);
j4eval[2]=((IKabs((((sj0*x8409))+((x8411*x8413))+((sj0*x8416)))))+(IKabs(((((-1.0)*sj0*x8420))+((cj6*x8411))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x8423=((1.0)*cj5);
IkReal x8424=((0.01)*cj5);
IkReal x8425=(cj6*r11);
IkReal x8426=(r20*sj6);
IkReal x8427=((0.01)*sj5);
IkReal x8428=(cj6*r01);
IkReal x8429=((0.37429)*cj5);
IkReal x8430=((0.37429)*sj5);
IkReal x8431=(cj6*r21);
IkReal x8432=(r10*sj5*sj6);
IkReal x8433=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+((x8424*x8426))+((x8424*x8431))+(((-1.0)*x8426*x8430))+(((-1.0)*pz))+(((-1.0)*x8430*x8431))+((r22*x8427))+((r22*x8429)));
evalcond[2]=((-0.29542)+((r02*x8427))+((r02*x8429))+(((-1.0)*r00*sj6*x8430))+((x8424*x8428))+(((-1.0)*px))+(((-1.0)*x8428*x8430))+((r00*sj6*x8424)));
evalcond[3]=(((x8424*x8425))+(((-1.0)*x8425*x8430))+(((-1.0)*py))+((r12*x8427))+((r12*x8429))+((r10*sj6*x8424))+(((-1.0)*r10*sj6*x8430)));
evalcond[4]=((1.0)+((sj5*x8431))+(((-1.0)*r22*x8423))+((sj5*x8426)));
evalcond[5]=(x8432+((sj5*x8425))+(((-1.0)*r12*x8423)));
evalcond[6]=(x8433+(((-1.0)*r02*x8423))+((sj5*x8428)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8434=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8434;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8435=((1.0)*sj5);
IkReal x8436=(((cj5*r22))+(((-1.0)*cj6*r21*x8435))+(((-1.0)*r20*sj6*x8435)));
j4eval[0]=x8436;
j4eval[1]=IKsign(x8436);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8437=cj6*cj6;
IkReal x8438=r01*r01;
IkReal x8439=cj5*cj5;
IkReal x8440=r00*r00;
IkReal x8441=r02*r02;
IkReal x8442=(cj6*r00);
IkReal x8443=(r02*sj5);
IkReal x8444=(cj5*cj6*r01);
IkReal x8445=((2.0)*r01*sj6);
IkReal x8446=(cj5*r00*sj6);
IkReal x8447=((1.0)*x8439);
IkReal x8448=(x8437*x8440);
IkReal x8449=(x8437*x8438);
IkReal x8450=(x8441+x8448+x8438+(((-1.0)*x8447*x8448))+((x8439*x8442*x8445))+(((-1.0)*x8449))+(((-1.0)*x8442*x8445))+((x8439*x8440))+((x8439*x8449))+(((2.0)*x8443*x8444))+(((2.0)*x8443*x8446))+(((-1.0)*x8441*x8447)));
j4eval[0]=x8450;
j4eval[1]=((IKabs((x8442+(((-1.0)*r01*sj6)))))+(IKabs((x8444+x8446+x8443))));
j4eval[2]=IKsign(x8450);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8451=cj6*cj6;
IkReal x8452=r01*r01;
IkReal x8453=cj5*cj5;
IkReal x8454=r00*r00;
IkReal x8455=r02*r02;
IkReal x8456=(cj6*r00);
IkReal x8457=((2.0)*r01);
IkReal x8458=(cj5*cj6);
IkReal x8459=(r02*sj5);
IkReal x8460=(cj5*r00*sj6);
IkReal x8461=(x8453*x8454);
IkReal x8462=(x8451*x8452);
CheckValue<IkReal> x8463=IKPowWithIntegerCheck(IKsign((((x8453*x8462))+(((-1.0)*x8451*x8461))+(((-1.0)*x8462))+(((2.0)*x8459*x8460))+x8461+x8455+x8452+((x8451*x8454))+((x8457*x8458*x8459))+(((-1.0)*x8453*x8455))+((sj6*x8453*x8456*x8457))+(((-1.0)*sj6*x8456*x8457)))),-1);
if(!x8463.valid){
continue;
}
CheckValue<IkReal> x8464 = IKatan2WithCheck(IkReal((x8456+(((-1.0)*r01*sj6)))),(x8460+x8459+((r01*x8458))),IKFAST_ATAN2_MAGTHRESH);
if(!x8464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8463.value)))+(x8464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8465=IKsin(j4);
IkReal x8466=IKcos(j4);
IkReal x8467=(cj5*cj6);
IkReal x8468=(r11*sj6);
IkReal x8469=(cj6*r20);
IkReal x8470=(cj6*r10);
IkReal x8471=(cj5*sj6);
IkReal x8472=(r21*sj6);
IkReal x8473=(cj6*r00);
IkReal x8474=(r01*sj6);
IkReal x8475=((1.0)*x8466);
IkReal x8476=((1.0)*x8465);
IkReal x8477=(sj5*x8476);
evalcond[0]=((((-1.0)*r21*x8467*x8476))+(((-1.0)*r20*x8471*x8476))+(((-1.0)*x8472*x8475))+(((-1.0)*r22*x8477))+((x8466*x8469)));
evalcond[1]=((((-1.0)*r01*x8467*x8476))+(((-1.0)*r02*x8477))+(((-1.0)*x8474*x8475))+(((-1.0)*r00*x8471*x8476))+((x8466*x8473)));
evalcond[2]=((((-1.0)*r21*x8467*x8475))+(((-1.0)*r22*sj5*x8475))+(((-1.0)*r20*x8471*x8475))+(((-1.0)*x8469*x8476))+((x8465*x8472)));
evalcond[3]=(((x8465*x8468))+(((-1.0)*r12*sj5*x8475))+(((-1.0)*x8470*x8476))+(((-1.0)*r11*x8467*x8475))+(((-1.0)*r10*x8471*x8475)));
evalcond[4]=((1.0)+(((-1.0)*r11*x8467*x8476))+(((-1.0)*r10*x8471*x8476))+(((-1.0)*x8468*x8475))+(((-1.0)*r12*x8477))+((x8466*x8470)));
evalcond[5]=((1.0)+(((-1.0)*x8473*x8476))+(((-1.0)*r01*x8467*x8475))+(((-1.0)*r02*sj5*x8475))+(((-1.0)*r00*x8471*x8475))+((x8465*x8474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8478=((1.0)*sj5);
CheckValue<IkReal> x8479 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x8479.valid){
continue;
}
CheckValue<IkReal> x8480=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x8478))+(((-1.0)*cj6*r21*x8478)))),-1);
if(!x8480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8479.value)+(((1.5707963267949)*(x8480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8481=IKsin(j4);
IkReal x8482=IKcos(j4);
IkReal x8483=(cj5*cj6);
IkReal x8484=(r11*sj6);
IkReal x8485=(cj6*r20);
IkReal x8486=(cj6*r10);
IkReal x8487=(cj5*sj6);
IkReal x8488=(r21*sj6);
IkReal x8489=(cj6*r00);
IkReal x8490=(r01*sj6);
IkReal x8491=((1.0)*x8482);
IkReal x8492=((1.0)*x8481);
IkReal x8493=(sj5*x8492);
evalcond[0]=((((-1.0)*r21*x8483*x8492))+(((-1.0)*r20*x8487*x8492))+((x8482*x8485))+(((-1.0)*r22*x8493))+(((-1.0)*x8488*x8491)));
evalcond[1]=((((-1.0)*r02*x8493))+(((-1.0)*r01*x8483*x8492))+((x8482*x8489))+(((-1.0)*x8490*x8491))+(((-1.0)*r00*x8487*x8492)));
evalcond[2]=((((-1.0)*r21*x8483*x8491))+(((-1.0)*r20*x8487*x8491))+(((-1.0)*r22*sj5*x8491))+((x8481*x8488))+(((-1.0)*x8485*x8492)));
evalcond[3]=((((-1.0)*r12*sj5*x8491))+(((-1.0)*r11*x8483*x8491))+(((-1.0)*x8486*x8492))+((x8481*x8484))+(((-1.0)*r10*x8487*x8491)));
evalcond[4]=((1.0)+(((-1.0)*r11*x8483*x8492))+((x8482*x8486))+(((-1.0)*x8484*x8491))+(((-1.0)*r10*x8487*x8492))+(((-1.0)*r12*x8493)));
evalcond[5]=((1.0)+(((-1.0)*r01*x8483*x8491))+(((-1.0)*r02*sj5*x8491))+((x8481*x8490))+(((-1.0)*r00*x8487*x8491))+(((-1.0)*x8489*x8492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8494 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8494.valid){
continue;
}
CheckValue<IkReal> x8495=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8495.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8494.value)+(((1.5707963267949)*(x8495.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8496=IKsin(j4);
IkReal x8497=IKcos(j4);
IkReal x8498=(cj5*cj6);
IkReal x8499=(r11*sj6);
IkReal x8500=(cj6*r20);
IkReal x8501=(cj6*r10);
IkReal x8502=(cj5*sj6);
IkReal x8503=(r21*sj6);
IkReal x8504=(cj6*r00);
IkReal x8505=(r01*sj6);
IkReal x8506=((1.0)*x8497);
IkReal x8507=((1.0)*x8496);
IkReal x8508=(sj5*x8507);
evalcond[0]=((((-1.0)*x8503*x8506))+(((-1.0)*r20*x8502*x8507))+(((-1.0)*r22*x8508))+(((-1.0)*r21*x8498*x8507))+((x8497*x8500)));
evalcond[1]=((((-1.0)*x8505*x8506))+(((-1.0)*r00*x8502*x8507))+(((-1.0)*r01*x8498*x8507))+(((-1.0)*r02*x8508))+((x8497*x8504)));
evalcond[2]=((((-1.0)*r20*x8502*x8506))+((x8496*x8503))+(((-1.0)*r22*sj5*x8506))+(((-1.0)*r21*x8498*x8506))+(((-1.0)*x8500*x8507)));
evalcond[3]=((((-1.0)*x8501*x8507))+(((-1.0)*r11*x8498*x8506))+(((-1.0)*r10*x8502*x8506))+(((-1.0)*r12*sj5*x8506))+((x8496*x8499)));
evalcond[4]=((1.0)+(((-1.0)*r11*x8498*x8507))+(((-1.0)*r10*x8502*x8507))+(((-1.0)*x8499*x8506))+(((-1.0)*r12*x8508))+((x8497*x8501)));
evalcond[5]=((1.0)+(((-1.0)*r00*x8502*x8506))+((x8496*x8505))+(((-1.0)*r01*x8498*x8506))+(((-1.0)*x8504*x8507))+(((-1.0)*r02*sj5*x8506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8509=((1.0)*cj5);
IkReal x8510=((0.01)*cj5);
IkReal x8511=(cj6*r11);
IkReal x8512=(r20*sj6);
IkReal x8513=((0.01)*sj5);
IkReal x8514=(cj6*r01);
IkReal x8515=((0.37429)*cj5);
IkReal x8516=((0.37429)*sj5);
IkReal x8517=(cj6*r21);
IkReal x8518=(r10*sj5*sj6);
IkReal x8519=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x8512*x8516))+((r22*x8515))+((r22*x8513))+(((-1.0)*pz))+(((-1.0)*x8516*x8517))+((x8510*x8517))+((x8510*x8512)));
evalcond[2]=((0.29542)+((r02*x8513))+((r02*x8515))+((r00*sj6*x8510))+(((-1.0)*x8514*x8516))+(((-1.0)*px))+(((-1.0)*r00*sj6*x8516))+((x8510*x8514)));
evalcond[3]=(((r12*x8515))+((r12*x8513))+(((-1.0)*py))+((x8510*x8511))+(((-1.0)*r10*sj6*x8516))+(((-1.0)*x8511*x8516))+((r10*sj6*x8510)));
evalcond[4]=((1.0)+((sj5*x8517))+((sj5*x8512))+(((-1.0)*r22*x8509)));
evalcond[5]=(x8518+((sj5*x8511))+(((-1.0)*r12*x8509)));
evalcond[6]=(x8519+((sj5*x8514))+(((-1.0)*r02*x8509)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8520=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8520;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x8520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8521=((1.0)*sj6);
IkReal x8522=((((-1.0)*r00*sj5*x8521))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x8522;
j4eval[1]=IKsign(x8522);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x8521))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8523=cj6*cj6;
IkReal x8524=cj5*cj5;
IkReal x8525=r00*r00;
IkReal x8526=r01*r01;
IkReal x8527=r02*r02;
IkReal x8528=(cj6*r00);
IkReal x8529=(cj5*cj6*r01);
IkReal x8530=((2.0)*r02*sj5);
IkReal x8531=((1.0)*x8523);
IkReal x8532=((2.0)*r01*sj6);
IkReal x8533=(cj5*r00*sj6);
IkReal x8534=(x8524*x8525);
IkReal x8535=((((-1.0)*x8534))+(((-1.0)*x8525*x8531))+((x8523*x8534))+((x8524*x8527))+(((-1.0)*x8524*x8526*x8531))+(((-1.0)*x8526))+(((-1.0)*x8527))+((x8528*x8532))+(((-1.0)*x8530*x8533))+(((-1.0)*x8529*x8530))+((x8523*x8526))+(((-1.0)*x8524*x8528*x8532)));
j4eval[0]=x8535;
j4eval[1]=((IKabs((x8529+x8533+((r02*sj5)))))+(IKabs(((((-1.0)*r01*sj6))+x8528))));
j4eval[2]=IKsign(x8535);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8536=cj6*cj6;
IkReal x8537=cj5*cj5;
IkReal x8538=r00*r00;
IkReal x8539=r01*r01;
IkReal x8540=r02*r02;
IkReal x8541=(cj6*r00);
IkReal x8542=(cj5*cj6*r01);
IkReal x8543=((2.0)*r02*sj5);
IkReal x8544=((1.0)*x8536);
IkReal x8545=((2.0)*r01*sj6);
IkReal x8546=(cj5*r00*sj6);
IkReal x8547=(x8537*x8538);
CheckValue<IkReal> x8548 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8541)),(x8546+x8542+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8548.valid){
continue;
}
CheckValue<IkReal> x8549=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8539))+((x8536*x8539))+((x8536*x8547))+(((-1.0)*x8543*x8546))+((x8537*x8540))+(((-1.0)*x8542*x8543))+(((-1.0)*x8537*x8539*x8544))+((x8541*x8545))+(((-1.0)*x8538*x8544))+(((-1.0)*x8537*x8541*x8545))+(((-1.0)*x8540))+(((-1.0)*x8547)))),-1);
if(!x8549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8548.value)+(((1.5707963267949)*(x8549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8550=IKsin(j4);
IkReal x8551=IKcos(j4);
IkReal x8552=(cj5*cj6);
IkReal x8553=(r11*sj6);
IkReal x8554=(cj6*r20);
IkReal x8555=(cj6*r10);
IkReal x8556=(cj5*sj6);
IkReal x8557=(r21*sj6);
IkReal x8558=(cj6*r00);
IkReal x8559=(r01*sj6);
IkReal x8560=((1.0)*x8551);
IkReal x8561=((1.0)*x8550);
IkReal x8562=(sj5*x8561);
evalcond[0]=(((x8551*x8554))+(((-1.0)*r21*x8552*x8561))+(((-1.0)*r22*x8562))+(((-1.0)*x8557*x8560))+(((-1.0)*r20*x8556*x8561)));
evalcond[1]=(((x8551*x8558))+(((-1.0)*x8559*x8560))+(((-1.0)*r00*x8556*x8561))+(((-1.0)*r01*x8552*x8561))+(((-1.0)*r02*x8562)));
evalcond[2]=(((x8550*x8557))+(((-1.0)*r21*x8552*x8560))+(((-1.0)*x8554*x8561))+(((-1.0)*r20*x8556*x8560))+(((-1.0)*r22*sj5*x8560)));
evalcond[3]=(((x8550*x8553))+(((-1.0)*x8555*x8561))+(((-1.0)*r11*x8552*x8560))+(((-1.0)*r12*sj5*x8560))+(((-1.0)*r10*x8556*x8560)));
evalcond[4]=((-1.0)+((x8551*x8555))+(((-1.0)*r12*x8562))+(((-1.0)*r11*x8552*x8561))+(((-1.0)*x8553*x8560))+(((-1.0)*r10*x8556*x8561)));
evalcond[5]=((-1.0)+((x8550*x8559))+(((-1.0)*x8558*x8561))+(((-1.0)*r02*sj5*x8560))+(((-1.0)*r00*x8556*x8560))+(((-1.0)*r01*x8552*x8560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8563=((1.0)*sj6);
CheckValue<IkReal> x8564=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x8563))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x8564.valid){
continue;
}
CheckValue<IkReal> x8565 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8563))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8564.value)))+(x8565.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8566=IKsin(j4);
IkReal x8567=IKcos(j4);
IkReal x8568=(cj5*cj6);
IkReal x8569=(r11*sj6);
IkReal x8570=(cj6*r20);
IkReal x8571=(cj6*r10);
IkReal x8572=(cj5*sj6);
IkReal x8573=(r21*sj6);
IkReal x8574=(cj6*r00);
IkReal x8575=(r01*sj6);
IkReal x8576=((1.0)*x8567);
IkReal x8577=((1.0)*x8566);
IkReal x8578=(sj5*x8577);
evalcond[0]=((((-1.0)*x8573*x8576))+((x8567*x8570))+(((-1.0)*r20*x8572*x8577))+(((-1.0)*r21*x8568*x8577))+(((-1.0)*r22*x8578)));
evalcond[1]=((((-1.0)*x8575*x8576))+(((-1.0)*r01*x8568*x8577))+(((-1.0)*r00*x8572*x8577))+(((-1.0)*r02*x8578))+((x8567*x8574)));
evalcond[2]=(((x8566*x8573))+(((-1.0)*r22*sj5*x8576))+(((-1.0)*x8570*x8577))+(((-1.0)*r20*x8572*x8576))+(((-1.0)*r21*x8568*x8576)));
evalcond[3]=((((-1.0)*r12*sj5*x8576))+(((-1.0)*x8571*x8577))+(((-1.0)*r11*x8568*x8576))+((x8566*x8569))+(((-1.0)*r10*x8572*x8576)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x8568*x8577))+(((-1.0)*x8569*x8576))+((x8567*x8571))+(((-1.0)*r12*x8578))+(((-1.0)*r10*x8572*x8577)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x8568*x8576))+((x8566*x8575))+(((-1.0)*r00*x8572*x8576))+(((-1.0)*x8574*x8577))+(((-1.0)*r02*sj5*x8576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8579=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8579.valid){
continue;
}
CheckValue<IkReal> x8580 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x8580.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8579.value)))+(x8580.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8581=IKsin(j4);
IkReal x8582=IKcos(j4);
IkReal x8583=(cj5*cj6);
IkReal x8584=(r11*sj6);
IkReal x8585=(cj6*r20);
IkReal x8586=(cj6*r10);
IkReal x8587=(cj5*sj6);
IkReal x8588=(r21*sj6);
IkReal x8589=(cj6*r00);
IkReal x8590=(r01*sj6);
IkReal x8591=((1.0)*x8582);
IkReal x8592=((1.0)*x8581);
IkReal x8593=(sj5*x8592);
evalcond[0]=((((-1.0)*r22*x8593))+(((-1.0)*r21*x8583*x8592))+(((-1.0)*x8588*x8591))+((x8582*x8585))+(((-1.0)*r20*x8587*x8592)));
evalcond[1]=((((-1.0)*r02*x8593))+(((-1.0)*r00*x8587*x8592))+(((-1.0)*x8590*x8591))+(((-1.0)*r01*x8583*x8592))+((x8582*x8589)));
evalcond[2]=((((-1.0)*r22*sj5*x8591))+(((-1.0)*r21*x8583*x8591))+(((-1.0)*x8585*x8592))+((x8581*x8588))+(((-1.0)*r20*x8587*x8591)));
evalcond[3]=((((-1.0)*r12*sj5*x8591))+(((-1.0)*x8586*x8592))+(((-1.0)*r11*x8583*x8591))+(((-1.0)*r10*x8587*x8591))+((x8581*x8584)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x8583*x8592))+(((-1.0)*r12*x8593))+(((-1.0)*r10*x8587*x8592))+((x8582*x8586))+(((-1.0)*x8584*x8591)));
evalcond[5]=((-1.0)+(((-1.0)*r02*sj5*x8591))+(((-1.0)*x8589*x8592))+(((-1.0)*r00*x8587*x8591))+((x8581*x8590))+(((-1.0)*r01*x8583*x8591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8594=((1.0)*cj5);
IkReal x8595=((0.01)*cj5);
IkReal x8596=(cj6*r11);
IkReal x8597=(r20*sj6);
IkReal x8598=((0.01)*sj5);
IkReal x8599=(cj6*r01);
IkReal x8600=((0.37429)*cj5);
IkReal x8601=((0.37429)*sj5);
IkReal x8602=(cj6*r21);
IkReal x8603=(r10*sj5*sj6);
IkReal x8604=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x8597*x8601))+((x8595*x8597))+(((-1.0)*x8601*x8602))+((r22*x8600))+(((-1.0)*pz))+((x8595*x8602))+((r22*x8598)));
evalcond[2]=(((x8595*x8599))+(((-1.0)*px))+((r02*x8598))+(((-1.0)*r00*sj6*x8601))+((r02*x8600))+(((-1.0)*x8599*x8601))+((r00*sj6*x8595)));
evalcond[3]=((-0.29542)+(((-1.0)*r10*sj6*x8601))+((x8595*x8596))+((r12*x8600))+((r10*sj6*x8595))+(((-1.0)*py))+((r12*x8598))+(((-1.0)*x8596*x8601)));
evalcond[4]=((1.0)+(((-1.0)*r22*x8594))+((sj5*x8602))+((sj5*x8597)));
evalcond[5]=(x8603+(((-1.0)*r12*x8594))+((sj5*x8596)));
evalcond[6]=(x8604+(((-1.0)*r02*x8594))+((sj5*x8599)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8605=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x8605;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8605);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8606=((1.0)*sj5);
IkReal x8607=((((-1.0)*cj6*r21*x8606))+((cj5*r22))+(((-1.0)*r20*sj6*x8606)));
j4eval[0]=x8607;
j4eval[1]=IKsign(x8607);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8608=r11*r11;
IkReal x8609=cj5*cj5;
IkReal x8610=cj6*cj6;
IkReal x8611=r10*r10;
IkReal x8612=r12*r12;
IkReal x8613=(r12*sj5);
IkReal x8614=(cj6*r10);
IkReal x8615=((1.0)*x8610);
IkReal x8616=(cj5*cj6*r11);
IkReal x8617=(cj5*r10*sj6);
IkReal x8618=((2.0)*r11*sj6);
IkReal x8619=(x8609*x8611);
IkReal x8620=((((-1.0)*x8614*x8618))+x8608+x8612+x8619+(((-1.0)*x8608*x8615))+((x8608*x8609*x8610))+(((2.0)*x8613*x8616))+(((2.0)*x8613*x8617))+((x8609*x8614*x8618))+(((-1.0)*x8615*x8619))+((x8610*x8611))+(((-1.0)*x8609*x8612)));
j4eval[0]=x8620;
j4eval[1]=IKsign(x8620);
j4eval[2]=((IKabs((x8614+(((-1.0)*r11*sj6)))))+(IKabs((x8617+x8616+x8613))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8621=r11*r11;
IkReal x8622=cj5*cj5;
IkReal x8623=cj6*cj6;
IkReal x8624=r10*r10;
IkReal x8625=r12*r12;
IkReal x8626=(r10*sj6);
IkReal x8627=(r12*sj5);
IkReal x8628=((1.0)*x8623);
IkReal x8629=(cj5*cj6*r11);
IkReal x8630=((2.0)*cj6*r11);
IkReal x8631=(x8622*x8624);
CheckValue<IkReal> x8632=IKPowWithIntegerCheck(IKsign(((((2.0)*x8627*x8629))+((x8621*x8622*x8623))+(((2.0)*cj5*x8626*x8627))+(((-1.0)*x8628*x8631))+x8625+x8621+x8631+((x8623*x8624))+(((-1.0)*x8626*x8630))+(((-1.0)*x8622*x8625))+(((-1.0)*x8621*x8628))+((x8622*x8626*x8630)))),-1);
if(!x8632.valid){
continue;
}
CheckValue<IkReal> x8633 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x8629+x8627+((cj5*x8626))),IKFAST_ATAN2_MAGTHRESH);
if(!x8633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8632.value)))+(x8633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8634=IKsin(j4);
IkReal x8635=IKcos(j4);
IkReal x8636=(cj5*cj6);
IkReal x8637=(r11*sj6);
IkReal x8638=(cj6*r20);
IkReal x8639=(cj6*r10);
IkReal x8640=(cj5*sj6);
IkReal x8641=(r01*sj6);
IkReal x8642=(r21*sj6);
IkReal x8643=(cj6*r00);
IkReal x8644=((1.0)*x8635);
IkReal x8645=((1.0)*x8634);
IkReal x8646=(sj5*x8645);
evalcond[0]=((((-1.0)*r21*x8636*x8645))+(((-1.0)*x8642*x8644))+(((-1.0)*r22*x8646))+(((-1.0)*r20*x8640*x8645))+((x8635*x8638)));
evalcond[1]=((((-1.0)*r10*x8640*x8645))+(((-1.0)*x8637*x8644))+(((-1.0)*r11*x8636*x8645))+((x8635*x8639))+(((-1.0)*r12*x8646)));
evalcond[2]=((((-1.0)*r21*x8636*x8644))+(((-1.0)*x8638*x8645))+((x8634*x8642))+(((-1.0)*r20*x8640*x8644))+(((-1.0)*r22*sj5*x8644)));
evalcond[3]=((((-1.0)*x8643*x8645))+((x8634*x8641))+(((-1.0)*r02*sj5*x8644))+(((-1.0)*r00*x8640*x8644))+(((-1.0)*r01*x8636*x8644)));
evalcond[4]=((-1.0)+((x8635*x8643))+(((-1.0)*r02*x8646))+(((-1.0)*r00*x8640*x8645))+(((-1.0)*x8641*x8644))+(((-1.0)*r01*x8636*x8645)));
evalcond[5]=((1.0)+(((-1.0)*x8639*x8645))+(((-1.0)*r10*x8640*x8644))+((x8634*x8637))+(((-1.0)*r11*x8636*x8644))+(((-1.0)*r12*sj5*x8644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8647=((1.0)*sj5);
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
CheckValue<IkReal> x8649=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x8647))+(((-1.0)*cj6*r21*x8647)))),-1);
if(!x8649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8648.value)+(((1.5707963267949)*(x8649.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8650=IKsin(j4);
IkReal x8651=IKcos(j4);
IkReal x8652=(cj5*cj6);
IkReal x8653=(r11*sj6);
IkReal x8654=(cj6*r20);
IkReal x8655=(cj6*r10);
IkReal x8656=(cj5*sj6);
IkReal x8657=(r01*sj6);
IkReal x8658=(r21*sj6);
IkReal x8659=(cj6*r00);
IkReal x8660=((1.0)*x8651);
IkReal x8661=((1.0)*x8650);
IkReal x8662=(sj5*x8661);
evalcond[0]=((((-1.0)*x8658*x8660))+(((-1.0)*r22*x8662))+((x8651*x8654))+(((-1.0)*r21*x8652*x8661))+(((-1.0)*r20*x8656*x8661)));
evalcond[1]=((((-1.0)*r11*x8652*x8661))+(((-1.0)*r12*x8662))+(((-1.0)*x8653*x8660))+(((-1.0)*r10*x8656*x8661))+((x8651*x8655)));
evalcond[2]=((((-1.0)*r22*sj5*x8660))+(((-1.0)*x8654*x8661))+((x8650*x8658))+(((-1.0)*r21*x8652*x8660))+(((-1.0)*r20*x8656*x8660)));
evalcond[3]=((((-1.0)*r00*x8656*x8660))+(((-1.0)*x8659*x8661))+(((-1.0)*r01*x8652*x8660))+((x8650*x8657))+(((-1.0)*r02*sj5*x8660)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x8656*x8661))+(((-1.0)*x8657*x8660))+(((-1.0)*r02*x8662))+(((-1.0)*r01*x8652*x8661))+((x8651*x8659)));
evalcond[5]=((1.0)+(((-1.0)*r11*x8652*x8660))+(((-1.0)*r10*x8656*x8660))+(((-1.0)*r12*sj5*x8660))+((x8650*x8653))+(((-1.0)*x8655*x8661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8663 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8663.valid){
continue;
}
CheckValue<IkReal> x8664=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x8664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8663.value)+(((1.5707963267949)*(x8664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8665=IKsin(j4);
IkReal x8666=IKcos(j4);
IkReal x8667=(cj5*cj6);
IkReal x8668=(r11*sj6);
IkReal x8669=(cj6*r20);
IkReal x8670=(cj6*r10);
IkReal x8671=(cj5*sj6);
IkReal x8672=(r01*sj6);
IkReal x8673=(r21*sj6);
IkReal x8674=(cj6*r00);
IkReal x8675=((1.0)*x8666);
IkReal x8676=((1.0)*x8665);
IkReal x8677=(sj5*x8676);
evalcond[0]=((((-1.0)*r22*x8677))+(((-1.0)*r21*x8667*x8676))+((x8666*x8669))+(((-1.0)*r20*x8671*x8676))+(((-1.0)*x8673*x8675)));
evalcond[1]=((((-1.0)*r12*x8677))+(((-1.0)*x8668*x8675))+(((-1.0)*r10*x8671*x8676))+((x8666*x8670))+(((-1.0)*r11*x8667*x8676)));
evalcond[2]=((((-1.0)*r22*sj5*x8675))+(((-1.0)*x8669*x8676))+(((-1.0)*r21*x8667*x8675))+(((-1.0)*r20*x8671*x8675))+((x8665*x8673)));
evalcond[3]=((((-1.0)*r00*x8671*x8675))+(((-1.0)*x8674*x8676))+(((-1.0)*r01*x8667*x8675))+(((-1.0)*r02*sj5*x8675))+((x8665*x8672)));
evalcond[4]=((-1.0)+(((-1.0)*x8672*x8675))+(((-1.0)*r00*x8671*x8676))+(((-1.0)*r02*x8677))+(((-1.0)*r01*x8667*x8676))+((x8666*x8674)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x8675))+(((-1.0)*r10*x8671*x8675))+(((-1.0)*x8670*x8676))+((x8665*x8668))+(((-1.0)*r11*x8667*x8675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8678=((1.0)*cj5);
IkReal x8679=((0.01)*cj5);
IkReal x8680=(cj6*r11);
IkReal x8681=(r20*sj6);
IkReal x8682=((0.01)*sj5);
IkReal x8683=(cj6*r01);
IkReal x8684=((0.37429)*cj5);
IkReal x8685=((0.37429)*sj5);
IkReal x8686=(cj6*r21);
IkReal x8687=(r10*sj5*sj6);
IkReal x8688=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((x8679*x8681))+((x8679*x8686))+(((-1.0)*x8681*x8685))+((r22*x8682))+((r22*x8684))+(((-1.0)*pz))+(((-1.0)*x8685*x8686)));
evalcond[2]=((((-1.0)*x8683*x8685))+((x8679*x8683))+(((-1.0)*px))+(((-1.0)*r00*sj6*x8685))+((r02*x8682))+((r02*x8684))+((r00*sj6*x8679)));
evalcond[3]=((0.29542)+((x8679*x8680))+((r12*x8684))+((r12*x8682))+(((-1.0)*py))+(((-1.0)*x8680*x8685))+((r10*sj6*x8679))+(((-1.0)*r10*sj6*x8685)));
evalcond[4]=((1.0)+(((-1.0)*r22*x8678))+((sj5*x8686))+((sj5*x8681)));
evalcond[5]=(x8687+((sj5*x8680))+(((-1.0)*r12*x8678)));
evalcond[6]=(x8688+((sj5*x8683))+(((-1.0)*r02*x8678)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8689=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8689;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x8689);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8690=((1.0)*sj6);
IkReal x8691=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x8690)));
j4eval[0]=x8691;
j4eval[1]=IKsign(x8691);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*x8690))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8692=cj6*cj6;
IkReal x8693=cj5*cj5;
IkReal x8694=r10*r10;
IkReal x8695=r11*r11;
IkReal x8696=r12*r12;
IkReal x8697=(r10*sj6);
IkReal x8698=(r12*sj5);
IkReal x8699=((2.0)*cj6*r11);
IkReal x8700=((1.0)*x8694);
IkReal x8701=(x8692*x8695);
IkReal x8702=((((-1.0)*x8692*x8700))+((x8692*x8693*x8694))+x8701+(((-1.0)*x8693*x8701))+(((-1.0)*x8695))+(((-1.0)*x8696))+((x8697*x8699))+(((-1.0)*cj5*x8698*x8699))+((x8693*x8696))+(((-2.0)*cj5*x8697*x8698))+(((-1.0)*x8693*x8697*x8699))+(((-1.0)*x8693*x8700)));
j4eval[0]=x8702;
j4eval[1]=((IKabs(((((-1.0)*r11*sj6))+((cj6*r10)))))+(IKabs((x8698+((cj5*cj6*r11))+((cj5*x8697))))));
j4eval[2]=IKsign(x8702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8703=cj6*cj6;
IkReal x8704=cj5*cj5;
IkReal x8705=r10*r10;
IkReal x8706=r11*r11;
IkReal x8707=r12*r12;
IkReal x8708=(r10*sj6);
IkReal x8709=(r12*sj5);
IkReal x8710=((2.0)*cj6*r11);
IkReal x8711=(x8703*x8706);
IkReal x8712=(x8704*x8705);
CheckValue<IkReal> x8713=IKPowWithIntegerCheck(IKsign((((x8704*x8707))+x8711+(((-2.0)*cj5*x8708*x8709))+(((-1.0)*x8703*x8705))+(((-1.0)*x8707))+(((-1.0)*x8706))+((x8703*x8712))+(((-1.0)*cj5*x8709*x8710))+((x8708*x8710))+(((-1.0)*x8712))+(((-1.0)*x8704*x8711))+(((-1.0)*x8704*x8708*x8710)))),-1);
if(!x8713.valid){
continue;
}
CheckValue<IkReal> x8714 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*x8708))+x8709+((cj5*cj6*r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x8714.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8713.value)))+(x8714.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8715=IKsin(j4);
IkReal x8716=IKcos(j4);
IkReal x8717=(cj5*cj6);
IkReal x8718=(r11*sj6);
IkReal x8719=(cj6*r20);
IkReal x8720=(cj6*r10);
IkReal x8721=(cj5*sj6);
IkReal x8722=(r01*sj6);
IkReal x8723=(r21*sj6);
IkReal x8724=(cj6*r00);
IkReal x8725=((1.0)*x8716);
IkReal x8726=((1.0)*x8715);
IkReal x8727=(sj5*x8726);
evalcond[0]=((((-1.0)*x8723*x8725))+(((-1.0)*r21*x8717*x8726))+(((-1.0)*r20*x8721*x8726))+(((-1.0)*r22*x8727))+((x8716*x8719)));
evalcond[1]=((((-1.0)*r10*x8721*x8726))+(((-1.0)*r11*x8717*x8726))+((x8716*x8720))+(((-1.0)*x8718*x8725))+(((-1.0)*r12*x8727)));
evalcond[2]=((((-1.0)*r22*sj5*x8725))+(((-1.0)*r21*x8717*x8725))+(((-1.0)*x8719*x8726))+(((-1.0)*r20*x8721*x8725))+((x8715*x8723)));
evalcond[3]=((((-1.0)*r00*x8721*x8725))+(((-1.0)*x8724*x8726))+(((-1.0)*r01*x8717*x8725))+(((-1.0)*r02*sj5*x8725))+((x8715*x8722)));
evalcond[4]=((1.0)+((x8716*x8724))+(((-1.0)*r00*x8721*x8726))+(((-1.0)*r01*x8717*x8726))+(((-1.0)*r02*x8727))+(((-1.0)*x8722*x8725)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x8721*x8725))+(((-1.0)*r11*x8717*x8725))+(((-1.0)*r12*sj5*x8725))+(((-1.0)*x8720*x8726))+((x8715*x8718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8728=((1.0)*sj6);
CheckValue<IkReal> x8729 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8728))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8729.valid){
continue;
}
CheckValue<IkReal> x8730=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x8728)))),-1);
if(!x8730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8729.value)+(((1.5707963267949)*(x8730.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8731=IKsin(j4);
IkReal x8732=IKcos(j4);
IkReal x8733=(cj5*cj6);
IkReal x8734=(r11*sj6);
IkReal x8735=(cj6*r20);
IkReal x8736=(cj6*r10);
IkReal x8737=(cj5*sj6);
IkReal x8738=(r01*sj6);
IkReal x8739=(r21*sj6);
IkReal x8740=(cj6*r00);
IkReal x8741=((1.0)*x8732);
IkReal x8742=((1.0)*x8731);
IkReal x8743=(sj5*x8742);
evalcond[0]=(((x8732*x8735))+(((-1.0)*x8739*x8741))+(((-1.0)*r22*x8743))+(((-1.0)*r21*x8733*x8742))+(((-1.0)*r20*x8737*x8742)));
evalcond[1]=(((x8732*x8736))+(((-1.0)*r12*x8743))+(((-1.0)*r10*x8737*x8742))+(((-1.0)*r11*x8733*x8742))+(((-1.0)*x8734*x8741)));
evalcond[2]=(((x8731*x8739))+(((-1.0)*r21*x8733*x8741))+(((-1.0)*r22*sj5*x8741))+(((-1.0)*x8735*x8742))+(((-1.0)*r20*x8737*x8741)));
evalcond[3]=((((-1.0)*r01*x8733*x8741))+(((-1.0)*x8740*x8742))+(((-1.0)*r00*x8737*x8741))+((x8731*x8738))+(((-1.0)*r02*sj5*x8741)));
evalcond[4]=((1.0)+(((-1.0)*r01*x8733*x8742))+(((-1.0)*r00*x8737*x8742))+(((-1.0)*x8738*x8741))+((x8732*x8740))+(((-1.0)*r02*x8743)));
evalcond[5]=((-1.0)+(((-1.0)*x8736*x8742))+((x8731*x8734))+(((-1.0)*r12*sj5*x8741))+(((-1.0)*r10*x8737*x8741))+(((-1.0)*r11*x8733*x8741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8744=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8744.valid){
continue;
}
CheckValue<IkReal> x8745 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x8745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8744.value)))+(x8745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8746=IKsin(j4);
IkReal x8747=IKcos(j4);
IkReal x8748=(cj5*cj6);
IkReal x8749=(r11*sj6);
IkReal x8750=(cj6*r20);
IkReal x8751=(cj6*r10);
IkReal x8752=(cj5*sj6);
IkReal x8753=(r01*sj6);
IkReal x8754=(r21*sj6);
IkReal x8755=(cj6*r00);
IkReal x8756=((1.0)*x8747);
IkReal x8757=((1.0)*x8746);
IkReal x8758=(sj5*x8757);
evalcond[0]=((((-1.0)*x8754*x8756))+((x8747*x8750))+(((-1.0)*r22*x8758))+(((-1.0)*r21*x8748*x8757))+(((-1.0)*r20*x8752*x8757)));
evalcond[1]=(((x8747*x8751))+(((-1.0)*r10*x8752*x8757))+(((-1.0)*r12*x8758))+(((-1.0)*x8749*x8756))+(((-1.0)*r11*x8748*x8757)));
evalcond[2]=((((-1.0)*r21*x8748*x8756))+(((-1.0)*r20*x8752*x8756))+(((-1.0)*x8750*x8757))+(((-1.0)*r22*sj5*x8756))+((x8746*x8754)));
evalcond[3]=((((-1.0)*x8755*x8757))+(((-1.0)*r01*x8748*x8756))+(((-1.0)*r02*sj5*x8756))+(((-1.0)*r00*x8752*x8756))+((x8746*x8753)));
evalcond[4]=((1.0)+((x8747*x8755))+(((-1.0)*r01*x8748*x8757))+(((-1.0)*r02*x8758))+(((-1.0)*x8753*x8756))+(((-1.0)*r00*x8752*x8757)));
evalcond[5]=((-1.0)+(((-1.0)*x8751*x8757))+(((-1.0)*r12*sj5*x8756))+(((-1.0)*r10*x8752*x8756))+((x8746*x8749))+(((-1.0)*r11*x8748*x8756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8759=cj6*cj6;
IkReal x8760=cj5*cj5;
IkReal x8761=((1.0)*r11);
IkReal x8762=(cj5*sj0);
IkReal x8763=(cj6*r21);
IkReal x8764=(r22*sj5);
IkReal x8765=(r20*sj6);
IkReal x8766=(r12*r22);
IkReal x8767=((1.0)*sj6);
IkReal x8768=(r21*x8759);
IkReal x8769=(r10*x8760);
IkReal x8770=(r11*x8760);
IkReal x8771=(r20*x8759);
IkReal x8772=(cj5*r12*sj5);
CheckValue<IkReal> x8773 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*x8767)))),(((sj0*x8764))+((x8762*x8763))+((x8762*x8765))),IKFAST_ATAN2_MAGTHRESH);
if(!x8773.valid){
continue;
}
CheckValue<IkReal> x8774=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj6*x8764))+((sj6*x8763*x8769))+((x8765*x8772))+(((-1.0)*x8769*x8771))+x8766+((r11*r21))+(((-1.0)*r10*x8763*x8767))+(((-1.0)*x8761*x8768))+((cj5*cj6*r11*x8764))+((r20*x8769))+((r10*x8771))+((cj6*x8765*x8770))+((x8768*x8770))+(((-1.0)*x8760*x8766))+((x8763*x8772))+(((-1.0)*cj6*x8761*x8765)))),-1);
if(!x8774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8773.value)+(((1.5707963267949)*(x8774.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8775=IKsin(j4);
IkReal x8776=IKcos(j4);
IkReal x8777=(cj5*cj6);
IkReal x8778=(r11*sj6);
IkReal x8779=(cj6*r20);
IkReal x8780=(cj5*sj6);
IkReal x8781=(cj6*r10);
IkReal x8782=(r01*sj6);
IkReal x8783=(r21*sj6);
IkReal x8784=(cj6*r00);
IkReal x8785=((1.0)*x8776);
IkReal x8786=((1.0)*x8775);
IkReal x8787=(sj5*x8786);
evalcond[0]=((((-1.0)*r21*x8777*x8786))+(((-1.0)*x8783*x8785))+((x8776*x8779))+(((-1.0)*r22*x8787))+(((-1.0)*r20*x8780*x8786)));
evalcond[1]=((((-1.0)*r21*x8777*x8785))+(((-1.0)*r22*sj5*x8785))+((x8775*x8783))+(((-1.0)*x8779*x8786))+(((-1.0)*r20*x8780*x8785)));
evalcond[2]=((((-1.0)*r10*x8780*x8786))+cj0+(((-1.0)*x8778*x8785))+((x8776*x8781))+(((-1.0)*r11*x8777*x8786))+(((-1.0)*r12*x8787)));
evalcond[3]=((((-1.0)*r00*x8780*x8785))+cj0+((x8775*x8782))+(((-1.0)*x8784*x8786))+(((-1.0)*r02*sj5*x8785))+(((-1.0)*r01*x8777*x8785)));
evalcond[4]=(sj0+(((-1.0)*r10*x8780*x8785))+(((-1.0)*r12*sj5*x8785))+(((-1.0)*x8781*x8786))+(((-1.0)*r11*x8777*x8785))+((x8775*x8778)));
evalcond[5]=((((-1.0)*r00*x8780*x8786))+(((-1.0)*sj0))+((x8776*x8784))+(((-1.0)*r02*x8787))+(((-1.0)*x8782*x8785))+(((-1.0)*r01*x8777*x8786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8788=cj5*cj5;
IkReal x8789=cj6*cj6;
IkReal x8790=(r22*sj5);
IkReal x8791=(cj6*r21);
IkReal x8792=(r20*sj6);
IkReal x8793=((1.0)*sj6);
IkReal x8794=(cj0*cj5);
IkReal x8795=(r02*r22);
IkReal x8796=(cj6*r01);
IkReal x8797=(r00*sj6);
IkReal x8798=(cj5*r02*sj5);
IkReal x8799=(r01*x8788);
IkReal x8800=(r21*x8789);
IkReal x8801=(r00*r20*x8788);
CheckValue<IkReal> x8802 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x8793)))),(((cj0*x8790))+((x8792*x8794))+((x8791*x8794))),IKFAST_ATAN2_MAGTHRESH);
if(!x8802.valid){
continue;
}
CheckValue<IkReal> x8803=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8800))+x8795+x8801+((x8799*x8800))+(((-1.0)*x8789*x8801))+((r01*r21))+((x8792*x8798))+((x8791*x8798))+((cj5*x8790*x8796))+((cj5*x8790*x8797))+((r00*r20*x8789))+((x8788*x8792*x8796))+(((-1.0)*x8788*x8795))+(((-1.0)*r00*x8791*x8793))+((x8788*x8791*x8797))+(((-1.0)*x8792*x8796)))),-1);
if(!x8803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8802.value)+(((1.5707963267949)*(x8803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8804=IKsin(j4);
IkReal x8805=IKcos(j4);
IkReal x8806=(cj5*cj6);
IkReal x8807=(r11*sj6);
IkReal x8808=(cj6*r20);
IkReal x8809=(cj5*sj6);
IkReal x8810=(cj6*r10);
IkReal x8811=(r01*sj6);
IkReal x8812=(r21*sj6);
IkReal x8813=(cj6*r00);
IkReal x8814=((1.0)*x8805);
IkReal x8815=((1.0)*x8804);
IkReal x8816=(sj5*x8815);
evalcond[0]=((((-1.0)*r22*x8816))+(((-1.0)*r21*x8806*x8815))+(((-1.0)*r20*x8809*x8815))+(((-1.0)*x8812*x8814))+((x8805*x8808)));
evalcond[1]=((((-1.0)*r21*x8806*x8814))+(((-1.0)*r20*x8809*x8814))+(((-1.0)*r22*sj5*x8814))+(((-1.0)*x8808*x8815))+((x8804*x8812)));
evalcond[2]=((((-1.0)*r12*x8816))+(((-1.0)*x8807*x8814))+cj0+(((-1.0)*r10*x8809*x8815))+(((-1.0)*r11*x8806*x8815))+((x8805*x8810)));
evalcond[3]=((((-1.0)*r00*x8809*x8814))+cj0+(((-1.0)*r01*x8806*x8814))+(((-1.0)*x8813*x8815))+((x8804*x8811))+(((-1.0)*r02*sj5*x8814)));
evalcond[4]=(sj0+(((-1.0)*r10*x8809*x8814))+(((-1.0)*r12*sj5*x8814))+(((-1.0)*r11*x8806*x8814))+(((-1.0)*x8810*x8815))+((x8804*x8807)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r00*x8809*x8815))+(((-1.0)*r02*x8816))+(((-1.0)*r01*x8806*x8815))+(((-1.0)*x8811*x8814))+((x8805*x8813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8817=(cj0*sj6);
IkReal x8818=(cj0*cj6);
CheckValue<IkReal> x8819=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x8819.valid){
continue;
}
CheckValue<IkReal> x8820 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x8817))+((r20*x8818)))),(((cj5*r21*x8818))+((cj0*r22*sj5))+((cj5*r20*x8817))),IKFAST_ATAN2_MAGTHRESH);
if(!x8820.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8819.value)))+(x8820.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8821=IKsin(j4);
IkReal x8822=IKcos(j4);
IkReal x8823=(cj5*cj6);
IkReal x8824=(r11*sj6);
IkReal x8825=(cj6*r20);
IkReal x8826=(cj5*sj6);
IkReal x8827=(cj6*r10);
IkReal x8828=(r01*sj6);
IkReal x8829=(r21*sj6);
IkReal x8830=(cj6*r00);
IkReal x8831=((1.0)*x8822);
IkReal x8832=((1.0)*x8821);
IkReal x8833=(sj5*x8832);
evalcond[0]=((((-1.0)*r21*x8823*x8832))+(((-1.0)*r20*x8826*x8832))+(((-1.0)*x8829*x8831))+((x8822*x8825))+(((-1.0)*r22*x8833)));
evalcond[1]=((((-1.0)*r21*x8823*x8831))+(((-1.0)*r20*x8826*x8831))+(((-1.0)*r22*sj5*x8831))+(((-1.0)*x8825*x8832))+((x8821*x8829)));
evalcond[2]=((((-1.0)*x8824*x8831))+cj0+(((-1.0)*r10*x8826*x8832))+((x8822*x8827))+(((-1.0)*r11*x8823*x8832))+(((-1.0)*r12*x8833)));
evalcond[3]=(cj0+(((-1.0)*r00*x8826*x8831))+(((-1.0)*x8830*x8832))+(((-1.0)*r01*x8823*x8831))+(((-1.0)*r02*sj5*x8831))+((x8821*x8828)));
evalcond[4]=(sj0+(((-1.0)*x8827*x8832))+(((-1.0)*r10*x8826*x8831))+(((-1.0)*r12*sj5*x8831))+(((-1.0)*r11*x8823*x8831))+((x8821*x8824)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r00*x8826*x8832))+((x8822*x8830))+(((-1.0)*r02*x8833))+(((-1.0)*r01*x8823*x8832))+(((-1.0)*x8828*x8831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8834=((0.01)*cj5);
IkReal x8835=(cj6*r11);
IkReal x8836=((1.0)*cj5);
IkReal x8837=(r20*sj6);
IkReal x8838=((0.01)*sj5);
IkReal x8839=(cj6*r01);
IkReal x8840=((0.37429)*cj5);
IkReal x8841=((0.37429)*sj5);
IkReal x8842=(cj6*r21);
IkReal x8843=(r10*sj5*sj6);
IkReal x8844=(r00*sj5*sj6);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.069)+((r22*x8840))+(((-1.0)*x8841*x8842))+(((-1.0)*pz))+((x8834*x8842))+((x8834*x8837))+(((-1.0)*x8837*x8841))+((r22*x8838)));
evalcond[2]=(((r02*x8840))+((r02*x8838))+(((-0.29542)*cj0))+(((-1.0)*px))+(((-1.0)*x8839*x8841))+((x8834*x8839))+((r00*sj6*x8834))+(((-1.0)*r00*sj6*x8841)));
evalcond[3]=((((-1.0)*x8835*x8841))+((r10*sj6*x8834))+((r12*x8840))+((r12*x8838))+(((-0.29542)*sj0))+(((-1.0)*py))+(((-1.0)*r10*sj6*x8841))+((x8834*x8835)));
evalcond[4]=((-1.0)+((sj5*x8842))+((sj5*x8837))+(((-1.0)*r22*x8836)));
evalcond[5]=(x8843+((sj5*x8835))+(((-1.0)*r12*x8836)));
evalcond[6]=(x8844+(((-1.0)*r02*x8836))+((sj5*x8839)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8845=(r20*sj0);
IkReal x8846=((1.0)*sj5);
IkReal x8847=(r21*sj0);
IkReal x8848=(((cj5*r12))+(((-1.0)*cj6*r11*x8846))+(((-1.0)*r10*sj6*x8846)));
j4eval[0]=x8848;
j4eval[1]=IKsign(x8848);
j4eval[2]=((IKabs(((((-1.0)*sj6*x8847))+((cj6*x8845)))))+(IKabs((((cj5*sj6*x8845))+((cj5*cj6*x8847))+((r22*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8849=cj5*cj5;
IkReal x8850=cj6*cj6;
IkReal x8851=(r00*r20);
IkReal x8852=(r02*r22);
IkReal x8853=(r22*sj5);
IkReal x8854=(cj6*r21);
IkReal x8855=(r00*sj6);
IkReal x8856=(r20*sj6);
IkReal x8857=(cj6*r01);
IkReal x8858=(cj0*cj5);
IkReal x8859=((1.0)*x8849);
IkReal x8860=(cj5*r02*sj5);
IkReal x8861=(r01*r21*x8850);
IkReal x8862=(((x8850*x8851))+(((-1.0)*x8852*x8859))+(((-1.0)*x8850*x8851*x8859))+((x8849*x8854*x8855))+x8852+((x8854*x8860))+((r01*r21))+((cj5*x8853*x8857))+((cj5*x8853*x8855))+((x8849*x8856*x8857))+(((-1.0)*x8854*x8855))+((x8849*x8851))+((x8856*x8860))+(((-1.0)*x8856*x8857))+(((-1.0)*x8861))+((x8849*x8861)));
j4eval[0]=x8862;
j4eval[1]=IKsign(x8862);
j4eval[2]=((IKabs((((cj0*cj6*r20))+(((-1.0)*cj0*r21*sj6)))))+(IKabs((((cj0*x8853))+((x8856*x8858))+((x8854*x8858))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x8863=cj6*cj6;
IkReal x8864=cj5*cj5;
IkReal x8865=(r12*sj5);
IkReal x8866=(r22*sj5);
IkReal x8867=((1.0)*r11);
IkReal x8868=(r20*sj0);
IkReal x8869=(r10*r20);
IkReal x8870=(cj5*sj6);
IkReal x8871=(cj6*r10);
IkReal x8872=(r12*r22);
IkReal x8873=(cj5*cj6*r21);
IkReal x8874=(r21*x8863);
IkReal x8875=(cj6*r20*sj6);
IkReal x8876=(r11*x8864);
IkReal x8877=((1.0)*r21*sj6);
IkReal x8878=((1.0)*x8864);
IkReal x8879=(((x8874*x8876))+(((-1.0)*x8871*x8877))+((r20*x8865*x8870))+((x8865*x8873))+((x8864*x8869))+(((-1.0)*x8867*x8875))+(((-1.0)*x8867*x8874))+((r11*r21))+x8872+(((-1.0)*x8872*x8878))+(((-1.0)*x8863*x8869*x8878))+((x8863*x8869))+((r21*sj6*x8864*x8871))+((r10*x8866*x8870))+((x8875*x8876))+((cj5*cj6*r11*x8866)));
j4eval[0]=x8879;
j4eval[1]=IKsign(x8879);
j4eval[2]=((IKabs((((cj6*x8868))+(((-1.0)*sj0*x8877)))))+(IKabs((((sj0*x8866))+((sj0*x8873))+((x8868*x8870))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x8880=((1.0)*cj5);
IkReal x8881=((0.01)*cj5);
IkReal x8882=(cj6*r11);
IkReal x8883=(r20*sj6);
IkReal x8884=((0.01)*sj5);
IkReal x8885=(cj6*r01);
IkReal x8886=((0.37429)*cj5);
IkReal x8887=((0.37429)*sj5);
IkReal x8888=(cj6*r21);
IkReal x8889=(r10*sj5*sj6);
IkReal x8890=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x8883*x8887))+((r22*x8884))+((r22*x8886))+(((-1.0)*pz))+((x8881*x8883))+((x8881*x8888))+(((-1.0)*x8887*x8888)));
evalcond[2]=((-0.29542)+((r00*sj6*x8881))+((r02*x8884))+((r02*x8886))+(((-1.0)*px))+((x8881*x8885))+(((-1.0)*r00*sj6*x8887))+(((-1.0)*x8885*x8887)));
evalcond[3]=(((r10*sj6*x8881))+(((-1.0)*x8882*x8887))+(((-1.0)*py))+((x8881*x8882))+((r12*x8884))+((r12*x8886))+(((-1.0)*r10*sj6*x8887)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x8880))+((sj5*x8888))+((sj5*x8883)));
evalcond[5]=((((-1.0)*r12*x8880))+((sj5*x8882))+x8889);
evalcond[6]=(((sj5*x8885))+x8890+(((-1.0)*r02*x8880)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8891=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x8891;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x8891);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8892=((1.0)*sj6);
IkReal x8893=((((-1.0)*r00*sj5*x8892))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)));
j4eval[0]=x8893;
j4eval[1]=IKsign(x8893);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x8892))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8894=cj6*cj6;
IkReal x8895=r01*r01;
IkReal x8896=cj5*cj5;
IkReal x8897=r00*r00;
IkReal x8898=r02*r02;
IkReal x8899=(cj6*r00);
IkReal x8900=(r02*sj5);
IkReal x8901=(cj5*cj6*r01);
IkReal x8902=((2.0)*r01*sj6);
IkReal x8903=(cj5*r00*sj6);
IkReal x8904=((1.0)*x8896);
IkReal x8905=(x8894*x8897);
IkReal x8906=(x8894*x8895);
IkReal x8907=((((2.0)*x8900*x8901))+(((2.0)*x8900*x8903))+(((-1.0)*x8899*x8902))+((x8896*x8906))+x8898+x8895+((x8896*x8897))+x8905+(((-1.0)*x8904*x8905))+((x8896*x8899*x8902))+(((-1.0)*x8906))+(((-1.0)*x8898*x8904)));
j4eval[0]=x8907;
j4eval[1]=((IKabs((x8901+x8900+x8903)))+(IKabs(((((-1.0)*r01*sj6))+x8899))));
j4eval[2]=IKsign(x8907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8908=cj6*cj6;
IkReal x8909=r01*r01;
IkReal x8910=cj5*cj5;
IkReal x8911=r00*r00;
IkReal x8912=r02*r02;
IkReal x8913=(cj6*r00);
IkReal x8914=((2.0)*r01);
IkReal x8915=(cj5*cj6);
IkReal x8916=(r02*sj5);
IkReal x8917=(cj5*r00*sj6);
IkReal x8918=(x8910*x8911);
IkReal x8919=(x8908*x8909);
CheckValue<IkReal> x8920 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8913)),(((r01*x8915))+x8916+x8917),IKFAST_ATAN2_MAGTHRESH);
if(!x8920.valid){
continue;
}
CheckValue<IkReal> x8921=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8919))+((x8910*x8919))+x8909+x8912+x8918+((sj6*x8910*x8913*x8914))+(((-1.0)*sj6*x8913*x8914))+((x8914*x8915*x8916))+(((-1.0)*x8908*x8918))+(((-1.0)*x8910*x8912))+(((2.0)*x8916*x8917))+((x8908*x8911)))),-1);
if(!x8921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8920.value)+(((1.5707963267949)*(x8921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8922=IKsin(j4);
IkReal x8923=IKcos(j4);
IkReal x8924=(cj5*cj6);
IkReal x8925=(r11*sj6);
IkReal x8926=(cj6*r20);
IkReal x8927=(cj6*r10);
IkReal x8928=(cj5*sj6);
IkReal x8929=(r21*sj6);
IkReal x8930=(cj6*r00);
IkReal x8931=(r01*sj6);
IkReal x8932=((1.0)*x8923);
IkReal x8933=((1.0)*x8922);
IkReal x8934=(sj5*x8933);
evalcond[0]=((((-1.0)*r20*x8928*x8933))+((x8923*x8926))+(((-1.0)*r22*x8934))+(((-1.0)*r21*x8924*x8933))+(((-1.0)*x8929*x8932)));
evalcond[1]=((((-1.0)*r01*x8924*x8933))+(((-1.0)*x8931*x8932))+(((-1.0)*r00*x8928*x8933))+((x8923*x8930))+(((-1.0)*r02*x8934)));
evalcond[2]=((((-1.0)*r20*x8928*x8932))+((x8922*x8929))+(((-1.0)*x8926*x8933))+(((-1.0)*r21*x8924*x8932))+(((-1.0)*r22*sj5*x8932)));
evalcond[3]=((((-1.0)*r10*x8928*x8932))+(((-1.0)*r11*x8924*x8932))+((x8922*x8925))+(((-1.0)*r12*sj5*x8932))+(((-1.0)*x8927*x8933)));
evalcond[4]=((-1.0)+(((-1.0)*r10*x8928*x8933))+(((-1.0)*r11*x8924*x8933))+((x8923*x8927))+(((-1.0)*r12*x8934))+(((-1.0)*x8925*x8932)));
evalcond[5]=((1.0)+(((-1.0)*r02*sj5*x8932))+(((-1.0)*r01*x8924*x8932))+((x8922*x8931))+(((-1.0)*r00*x8928*x8932))+(((-1.0)*x8930*x8933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8935=((1.0)*sj6);
CheckValue<IkReal> x8936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*x8935))+(((-1.0)*cj6*r01*sj5))+((cj5*r02)))),-1);
if(!x8936.valid){
continue;
}
CheckValue<IkReal> x8937 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*x8935)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x8937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8936.value)))+(x8937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8938=IKsin(j4);
IkReal x8939=IKcos(j4);
IkReal x8940=(cj5*cj6);
IkReal x8941=(r11*sj6);
IkReal x8942=(cj6*r20);
IkReal x8943=(cj6*r10);
IkReal x8944=(cj5*sj6);
IkReal x8945=(r21*sj6);
IkReal x8946=(cj6*r00);
IkReal x8947=(r01*sj6);
IkReal x8948=((1.0)*x8939);
IkReal x8949=((1.0)*x8938);
IkReal x8950=(sj5*x8949);
evalcond[0]=(((x8939*x8942))+(((-1.0)*r22*x8950))+(((-1.0)*r21*x8940*x8949))+(((-1.0)*r20*x8944*x8949))+(((-1.0)*x8945*x8948)));
evalcond[1]=((((-1.0)*x8947*x8948))+((x8939*x8946))+(((-1.0)*r02*x8950))+(((-1.0)*r00*x8944*x8949))+(((-1.0)*r01*x8940*x8949)));
evalcond[2]=(((x8938*x8945))+(((-1.0)*r21*x8940*x8948))+(((-1.0)*x8942*x8949))+(((-1.0)*r20*x8944*x8948))+(((-1.0)*r22*sj5*x8948)));
evalcond[3]=(((x8938*x8941))+(((-1.0)*r11*x8940*x8948))+(((-1.0)*x8943*x8949))+(((-1.0)*r10*x8944*x8948))+(((-1.0)*r12*sj5*x8948)));
evalcond[4]=((-1.0)+(((-1.0)*r11*x8940*x8949))+((x8939*x8943))+(((-1.0)*r12*x8950))+(((-1.0)*x8941*x8948))+(((-1.0)*r10*x8944*x8949)));
evalcond[5]=((1.0)+((x8938*x8947))+(((-1.0)*x8946*x8949))+(((-1.0)*r02*sj5*x8948))+(((-1.0)*r00*x8944*x8948))+(((-1.0)*r01*x8940*x8948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8951=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x8951.valid){
continue;
}
CheckValue<IkReal> x8952 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x8952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8951.value)))+(x8952.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8953=IKsin(j4);
IkReal x8954=IKcos(j4);
IkReal x8955=(cj5*cj6);
IkReal x8956=(r11*sj6);
IkReal x8957=(cj6*r20);
IkReal x8958=(cj6*r10);
IkReal x8959=(cj5*sj6);
IkReal x8960=(r21*sj6);
IkReal x8961=(cj6*r00);
IkReal x8962=(r01*sj6);
IkReal x8963=((1.0)*x8954);
IkReal x8964=((1.0)*x8953);
IkReal x8965=(sj5*x8964);
evalcond[0]=((((-1.0)*r22*x8965))+((x8954*x8957))+(((-1.0)*r20*x8959*x8964))+(((-1.0)*x8960*x8963))+(((-1.0)*r21*x8955*x8964)));
evalcond[1]=(((x8954*x8961))+(((-1.0)*r00*x8959*x8964))+(((-1.0)*x8962*x8963))+(((-1.0)*r02*x8965))+(((-1.0)*r01*x8955*x8964)));
evalcond[2]=(((x8953*x8960))+(((-1.0)*x8957*x8964))+(((-1.0)*r22*sj5*x8963))+(((-1.0)*r20*x8959*x8963))+(((-1.0)*r21*x8955*x8963)));
evalcond[3]=((((-1.0)*r12*sj5*x8963))+((x8953*x8956))+(((-1.0)*r11*x8955*x8963))+(((-1.0)*x8958*x8964))+(((-1.0)*r10*x8959*x8963)));
evalcond[4]=((-1.0)+(((-1.0)*r12*x8965))+(((-1.0)*r11*x8955*x8964))+((x8954*x8958))+(((-1.0)*r10*x8959*x8964))+(((-1.0)*x8956*x8963)));
evalcond[5]=((1.0)+((x8953*x8962))+(((-1.0)*r00*x8959*x8963))+(((-1.0)*r02*sj5*x8963))+(((-1.0)*x8961*x8964))+(((-1.0)*r01*x8955*x8963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8966=((1.0)*cj5);
IkReal x8967=((0.01)*cj5);
IkReal x8968=(cj6*r11);
IkReal x8969=(r20*sj6);
IkReal x8970=((0.01)*sj5);
IkReal x8971=(cj6*r01);
IkReal x8972=((0.37429)*cj5);
IkReal x8973=((0.37429)*sj5);
IkReal x8974=(cj6*r21);
IkReal x8975=(r10*sj5*sj6);
IkReal x8976=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x8967*x8974))+(((-1.0)*pz))+(((-1.0)*x8973*x8974))+((x8967*x8969))+(((-1.0)*x8969*x8973))+((r22*x8970))+((r22*x8972)));
evalcond[2]=((0.29542)+((x8967*x8971))+(((-1.0)*px))+((r00*sj6*x8967))+(((-1.0)*x8971*x8973))+((r02*x8970))+((r02*x8972))+(((-1.0)*r00*sj6*x8973)));
evalcond[3]=((((-1.0)*r10*sj6*x8973))+((r12*x8970))+((r12*x8972))+((r10*sj6*x8967))+(((-1.0)*py))+(((-1.0)*x8968*x8973))+((x8967*x8968)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x8966))+((sj5*x8974))+((sj5*x8969)));
evalcond[5]=((((-1.0)*r12*x8966))+x8975+((sj5*x8968)));
evalcond[6]=(x8976+((sj5*x8971))+(((-1.0)*r02*x8966)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8977=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x8977;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x8977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8978=((1.0)*sj5);
IkReal x8979=(((cj5*r22))+(((-1.0)*r20*sj6*x8978))+(((-1.0)*cj6*r21*x8978)));
j4eval[0]=x8979;
j4eval[1]=IKsign(x8979);
j4eval[2]=((IKabs(((((-1.0)*r01*sj6))+((cj6*r00)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8980=cj6*cj6;
IkReal x8981=cj5*cj5;
IkReal x8982=r00*r00;
IkReal x8983=r01*r01;
IkReal x8984=r02*r02;
IkReal x8985=(cj6*r00);
IkReal x8986=(cj5*cj6*r01);
IkReal x8987=((2.0)*r02*sj5);
IkReal x8988=((1.0)*x8980);
IkReal x8989=((2.0)*r01*sj6);
IkReal x8990=(cj5*r00*sj6);
IkReal x8991=(x8981*x8982);
IkReal x8992=((((-1.0)*x8983))+(((-1.0)*x8984))+(((-1.0)*x8981*x8983*x8988))+(((-1.0)*x8982*x8988))+(((-1.0)*x8987*x8990))+(((-1.0)*x8991))+((x8981*x8984))+((x8980*x8991))+(((-1.0)*x8986*x8987))+((x8985*x8989))+(((-1.0)*x8981*x8985*x8989))+((x8980*x8983)));
j4eval[0]=x8992;
j4eval[1]=((IKabs(((((-1.0)*r01*sj6))+x8985)))+(IKabs((x8986+x8990+((r02*sj5))))));
j4eval[2]=IKsign(x8992);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8993=cj6*cj6;
IkReal x8994=cj5*cj5;
IkReal x8995=r00*r00;
IkReal x8996=r01*r01;
IkReal x8997=r02*r02;
IkReal x8998=(cj6*r00);
IkReal x8999=(cj5*cj6*r01);
IkReal x9000=((2.0)*r02*sj5);
IkReal x9001=((1.0)*x8993);
IkReal x9002=((2.0)*r01*sj6);
IkReal x9003=(cj5*r00*sj6);
IkReal x9004=(x8994*x8995);
CheckValue<IkReal> x9005=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8999*x9000))+(((-1.0)*x9004))+((x8994*x8997))+((x8993*x9004))+(((-1.0)*x8994*x8998*x9002))+(((-1.0)*x8995*x9001))+((x8993*x8996))+(((-1.0)*x8994*x8996*x9001))+(((-1.0)*x9000*x9003))+(((-1.0)*x8996))+(((-1.0)*x8997))+((x8998*x9002)))),-1);
if(!x9005.valid){
continue;
}
CheckValue<IkReal> x9006 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+x8998)),(x8999+x9003+((r02*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x9006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9005.value)))+(x9006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9007=IKsin(j4);
IkReal x9008=IKcos(j4);
IkReal x9009=(cj5*cj6);
IkReal x9010=(r11*sj6);
IkReal x9011=(cj6*r20);
IkReal x9012=(cj6*r10);
IkReal x9013=(cj5*sj6);
IkReal x9014=(r21*sj6);
IkReal x9015=(cj6*r00);
IkReal x9016=(r01*sj6);
IkReal x9017=((1.0)*x9008);
IkReal x9018=((1.0)*x9007);
IkReal x9019=(sj5*x9018);
evalcond[0]=(((x9008*x9011))+(((-1.0)*r22*x9019))+(((-1.0)*x9014*x9017))+(((-1.0)*r20*x9013*x9018))+(((-1.0)*r21*x9009*x9018)));
evalcond[1]=((((-1.0)*r00*x9013*x9018))+((x9008*x9015))+(((-1.0)*r01*x9009*x9018))+(((-1.0)*r02*x9019))+(((-1.0)*x9016*x9017)));
evalcond[2]=(((x9007*x9014))+(((-1.0)*x9011*x9018))+(((-1.0)*r22*sj5*x9017))+(((-1.0)*r20*x9013*x9017))+(((-1.0)*r21*x9009*x9017)));
evalcond[3]=((((-1.0)*r10*x9013*x9017))+((x9007*x9010))+(((-1.0)*x9012*x9018))+(((-1.0)*r11*x9009*x9017))+(((-1.0)*r12*sj5*x9017)));
evalcond[4]=((1.0)+(((-1.0)*r10*x9013*x9018))+((x9008*x9012))+(((-1.0)*r12*x9019))+(((-1.0)*r11*x9009*x9018))+(((-1.0)*x9010*x9017)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x9013*x9017))+((x9007*x9016))+(((-1.0)*r01*x9009*x9017))+(((-1.0)*r02*sj5*x9017))+(((-1.0)*x9015*x9018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9020=((1.0)*sj5);
CheckValue<IkReal> x9021 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj6))+((cj6*r00)))),(((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))),IKFAST_ATAN2_MAGTHRESH);
if(!x9021.valid){
continue;
}
CheckValue<IkReal> x9022=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x9020))+(((-1.0)*r20*sj6*x9020)))),-1);
if(!x9022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9021.value)+(((1.5707963267949)*(x9022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9023=IKsin(j4);
IkReal x9024=IKcos(j4);
IkReal x9025=(cj5*cj6);
IkReal x9026=(r11*sj6);
IkReal x9027=(cj6*r20);
IkReal x9028=(cj6*r10);
IkReal x9029=(cj5*sj6);
IkReal x9030=(r21*sj6);
IkReal x9031=(cj6*r00);
IkReal x9032=(r01*sj6);
IkReal x9033=((1.0)*x9024);
IkReal x9034=((1.0)*x9023);
IkReal x9035=(sj5*x9034);
evalcond[0]=((((-1.0)*x9030*x9033))+(((-1.0)*r20*x9029*x9034))+((x9024*x9027))+(((-1.0)*r22*x9035))+(((-1.0)*r21*x9025*x9034)));
evalcond[1]=(((x9024*x9031))+(((-1.0)*r01*x9025*x9034))+(((-1.0)*x9032*x9033))+(((-1.0)*r00*x9029*x9034))+(((-1.0)*r02*x9035)));
evalcond[2]=((((-1.0)*r20*x9029*x9033))+(((-1.0)*x9027*x9034))+(((-1.0)*r22*sj5*x9033))+((x9023*x9030))+(((-1.0)*r21*x9025*x9033)));
evalcond[3]=((((-1.0)*r10*x9029*x9033))+(((-1.0)*r11*x9025*x9033))+(((-1.0)*r12*sj5*x9033))+(((-1.0)*x9028*x9034))+((x9023*x9026)));
evalcond[4]=((1.0)+(((-1.0)*r12*x9035))+(((-1.0)*r10*x9029*x9034))+(((-1.0)*r11*x9025*x9034))+((x9024*x9028))+(((-1.0)*x9026*x9033)));
evalcond[5]=((-1.0)+(((-1.0)*x9031*x9034))+(((-1.0)*r01*x9025*x9033))+(((-1.0)*r00*x9029*x9033))+((x9023*x9032))+(((-1.0)*r02*sj5*x9033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9036 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x9036.valid){
continue;
}
CheckValue<IkReal> x9037=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x9037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9036.value)+(((1.5707963267949)*(x9037.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9038=IKsin(j4);
IkReal x9039=IKcos(j4);
IkReal x9040=(cj5*cj6);
IkReal x9041=(r11*sj6);
IkReal x9042=(cj6*r20);
IkReal x9043=(cj6*r10);
IkReal x9044=(cj5*sj6);
IkReal x9045=(r21*sj6);
IkReal x9046=(cj6*r00);
IkReal x9047=(r01*sj6);
IkReal x9048=((1.0)*x9039);
IkReal x9049=((1.0)*x9038);
IkReal x9050=(sj5*x9049);
evalcond[0]=((((-1.0)*x9045*x9048))+((x9039*x9042))+(((-1.0)*r20*x9044*x9049))+(((-1.0)*r21*x9040*x9049))+(((-1.0)*r22*x9050)));
evalcond[1]=((((-1.0)*r02*x9050))+(((-1.0)*r00*x9044*x9049))+((x9039*x9046))+(((-1.0)*r01*x9040*x9049))+(((-1.0)*x9047*x9048)));
evalcond[2]=((((-1.0)*r22*sj5*x9048))+((x9038*x9045))+(((-1.0)*r20*x9044*x9048))+(((-1.0)*r21*x9040*x9048))+(((-1.0)*x9042*x9049)));
evalcond[3]=(((x9038*x9041))+(((-1.0)*x9043*x9049))+(((-1.0)*r10*x9044*x9048))+(((-1.0)*r12*sj5*x9048))+(((-1.0)*r11*x9040*x9048)));
evalcond[4]=((1.0)+(((-1.0)*x9041*x9048))+((x9039*x9043))+(((-1.0)*r10*x9044*x9049))+(((-1.0)*r12*x9050))+(((-1.0)*r11*x9040*x9049)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x9044*x9048))+((x9038*x9047))+(((-1.0)*x9046*x9049))+(((-1.0)*r01*x9040*x9048))+(((-1.0)*r02*sj5*x9048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9051=((1.0)*cj5);
IkReal x9052=((0.01)*cj5);
IkReal x9053=(cj6*r11);
IkReal x9054=(r20*sj6);
IkReal x9055=((0.01)*sj5);
IkReal x9056=(cj6*r01);
IkReal x9057=((0.37429)*cj5);
IkReal x9058=((0.37429)*sj5);
IkReal x9059=(cj6*r21);
IkReal x9060=(r10*sj5*sj6);
IkReal x9061=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x9052*x9059))+((x9052*x9054))+(((-1.0)*pz))+(((-1.0)*x9054*x9058))+((r22*x9055))+((r22*x9057))+(((-1.0)*x9058*x9059)));
evalcond[2]=(((r00*sj6*x9052))+(((-1.0)*x9056*x9058))+(((-1.0)*r00*sj6*x9058))+((x9052*x9056))+(((-1.0)*px))+((r02*x9055))+((r02*x9057)));
evalcond[3]=((-0.29542)+(((-1.0)*x9053*x9058))+((r10*sj6*x9052))+((x9052*x9053))+(((-1.0)*r10*sj6*x9058))+((r12*x9055))+((r12*x9057))+(((-1.0)*py)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x9051))+((sj5*x9054))+((sj5*x9059)));
evalcond[5]=(x9060+(((-1.0)*r12*x9051))+((sj5*x9053)));
evalcond[6]=((((-1.0)*r02*x9051))+x9061+((sj5*x9056)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9062=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9062;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x9062);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9063=((1.0)*sj6);
IkReal x9064=(((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x9063)));
j4eval[0]=x9064;
j4eval[1]=IKsign(x9064);
j4eval[2]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*r21*x9063))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9065=r11*r11;
IkReal x9066=cj5*cj5;
IkReal x9067=cj6*cj6;
IkReal x9068=r10*r10;
IkReal x9069=r12*r12;
IkReal x9070=(r12*sj5);
IkReal x9071=(cj6*r10);
IkReal x9072=((1.0)*x9067);
IkReal x9073=(cj5*cj6*r11);
IkReal x9074=(cj5*r10*sj6);
IkReal x9075=((2.0)*r11*sj6);
IkReal x9076=(x9066*x9068);
IkReal x9077=((((-1.0)*x9071*x9075))+(((-1.0)*x9072*x9076))+x9065+x9069+x9076+((x9066*x9071*x9075))+(((2.0)*x9070*x9074))+(((2.0)*x9070*x9073))+(((-1.0)*x9065*x9072))+(((-1.0)*x9066*x9069))+((x9065*x9066*x9067))+((x9067*x9068)));
j4eval[0]=x9077;
j4eval[1]=IKsign(x9077);
j4eval[2]=((IKabs((x9074+x9073+x9070)))+(IKabs((x9071+(((-1.0)*r11*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9078=r11*r11;
IkReal x9079=cj5*cj5;
IkReal x9080=cj6*cj6;
IkReal x9081=r10*r10;
IkReal x9082=r12*r12;
IkReal x9083=(r10*sj6);
IkReal x9084=(r12*sj5);
IkReal x9085=((1.0)*x9080);
IkReal x9086=(cj5*cj6*r11);
IkReal x9087=((2.0)*cj6*r11);
IkReal x9088=(x9079*x9081);
CheckValue<IkReal> x9089 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x9086+x9084+((cj5*x9083))),IKFAST_ATAN2_MAGTHRESH);
if(!x9089.valid){
continue;
}
CheckValue<IkReal> x9090=IKPowWithIntegerCheck(IKsign(((((2.0)*x9084*x9086))+((x9080*x9081))+x9078+x9088+x9082+((x9078*x9079*x9080))+(((-1.0)*x9085*x9088))+(((-1.0)*x9083*x9087))+(((-1.0)*x9079*x9082))+((x9079*x9083*x9087))+(((-1.0)*x9078*x9085))+(((2.0)*cj5*x9083*x9084)))),-1);
if(!x9090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9089.value)+(((1.5707963267949)*(x9090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9091=IKsin(j4);
IkReal x9092=IKcos(j4);
IkReal x9093=(cj5*cj6);
IkReal x9094=(r11*sj6);
IkReal x9095=(cj6*r20);
IkReal x9096=(cj6*r10);
IkReal x9097=(cj5*sj6);
IkReal x9098=(r01*sj6);
IkReal x9099=(r21*sj6);
IkReal x9100=(cj6*r00);
IkReal x9101=((1.0)*x9092);
IkReal x9102=((1.0)*x9091);
IkReal x9103=(sj5*x9102);
evalcond[0]=((((-1.0)*r20*x9097*x9102))+((x9092*x9095))+(((-1.0)*r22*x9103))+(((-1.0)*x9099*x9101))+(((-1.0)*r21*x9093*x9102)));
evalcond[1]=((((-1.0)*x9094*x9101))+((x9092*x9096))+(((-1.0)*r11*x9093*x9102))+(((-1.0)*r10*x9097*x9102))+(((-1.0)*r12*x9103)));
evalcond[2]=((((-1.0)*x9095*x9102))+(((-1.0)*r20*x9097*x9101))+(((-1.0)*r22*sj5*x9101))+((x9091*x9099))+(((-1.0)*r21*x9093*x9101)));
evalcond[3]=((((-1.0)*x9100*x9102))+(((-1.0)*r02*sj5*x9101))+(((-1.0)*r01*x9093*x9101))+((x9091*x9098))+(((-1.0)*r00*x9097*x9101)));
evalcond[4]=((1.0)+(((-1.0)*r02*x9103))+(((-1.0)*r01*x9093*x9102))+((x9092*x9100))+(((-1.0)*r00*x9097*x9102))+(((-1.0)*x9098*x9101)));
evalcond[5]=((1.0)+(((-1.0)*r12*sj5*x9101))+(((-1.0)*r11*x9093*x9101))+(((-1.0)*r10*x9097*x9101))+((x9091*x9094))+(((-1.0)*x9096*x9102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9104=((1.0)*sj6);
CheckValue<IkReal> x9105=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*x9104))+(((-1.0)*cj6*r11*sj5)))),-1);
if(!x9105.valid){
continue;
}
CheckValue<IkReal> x9106 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x9104))+((cj6*r20)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x9106.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9105.value)))+(x9106.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9107=IKsin(j4);
IkReal x9108=IKcos(j4);
IkReal x9109=(cj5*cj6);
IkReal x9110=(r11*sj6);
IkReal x9111=(cj6*r20);
IkReal x9112=(cj6*r10);
IkReal x9113=(cj5*sj6);
IkReal x9114=(r01*sj6);
IkReal x9115=(r21*sj6);
IkReal x9116=(cj6*r00);
IkReal x9117=((1.0)*x9108);
IkReal x9118=((1.0)*x9107);
IkReal x9119=(sj5*x9118);
evalcond[0]=((((-1.0)*r21*x9109*x9118))+(((-1.0)*x9115*x9117))+(((-1.0)*r20*x9113*x9118))+((x9108*x9111))+(((-1.0)*r22*x9119)));
evalcond[1]=((((-1.0)*r10*x9113*x9118))+(((-1.0)*x9110*x9117))+((x9108*x9112))+(((-1.0)*r11*x9109*x9118))+(((-1.0)*r12*x9119)));
evalcond[2]=((((-1.0)*r21*x9109*x9117))+(((-1.0)*x9111*x9118))+(((-1.0)*r20*x9113*x9117))+(((-1.0)*r22*sj5*x9117))+((x9107*x9115)));
evalcond[3]=((((-1.0)*r01*x9109*x9117))+(((-1.0)*x9116*x9118))+((x9107*x9114))+(((-1.0)*r02*sj5*x9117))+(((-1.0)*r00*x9113*x9117)));
evalcond[4]=((1.0)+(((-1.0)*r01*x9109*x9118))+(((-1.0)*x9114*x9117))+((x9108*x9116))+(((-1.0)*r02*x9119))+(((-1.0)*r00*x9113*x9118)));
evalcond[5]=((1.0)+(((-1.0)*r10*x9113*x9117))+(((-1.0)*x9112*x9118))+(((-1.0)*r12*sj5*x9117))+((x9107*x9110))+(((-1.0)*r11*x9109*x9117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9120=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x9120.valid){
continue;
}
CheckValue<IkReal> x9121 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x9121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9120.value)))+(x9121.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9122=IKsin(j4);
IkReal x9123=IKcos(j4);
IkReal x9124=(cj5*cj6);
IkReal x9125=(r11*sj6);
IkReal x9126=(cj6*r20);
IkReal x9127=(cj6*r10);
IkReal x9128=(cj5*sj6);
IkReal x9129=(r01*sj6);
IkReal x9130=(r21*sj6);
IkReal x9131=(cj6*r00);
IkReal x9132=((1.0)*x9123);
IkReal x9133=((1.0)*x9122);
IkReal x9134=(sj5*x9133);
evalcond[0]=((((-1.0)*r21*x9124*x9133))+(((-1.0)*x9130*x9132))+(((-1.0)*r22*x9134))+((x9123*x9126))+(((-1.0)*r20*x9128*x9133)));
evalcond[1]=((((-1.0)*x9125*x9132))+(((-1.0)*r11*x9124*x9133))+(((-1.0)*r12*x9134))+((x9123*x9127))+(((-1.0)*r10*x9128*x9133)));
evalcond[2]=((((-1.0)*r21*x9124*x9132))+(((-1.0)*x9126*x9133))+((x9122*x9130))+(((-1.0)*r22*sj5*x9132))+(((-1.0)*r20*x9128*x9132)));
evalcond[3]=(((x9122*x9129))+(((-1.0)*x9131*x9133))+(((-1.0)*r01*x9124*x9132))+(((-1.0)*r02*sj5*x9132))+(((-1.0)*r00*x9128*x9132)));
evalcond[4]=((1.0)+(((-1.0)*r01*x9124*x9133))+(((-1.0)*r02*x9134))+(((-1.0)*r00*x9128*x9133))+(((-1.0)*x9129*x9132))+((x9123*x9131)));
evalcond[5]=((1.0)+(((-1.0)*x9127*x9133))+((x9122*x9125))+(((-1.0)*r12*sj5*x9132))+(((-1.0)*r11*x9124*x9132))+(((-1.0)*r10*x9128*x9132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9135=((1.0)*cj5);
IkReal x9136=((0.01)*cj5);
IkReal x9137=(cj6*r11);
IkReal x9138=(r20*sj6);
IkReal x9139=((0.01)*sj5);
IkReal x9140=(cj6*r01);
IkReal x9141=((0.37429)*cj5);
IkReal x9142=((0.37429)*sj5);
IkReal x9143=(cj6*r21);
IkReal x9144=(r10*sj5*sj6);
IkReal x9145=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x9142*x9143))+((x9136*x9143))+((r22*x9139))+(((-1.0)*pz))+(((-1.0)*x9138*x9142))+((x9136*x9138))+((r22*x9141)));
evalcond[2]=((((-1.0)*r00*sj6*x9142))+((r00*sj6*x9136))+((x9136*x9140))+(((-1.0)*x9140*x9142))+(((-1.0)*px))+((r02*x9139))+((r02*x9141)));
evalcond[3]=((0.29542)+((r10*sj6*x9136))+(((-1.0)*py))+((r12*x9139))+((r12*x9141))+(((-1.0)*x9137*x9142))+((x9136*x9137))+(((-1.0)*r10*sj6*x9142)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x9135))+((sj5*x9138))+((sj5*x9143)));
evalcond[5]=(x9144+(((-1.0)*r12*x9135))+((sj5*x9137)));
evalcond[6]=(x9145+(((-1.0)*r02*x9135))+((sj5*x9140)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9146=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9146;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
j4eval[2]=IKsign(x9146);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9147=((1.0)*sj5);
IkReal x9148=(((cj5*r22))+(((-1.0)*cj6*r21*x9147))+(((-1.0)*r20*sj6*x9147)));
j4eval[0]=x9148;
j4eval[1]=IKsign(x9148);
j4eval[2]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9149=cj6*cj6;
IkReal x9150=cj5*cj5;
IkReal x9151=r10*r10;
IkReal x9152=r11*r11;
IkReal x9153=r12*r12;
IkReal x9154=(r10*sj6);
IkReal x9155=(r12*sj5);
IkReal x9156=((2.0)*cj6*r11);
IkReal x9157=((1.0)*x9151);
IkReal x9158=(x9149*x9152);
IkReal x9159=(((x9150*x9153))+(((-1.0)*x9150*x9154*x9156))+(((-1.0)*x9150*x9158))+((x9149*x9150*x9151))+x9158+(((-1.0)*x9150*x9157))+((x9154*x9156))+(((-1.0)*cj5*x9155*x9156))+(((-2.0)*cj5*x9154*x9155))+(((-1.0)*x9153))+(((-1.0)*x9152))+(((-1.0)*x9149*x9157)));
j4eval[0]=x9159;
j4eval[1]=((IKabs((((cj5*x9154))+x9155+((cj5*cj6*r11)))))+(IKabs(((((-1.0)*r11*sj6))+((cj6*r10))))));
j4eval[2]=IKsign(x9159);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9160=cj6*cj6;
IkReal x9161=cj5*cj5;
IkReal x9162=r10*r10;
IkReal x9163=r11*r11;
IkReal x9164=r12*r12;
IkReal x9165=(r10*sj6);
IkReal x9166=(r12*sj5);
IkReal x9167=((2.0)*cj6*r11);
IkReal x9168=(x9160*x9163);
IkReal x9169=(x9161*x9162);
CheckValue<IkReal> x9170 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(x9166+((cj5*cj6*r11))+((cj5*x9165))),IKFAST_ATAN2_MAGTHRESH);
if(!x9170.valid){
continue;
}
CheckValue<IkReal> x9171=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*x9165*x9166))+(((-1.0)*x9160*x9162))+(((-1.0)*cj5*x9166*x9167))+((x9165*x9167))+(((-1.0)*x9164))+(((-1.0)*x9169))+(((-1.0)*x9163))+x9168+((x9160*x9169))+((x9161*x9164))+(((-1.0)*x9161*x9168))+(((-1.0)*x9161*x9165*x9167)))),-1);
if(!x9171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9170.value)+(((1.5707963267949)*(x9171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9172=IKsin(j4);
IkReal x9173=IKcos(j4);
IkReal x9174=(cj5*cj6);
IkReal x9175=(r11*sj6);
IkReal x9176=(cj6*r20);
IkReal x9177=(cj6*r10);
IkReal x9178=(cj5*sj6);
IkReal x9179=(r01*sj6);
IkReal x9180=(r21*sj6);
IkReal x9181=(cj6*r00);
IkReal x9182=((1.0)*x9173);
IkReal x9183=((1.0)*x9172);
IkReal x9184=(sj5*x9183);
evalcond[0]=((((-1.0)*r22*x9184))+(((-1.0)*r21*x9174*x9183))+(((-1.0)*r20*x9178*x9183))+((x9173*x9176))+(((-1.0)*x9180*x9182)));
evalcond[1]=((((-1.0)*r12*x9184))+(((-1.0)*x9175*x9182))+(((-1.0)*r11*x9174*x9183))+(((-1.0)*r10*x9178*x9183))+((x9173*x9177)));
evalcond[2]=((((-1.0)*r21*x9174*x9182))+(((-1.0)*r20*x9178*x9182))+(((-1.0)*x9176*x9183))+(((-1.0)*r22*sj5*x9182))+((x9172*x9180)));
evalcond[3]=((((-1.0)*r00*x9178*x9182))+(((-1.0)*r01*x9174*x9182))+(((-1.0)*x9181*x9183))+(((-1.0)*r02*sj5*x9182))+((x9172*x9179)));
evalcond[4]=((-1.0)+(((-1.0)*r00*x9178*x9183))+(((-1.0)*r02*x9184))+((x9173*x9181))+(((-1.0)*x9179*x9182))+(((-1.0)*r01*x9174*x9183)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x9174*x9182))+(((-1.0)*r10*x9178*x9182))+(((-1.0)*x9177*x9183))+(((-1.0)*r12*sj5*x9182))+((x9172*x9175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9185=((1.0)*sj5);
CheckValue<IkReal> x9186=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj6*x9185))+(((-1.0)*cj6*r21*x9185)))),-1);
if(!x9186.valid){
continue;
}
CheckValue<IkReal> x9187 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6))+((cj6*r10)))),(((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))),IKFAST_ATAN2_MAGTHRESH);
if(!x9187.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9186.value)))+(x9187.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9188=IKsin(j4);
IkReal x9189=IKcos(j4);
IkReal x9190=(cj5*cj6);
IkReal x9191=(r11*sj6);
IkReal x9192=(cj6*r20);
IkReal x9193=(cj6*r10);
IkReal x9194=(cj5*sj6);
IkReal x9195=(r01*sj6);
IkReal x9196=(r21*sj6);
IkReal x9197=(cj6*r00);
IkReal x9198=((1.0)*x9189);
IkReal x9199=((1.0)*x9188);
IkReal x9200=(sj5*x9199);
evalcond[0]=(((x9189*x9192))+(((-1.0)*x9196*x9198))+(((-1.0)*r20*x9194*x9199))+(((-1.0)*r22*x9200))+(((-1.0)*r21*x9190*x9199)));
evalcond[1]=((((-1.0)*x9191*x9198))+((x9189*x9193))+(((-1.0)*r12*x9200))+(((-1.0)*r10*x9194*x9199))+(((-1.0)*r11*x9190*x9199)));
evalcond[2]=((((-1.0)*r22*sj5*x9198))+(((-1.0)*r20*x9194*x9198))+((x9188*x9196))+(((-1.0)*r21*x9190*x9198))+(((-1.0)*x9192*x9199)));
evalcond[3]=((((-1.0)*x9197*x9199))+(((-1.0)*r02*sj5*x9198))+(((-1.0)*r01*x9190*x9198))+(((-1.0)*r00*x9194*x9198))+((x9188*x9195)));
evalcond[4]=((-1.0)+((x9189*x9197))+(((-1.0)*r02*x9200))+(((-1.0)*r01*x9190*x9199))+(((-1.0)*r00*x9194*x9199))+(((-1.0)*x9195*x9198)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x9194*x9198))+(((-1.0)*x9193*x9199))+(((-1.0)*r12*sj5*x9198))+(((-1.0)*r11*x9190*x9198))+((x9188*x9191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9201 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),(((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21))),IKFAST_ATAN2_MAGTHRESH);
if(!x9201.valid){
continue;
}
CheckValue<IkReal> x9202=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9202.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9201.value)+(((1.5707963267949)*(x9202.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9203=IKsin(j4);
IkReal x9204=IKcos(j4);
IkReal x9205=(cj5*cj6);
IkReal x9206=(r11*sj6);
IkReal x9207=(cj6*r20);
IkReal x9208=(cj6*r10);
IkReal x9209=(cj5*sj6);
IkReal x9210=(r01*sj6);
IkReal x9211=(r21*sj6);
IkReal x9212=(cj6*r00);
IkReal x9213=((1.0)*x9204);
IkReal x9214=((1.0)*x9203);
IkReal x9215=(sj5*x9214);
evalcond[0]=((((-1.0)*x9211*x9213))+((x9204*x9207))+(((-1.0)*r20*x9209*x9214))+(((-1.0)*r21*x9205*x9214))+(((-1.0)*r22*x9215)));
evalcond[1]=((((-1.0)*x9206*x9213))+((x9204*x9208))+(((-1.0)*r11*x9205*x9214))+(((-1.0)*r10*x9209*x9214))+(((-1.0)*r12*x9215)));
evalcond[2]=(((x9203*x9211))+(((-1.0)*r20*x9209*x9213))+(((-1.0)*r22*sj5*x9213))+(((-1.0)*x9207*x9214))+(((-1.0)*r21*x9205*x9213)));
evalcond[3]=(((x9203*x9210))+(((-1.0)*x9212*x9214))+(((-1.0)*r01*x9205*x9213))+(((-1.0)*r02*sj5*x9213))+(((-1.0)*r00*x9209*x9213)));
evalcond[4]=((-1.0)+(((-1.0)*r02*x9215))+(((-1.0)*x9210*x9213))+((x9204*x9212))+(((-1.0)*r01*x9205*x9214))+(((-1.0)*r00*x9209*x9214)));
evalcond[5]=((-1.0)+(((-1.0)*x9208*x9214))+(((-1.0)*r11*x9205*x9213))+(((-1.0)*r10*x9209*x9213))+(((-1.0)*r12*sj5*x9213))+((x9203*x9206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9216=cj6*cj6;
IkReal x9217=cj5*cj5;
IkReal x9218=((1.0)*r11);
IkReal x9219=(cj5*sj0);
IkReal x9220=(cj6*r21);
IkReal x9221=(r22*sj5);
IkReal x9222=(r20*sj6);
IkReal x9223=(r12*r22);
IkReal x9224=((1.0)*sj6);
IkReal x9225=(r21*x9216);
IkReal x9226=(r10*x9217);
IkReal x9227=(r11*x9217);
IkReal x9228=(r20*x9216);
IkReal x9229=(cj5*r12*sj5);
CheckValue<IkReal> x9230 = IKatan2WithCheck(IkReal(((((-1.0)*r21*sj0*x9224))+((cj6*r20*sj0)))),(((sj0*x9221))+((x9219*x9220))+((x9219*x9222))),IKFAST_ATAN2_MAGTHRESH);
if(!x9230.valid){
continue;
}
CheckValue<IkReal> x9231=IKPowWithIntegerCheck(IKsign((((r20*x9226))+((cj5*cj6*r11*x9221))+(((-1.0)*x9217*x9223))+((r11*r21))+x9223+((cj6*x9222*x9227))+(((-1.0)*x9218*x9225))+((x9220*x9229))+((x9225*x9227))+((x9222*x9229))+(((-1.0)*cj6*x9218*x9222))+(((-1.0)*x9226*x9228))+(((-1.0)*r10*x9220*x9224))+((sj6*x9220*x9226))+((cj5*r10*sj6*x9221))+((r10*x9228)))),-1);
if(!x9231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9230.value)+(((1.5707963267949)*(x9231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9232=IKsin(j4);
IkReal x9233=IKcos(j4);
IkReal x9234=(cj5*cj6);
IkReal x9235=(r11*sj6);
IkReal x9236=(cj6*r20);
IkReal x9237=(cj6*r10);
IkReal x9238=(cj5*sj6);
IkReal x9239=(r01*sj6);
IkReal x9240=(r21*sj6);
IkReal x9241=(cj6*r00);
IkReal x9242=((1.0)*x9233);
IkReal x9243=((1.0)*x9232);
IkReal x9244=(sj5*x9243);
evalcond[0]=((((-1.0)*r22*x9244))+(((-1.0)*r21*x9234*x9243))+((x9233*x9236))+(((-1.0)*r20*x9238*x9243))+(((-1.0)*x9240*x9242)));
evalcond[1]=((((-1.0)*r22*sj5*x9242))+(((-1.0)*x9236*x9243))+(((-1.0)*r21*x9234*x9242))+((x9232*x9240))+(((-1.0)*r20*x9238*x9242)));
evalcond[2]=(sj0+(((-1.0)*r01*x9234*x9243))+((x9233*x9241))+(((-1.0)*r00*x9238*x9243))+(((-1.0)*r02*x9244))+(((-1.0)*x9239*x9242)));
evalcond[3]=((((-1.0)*x9241*x9243))+(((-1.0)*r02*sj5*x9242))+cj0+(((-1.0)*r01*x9234*x9242))+((x9232*x9239))+(((-1.0)*r00*x9238*x9242)));
evalcond[4]=((((-1.0)*r11*x9234*x9242))+sj0+(((-1.0)*r12*sj5*x9242))+(((-1.0)*x9237*x9243))+((x9232*x9235))+(((-1.0)*r10*x9238*x9242)));
evalcond[5]=((((-1.0)*r11*x9234*x9243))+(((-1.0)*x9235*x9242))+(((-1.0)*r12*x9244))+((x9233*x9237))+(((-1.0)*r10*x9238*x9243))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9245=cj5*cj5;
IkReal x9246=cj6*cj6;
IkReal x9247=(r22*sj5);
IkReal x9248=(cj6*r21);
IkReal x9249=(r20*sj6);
IkReal x9250=((1.0)*sj6);
IkReal x9251=(cj0*cj5);
IkReal x9252=(r02*r22);
IkReal x9253=(cj6*r01);
IkReal x9254=(r00*sj6);
IkReal x9255=(cj5*r02*sj5);
IkReal x9256=(r01*x9245);
IkReal x9257=(r21*x9246);
IkReal x9258=(r00*r20*x9245);
CheckValue<IkReal> x9259=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9245*x9252))+x9258+x9252+((cj5*x9247*x9254))+((cj5*x9247*x9253))+(((-1.0)*r00*x9248*x9250))+((r01*r21))+((x9245*x9248*x9254))+((r00*r20*x9246))+(((-1.0)*r01*x9257))+((x9245*x9249*x9253))+((x9256*x9257))+(((-1.0)*x9246*x9258))+((x9249*x9255))+(((-1.0)*x9249*x9253))+((x9248*x9255)))),-1);
if(!x9259.valid){
continue;
}
CheckValue<IkReal> x9260 = IKatan2WithCheck(IkReal((((cj0*cj6*r20))+(((-1.0)*cj0*r21*x9250)))),(((cj0*x9247))+((x9249*x9251))+((x9248*x9251))),IKFAST_ATAN2_MAGTHRESH);
if(!x9260.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9259.value)))+(x9260.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9261=IKsin(j4);
IkReal x9262=IKcos(j4);
IkReal x9263=(cj5*cj6);
IkReal x9264=(r11*sj6);
IkReal x9265=(cj6*r20);
IkReal x9266=(cj6*r10);
IkReal x9267=(cj5*sj6);
IkReal x9268=(r01*sj6);
IkReal x9269=(r21*sj6);
IkReal x9270=(cj6*r00);
IkReal x9271=((1.0)*x9262);
IkReal x9272=((1.0)*x9261);
IkReal x9273=(sj5*x9272);
evalcond[0]=(((x9262*x9265))+(((-1.0)*r22*x9273))+(((-1.0)*r20*x9267*x9272))+(((-1.0)*r21*x9263*x9272))+(((-1.0)*x9269*x9271)));
evalcond[1]=((((-1.0)*r20*x9267*x9271))+(((-1.0)*r21*x9263*x9271))+(((-1.0)*r22*sj5*x9271))+(((-1.0)*x9265*x9272))+((x9261*x9269)));
evalcond[2]=((((-1.0)*r00*x9267*x9272))+sj0+(((-1.0)*r01*x9263*x9272))+(((-1.0)*x9268*x9271))+(((-1.0)*r02*x9273))+((x9262*x9270)));
evalcond[3]=((((-1.0)*r00*x9267*x9271))+cj0+(((-1.0)*r02*sj5*x9271))+(((-1.0)*r01*x9263*x9271))+(((-1.0)*x9270*x9272))+((x9261*x9268)));
evalcond[4]=((((-1.0)*r12*sj5*x9271))+sj0+(((-1.0)*r11*x9263*x9271))+(((-1.0)*r10*x9267*x9271))+(((-1.0)*x9266*x9272))+((x9261*x9264)));
evalcond[5]=(((x9262*x9266))+(((-1.0)*r11*x9263*x9272))+(((-1.0)*r10*x9267*x9272))+(((-1.0)*x9264*x9271))+(((-1.0)*r12*x9273))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9274=(cj5*sj0);
IkReal x9275=((1.0)*sj5);
CheckValue<IkReal> x9276=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x9275))+(((-1.0)*cj6*r11*x9275)))),-1);
if(!x9276.valid){
continue;
}
CheckValue<IkReal> x9277 = IKatan2WithCheck(IkReal((((cj6*r20*sj0))+(((-1.0)*r21*sj0*sj6)))),(((cj6*r21*x9274))+((r22*sj0*sj5))+((r20*sj6*x9274))),IKFAST_ATAN2_MAGTHRESH);
if(!x9277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9276.value)))+(x9277.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9278=IKsin(j4);
IkReal x9279=IKcos(j4);
IkReal x9280=(cj5*cj6);
IkReal x9281=(r11*sj6);
IkReal x9282=(cj6*r20);
IkReal x9283=(cj6*r10);
IkReal x9284=(cj5*sj6);
IkReal x9285=(r01*sj6);
IkReal x9286=(r21*sj6);
IkReal x9287=(cj6*r00);
IkReal x9288=((1.0)*x9279);
IkReal x9289=((1.0)*x9278);
IkReal x9290=(sj5*x9289);
evalcond[0]=((((-1.0)*x9286*x9288))+(((-1.0)*r21*x9280*x9289))+(((-1.0)*r22*x9290))+(((-1.0)*r20*x9284*x9289))+((x9279*x9282)));
evalcond[1]=((((-1.0)*x9282*x9289))+(((-1.0)*r22*sj5*x9288))+(((-1.0)*r21*x9280*x9288))+((x9278*x9286))+(((-1.0)*r20*x9284*x9288)));
evalcond[2]=(sj0+(((-1.0)*r00*x9284*x9289))+(((-1.0)*x9285*x9288))+(((-1.0)*r02*x9290))+(((-1.0)*r01*x9280*x9289))+((x9279*x9287)));
evalcond[3]=(cj0+(((-1.0)*r00*x9284*x9288))+(((-1.0)*r02*sj5*x9288))+(((-1.0)*r01*x9280*x9288))+((x9278*x9285))+(((-1.0)*x9287*x9289)));
evalcond[4]=((((-1.0)*r10*x9284*x9288))+sj0+(((-1.0)*r11*x9280*x9288))+(((-1.0)*x9283*x9289))+((x9278*x9281))+(((-1.0)*r12*sj5*x9288)));
evalcond[5]=((((-1.0)*r10*x9284*x9289))+(((-1.0)*x9281*x9288))+(((-1.0)*r11*x9280*x9289))+(((-1.0)*cj0))+(((-1.0)*r12*x9290))+((x9279*x9283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9291=cj5*cj5;
IkReal x9292=cj6*cj6;
IkReal x9293=r20*r20;
IkReal x9294=r21*r21;
IkReal x9295=r22*r22;
IkReal x9296=(r22*sj5);
IkReal x9297=(cj6*r20);
IkReal x9298=(cj1*sj2);
IkReal x9299=(r21*sj6);
IkReal x9300=(cj5*r20*sj6);
IkReal x9301=(cj5*cj6*r21);
IkReal x9302=((1.0)*x9291);
IkReal x9303=(x9292*x9293);
IkReal x9304=(x9292*x9294);
CheckValue<IkReal> x9305 = IKatan2WithCheck(IkReal((((x9296*x9298))+((x9298*x9301))+((x9298*x9300))+(((-1.0)*sj1*x9299))+((sj1*x9297)))),(((x9298*x9299))+(((-1.0)*x9297*x9298))+((sj1*x9301))+((sj1*x9300))+((sj1*x9296))),IKFAST_ATAN2_MAGTHRESH);
if(!x9305.valid){
continue;
}
CheckValue<IkReal> x9306=IKPowWithIntegerCheck(IKsign((x9303+(((-1.0)*x9302*x9303))+(((-1.0)*x9295*x9302))+x9294+x9295+((x9291*x9293))+((x9291*x9304))+(((-2.0)*x9297*x9299))+(((2.0)*x9296*x9300))+(((2.0)*x9296*x9301))+(((-1.0)*x9304))+(((2.0)*x9291*x9297*x9299)))),-1);
if(!x9306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9305.value)+(((1.5707963267949)*(x9306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9307=IKsin(j4);
IkReal x9308=IKcos(j4);
IkReal x9309=(cj5*cj6);
IkReal x9310=((1.0)*cj1);
IkReal x9311=(sj1*sj2);
IkReal x9312=(r11*sj6);
IkReal x9313=(cj6*r20);
IkReal x9314=(cj6*r10);
IkReal x9315=(cj5*sj6);
IkReal x9316=(r01*sj6);
IkReal x9317=(r21*sj6);
IkReal x9318=(cj6*r00);
IkReal x9319=((1.0)*x9308);
IkReal x9320=((1.0)*x9307);
IkReal x9321=(sj5*x9320);
evalcond[0]=((((-1.0)*r21*x9309*x9319))+sj1+(((-1.0)*x9313*x9320))+(((-1.0)*r22*sj5*x9319))+(((-1.0)*r20*x9315*x9319))+((x9307*x9317)));
evalcond[1]=((((-1.0)*r22*x9321))+((cj1*sj2))+(((-1.0)*r20*x9315*x9320))+(((-1.0)*x9317*x9319))+(((-1.0)*r21*x9309*x9320))+((x9308*x9313)));
evalcond[2]=((((-1.0)*r01*x9309*x9319))+(((-1.0)*r02*sj5*x9319))+(((-1.0)*x9318*x9320))+(((-1.0)*cj0*x9310))+((x9307*x9316))+(((-1.0)*r00*x9315*x9319)));
evalcond[3]=((((-1.0)*r12*sj5*x9319))+(((-1.0)*r11*x9309*x9319))+(((-1.0)*sj0*x9310))+(((-1.0)*x9314*x9320))+(((-1.0)*r10*x9315*x9319))+((x9307*x9312)));
evalcond[4]=((((-1.0)*r12*x9321))+(((-1.0)*x9312*x9319))+((cj0*cj2))+((sj0*x9311))+(((-1.0)*r10*x9315*x9320))+(((-1.0)*r11*x9309*x9320))+((x9308*x9314)));
evalcond[5]=((((-1.0)*x9316*x9319))+(((-1.0)*r02*x9321))+(((-1.0)*r01*x9309*x9320))+((cj0*x9311))+(((-1.0)*r00*x9315*x9320))+(((-1.0)*cj2*sj0))+((x9308*x9318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9322=(cj6*sj1);
IkReal x9323=((1.0)*cj5);
IkReal x9324=((1.0)*sj5);
IkReal x9325=(cj1*sj0);
IkReal x9326=((1.0)*sj6);
CheckValue<IkReal> x9327=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x9324))+(((-1.0)*cj6*r01*x9324))+((cj5*r02)))),-1);
if(!x9327.valid){
continue;
}
CheckValue<IkReal> x9328 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r21*x9323*x9325))+(((-1.0)*r12*sj1*x9324))+(((-1.0)*r10*sj1*sj6*x9323))+(((-1.0)*r20*sj6*x9323*x9325))+(((-1.0)*r22*x9324*x9325))+(((-1.0)*r11*x9322*x9323)))),((((-1.0)*r21*x9325*x9326))+(((-1.0)*r11*sj1*x9326))+((cj6*r20*x9325))+((r10*x9322))),IKFAST_ATAN2_MAGTHRESH);
if(!x9328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9327.value)))+(x9328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9329=IKsin(j4);
IkReal x9330=IKcos(j4);
IkReal x9331=(cj5*cj6);
IkReal x9332=((1.0)*cj1);
IkReal x9333=(sj1*sj2);
IkReal x9334=(r11*sj6);
IkReal x9335=(cj6*r20);
IkReal x9336=(cj6*r10);
IkReal x9337=(cj5*sj6);
IkReal x9338=(r01*sj6);
IkReal x9339=(r21*sj6);
IkReal x9340=(cj6*r00);
IkReal x9341=((1.0)*x9330);
IkReal x9342=((1.0)*x9329);
IkReal x9343=(sj5*x9342);
evalcond[0]=(((x9329*x9339))+sj1+(((-1.0)*r21*x9331*x9341))+(((-1.0)*r22*sj5*x9341))+(((-1.0)*x9335*x9342))+(((-1.0)*r20*x9337*x9341)));
evalcond[1]=((((-1.0)*r21*x9331*x9342))+(((-1.0)*r22*x9343))+((cj1*sj2))+((x9330*x9335))+(((-1.0)*r20*x9337*x9342))+(((-1.0)*x9339*x9341)));
evalcond[2]=(((x9329*x9338))+(((-1.0)*cj0*x9332))+(((-1.0)*x9340*x9342))+(((-1.0)*r00*x9337*x9341))+(((-1.0)*r02*sj5*x9341))+(((-1.0)*r01*x9331*x9341)));
evalcond[3]=(((x9329*x9334))+(((-1.0)*x9336*x9342))+(((-1.0)*r11*x9331*x9341))+(((-1.0)*sj0*x9332))+(((-1.0)*r12*sj5*x9341))+(((-1.0)*r10*x9337*x9341)));
evalcond[4]=(((sj0*x9333))+((cj0*cj2))+(((-1.0)*r12*x9343))+((x9330*x9336))+(((-1.0)*r11*x9331*x9342))+(((-1.0)*x9334*x9341))+(((-1.0)*r10*x9337*x9342)));
evalcond[5]=(((cj0*x9333))+((x9330*x9340))+(((-1.0)*r02*x9343))+(((-1.0)*cj2*sj0))+(((-1.0)*r00*x9337*x9342))+(((-1.0)*x9338*x9341))+(((-1.0)*r01*x9331*x9342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9344=(cj0*cj1);
IkReal x9345=((1.0)*sj1);
IkReal x9346=((1.0)*cj5);
IkReal x9347=(cj5*x9345);
CheckValue<IkReal> x9348=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x9346))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9348.valid){
continue;
}
CheckValue<IkReal> x9349 = IKatan2WithCheck(IkReal(((((-1.0)*r22*sj5*x9344))+(((-1.0)*cj6*r01*x9347))+(((-1.0)*r00*sj6*x9347))+(((-1.0)*r02*sj5*x9345))+(((-1.0)*cj6*r21*x9344*x9346))+(((-1.0)*r20*sj6*x9344*x9346)))),(((cj6*r00*sj1))+(((-1.0)*r21*sj6*x9344))+(((-1.0)*r01*sj6*x9345))+((cj6*r20*x9344))),IKFAST_ATAN2_MAGTHRESH);
if(!x9349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9348.value)))+(x9349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9350=IKsin(j4);
IkReal x9351=IKcos(j4);
IkReal x9352=(cj5*cj6);
IkReal x9353=((1.0)*cj1);
IkReal x9354=(sj1*sj2);
IkReal x9355=(r11*sj6);
IkReal x9356=(cj6*r20);
IkReal x9357=(cj6*r10);
IkReal x9358=(cj5*sj6);
IkReal x9359=(r01*sj6);
IkReal x9360=(r21*sj6);
IkReal x9361=(cj6*r00);
IkReal x9362=((1.0)*x9351);
IkReal x9363=((1.0)*x9350);
IkReal x9364=(sj5*x9363);
evalcond[0]=((((-1.0)*r20*x9358*x9362))+((x9350*x9360))+sj1+(((-1.0)*r22*sj5*x9362))+(((-1.0)*r21*x9352*x9362))+(((-1.0)*x9356*x9363)));
evalcond[1]=((((-1.0)*r20*x9358*x9363))+((x9351*x9356))+(((-1.0)*x9360*x9362))+((cj1*sj2))+(((-1.0)*r21*x9352*x9363))+(((-1.0)*r22*x9364)));
evalcond[2]=((((-1.0)*r01*x9352*x9362))+(((-1.0)*r00*x9358*x9362))+(((-1.0)*cj0*x9353))+((x9350*x9359))+(((-1.0)*x9361*x9363))+(((-1.0)*r02*sj5*x9362)));
evalcond[3]=((((-1.0)*r12*sj5*x9362))+(((-1.0)*sj0*x9353))+((x9350*x9355))+(((-1.0)*r11*x9352*x9362))+(((-1.0)*x9357*x9363))+(((-1.0)*r10*x9358*x9362)));
evalcond[4]=((((-1.0)*x9355*x9362))+((x9351*x9357))+((cj0*cj2))+((sj0*x9354))+(((-1.0)*r11*x9352*x9363))+(((-1.0)*r12*x9364))+(((-1.0)*r10*x9358*x9363)));
evalcond[5]=(((cj0*x9354))+(((-1.0)*r01*x9352*x9363))+(((-1.0)*r00*x9358*x9363))+(((-1.0)*x9359*x9362))+(((-1.0)*cj2*sj0))+(((-1.0)*r02*x9364))+((x9351*x9361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9365=(cj1*cj2);
IkReal x9366=(cj5*r22);
IkReal x9367=(cj6*r21);
IkReal x9368=((1.0)*sj5);
IkReal x9369=((0.01)*cj5);
IkReal x9370=(r20*sj6);
IkReal x9371=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x9370*x9371))+(((-1.0)*x9367*x9371))+(((-0.069)*x9365))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*x9366))+((x9369*x9370))+((x9367*x9369))+(((-0.36442)*sj1)));
evalcond[2]=(x9366+(((-1.0)*x9367*x9368))+(((-1.0)*x9368*x9370))+(((-1.0)*x9365)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9372=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x9372;
j0eval[1]=IKsign(x9372);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9373=cj5*cj5;
IkReal x9374=cj6*cj6;
IkReal x9375=r22*r22;
IkReal x9376=r21*r21;
IkReal x9377=r20*r20;
IkReal x9378=(cj6*r21);
IkReal x9379=((2.0)*r20*sj6);
IkReal x9380=(cj5*r22*sj5);
IkReal x9381=((1.0)*x9373);
IkReal x9382=(x9374*x9376);
IkReal x9383=(x9374*x9377);
IkReal x9384=((((-2.0)*x9378*x9380))+x9382+((x9378*x9379))+(((-1.0)*x9381*x9382))+(((-1.0)*x9379*x9380))+(((-1.0)*x9376))+(((-1.0)*x9375))+(((-1.0)*x9383))+(((-1.0)*x9377*x9381))+(((-1.0)*x9373*x9378*x9379))+((x9373*x9383))+((x9373*x9375)));
j4eval[0]=x9384;
j4eval[1]=IKsign(x9384);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x9385=cj1*cj1;
IkReal x9386=cj2*cj2;
IkReal x9387=(cj2*sj1);
IkReal x9388=(x9385*x9386);
j0eval[0]=((-1.0)+(((5.28144927536232)*cj1*x9387))+x9387+x9388);
j0eval[1]=IKsign(((-69.0)+(((364.42)*cj1*x9387))+(((69.0)*x9387))+(((69.0)*x9388))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x9389=(cj5*r22);
IkReal x9390=(cj6*r21);
IkReal x9391=((1.0)*sj5);
IkReal x9392=((0.01)*cj5);
IkReal x9393=(r20*sj6);
IkReal x9394=((0.37429)*sj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((-0.069)+(((-1.0)*x9390*x9394))+((x9392*x9393))+(((0.01)*r22*sj5))+(((0.37429)*x9389))+(((-1.0)*pz))+((x9390*x9392))+(((-1.0)*x9393*x9394)));
evalcond[2]=((-1.0)+x9389+(((-1.0)*x9391*x9393))+(((-1.0)*x9390*x9391)));
evalcond[3]=(((cj5*r12))+(((-1.0)*cj6*r11*x9391))+(((-1.0)*r10*sj6*x9391)));
evalcond[4]=((((-1.0)*cj6*r01*x9391))+(((-1.0)*r00*sj6*x9391))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9395=(r10*sj6);
IkReal x9396=((0.863573439158322)*sj5);
IkReal x9397=((0.0230723086152)*cj5);
IkReal x9398=(cj6*r11);
IkReal x9399=(r00*sj6);
IkReal x9400=((0.0230723086152)*sj5);
IkReal x9401=((0.863573439158322)*cj5);
IkReal x9402=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+((x9396*x9398))+((x9395*x9396))+(((-1.0)*r12*x9400))+(((-1.0)*r12*x9401))+(((-1.0)*x9397*x9398))+(((-1.0)*x9395*x9397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+((x9396*x9399))+(((-1.0)*x9397*x9402))+((x9396*x9402))+(((-1.0)*r02*x9400))+(((-1.0)*r02*x9401))+(((-1.0)*x9397*x9399)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+((x9396*x9398))+((x9395*x9396))+(((-1.0)*r12*x9400))+(((-1.0)*r12*x9401))+(((-1.0)*x9397*x9398))+(((-1.0)*x9395*x9397))))+IKsqr(((((2.30723086152)*px))+((x9396*x9399))+(((-1.0)*x9397*x9402))+((x9396*x9402))+(((-1.0)*r02*x9400))+(((-1.0)*r02*x9401))+(((-1.0)*x9397*x9399))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+((x9396*x9398))+((x9395*x9396))+(((-1.0)*r12*x9400))+(((-1.0)*r12*x9401))+(((-1.0)*x9397*x9398))+(((-1.0)*x9395*x9397))), ((((2.30723086152)*px))+((x9396*x9399))+(((-1.0)*x9397*x9402))+((x9396*x9402))+(((-1.0)*r02*x9400))+(((-1.0)*r02*x9401))+(((-1.0)*x9397*x9399))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x9403=((0.01)*cj5);
IkReal x9404=(cj6*r01);
IkReal x9405=((0.37429)*sj5);
IkReal x9406=(cj6*r11);
IkReal x9407=((0.01)*sj5);
IkReal x9408=(r00*sj6);
IkReal x9409=((0.37429)*cj5);
IkReal x9410=(r10*sj6);
evalcond[0]=((((-1.0)*x9405*x9408))+(((-1.0)*x9404*x9405))+(((-1.0)*px))+((x9403*x9408))+((x9403*x9404))+((r02*x9407))+((r02*x9409))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=(((r12*x9409))+((r12*x9407))+(((0.43342)*(IKsin(j0))))+(((-1.0)*x9405*x9406))+(((-1.0)*py))+((x9403*x9406))+(((-1.0)*x9405*x9410))+((x9403*x9410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9411=(cj0*r20);
IkReal x9412=(cj0*r21);
IkReal x9413=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9413;
j4eval[1]=((IKabs((((cj5*cj6*x9412))+((cj5*sj6*x9411))+((cj0*r22*sj5)))))+(IKabs((((sj6*x9412))+(((-1.0)*cj6*x9411))))));
j4eval[2]=IKsign(x9413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9414=(sj0*sj6);
IkReal x9415=((1.0)*cj6);
IkReal x9416=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x9415))+((cj5*r02)));
j4eval[0]=x9416;
j4eval[1]=IKsign(x9416);
j4eval[2]=((IKabs((((r22*sj0*sj5))+((cj5*r20*x9414))+((cj5*cj6*r21*sj0)))))+(IKabs((((r21*x9414))+(((-1.0)*r20*sj0*x9415))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x9417=cj6*cj6;
IkReal x9418=cj5*cj5;
IkReal x9419=(r12*sj5);
IkReal x9420=(r22*sj5);
IkReal x9421=((1.0)*r11);
IkReal x9422=(cj0*sj6);
IkReal x9423=(cj5*r20);
IkReal x9424=((1.0)*cj6);
IkReal x9425=(r10*r20);
IkReal x9426=(r10*sj6);
IkReal x9427=(r12*r22);
IkReal x9428=(cj5*cj6*r21);
IkReal x9429=(r21*x9417);
IkReal x9430=(cj6*r20*sj6);
IkReal x9431=(r11*x9418);
IkReal x9432=((1.0)*x9418);
IkReal x9433=(((x9429*x9431))+(((-1.0)*x9427*x9432))+(((-1.0)*x9421*x9430))+((cj6*r21*x9418*x9426))+((x9419*x9428))+((r11*r21))+(((-1.0)*x9421*x9429))+((x9417*x9425))+(((-1.0)*x9417*x9425*x9432))+((x9418*x9425))+((x9430*x9431))+(((-1.0)*r21*x9424*x9426))+x9427+((cj5*x9420*x9426))+((sj6*x9419*x9423))+((cj5*cj6*r11*x9420)));
j4eval[0]=x9433;
j4eval[1]=IKsign(x9433);
j4eval[2]=((IKabs((((cj0*x9420))+((cj0*x9428))+((x9422*x9423)))))+(IKabs(((((-1.0)*cj0*r20*x9424))+((r21*x9422))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x9434=(cj5*r12);
IkReal x9435=(r10*sj6);
IkReal x9436=((0.37429)*sj5);
IkReal x9437=((0.01)*cj5);
IkReal x9438=(cj6*r11);
IkReal x9439=(r00*sj6);
IkReal x9440=(r20*sj6);
IkReal x9441=((1.0)*sj5);
IkReal x9442=((0.01)*sj5);
IkReal x9443=(cj6*r01);
IkReal x9444=(cj5*r02);
IkReal x9445=(cj6*r21);
IkReal x9446=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x9437*x9440))+((x9437*x9445))+(((-1.0)*x9436*x9440))+(((-1.0)*x9436*x9445))+(((0.37429)*x9446))+((r22*x9442))+(((-1.0)*pz)));
evalcond[2]=(((x9437*x9443))+(((-1.0)*x9436*x9443))+(((0.37429)*x9444))+((x9437*x9439))+(((-1.0)*px))+(((-1.0)*x9436*x9439))+((r02*x9442)));
evalcond[3]=((0.43342)+((x9437*x9438))+(((-1.0)*py))+(((-1.0)*x9436*x9438))+(((-1.0)*x9435*x9436))+((r12*x9442))+((x9435*x9437))+(((0.37429)*x9434)));
evalcond[4]=((-1.0)+(((-1.0)*x9441*x9445))+x9446+(((-1.0)*x9440*x9441)));
evalcond[5]=((((-1.0)*x9435*x9441))+(((-1.0)*x9438*x9441))+x9434);
evalcond[6]=((((-1.0)*x9439*x9441))+(((-1.0)*x9441*x9443))+x9444);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9447=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9447;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x9447);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9448=((1.0)*sj5);
IkReal x9449=((((-1.0)*cj6*r01*x9448))+((cj5*r02))+(((-1.0)*r00*sj6*x9448)));
j4eval[0]=x9449;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9449);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x9450=cj6*cj6;
IkReal x9451=cj5*cj5;
IkReal x9452=r00*r00;
IkReal x9453=r01*r01;
IkReal x9454=r02*r02;
IkReal x9455=(r00*sj6);
IkReal x9456=((2.0)*cj6*r01);
IkReal x9457=(cj5*r02*sj5);
IkReal x9458=((1.0)*x9450);
IkReal x9459=(x9451*x9452);
IkReal x9460=((((-1.0)*x9456*x9457))+((x9451*x9454))+(((-1.0)*x9452*x9458))+(((-2.0)*x9455*x9457))+(((-1.0)*x9451*x9455*x9456))+((x9455*x9456))+(((-1.0)*x9453))+(((-1.0)*x9454))+(((-1.0)*x9459))+(((-1.0)*x9451*x9453*x9458))+((x9450*x9459))+((x9450*x9453)));
j4eval[0]=x9460;
j4eval[1]=((IKabs((((r01*sj6))+(((-1.0)*cj6*r00)))))+(IKabs((((r02*sj5))+((cj5*cj6*r01))+((cj5*x9455))))));
j4eval[2]=IKsign(x9460);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9461=cj6*cj6;
IkReal x9462=cj5*cj5;
IkReal x9463=r00*r00;
IkReal x9464=r01*r01;
IkReal x9465=r02*r02;
IkReal x9466=(r01*sj6);
IkReal x9467=(cj6*r00);
IkReal x9468=(cj5*cj6*r01);
IkReal x9469=((2.0)*r02*sj5);
IkReal x9470=((1.0)*x9461);
IkReal x9471=(cj5*r00*sj6);
IkReal x9472=(x9462*x9463);
CheckValue<IkReal> x9473 = IKatan2WithCheck(IkReal((((r02*sj5))+x9471+x9468)),(x9466+(((-1.0)*x9467))),IKFAST_ATAN2_MAGTHRESH);
if(!x9473.valid){
continue;
}
CheckValue<IkReal> x9474=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9462*x9466*x9467))+(((-1.0)*x9462*x9464*x9470))+(((-1.0)*x9469*x9471))+((x9461*x9464))+(((-1.0)*x9468*x9469))+((x9461*x9472))+(((-1.0)*x9472))+(((-1.0)*x9465))+(((-1.0)*x9464))+(((2.0)*x9466*x9467))+(((-1.0)*x9463*x9470))+((x9462*x9465)))),-1);
if(!x9474.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9473.value)+(((1.5707963267949)*(x9474.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9475=IKcos(j4);
IkReal x9476=IKsin(j4);
IkReal x9477=(cj5*sj6);
IkReal x9478=(cj5*r21);
IkReal x9479=(cj5*r01);
IkReal x9480=(cj5*cj6*r11);
IkReal x9481=((1.0)*x9476);
IkReal x9482=(cj6*x9475);
IkReal x9483=(sj5*x9475);
IkReal x9484=(cj6*x9476);
IkReal x9485=(sj5*x9481);
IkReal x9486=((1.0)*sj6*x9475);
evalcond[0]=(((x9478*x9482))+((r20*x9475*x9477))+(((-1.0)*r21*sj6*x9481))+((r20*x9484))+((r22*x9483)));
evalcond[1]=((((-1.0)*r01*sj6*x9481))+((r00*x9484))+((r02*x9483))+((r00*x9475*x9477))+((x9479*x9482)));
evalcond[2]=((-1.0)+((r12*x9483))+(((-1.0)*r11*sj6*x9481))+((x9475*x9480))+((r10*x9484))+((r10*x9475*x9477)));
evalcond[3]=((((-1.0)*r20*x9477*x9481))+(((-1.0)*r21*x9486))+((r20*x9482))+(((-1.0)*cj6*x9478*x9481))+(((-1.0)*r22*x9485)));
evalcond[4]=((((-1.0)*x9480*x9481))+(((-1.0)*r10*x9477*x9481))+((r10*x9482))+(((-1.0)*r11*x9486))+(((-1.0)*r12*x9485)));
evalcond[5]=((-1.0)+(((-1.0)*r00*x9477*x9481))+(((-1.0)*cj6*x9479*x9481))+(((-1.0)*r01*x9486))+((r00*x9482))+(((-1.0)*r02*x9485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9487=((1.0)*sj5);
CheckValue<IkReal> x9488 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9488.valid){
continue;
}
CheckValue<IkReal> x9489=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x9487))+(((-1.0)*cj6*r01*x9487))+((cj5*r02)))),-1);
if(!x9489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9488.value)+(((1.5707963267949)*(x9489.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9490=IKcos(j4);
IkReal x9491=IKsin(j4);
IkReal x9492=(cj5*sj6);
IkReal x9493=(cj5*r21);
IkReal x9494=(cj5*r01);
IkReal x9495=(cj5*cj6*r11);
IkReal x9496=((1.0)*x9491);
IkReal x9497=(cj6*x9490);
IkReal x9498=(sj5*x9490);
IkReal x9499=(cj6*x9491);
IkReal x9500=(sj5*x9496);
IkReal x9501=((1.0)*sj6*x9490);
evalcond[0]=((((-1.0)*r21*sj6*x9496))+((r22*x9498))+((x9493*x9497))+((r20*x9490*x9492))+((r20*x9499)));
evalcond[1]=(((r02*x9498))+((r00*x9490*x9492))+((r00*x9499))+(((-1.0)*r01*sj6*x9496))+((x9494*x9497)));
evalcond[2]=((-1.0)+((r12*x9498))+(((-1.0)*r11*sj6*x9496))+((r10*x9499))+((x9490*x9495))+((r10*x9490*x9492)));
evalcond[3]=((((-1.0)*r22*x9500))+(((-1.0)*r20*x9492*x9496))+(((-1.0)*cj6*x9493*x9496))+(((-1.0)*r21*x9501))+((r20*x9497)));
evalcond[4]=(((r10*x9497))+(((-1.0)*r11*x9501))+(((-1.0)*r12*x9500))+(((-1.0)*r10*x9492*x9496))+(((-1.0)*x9495*x9496)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x9494*x9496))+(((-1.0)*r00*x9492*x9496))+((r00*x9497))+(((-1.0)*r02*x9500))+(((-1.0)*r01*x9501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9502 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x9502.valid){
continue;
}
CheckValue<IkReal> x9503=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x9503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9502.value)+(((1.5707963267949)*(x9503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9504=IKcos(j4);
IkReal x9505=IKsin(j4);
IkReal x9506=(cj5*sj6);
IkReal x9507=(cj5*r21);
IkReal x9508=(cj5*r01);
IkReal x9509=(cj5*cj6*r11);
IkReal x9510=((1.0)*x9505);
IkReal x9511=(cj6*x9504);
IkReal x9512=(sj5*x9504);
IkReal x9513=(cj6*x9505);
IkReal x9514=(sj5*x9510);
IkReal x9515=((1.0)*sj6*x9504);
evalcond[0]=(((r22*x9512))+((x9507*x9511))+((r20*x9504*x9506))+(((-1.0)*r21*sj6*x9510))+((r20*x9513)));
evalcond[1]=(((r00*x9513))+((x9508*x9511))+(((-1.0)*r01*sj6*x9510))+((r00*x9504*x9506))+((r02*x9512)));
evalcond[2]=((-1.0)+((x9504*x9509))+((r10*x9504*x9506))+((r12*x9512))+((r10*x9513))+(((-1.0)*r11*sj6*x9510)));
evalcond[3]=((((-1.0)*cj6*x9507*x9510))+(((-1.0)*r21*x9515))+(((-1.0)*r20*x9506*x9510))+(((-1.0)*r22*x9514))+((r20*x9511)));
evalcond[4]=((((-1.0)*r10*x9506*x9510))+(((-1.0)*r12*x9514))+(((-1.0)*r11*x9515))+((r10*x9511))+(((-1.0)*x9509*x9510)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x9514))+((r00*x9511))+(((-1.0)*cj6*x9508*x9510))+(((-1.0)*r01*x9515))+(((-1.0)*r00*x9506*x9510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9516=(cj5*r12);
IkReal x9517=(r10*sj6);
IkReal x9518=((0.37429)*sj5);
IkReal x9519=((0.01)*cj5);
IkReal x9520=(cj6*r11);
IkReal x9521=(r00*sj6);
IkReal x9522=(r20*sj6);
IkReal x9523=((1.0)*sj5);
IkReal x9524=((0.01)*sj5);
IkReal x9525=(cj6*r01);
IkReal x9526=(cj5*r02);
IkReal x9527=(cj6*r21);
IkReal x9528=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x9519*x9522))+((x9519*x9527))+(((0.37429)*x9528))+(((-1.0)*x9518*x9527))+(((-1.0)*x9518*x9522))+(((-1.0)*pz))+((r22*x9524)));
evalcond[2]=(((r02*x9524))+((x9519*x9525))+((x9519*x9521))+(((0.37429)*x9526))+(((-1.0)*x9518*x9521))+(((-1.0)*x9518*x9525))+(((-1.0)*px)));
evalcond[3]=((-0.43342)+(((-1.0)*x9517*x9518))+((x9519*x9520))+((r12*x9524))+((x9517*x9519))+(((0.37429)*x9516))+(((-1.0)*x9518*x9520))+(((-1.0)*py)));
evalcond[4]=((-1.0)+(((-1.0)*x9522*x9523))+x9528+(((-1.0)*x9523*x9527)));
evalcond[5]=(x9516+(((-1.0)*x9520*x9523))+(((-1.0)*x9517*x9523)));
evalcond[6]=((((-1.0)*x9521*x9523))+x9526+(((-1.0)*x9523*x9525)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9529=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x9529;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9530=((1.0)*cj6);
IkReal x9531=((((-1.0)*r21*sj5*x9530))+((cj5*r22))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x9531;
j4eval[1]=IKsign(x9531);
j4eval[2]=((IKabs((((r01*sj6))+(((-1.0)*r00*x9530)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x9532=cj6*cj6;
IkReal x9533=r01*r01;
IkReal x9534=cj5*cj5;
IkReal x9535=r00*r00;
IkReal x9536=r02*r02;
IkReal x9537=(r02*sj5);
IkReal x9538=(r01*sj6);
IkReal x9539=(cj6*r00);
IkReal x9540=(cj5*cj6*r01);
IkReal x9541=(cj5*r00*sj6);
IkReal x9542=((1.0)*x9534);
IkReal x9543=(x9532*x9535);
IkReal x9544=(x9532*x9533);
IkReal x9545=((((-1.0)*x9536*x9542))+(((-1.0)*x9542*x9543))+((x9534*x9544))+x9536+x9533+x9543+((x9534*x9535))+(((-1.0)*x9544))+(((2.0)*x9534*x9538*x9539))+(((2.0)*x9537*x9540))+(((2.0)*x9537*x9541))+(((-2.0)*x9538*x9539)));
j4eval[0]=x9545;
j4eval[1]=((IKabs((x9537+x9540+x9541)))+(IKabs(((((-1.0)*x9539))+x9538))));
j4eval[2]=IKsign(x9545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9546=cj6*cj6;
IkReal x9547=r01*r01;
IkReal x9548=cj5*cj5;
IkReal x9549=r00*r00;
IkReal x9550=r02*r02;
IkReal x9551=(r00*sj6);
IkReal x9552=(r02*sj5);
IkReal x9553=((2.0)*cj6*r01);
IkReal x9554=((1.0)*x9548);
IkReal x9555=(x9546*x9549);
IkReal x9556=(x9546*x9547);
CheckValue<IkReal> x9557 = IKatan2WithCheck(IkReal((((cj5*x9551))+((cj5*cj6*r01))+x9552)),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x9557.valid){
continue;
}
CheckValue<IkReal> x9558=IKPowWithIntegerCheck(IKsign((((x9548*x9549))+(((-1.0)*x9551*x9553))+(((-1.0)*x9554*x9555))+((x9548*x9556))+(((-1.0)*x9550*x9554))+x9547+x9550+x9555+((cj5*x9552*x9553))+((x9548*x9551*x9553))+(((-1.0)*x9556))+(((2.0)*cj5*x9551*x9552)))),-1);
if(!x9558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9557.value)+(((1.5707963267949)*(x9558.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9559=IKcos(j4);
IkReal x9560=IKsin(j4);
IkReal x9561=(cj5*sj6);
IkReal x9562=(cj5*r21);
IkReal x9563=(cj5*r01);
IkReal x9564=(cj5*cj6*r11);
IkReal x9565=((1.0)*x9560);
IkReal x9566=(cj6*x9559);
IkReal x9567=(sj5*x9559);
IkReal x9568=(cj6*x9560);
IkReal x9569=(sj5*x9565);
IkReal x9570=((1.0)*sj6*x9559);
evalcond[0]=(((x9562*x9566))+((r22*x9567))+(((-1.0)*r21*sj6*x9565))+((r20*x9559*x9561))+((r20*x9568)));
evalcond[1]=(((x9563*x9566))+((r00*x9568))+((r00*x9559*x9561))+(((-1.0)*r01*sj6*x9565))+((r02*x9567)));
evalcond[2]=((1.0)+((r12*x9567))+((r10*x9559*x9561))+((x9559*x9564))+((r10*x9568))+(((-1.0)*r11*sj6*x9565)));
evalcond[3]=((((-1.0)*r21*x9570))+(((-1.0)*r22*x9569))+((r20*x9566))+(((-1.0)*cj6*x9562*x9565))+(((-1.0)*r20*x9561*x9565)));
evalcond[4]=((((-1.0)*r10*x9561*x9565))+(((-1.0)*r11*x9570))+(((-1.0)*x9564*x9565))+(((-1.0)*r12*x9569))+((r10*x9566)));
evalcond[5]=((1.0)+(((-1.0)*cj6*x9563*x9565))+((r00*x9566))+(((-1.0)*r00*x9561*x9565))+(((-1.0)*r01*x9570))+(((-1.0)*r02*x9569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9571=((1.0)*cj6);
CheckValue<IkReal> x9572=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x9571))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x9572.valid){
continue;
}
CheckValue<IkReal> x9573 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x9571))),IKFAST_ATAN2_MAGTHRESH);
if(!x9573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9572.value)))+(x9573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9574=IKcos(j4);
IkReal x9575=IKsin(j4);
IkReal x9576=(cj5*sj6);
IkReal x9577=(cj5*r21);
IkReal x9578=(cj5*r01);
IkReal x9579=(cj5*cj6*r11);
IkReal x9580=((1.0)*x9575);
IkReal x9581=(cj6*x9574);
IkReal x9582=(sj5*x9574);
IkReal x9583=(cj6*x9575);
IkReal x9584=(sj5*x9580);
IkReal x9585=((1.0)*sj6*x9574);
evalcond[0]=(((r20*x9583))+((r22*x9582))+(((-1.0)*r21*sj6*x9580))+((r20*x9574*x9576))+((x9577*x9581)));
evalcond[1]=(((r00*x9583))+((x9578*x9581))+((r00*x9574*x9576))+(((-1.0)*r01*sj6*x9580))+((r02*x9582)));
evalcond[2]=((1.0)+((x9574*x9579))+((r10*x9574*x9576))+((r10*x9583))+(((-1.0)*r11*sj6*x9580))+((r12*x9582)));
evalcond[3]=((((-1.0)*r20*x9576*x9580))+((r20*x9581))+(((-1.0)*r22*x9584))+(((-1.0)*cj6*x9577*x9580))+(((-1.0)*r21*x9585)));
evalcond[4]=(((r10*x9581))+(((-1.0)*r12*x9584))+(((-1.0)*r10*x9576*x9580))+(((-1.0)*r11*x9585))+(((-1.0)*x9579*x9580)));
evalcond[5]=((1.0)+(((-1.0)*cj6*x9578*x9580))+((r00*x9581))+(((-1.0)*r00*x9576*x9580))+(((-1.0)*r01*x9585))+(((-1.0)*r02*x9584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9586=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x9586.valid){
continue;
}
CheckValue<IkReal> x9587 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9586.value)))+(x9587.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9588=IKcos(j4);
IkReal x9589=IKsin(j4);
IkReal x9590=(cj5*sj6);
IkReal x9591=(cj5*r21);
IkReal x9592=(cj5*r01);
IkReal x9593=(cj5*cj6*r11);
IkReal x9594=((1.0)*x9589);
IkReal x9595=(cj6*x9588);
IkReal x9596=(sj5*x9588);
IkReal x9597=(cj6*x9589);
IkReal x9598=(sj5*x9594);
IkReal x9599=((1.0)*sj6*x9588);
evalcond[0]=(((r20*x9597))+((r20*x9588*x9590))+(((-1.0)*r21*sj6*x9594))+((r22*x9596))+((x9591*x9595)));
evalcond[1]=(((r00*x9597))+((r00*x9588*x9590))+((x9592*x9595))+((r02*x9596))+(((-1.0)*r01*sj6*x9594)));
evalcond[2]=((1.0)+(((-1.0)*r11*sj6*x9594))+((r10*x9588*x9590))+((r10*x9597))+((x9588*x9593))+((r12*x9596)));
evalcond[3]=(((r20*x9595))+(((-1.0)*r22*x9598))+(((-1.0)*cj6*x9591*x9594))+(((-1.0)*r21*x9599))+(((-1.0)*r20*x9590*x9594)));
evalcond[4]=((((-1.0)*x9593*x9594))+((r10*x9595))+(((-1.0)*r11*x9599))+(((-1.0)*r10*x9590*x9594))+(((-1.0)*r12*x9598)));
evalcond[5]=((1.0)+(((-1.0)*r00*x9590*x9594))+(((-1.0)*cj6*x9592*x9594))+((r00*x9595))+(((-1.0)*r01*x9599))+(((-1.0)*r02*x9598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9600=(cj5*r12);
IkReal x9601=(r10*sj6);
IkReal x9602=((0.37429)*sj5);
IkReal x9603=((0.01)*cj5);
IkReal x9604=(cj6*r11);
IkReal x9605=(r00*sj6);
IkReal x9606=(r20*sj6);
IkReal x9607=((1.0)*sj5);
IkReal x9608=((0.01)*sj5);
IkReal x9609=(cj6*r01);
IkReal x9610=(cj5*r02);
IkReal x9611=(cj6*r21);
IkReal x9612=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((-1.0)*x9602*x9606))+((x9603*x9606))+(((0.37429)*x9612))+((x9603*x9611))+(((-1.0)*pz))+(((-1.0)*x9602*x9611))+((r22*x9608)));
evalcond[2]=((0.43342)+(((-1.0)*x9602*x9605))+(((-1.0)*x9602*x9609))+((x9603*x9609))+((x9603*x9605))+(((0.37429)*x9610))+(((-1.0)*px))+((r02*x9608)));
evalcond[3]=((((-1.0)*x9602*x9604))+((x9603*x9604))+((r12*x9608))+(((0.37429)*x9600))+(((-1.0)*py))+((x9601*x9603))+(((-1.0)*x9601*x9602)));
evalcond[4]=((-1.0)+(((-1.0)*x9606*x9607))+x9612+(((-1.0)*x9607*x9611)));
evalcond[5]=((((-1.0)*x9604*x9607))+x9600+(((-1.0)*x9601*x9607)));
evalcond[6]=((((-1.0)*x9607*x9609))+x9610+(((-1.0)*x9605*x9607)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9613=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9613;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9613);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9614=((1.0)*cj6);
IkReal x9615=(((cj5*r22))+(((-1.0)*r21*sj5*x9614))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x9615;
j4eval[1]=((IKabs(((((-1.0)*r10*x9614))+((r11*sj6)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x9615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9616=r11*r11;
IkReal x9617=cj5*cj5;
IkReal x9618=cj6*cj6;
IkReal x9619=r10*r10;
IkReal x9620=r12*r12;
IkReal x9621=(r12*sj5);
IkReal x9622=(r11*sj6);
IkReal x9623=((1.0)*x9618);
IkReal x9624=(cj5*cj6*r11);
IkReal x9625=(cj5*r10*sj6);
IkReal x9626=((2.0)*cj6*r10);
IkReal x9627=(x9617*x9619);
IkReal x9628=(((x9616*x9617*x9618))+((x9617*x9622*x9626))+((x9618*x9619))+(((-1.0)*x9617*x9620))+x9620+x9627+x9616+(((-1.0)*x9622*x9626))+(((-1.0)*x9616*x9623))+(((-1.0)*x9623*x9627))+(((2.0)*x9621*x9625))+(((2.0)*x9621*x9624)));
j4eval[0]=x9628;
j4eval[1]=((IKabs(((((-1.0)*cj6*r10))+x9622)))+(IKabs((x9621+x9625+x9624))));
j4eval[2]=IKsign(x9628);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9629=r11*r11;
IkReal x9630=cj5*cj5;
IkReal x9631=cj6*cj6;
IkReal x9632=r10*r10;
IkReal x9633=r12*r12;
IkReal x9634=(r10*sj6);
IkReal x9635=(r12*sj5);
IkReal x9636=((1.0)*x9631);
IkReal x9637=(cj5*cj6*r11);
IkReal x9638=((2.0)*cj6*r11);
IkReal x9639=(x9630*x9632);
CheckValue<IkReal> x9640 = IKatan2WithCheck(IkReal((x9635+x9637+((cj5*x9634)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9640.valid){
continue;
}
CheckValue<IkReal> x9641=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9629*x9636))+(((-1.0)*x9630*x9633))+(((-1.0)*x9636*x9639))+((x9630*x9634*x9638))+(((2.0)*x9635*x9637))+((x9631*x9632))+x9639+x9633+x9629+(((2.0)*cj5*x9634*x9635))+((x9629*x9630*x9631))+(((-1.0)*x9634*x9638)))),-1);
if(!x9641.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9640.value)+(((1.5707963267949)*(x9641.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9642=IKcos(j4);
IkReal x9643=IKsin(j4);
IkReal x9644=(cj5*sj6);
IkReal x9645=(cj5*r01);
IkReal x9646=(cj5*r21);
IkReal x9647=(cj5*cj6*r11);
IkReal x9648=((1.0)*x9643);
IkReal x9649=(cj6*x9642);
IkReal x9650=(sj5*x9642);
IkReal x9651=(cj6*x9643);
IkReal x9652=(sj5*x9648);
IkReal x9653=((1.0)*sj6*x9642);
evalcond[0]=(((x9646*x9649))+((r20*x9642*x9644))+(((-1.0)*r21*sj6*x9648))+((r20*x9651))+((r22*x9650)));
evalcond[1]=(((x9642*x9647))+((r12*x9650))+((r10*x9651))+(((-1.0)*r11*sj6*x9648))+((r10*x9642*x9644)));
evalcond[2]=((-1.0)+((x9645*x9649))+((r00*x9642*x9644))+((r00*x9651))+((r02*x9650))+(((-1.0)*r01*sj6*x9648)));
evalcond[3]=((((-1.0)*cj6*x9646*x9648))+(((-1.0)*r21*x9653))+(((-1.0)*r20*x9644*x9648))+((r20*x9649))+(((-1.0)*r22*x9652)));
evalcond[4]=((((-1.0)*r01*x9653))+(((-1.0)*cj6*x9645*x9648))+(((-1.0)*r00*x9644*x9648))+((r00*x9649))+(((-1.0)*r02*x9652)));
evalcond[5]=((1.0)+(((-1.0)*r10*x9644*x9648))+(((-1.0)*x9647*x9648))+((r10*x9649))+(((-1.0)*r11*x9653))+(((-1.0)*r12*x9652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9654=((1.0)*cj6);
CheckValue<IkReal> x9655=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x9654))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x9655.valid){
continue;
}
CheckValue<IkReal> x9656 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*r10*x9654))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9655.value)))+(x9656.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9657=IKcos(j4);
IkReal x9658=IKsin(j4);
IkReal x9659=(cj5*sj6);
IkReal x9660=(cj5*r01);
IkReal x9661=(cj5*r21);
IkReal x9662=(cj5*cj6*r11);
IkReal x9663=((1.0)*x9658);
IkReal x9664=(cj6*x9657);
IkReal x9665=(sj5*x9657);
IkReal x9666=(cj6*x9658);
IkReal x9667=(sj5*x9663);
IkReal x9668=((1.0)*sj6*x9657);
evalcond[0]=((((-1.0)*r21*sj6*x9663))+((x9661*x9664))+((r20*x9666))+((r22*x9665))+((r20*x9657*x9659)));
evalcond[1]=(((x9657*x9662))+(((-1.0)*r11*sj6*x9663))+((r12*x9665))+((r10*x9666))+((r10*x9657*x9659)));
evalcond[2]=((-1.0)+((x9660*x9664))+((r00*x9666))+((r00*x9657*x9659))+((r02*x9665))+(((-1.0)*r01*sj6*x9663)));
evalcond[3]=((((-1.0)*r20*x9659*x9663))+(((-1.0)*cj6*x9661*x9663))+(((-1.0)*r21*x9668))+((r20*x9664))+(((-1.0)*r22*x9667)));
evalcond[4]=((((-1.0)*cj6*x9660*x9663))+(((-1.0)*r01*x9668))+(((-1.0)*r00*x9659*x9663))+((r00*x9664))+(((-1.0)*r02*x9667)));
evalcond[5]=((1.0)+(((-1.0)*x9662*x9663))+(((-1.0)*r10*x9659*x9663))+((r10*x9664))+(((-1.0)*r12*x9667))+(((-1.0)*r11*x9668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9669=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9669.valid){
continue;
}
CheckValue<IkReal> x9670 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9669.value)))+(x9670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9671=IKcos(j4);
IkReal x9672=IKsin(j4);
IkReal x9673=(cj5*sj6);
IkReal x9674=(cj5*r01);
IkReal x9675=(cj5*r21);
IkReal x9676=(cj5*cj6*r11);
IkReal x9677=((1.0)*x9672);
IkReal x9678=(cj6*x9671);
IkReal x9679=(sj5*x9671);
IkReal x9680=(cj6*x9672);
IkReal x9681=(sj5*x9677);
IkReal x9682=((1.0)*sj6*x9671);
evalcond[0]=(((r20*x9671*x9673))+((x9675*x9678))+((r22*x9679))+(((-1.0)*r21*sj6*x9677))+((r20*x9680)));
evalcond[1]=(((r12*x9679))+(((-1.0)*r11*sj6*x9677))+((r10*x9671*x9673))+((x9671*x9676))+((r10*x9680)));
evalcond[2]=((-1.0)+((x9674*x9678))+((r02*x9679))+(((-1.0)*r01*sj6*x9677))+((r00*x9680))+((r00*x9671*x9673)));
evalcond[3]=((((-1.0)*r20*x9673*x9677))+((r20*x9678))+(((-1.0)*r22*x9681))+(((-1.0)*cj6*x9675*x9677))+(((-1.0)*r21*x9682)));
evalcond[4]=((((-1.0)*r02*x9681))+(((-1.0)*r00*x9673*x9677))+((r00*x9678))+(((-1.0)*cj6*x9674*x9677))+(((-1.0)*r01*x9682)));
evalcond[5]=((1.0)+(((-1.0)*r10*x9673*x9677))+(((-1.0)*r11*x9682))+(((-1.0)*r12*x9681))+((r10*x9678))+(((-1.0)*x9676*x9677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9683=(cj5*r12);
IkReal x9684=(r10*sj6);
IkReal x9685=((0.37429)*sj5);
IkReal x9686=((0.01)*cj5);
IkReal x9687=(cj6*r11);
IkReal x9688=(r00*sj6);
IkReal x9689=(r20*sj6);
IkReal x9690=((1.0)*sj5);
IkReal x9691=((0.01)*sj5);
IkReal x9692=(cj6*r01);
IkReal x9693=(cj5*r02);
IkReal x9694=(cj6*r21);
IkReal x9695=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+(((0.37429)*x9695))+(((-1.0)*x9685*x9689))+((r22*x9691))+(((-1.0)*x9685*x9694))+(((-1.0)*pz))+((x9686*x9689))+((x9686*x9694)));
evalcond[2]=((-0.43342)+(((0.37429)*x9693))+(((-1.0)*x9685*x9688))+(((-1.0)*x9685*x9692))+((r02*x9691))+(((-1.0)*px))+((x9686*x9688))+((x9686*x9692)));
evalcond[3]=((((0.37429)*x9683))+(((-1.0)*x9685*x9687))+(((-1.0)*py))+((x9684*x9686))+((x9686*x9687))+((r12*x9691))+(((-1.0)*x9684*x9685)));
evalcond[4]=((-1.0)+(((-1.0)*x9690*x9694))+x9695+(((-1.0)*x9689*x9690)));
evalcond[5]=((((-1.0)*x9687*x9690))+x9683+(((-1.0)*x9684*x9690)));
evalcond[6]=((((-1.0)*x9690*x9692))+x9693+(((-1.0)*x9688*x9690)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9696=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9696;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x9696);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9697=((1.0)*sj5);
IkReal x9698=(((cj5*r12))+(((-1.0)*r10*sj6*x9697))+(((-1.0)*cj6*r11*x9697)));
j4eval[0]=x9698;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9698);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9699=cj6*cj6;
IkReal x9700=cj5*cj5;
IkReal x9701=r10*r10;
IkReal x9702=r11*r11;
IkReal x9703=r12*r12;
IkReal x9704=(r10*sj6);
IkReal x9705=(r12*sj5);
IkReal x9706=((2.0)*cj6*r11);
IkReal x9707=((1.0)*x9701);
IkReal x9708=(x9699*x9702);
IkReal x9709=((((-1.0)*x9700*x9704*x9706))+((x9704*x9706))+((x9700*x9703))+(((-1.0)*x9703))+(((-1.0)*x9702))+((x9699*x9700*x9701))+(((-1.0)*x9700*x9707))+x9708+(((-1.0)*x9700*x9708))+(((-2.0)*cj5*x9704*x9705))+(((-1.0)*x9699*x9707))+(((-1.0)*cj5*x9705*x9706)));
j4eval[0]=x9709;
j4eval[1]=((IKabs((x9705+((cj5*cj6*r11))+((cj5*x9704)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x9709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9710=cj6*cj6;
IkReal x9711=cj5*cj5;
IkReal x9712=r10*r10;
IkReal x9713=r11*r11;
IkReal x9714=r12*r12;
IkReal x9715=(r10*sj6);
IkReal x9716=(r12*sj5);
IkReal x9717=((2.0)*cj6*r11);
IkReal x9718=(x9710*x9713);
IkReal x9719=(x9711*x9712);
CheckValue<IkReal> x9720=IKPowWithIntegerCheck(IKsign(((((-1.0)*x9711*x9715*x9717))+(((-2.0)*cj5*x9715*x9716))+(((-1.0)*cj5*x9716*x9717))+((x9711*x9714))+x9718+((x9715*x9717))+(((-1.0)*x9710*x9712))+((x9710*x9719))+(((-1.0)*x9711*x9718))+(((-1.0)*x9719))+(((-1.0)*x9714))+(((-1.0)*x9713)))),-1);
if(!x9720.valid){
continue;
}
CheckValue<IkReal> x9721 = IKatan2WithCheck(IkReal((((cj5*x9715))+x9716+((cj5*cj6*r11)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9721.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9720.value)))+(x9721.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9722=IKcos(j4);
IkReal x9723=IKsin(j4);
IkReal x9724=(cj5*sj6);
IkReal x9725=(cj5*r01);
IkReal x9726=(cj5*r21);
IkReal x9727=(cj5*cj6*r11);
IkReal x9728=((1.0)*x9723);
IkReal x9729=(cj6*x9722);
IkReal x9730=(sj5*x9722);
IkReal x9731=(cj6*x9723);
IkReal x9732=(sj5*x9728);
IkReal x9733=((1.0)*sj6*x9722);
evalcond[0]=(((x9726*x9729))+((r20*x9731))+((r20*x9722*x9724))+(((-1.0)*r21*sj6*x9728))+((r22*x9730)));
evalcond[1]=(((x9722*x9727))+(((-1.0)*r11*sj6*x9728))+((r10*x9722*x9724))+((r12*x9730))+((r10*x9731)));
evalcond[2]=((1.0)+((r00*x9722*x9724))+((r02*x9730))+((x9725*x9729))+(((-1.0)*r01*sj6*x9728))+((r00*x9731)));
evalcond[3]=((((-1.0)*r21*x9733))+(((-1.0)*cj6*x9726*x9728))+((r20*x9729))+(((-1.0)*r20*x9724*x9728))+(((-1.0)*r22*x9732)));
evalcond[4]=((((-1.0)*r01*x9733))+(((-1.0)*r02*x9732))+(((-1.0)*cj6*x9725*x9728))+(((-1.0)*r00*x9724*x9728))+((r00*x9729)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x9733))+(((-1.0)*r12*x9732))+(((-1.0)*r10*x9724*x9728))+(((-1.0)*x9727*x9728))+((r10*x9729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9734=((1.0)*sj5);
CheckValue<IkReal> x9735 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9735.valid){
continue;
}
CheckValue<IkReal> x9736=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x9734))+(((-1.0)*cj6*r11*x9734)))),-1);
if(!x9736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9735.value)+(((1.5707963267949)*(x9736.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9737=IKcos(j4);
IkReal x9738=IKsin(j4);
IkReal x9739=(cj5*sj6);
IkReal x9740=(cj5*r01);
IkReal x9741=(cj5*r21);
IkReal x9742=(cj5*cj6*r11);
IkReal x9743=((1.0)*x9738);
IkReal x9744=(cj6*x9737);
IkReal x9745=(sj5*x9737);
IkReal x9746=(cj6*x9738);
IkReal x9747=(sj5*x9743);
IkReal x9748=((1.0)*sj6*x9737);
evalcond[0]=(((r22*x9745))+((r20*x9737*x9739))+(((-1.0)*r21*sj6*x9743))+((r20*x9746))+((x9741*x9744)));
evalcond[1]=(((x9737*x9742))+((r10*x9746))+(((-1.0)*r11*sj6*x9743))+((r10*x9737*x9739))+((r12*x9745)));
evalcond[2]=((1.0)+((r00*x9737*x9739))+((x9740*x9744))+(((-1.0)*r01*sj6*x9743))+((r02*x9745))+((r00*x9746)));
evalcond[3]=((((-1.0)*r20*x9739*x9743))+(((-1.0)*cj6*x9741*x9743))+((r20*x9744))+(((-1.0)*r22*x9747))+(((-1.0)*r21*x9748)));
evalcond[4]=((((-1.0)*r00*x9739*x9743))+(((-1.0)*r02*x9747))+(((-1.0)*cj6*x9740*x9743))+(((-1.0)*r01*x9748))+((r00*x9744)));
evalcond[5]=((-1.0)+(((-1.0)*x9742*x9743))+(((-1.0)*r10*x9739*x9743))+((r10*x9744))+(((-1.0)*r11*x9748))+(((-1.0)*r12*x9747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9749=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x9749.valid){
continue;
}
CheckValue<IkReal> x9750 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9749.value)))+(x9750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9751=IKcos(j4);
IkReal x9752=IKsin(j4);
IkReal x9753=(cj5*sj6);
IkReal x9754=(cj5*r01);
IkReal x9755=(cj5*r21);
IkReal x9756=(cj5*cj6*r11);
IkReal x9757=((1.0)*x9752);
IkReal x9758=(cj6*x9751);
IkReal x9759=(sj5*x9751);
IkReal x9760=(cj6*x9752);
IkReal x9761=(sj5*x9757);
IkReal x9762=((1.0)*sj6*x9751);
evalcond[0]=(((r20*x9751*x9753))+((r22*x9759))+((r20*x9760))+((x9755*x9758))+(((-1.0)*r21*sj6*x9757)));
evalcond[1]=(((r10*x9760))+((r10*x9751*x9753))+((x9751*x9756))+(((-1.0)*r11*sj6*x9757))+((r12*x9759)));
evalcond[2]=((1.0)+((r00*x9751*x9753))+((r00*x9760))+(((-1.0)*r01*sj6*x9757))+((x9754*x9758))+((r02*x9759)));
evalcond[3]=((((-1.0)*r22*x9761))+(((-1.0)*r20*x9753*x9757))+(((-1.0)*r21*x9762))+(((-1.0)*cj6*x9755*x9757))+((r20*x9758)));
evalcond[4]=(((r00*x9758))+(((-1.0)*r00*x9753*x9757))+(((-1.0)*cj6*x9754*x9757))+(((-1.0)*r02*x9761))+(((-1.0)*r01*x9762)));
evalcond[5]=((-1.0)+(((-1.0)*x9756*x9757))+((r10*x9758))+(((-1.0)*r10*x9753*x9757))+(((-1.0)*r12*x9761))+(((-1.0)*r11*x9762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9763=cj6*cj6;
IkReal x9764=cj5*cj5;
IkReal x9765=(r22*sj5);
IkReal x9766=((1.0)*r11);
IkReal x9767=(r20*sj6);
IkReal x9768=(cj0*cj5);
IkReal x9769=(cj6*r21);
IkReal x9770=((1.0)*r20);
IkReal x9771=(r12*r22);
IkReal x9772=(r10*sj6);
IkReal x9773=(r21*x9763);
IkReal x9774=(r10*x9764);
IkReal x9775=(r11*x9764);
IkReal x9776=(cj5*r12*sj5);
CheckValue<IkReal> x9777=IKPowWithIntegerCheck(IKsign((((cj5*cj6*r11*x9765))+((x9773*x9775))+((x9764*x9769*x9772))+((r10*r20*x9763))+((r11*r21))+((x9767*x9776))+((x9769*x9776))+((cj5*x9765*x9772))+(((-1.0)*cj6*x9766*x9767))+x9771+(((-1.0)*x9769*x9772))+((r20*x9774))+(((-1.0)*x9766*x9773))+((cj6*x9767*x9775))+(((-1.0)*x9764*x9771))+(((-1.0)*x9763*x9770*x9774)))),-1);
if(!x9777.valid){
continue;
}
CheckValue<IkReal> x9778 = IKatan2WithCheck(IkReal((((x9767*x9768))+((x9768*x9769))+((cj0*x9765)))),(((cj0*r21*sj6))+(((-1.0)*cj0*cj6*x9770))),IKFAST_ATAN2_MAGTHRESH);
if(!x9778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9777.value)))+(x9778.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9779=IKcos(j4);
IkReal x9780=IKsin(j4);
IkReal x9781=((1.0)*sj0);
IkReal x9782=(cj5*r11);
IkReal x9783=((1.0)*sj6);
IkReal x9784=(cj5*r01);
IkReal x9785=(cj6*x9779);
IkReal x9786=(sj5*x9779);
IkReal x9787=(r21*x9780);
IkReal x9788=(cj6*x9780);
IkReal x9789=((1.0)*sj5*x9780);
IkReal x9790=(cj5*sj6*x9779);
IkReal x9791=(cj5*x9780*x9783);
evalcond[0]=(((cj5*r21*x9785))+((r20*x9790))+((r22*x9786))+(((-1.0)*x9783*x9787))+((r20*x9788)));
evalcond[1]=((((-1.0)*r21*x9779*x9783))+(((-1.0)*r22*x9789))+((r20*x9785))+(((-1.0)*cj5*cj6*x9787))+(((-1.0)*r20*x9791)));
evalcond[2]=(((r00*x9788))+((r00*x9790))+((r02*x9786))+(((-1.0)*r01*x9780*x9783))+(((-1.0)*cj0))+((x9784*x9785)));
evalcond[3]=(((x9782*x9785))+((r10*x9790))+(((-1.0)*r11*x9780*x9783))+((r10*x9788))+((r12*x9786))+(((-1.0)*x9781)));
evalcond[4]=((((-1.0)*r12*x9789))+(((-1.0)*x9782*x9788))+cj0+((r10*x9785))+(((-1.0)*r10*x9791))+(((-1.0)*r11*x9779*x9783)));
evalcond[5]=(((r00*x9785))+(((-1.0)*r01*x9779*x9783))+(((-1.0)*x9784*x9788))+(((-1.0)*r00*x9791))+(((-1.0)*x9781))+(((-1.0)*r02*x9789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9792=(sj0*sj6);
IkReal x9793=((1.0)*cj6);
CheckValue<IkReal> x9794 = IKatan2WithCheck(IkReal((((r22*sj0*sj5))+((cj5*cj6*r21*sj0))+((cj5*r20*x9792)))),((((-1.0)*r20*sj0*x9793))+((r21*x9792))),IKFAST_ATAN2_MAGTHRESH);
if(!x9794.valid){
continue;
}
CheckValue<IkReal> x9795=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x9793))+((cj5*r02)))),-1);
if(!x9795.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9794.value)+(((1.5707963267949)*(x9795.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9796=IKcos(j4);
IkReal x9797=IKsin(j4);
IkReal x9798=((1.0)*sj0);
IkReal x9799=(cj5*r11);
IkReal x9800=((1.0)*sj6);
IkReal x9801=(cj5*r01);
IkReal x9802=(cj6*x9796);
IkReal x9803=(sj5*x9796);
IkReal x9804=(r21*x9797);
IkReal x9805=(cj6*x9797);
IkReal x9806=((1.0)*sj5*x9797);
IkReal x9807=(cj5*sj6*x9796);
IkReal x9808=(cj5*x9797*x9800);
evalcond[0]=((((-1.0)*x9800*x9804))+((cj5*r21*x9802))+((r22*x9803))+((r20*x9807))+((r20*x9805)));
evalcond[1]=((((-1.0)*r20*x9808))+(((-1.0)*r22*x9806))+((r20*x9802))+(((-1.0)*r21*x9796*x9800))+(((-1.0)*cj5*cj6*x9804)));
evalcond[2]=(((r00*x9805))+((r00*x9807))+((r02*x9803))+((x9801*x9802))+(((-1.0)*r01*x9797*x9800))+(((-1.0)*cj0)));
evalcond[3]=(((r10*x9807))+((r10*x9805))+((r12*x9803))+(((-1.0)*r11*x9797*x9800))+((x9799*x9802))+(((-1.0)*x9798)));
evalcond[4]=(((r10*x9802))+cj0+(((-1.0)*x9799*x9805))+(((-1.0)*r10*x9808))+(((-1.0)*r12*x9806))+(((-1.0)*r11*x9796*x9800)));
evalcond[5]=(((r00*x9802))+(((-1.0)*r02*x9806))+(((-1.0)*r01*x9796*x9800))+(((-1.0)*x9798))+(((-1.0)*r00*x9808))+(((-1.0)*x9801*x9805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9809=(cj0*r20);
IkReal x9810=(cj0*r21);
CheckValue<IkReal> x9811=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9811.valid){
continue;
}
CheckValue<IkReal> x9812 = IKatan2WithCheck(IkReal((((cj5*cj6*x9810))+((cj5*sj6*x9809))+((cj0*r22*sj5)))),((((-1.0)*cj6*x9809))+((sj6*x9810))),IKFAST_ATAN2_MAGTHRESH);
if(!x9812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9811.value)))+(x9812.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9813=IKcos(j4);
IkReal x9814=IKsin(j4);
IkReal x9815=((1.0)*sj0);
IkReal x9816=(cj5*r11);
IkReal x9817=((1.0)*sj6);
IkReal x9818=(cj5*r01);
IkReal x9819=(cj6*x9813);
IkReal x9820=(sj5*x9813);
IkReal x9821=(r21*x9814);
IkReal x9822=(cj6*x9814);
IkReal x9823=((1.0)*sj5*x9814);
IkReal x9824=(cj5*sj6*x9813);
IkReal x9825=(cj5*x9814*x9817);
evalcond[0]=(((r20*x9824))+((r20*x9822))+((cj5*r21*x9819))+((r22*x9820))+(((-1.0)*x9817*x9821)));
evalcond[1]=((((-1.0)*r21*x9813*x9817))+(((-1.0)*r20*x9825))+(((-1.0)*cj5*cj6*x9821))+(((-1.0)*r22*x9823))+((r20*x9819)));
evalcond[2]=(((r00*x9824))+((r00*x9822))+(((-1.0)*r01*x9814*x9817))+((x9818*x9819))+((r02*x9820))+(((-1.0)*cj0)));
evalcond[3]=((((-1.0)*x9815))+((x9816*x9819))+(((-1.0)*r11*x9814*x9817))+((r12*x9820))+((r10*x9824))+((r10*x9822)));
evalcond[4]=(cj0+(((-1.0)*r10*x9825))+(((-1.0)*r12*x9823))+((r10*x9819))+(((-1.0)*x9816*x9822))+(((-1.0)*r11*x9813*x9817)));
evalcond[5]=((((-1.0)*r00*x9825))+(((-1.0)*x9815))+(((-1.0)*r02*x9823))+(((-1.0)*x9818*x9822))+(((-1.0)*r01*x9813*x9817))+((r00*x9819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9826=(cj5*r22);
IkReal x9827=(cj6*r21);
IkReal x9828=((1.0)*sj5);
IkReal x9829=((0.01)*cj5);
IkReal x9830=(r20*sj6);
IkReal x9831=((0.37429)*sj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((0.069)+(((-1.0)*x9827*x9831))+(((0.37429)*x9826))+((x9827*x9829))+((x9829*x9830))+(((-1.0)*x9830*x9831))+(((0.01)*r22*sj5))+(((-1.0)*pz)));
evalcond[2]=((1.0)+(((-1.0)*x9827*x9828))+(((-1.0)*x9828*x9830))+x9826);
evalcond[3]=(((cj5*r12))+(((-1.0)*r10*sj6*x9828))+(((-1.0)*cj6*r11*x9828)));
evalcond[4]=((((-1.0)*r00*sj6*x9828))+(((-1.0)*cj6*r01*x9828))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x9832=(r10*sj6);
IkReal x9833=((0.863573439158322)*sj5);
IkReal x9834=((0.0230723086152)*cj5);
IkReal x9835=(cj6*r11);
IkReal x9836=(r00*sj6);
IkReal x9837=((0.0230723086152)*sj5);
IkReal x9838=((0.863573439158322)*cj5);
IkReal x9839=(cj6*r01);
if( IKabs(((((2.30723086152)*py))+(((-1.0)*x9832*x9834))+(((-1.0)*x9834*x9835))+((x9833*x9835))+((x9832*x9833))+(((-1.0)*r12*x9837))+(((-1.0)*r12*x9838)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.30723086152)*px))+(((-1.0)*x9834*x9836))+(((-1.0)*x9834*x9839))+((x9833*x9839))+((x9833*x9836))+(((-1.0)*r02*x9838))+(((-1.0)*r02*x9837)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.30723086152)*py))+(((-1.0)*x9832*x9834))+(((-1.0)*x9834*x9835))+((x9833*x9835))+((x9832*x9833))+(((-1.0)*r12*x9837))+(((-1.0)*r12*x9838))))+IKsqr(((((2.30723086152)*px))+(((-1.0)*x9834*x9836))+(((-1.0)*x9834*x9839))+((x9833*x9839))+((x9833*x9836))+(((-1.0)*r02*x9838))+(((-1.0)*r02*x9837))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.30723086152)*py))+(((-1.0)*x9832*x9834))+(((-1.0)*x9834*x9835))+((x9833*x9835))+((x9832*x9833))+(((-1.0)*r12*x9837))+(((-1.0)*r12*x9838))), ((((2.30723086152)*px))+(((-1.0)*x9834*x9836))+(((-1.0)*x9834*x9839))+((x9833*x9839))+((x9833*x9836))+(((-1.0)*r02*x9838))+(((-1.0)*r02*x9837))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x9840=((0.01)*cj5);
IkReal x9841=(cj6*r01);
IkReal x9842=((0.37429)*sj5);
IkReal x9843=(cj6*r11);
IkReal x9844=((0.01)*sj5);
IkReal x9845=(r00*sj6);
IkReal x9846=((0.37429)*cj5);
IkReal x9847=(r10*sj6);
evalcond[0]=(((x9840*x9845))+((x9840*x9841))+((r02*x9844))+((r02*x9846))+(((-1.0)*px))+(((-1.0)*x9841*x9842))+(((-1.0)*x9842*x9845))+(((0.43342)*(IKcos(j0)))));
evalcond[1]=(((x9840*x9847))+((x9840*x9843))+(((0.43342)*(IKsin(j0))))+(((-1.0)*py))+((r12*x9846))+((r12*x9844))+(((-1.0)*x9842*x9847))+(((-1.0)*x9842*x9843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9848=(cj0*r20);
IkReal x9849=(cj0*r21);
IkReal x9850=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9850;
j4eval[1]=((IKabs((((sj6*x9849))+(((-1.0)*cj6*x9848)))))+(IKabs((((cj5*sj6*x9848))+((cj0*r22*sj5))+((cj5*cj6*x9849))))));
j4eval[2]=IKsign(x9850);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9851=(sj0*sj6);
IkReal x9852=((1.0)*cj6);
IkReal x9853=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x9852))+((cj5*r02)));
j4eval[0]=x9853;
j4eval[1]=IKsign(x9853);
j4eval[2]=((IKabs((((cj5*r20*x9851))+((r22*sj0*sj5))+((cj5*cj6*r21*sj0)))))+(IKabs((((r21*x9851))+(((-1.0)*r20*sj0*x9852))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x9854=cj5*cj5;
IkReal x9855=cj6*cj6;
IkReal x9856=(r00*r20);
IkReal x9857=(r02*r22);
IkReal x9858=(cj5*sj5);
IkReal x9859=(cj6*r21);
IkReal x9860=(r00*sj6);
IkReal x9861=(r20*sj6);
IkReal x9862=(cj6*r01);
IkReal x9863=(cj5*sj0);
IkReal x9864=((1.0)*x9854);
IkReal x9865=(r01*r21*x9855);
IkReal x9866=((((-1.0)*x9857*x9864))+((x9854*x9856))+((x9855*x9856))+((x9854*x9859*x9860))+((r01*r21))+((x9854*x9865))+((r02*x9858*x9859))+((x9854*x9861*x9862))+(((-1.0)*x9861*x9862))+(((-1.0)*x9865))+(((-1.0)*x9855*x9856*x9864))+((r02*x9858*x9861))+(((-1.0)*x9859*x9860))+x9857+((r22*x9858*x9860))+((r22*x9858*x9862)));
j4eval[0]=x9866;
j4eval[1]=IKsign(x9866);
j4eval[2]=((IKabs((((r21*sj0*sj6))+(((-1.0)*cj6*r20*sj0)))))+(IKabs((((x9861*x9863))+((r22*sj0*sj5))+((x9859*x9863))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x9867=(cj5*r12);
IkReal x9868=(r10*sj6);
IkReal x9869=((0.37429)*sj5);
IkReal x9870=((0.01)*cj5);
IkReal x9871=(cj6*r11);
IkReal x9872=(r00*sj6);
IkReal x9873=(r20*sj6);
IkReal x9874=((1.0)*sj5);
IkReal x9875=((0.01)*sj5);
IkReal x9876=(cj6*r01);
IkReal x9877=(cj5*r02);
IkReal x9878=(cj6*r21);
IkReal x9879=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+(((0.37429)*x9879))+(((-1.0)*pz))+((r22*x9875))+((x9870*x9873))+((x9870*x9878))+(((-1.0)*x9869*x9878))+(((-1.0)*x9869*x9873)));
evalcond[2]=((0.43342)+((r02*x9875))+(((0.37429)*x9877))+(((-1.0)*px))+((x9870*x9876))+((x9870*x9872))+(((-1.0)*x9869*x9872))+(((-1.0)*x9869*x9876)));
evalcond[3]=(((r12*x9875))+(((-1.0)*x9868*x9869))+(((-1.0)*py))+((x9868*x9870))+(((0.37429)*x9867))+((x9870*x9871))+(((-1.0)*x9869*x9871)));
evalcond[4]=((1.0)+(((-1.0)*x9873*x9874))+(((-1.0)*x9874*x9878))+x9879);
evalcond[5]=((((-1.0)*x9871*x9874))+(((-1.0)*x9868*x9874))+x9867);
evalcond[6]=((((-1.0)*x9872*x9874))+(((-1.0)*x9874*x9876))+x9877);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9880=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x9880;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9880);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9881=((1.0)*cj6);
IkReal x9882=(((cj5*r22))+(((-1.0)*r21*sj5*x9881))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x9882;
j4eval[1]=((IKabs(((((-1.0)*r10*x9881))+((r11*sj6)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x9882);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x9883=cj6*cj6;
IkReal x9884=cj5*cj5;
IkReal x9885=r10*r10;
IkReal x9886=r11*r11;
IkReal x9887=r12*r12;
IkReal x9888=(r10*sj6);
IkReal x9889=(r12*sj5);
IkReal x9890=((2.0)*cj6*r11);
IkReal x9891=((1.0)*x9885);
IkReal x9892=(x9883*x9886);
IkReal x9893=(((x9884*x9887))+(((-1.0)*x9883*x9891))+(((-1.0)*x9884*x9892))+(((-1.0)*x9884*x9888*x9890))+(((-1.0)*x9884*x9891))+(((-1.0)*cj5*x9889*x9890))+(((-2.0)*cj5*x9888*x9889))+(((-1.0)*x9887))+(((-1.0)*x9886))+((x9883*x9884*x9885))+x9892+((x9888*x9890)));
j4eval[0]=x9893;
j4eval[1]=((IKabs((((cj5*cj6*r11))+((cj5*x9888))+x9889)))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x9893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9894=cj6*cj6;
IkReal x9895=cj5*cj5;
IkReal x9896=r10*r10;
IkReal x9897=r11*r11;
IkReal x9898=r12*r12;
IkReal x9899=(r10*sj6);
IkReal x9900=(r12*sj5);
IkReal x9901=((2.0)*cj6*r11);
IkReal x9902=(x9894*x9897);
IkReal x9903=(x9895*x9896);
CheckValue<IkReal> x9904=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*x9899*x9900))+(((-1.0)*x9895*x9899*x9901))+((x9899*x9901))+(((-1.0)*x9903))+((x9894*x9903))+(((-1.0)*x9897))+(((-1.0)*x9898))+(((-1.0)*x9895*x9902))+(((-1.0)*x9894*x9896))+x9902+(((-1.0)*cj5*x9900*x9901))+((x9895*x9898)))),-1);
if(!x9904.valid){
continue;
}
CheckValue<IkReal> x9905 = IKatan2WithCheck(IkReal((((cj5*cj6*r11))+((cj5*x9899))+x9900)),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9904.value)))+(x9905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9906=IKcos(j4);
IkReal x9907=IKsin(j4);
IkReal x9908=(cj5*sj6);
IkReal x9909=(cj5*r01);
IkReal x9910=(cj5*r21);
IkReal x9911=(cj5*cj6*r11);
IkReal x9912=((1.0)*x9907);
IkReal x9913=(cj6*x9906);
IkReal x9914=(sj5*x9906);
IkReal x9915=(cj6*x9907);
IkReal x9916=(sj5*x9912);
IkReal x9917=((1.0)*sj6*x9906);
evalcond[0]=(((r20*x9915))+((x9910*x9913))+((r22*x9914))+((r20*x9906*x9908))+(((-1.0)*r21*sj6*x9912)));
evalcond[1]=(((r12*x9914))+((x9906*x9911))+(((-1.0)*r11*sj6*x9912))+((r10*x9906*x9908))+((r10*x9915)));
evalcond[2]=((-1.0)+((r00*x9906*x9908))+(((-1.0)*r01*sj6*x9912))+((r00*x9915))+((x9909*x9913))+((r02*x9914)));
evalcond[3]=(((r20*x9913))+(((-1.0)*cj6*x9910*x9912))+(((-1.0)*r22*x9916))+(((-1.0)*r20*x9908*x9912))+(((-1.0)*r21*x9917)));
evalcond[4]=((((-1.0)*cj6*x9909*x9912))+(((-1.0)*r00*x9908*x9912))+((r00*x9913))+(((-1.0)*r02*x9916))+(((-1.0)*r01*x9917)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x9908*x9912))+(((-1.0)*r11*x9917))+(((-1.0)*r12*x9916))+((r10*x9913))+(((-1.0)*x9911*x9912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9918=((1.0)*cj6);
CheckValue<IkReal> x9919 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*r10*x9918))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9919.valid){
continue;
}
CheckValue<IkReal> x9920=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj5*x9918))+((cj5*r22))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x9920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9919.value)+(((1.5707963267949)*(x9920.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9921=IKcos(j4);
IkReal x9922=IKsin(j4);
IkReal x9923=(cj5*sj6);
IkReal x9924=(cj5*r01);
IkReal x9925=(cj5*r21);
IkReal x9926=(cj5*cj6*r11);
IkReal x9927=((1.0)*x9922);
IkReal x9928=(cj6*x9921);
IkReal x9929=(sj5*x9921);
IkReal x9930=(cj6*x9922);
IkReal x9931=(sj5*x9927);
IkReal x9932=((1.0)*sj6*x9921);
evalcond[0]=((((-1.0)*r21*sj6*x9927))+((r20*x9930))+((r20*x9921*x9923))+((x9925*x9928))+((r22*x9929)));
evalcond[1]=(((r10*x9930))+((x9921*x9926))+(((-1.0)*r11*sj6*x9927))+((r10*x9921*x9923))+((r12*x9929)));
evalcond[2]=((-1.0)+((r00*x9930))+((x9924*x9928))+(((-1.0)*r01*sj6*x9927))+((r02*x9929))+((r00*x9921*x9923)));
evalcond[3]=(((r20*x9928))+(((-1.0)*r22*x9931))+(((-1.0)*cj6*x9925*x9927))+(((-1.0)*r21*x9932))+(((-1.0)*r20*x9923*x9927)));
evalcond[4]=((((-1.0)*r01*x9932))+(((-1.0)*r02*x9931))+(((-1.0)*cj6*x9924*x9927))+(((-1.0)*r00*x9923*x9927))+((r00*x9928)));
evalcond[5]=((-1.0)+((r10*x9928))+(((-1.0)*x9926*x9927))+(((-1.0)*r10*x9923*x9927))+(((-1.0)*r12*x9931))+(((-1.0)*r11*x9932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9933=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x9933.valid){
continue;
}
CheckValue<IkReal> x9934 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9933.value)))+(x9934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9935=IKcos(j4);
IkReal x9936=IKsin(j4);
IkReal x9937=(cj5*sj6);
IkReal x9938=(cj5*r01);
IkReal x9939=(cj5*r21);
IkReal x9940=(cj5*cj6*r11);
IkReal x9941=((1.0)*x9936);
IkReal x9942=(cj6*x9935);
IkReal x9943=(sj5*x9935);
IkReal x9944=(cj6*x9936);
IkReal x9945=(sj5*x9941);
IkReal x9946=((1.0)*sj6*x9935);
evalcond[0]=(((r22*x9943))+(((-1.0)*r21*sj6*x9941))+((r20*x9944))+((r20*x9935*x9937))+((x9939*x9942)));
evalcond[1]=(((r10*x9935*x9937))+(((-1.0)*r11*sj6*x9941))+((r12*x9943))+((x9935*x9940))+((r10*x9944)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj6*x9941))+((r02*x9943))+((r00*x9935*x9937))+((r00*x9944))+((x9938*x9942)));
evalcond[3]=((((-1.0)*cj6*x9939*x9941))+(((-1.0)*r20*x9937*x9941))+(((-1.0)*r21*x9946))+((r20*x9942))+(((-1.0)*r22*x9945)));
evalcond[4]=((((-1.0)*cj6*x9938*x9941))+(((-1.0)*r01*x9946))+(((-1.0)*r00*x9937*x9941))+((r00*x9942))+(((-1.0)*r02*x9945)));
evalcond[5]=((-1.0)+(((-1.0)*x9940*x9941))+(((-1.0)*r10*x9937*x9941))+(((-1.0)*r11*x9946))+(((-1.0)*r12*x9945))+((r10*x9942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x9947=(cj5*r12);
IkReal x9948=(r10*sj6);
IkReal x9949=((0.37429)*sj5);
IkReal x9950=((0.01)*cj5);
IkReal x9951=(cj6*r11);
IkReal x9952=(r00*sj6);
IkReal x9953=(r20*sj6);
IkReal x9954=((1.0)*sj5);
IkReal x9955=((0.01)*sj5);
IkReal x9956=(cj6*r01);
IkReal x9957=(cj5*r02);
IkReal x9958=(cj6*r21);
IkReal x9959=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+((x9950*x9953))+((x9950*x9958))+(((-1.0)*pz))+(((0.37429)*x9959))+((r22*x9955))+(((-1.0)*x9949*x9958))+(((-1.0)*x9949*x9953)));
evalcond[2]=((-0.43342)+((x9950*x9956))+((x9950*x9952))+((r02*x9955))+(((-1.0)*px))+(((0.37429)*x9957))+(((-1.0)*x9949*x9956))+(((-1.0)*x9949*x9952)));
evalcond[3]=(((x9950*x9951))+((x9948*x9950))+(((-1.0)*py))+((r12*x9955))+(((0.37429)*x9947))+(((-1.0)*x9948*x9949))+(((-1.0)*x9949*x9951)));
evalcond[4]=((1.0)+(((-1.0)*x9953*x9954))+(((-1.0)*x9954*x9958))+x9959);
evalcond[5]=((((-1.0)*x9948*x9954))+x9947+(((-1.0)*x9951*x9954)));
evalcond[6]=((((-1.0)*x9954*x9956))+x9957+(((-1.0)*x9952*x9954)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9960=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x9960;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x9960);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9961=((1.0)*sj5);
IkReal x9962=(((cj5*r12))+(((-1.0)*r10*sj6*x9961))+(((-1.0)*cj6*r11*x9961)));
j4eval[0]=x9962;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x9962);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x9963=r11*r11;
IkReal x9964=cj5*cj5;
IkReal x9965=cj6*cj6;
IkReal x9966=r10*r10;
IkReal x9967=r12*r12;
IkReal x9968=(r12*sj5);
IkReal x9969=(r11*sj6);
IkReal x9970=((1.0)*x9965);
IkReal x9971=(cj5*cj6*r11);
IkReal x9972=(cj5*r10*sj6);
IkReal x9973=((2.0)*cj6*r10);
IkReal x9974=(x9964*x9966);
IkReal x9975=((((-1.0)*x9964*x9967))+(((2.0)*x9968*x9972))+(((2.0)*x9968*x9971))+((x9965*x9966))+(((-1.0)*x9969*x9973))+(((-1.0)*x9970*x9974))+((x9964*x9969*x9973))+((x9963*x9964*x9965))+(((-1.0)*x9963*x9970))+x9974+x9967+x9963);
j4eval[0]=x9975;
j4eval[1]=((IKabs(((((-1.0)*cj6*r10))+x9969)))+(IKabs((x9972+x9971+x9968))));
j4eval[2]=IKsign(x9975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9976=r11*r11;
IkReal x9977=cj5*cj5;
IkReal x9978=cj6*cj6;
IkReal x9979=r10*r10;
IkReal x9980=r12*r12;
IkReal x9981=(r10*sj6);
IkReal x9982=(r12*sj5);
IkReal x9983=((1.0)*x9978);
IkReal x9984=(cj5*cj6*r11);
IkReal x9985=((2.0)*cj6*r11);
IkReal x9986=(x9977*x9979);
CheckValue<IkReal> x9987=IKPowWithIntegerCheck(IKsign((((x9978*x9979))+(((-1.0)*x9981*x9985))+(((2.0)*x9982*x9984))+(((-1.0)*x9976*x9983))+(((2.0)*cj5*x9981*x9982))+(((-1.0)*x9977*x9980))+x9976+x9986+x9980+((x9977*x9981*x9985))+((x9976*x9977*x9978))+(((-1.0)*x9983*x9986)))),-1);
if(!x9987.valid){
continue;
}
CheckValue<IkReal> x9988 = IKatan2WithCheck(IkReal((((cj5*x9981))+x9984+x9982)),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x9988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9987.value)))+(x9988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9989=IKcos(j4);
IkReal x9990=IKsin(j4);
IkReal x9991=(cj5*sj6);
IkReal x9992=(cj5*r01);
IkReal x9993=(cj5*r21);
IkReal x9994=(cj5*cj6*r11);
IkReal x9995=((1.0)*x9990);
IkReal x9996=(cj6*x9989);
IkReal x9997=(sj5*x9989);
IkReal x9998=(cj6*x9990);
IkReal x9999=(sj5*x9995);
IkReal x10000=((1.0)*sj6*x9989);
evalcond[0]=(((r20*x9989*x9991))+((r22*x9997))+(((-1.0)*r21*sj6*x9995))+((r20*x9998))+((x9993*x9996)));
evalcond[1]=(((r10*x9998))+((r12*x9997))+((x9989*x9994))+((r10*x9989*x9991))+(((-1.0)*r11*sj6*x9995)));
evalcond[2]=((1.0)+((r00*x9998))+((r00*x9989*x9991))+((r02*x9997))+((x9992*x9996))+(((-1.0)*r01*sj6*x9995)));
evalcond[3]=((((-1.0)*r21*x10000))+(((-1.0)*r22*x9999))+(((-1.0)*cj6*x9993*x9995))+((r20*x9996))+(((-1.0)*r20*x9991*x9995)));
evalcond[4]=(((r00*x9996))+(((-1.0)*r02*x9999))+(((-1.0)*r00*x9991*x9995))+(((-1.0)*cj6*x9992*x9995))+(((-1.0)*r01*x10000)));
evalcond[5]=((1.0)+(((-1.0)*r10*x9991*x9995))+(((-1.0)*x9994*x9995))+((r10*x9996))+(((-1.0)*r11*x10000))+(((-1.0)*r12*x9999)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10001=((1.0)*sj5);
CheckValue<IkReal> x10002=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x10001))+(((-1.0)*cj6*r11*x10001)))),-1);
if(!x10002.valid){
continue;
}
CheckValue<IkReal> x10003 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10002.value)))+(x10003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10004=IKcos(j4);
IkReal x10005=IKsin(j4);
IkReal x10006=(cj5*sj6);
IkReal x10007=(cj5*r01);
IkReal x10008=(cj5*r21);
IkReal x10009=(cj5*cj6*r11);
IkReal x10010=((1.0)*x10005);
IkReal x10011=(cj6*x10004);
IkReal x10012=(sj5*x10004);
IkReal x10013=(cj6*x10005);
IkReal x10014=(sj5*x10010);
IkReal x10015=((1.0)*sj6*x10004);
evalcond[0]=(((r20*x10004*x10006))+((r22*x10012))+(((-1.0)*r21*sj6*x10010))+((r20*x10013))+((x10008*x10011)));
evalcond[1]=((((-1.0)*r11*sj6*x10010))+((r12*x10012))+((r10*x10013))+((x10004*x10009))+((r10*x10004*x10006)));
evalcond[2]=((1.0)+((r02*x10012))+((r00*x10004*x10006))+((x10007*x10011))+((r00*x10013))+(((-1.0)*r01*sj6*x10010)));
evalcond[3]=((((-1.0)*r21*x10015))+(((-1.0)*r20*x10006*x10010))+(((-1.0)*cj6*x10008*x10010))+(((-1.0)*r22*x10014))+((r20*x10011)));
evalcond[4]=((((-1.0)*r01*x10015))+(((-1.0)*r02*x10014))+(((-1.0)*r00*x10006*x10010))+((r00*x10011))+(((-1.0)*cj6*x10007*x10010)));
evalcond[5]=((1.0)+((r10*x10011))+(((-1.0)*r12*x10014))+(((-1.0)*x10009*x10010))+(((-1.0)*r11*x10015))+(((-1.0)*r10*x10006*x10010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10016=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10016.valid){
continue;
}
CheckValue<IkReal> x10017 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10016.value)))+(x10017.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10018=IKcos(j4);
IkReal x10019=IKsin(j4);
IkReal x10020=(cj5*sj6);
IkReal x10021=(cj5*r01);
IkReal x10022=(cj5*r21);
IkReal x10023=(cj5*cj6*r11);
IkReal x10024=((1.0)*x10019);
IkReal x10025=(cj6*x10018);
IkReal x10026=(sj5*x10018);
IkReal x10027=(cj6*x10019);
IkReal x10028=(sj5*x10024);
IkReal x10029=((1.0)*sj6*x10018);
evalcond[0]=(((r20*x10018*x10020))+((r20*x10027))+(((-1.0)*r21*sj6*x10024))+((x10022*x10025))+((r22*x10026)));
evalcond[1]=((((-1.0)*r11*sj6*x10024))+((r10*x10018*x10020))+((x10018*x10023))+((r10*x10027))+((r12*x10026)));
evalcond[2]=((1.0)+((x10021*x10025))+(((-1.0)*r01*sj6*x10024))+((r00*x10018*x10020))+((r00*x10027))+((r02*x10026)));
evalcond[3]=((((-1.0)*r20*x10020*x10024))+(((-1.0)*r22*x10028))+((r20*x10025))+(((-1.0)*cj6*x10022*x10024))+(((-1.0)*r21*x10029)));
evalcond[4]=((((-1.0)*r02*x10028))+(((-1.0)*r01*x10029))+(((-1.0)*cj6*x10021*x10024))+((r00*x10025))+(((-1.0)*r00*x10020*x10024)));
evalcond[5]=((1.0)+(((-1.0)*r12*x10028))+(((-1.0)*r10*x10020*x10024))+((r10*x10025))+(((-1.0)*x10023*x10024))+(((-1.0)*r11*x10029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10030=(cj5*r12);
IkReal x10031=(r10*sj6);
IkReal x10032=((0.37429)*sj5);
IkReal x10033=((0.01)*cj5);
IkReal x10034=(cj6*r11);
IkReal x10035=(r00*sj6);
IkReal x10036=(r20*sj6);
IkReal x10037=((1.0)*sj5);
IkReal x10038=((0.01)*sj5);
IkReal x10039=(cj6*r01);
IkReal x10040=(cj5*r02);
IkReal x10041=(cj6*r21);
IkReal x10042=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((0.37429)*x10042))+((x10033*x10036))+((x10033*x10041))+(((-1.0)*pz))+(((-1.0)*x10032*x10041))+(((-1.0)*x10032*x10036))+((r22*x10038)));
evalcond[2]=((((0.37429)*x10040))+((x10033*x10039))+((x10033*x10035))+(((-1.0)*px))+(((-1.0)*x10032*x10035))+(((-1.0)*x10032*x10039))+((r02*x10038)));
evalcond[3]=((0.43342)+((x10031*x10033))+((x10033*x10034))+(((-1.0)*py))+(((-1.0)*x10031*x10032))+(((-1.0)*x10032*x10034))+((r12*x10038))+(((0.37429)*x10030)));
evalcond[4]=((1.0)+(((-1.0)*x10037*x10041))+x10042+(((-1.0)*x10036*x10037)));
evalcond[5]=((((-1.0)*x10034*x10037))+(((-1.0)*x10031*x10037))+x10030);
evalcond[6]=((((-1.0)*x10035*x10037))+x10040+(((-1.0)*x10037*x10039)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10043=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10043;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10044=((1.0)*sj5);
IkReal x10045=((((-1.0)*r00*sj6*x10044))+(((-1.0)*cj6*r01*x10044))+((cj5*r02)));
j4eval[0]=x10045;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10046=cj6*cj6;
IkReal x10047=r01*r01;
IkReal x10048=cj5*cj5;
IkReal x10049=r00*r00;
IkReal x10050=r02*r02;
IkReal x10051=(r02*sj5);
IkReal x10052=(r01*sj6);
IkReal x10053=(cj6*r00);
IkReal x10054=(cj5*cj6*r01);
IkReal x10055=(cj5*r00*sj6);
IkReal x10056=((1.0)*x10048);
IkReal x10057=(x10046*x10049);
IkReal x10058=(x10046*x10047);
IkReal x10059=((((2.0)*x10048*x10052*x10053))+(((-1.0)*x10058))+(((-1.0)*x10056*x10057))+((x10048*x10049))+(((2.0)*x10051*x10054))+(((2.0)*x10051*x10055))+(((-2.0)*x10052*x10053))+(((-1.0)*x10050*x10056))+x10057+x10050+x10047+((x10048*x10058)));
j4eval[0]=x10059;
j4eval[1]=((IKabs((x10055+x10054+x10051)))+(IKabs(((((-1.0)*x10053))+x10052))));
j4eval[2]=IKsign(x10059);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10060=cj6*cj6;
IkReal x10061=r01*r01;
IkReal x10062=cj5*cj5;
IkReal x10063=r00*r00;
IkReal x10064=r02*r02;
IkReal x10065=(r00*sj6);
IkReal x10066=(r02*sj5);
IkReal x10067=((2.0)*cj6*r01);
IkReal x10068=((1.0)*x10062);
IkReal x10069=(x10060*x10063);
IkReal x10070=(x10060*x10061);
CheckValue<IkReal> x10071 = IKatan2WithCheck(IkReal((((cj5*x10065))+((cj5*cj6*r01))+x10066)),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10071.valid){
continue;
}
CheckValue<IkReal> x10072=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10068*x10069))+(((-1.0)*x10064*x10068))+((x10062*x10065*x10067))+((x10062*x10063))+((x10062*x10070))+x10061+x10064+x10069+((cj5*x10066*x10067))+(((2.0)*cj5*x10065*x10066))+(((-1.0)*x10065*x10067))+(((-1.0)*x10070)))),-1);
if(!x10072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10071.value)+(((1.5707963267949)*(x10072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10073=IKcos(j4);
IkReal x10074=IKsin(j4);
IkReal x10075=(cj5*sj6);
IkReal x10076=(cj5*r21);
IkReal x10077=(cj5*r01);
IkReal x10078=(cj5*cj6*r11);
IkReal x10079=((1.0)*x10074);
IkReal x10080=(cj6*x10073);
IkReal x10081=(sj5*x10073);
IkReal x10082=(cj6*x10074);
IkReal x10083=(sj5*x10079);
IkReal x10084=((1.0)*sj6*x10073);
evalcond[0]=((((-1.0)*r21*sj6*x10079))+((r20*x10073*x10075))+((r20*x10082))+((r22*x10081))+((x10076*x10080)));
evalcond[1]=(((r00*x10082))+(((-1.0)*r01*sj6*x10079))+((r02*x10081))+((r00*x10073*x10075))+((x10077*x10080)));
evalcond[2]=((-1.0)+((r10*x10073*x10075))+((x10073*x10078))+(((-1.0)*r11*sj6*x10079))+((r12*x10081))+((r10*x10082)));
evalcond[3]=(((r20*x10080))+(((-1.0)*cj6*x10076*x10079))+(((-1.0)*r21*x10084))+(((-1.0)*r20*x10075*x10079))+(((-1.0)*r22*x10083)));
evalcond[4]=((((-1.0)*r10*x10075*x10079))+(((-1.0)*x10078*x10079))+(((-1.0)*r12*x10083))+(((-1.0)*r11*x10084))+((r10*x10080)));
evalcond[5]=((1.0)+((r00*x10080))+(((-1.0)*r01*x10084))+(((-1.0)*cj6*x10077*x10079))+(((-1.0)*r02*x10083))+(((-1.0)*r00*x10075*x10079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10085=((1.0)*sj5);
CheckValue<IkReal> x10086=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x10085))+((cj5*r02))+(((-1.0)*r00*sj6*x10085)))),-1);
if(!x10086.valid){
continue;
}
CheckValue<IkReal> x10087 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10086.value)))+(x10087.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10088=IKcos(j4);
IkReal x10089=IKsin(j4);
IkReal x10090=(cj5*sj6);
IkReal x10091=(cj5*r21);
IkReal x10092=(cj5*r01);
IkReal x10093=(cj5*cj6*r11);
IkReal x10094=((1.0)*x10089);
IkReal x10095=(cj6*x10088);
IkReal x10096=(sj5*x10088);
IkReal x10097=(cj6*x10089);
IkReal x10098=(sj5*x10094);
IkReal x10099=((1.0)*sj6*x10088);
evalcond[0]=(((x10091*x10095))+((r22*x10096))+((r20*x10088*x10090))+((r20*x10097))+(((-1.0)*r21*sj6*x10094)));
evalcond[1]=(((r02*x10096))+((x10092*x10095))+(((-1.0)*r01*sj6*x10094))+((r00*x10088*x10090))+((r00*x10097)));
evalcond[2]=((-1.0)+((r10*x10088*x10090))+((r12*x10096))+((r10*x10097))+((x10088*x10093))+(((-1.0)*r11*sj6*x10094)));
evalcond[3]=((((-1.0)*r21*x10099))+(((-1.0)*r20*x10090*x10094))+(((-1.0)*cj6*x10091*x10094))+((r20*x10095))+(((-1.0)*r22*x10098)));
evalcond[4]=((((-1.0)*r10*x10090*x10094))+(((-1.0)*r11*x10099))+(((-1.0)*r12*x10098))+(((-1.0)*x10093*x10094))+((r10*x10095)));
evalcond[5]=((1.0)+(((-1.0)*r01*x10099))+(((-1.0)*cj6*x10092*x10094))+(((-1.0)*r02*x10098))+(((-1.0)*r00*x10090*x10094))+((r00*x10095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10100 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10100.valid){
continue;
}
CheckValue<IkReal> x10101=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10100.value)+(((1.5707963267949)*(x10101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10102=IKcos(j4);
IkReal x10103=IKsin(j4);
IkReal x10104=(cj5*sj6);
IkReal x10105=(cj5*r21);
IkReal x10106=(cj5*r01);
IkReal x10107=(cj5*cj6*r11);
IkReal x10108=((1.0)*x10103);
IkReal x10109=(cj6*x10102);
IkReal x10110=(sj5*x10102);
IkReal x10111=(cj6*x10103);
IkReal x10112=(sj5*x10108);
IkReal x10113=((1.0)*sj6*x10102);
evalcond[0]=(((r20*x10111))+((r20*x10102*x10104))+(((-1.0)*r21*sj6*x10108))+((r22*x10110))+((x10105*x10109)));
evalcond[1]=(((x10106*x10109))+((r00*x10111))+((r00*x10102*x10104))+((r02*x10110))+(((-1.0)*r01*sj6*x10108)));
evalcond[2]=((-1.0)+((r10*x10102*x10104))+((x10102*x10107))+((r12*x10110))+((r10*x10111))+(((-1.0)*r11*sj6*x10108)));
evalcond[3]=(((r20*x10109))+(((-1.0)*r22*x10112))+(((-1.0)*cj6*x10105*x10108))+(((-1.0)*r21*x10113))+(((-1.0)*r20*x10104*x10108)));
evalcond[4]=((((-1.0)*r12*x10112))+((r10*x10109))+(((-1.0)*r10*x10104*x10108))+(((-1.0)*x10107*x10108))+(((-1.0)*r11*x10113)));
evalcond[5]=((1.0)+((r00*x10109))+(((-1.0)*r01*x10113))+(((-1.0)*r00*x10104*x10108))+(((-1.0)*r02*x10112))+(((-1.0)*cj6*x10106*x10108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10114=(cj5*r12);
IkReal x10115=(r10*sj6);
IkReal x10116=((0.37429)*sj5);
IkReal x10117=((0.01)*cj5);
IkReal x10118=(cj6*r11);
IkReal x10119=(r00*sj6);
IkReal x10120=(r20*sj6);
IkReal x10121=((1.0)*sj5);
IkReal x10122=((0.01)*sj5);
IkReal x10123=(cj6*r01);
IkReal x10124=(cj5*r02);
IkReal x10125=(cj6*r21);
IkReal x10126=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x10116*x10120))+(((-1.0)*x10116*x10125))+(((0.37429)*x10126))+(((-1.0)*pz))+((x10117*x10120))+((x10117*x10125))+((r22*x10122)));
evalcond[2]=(((x10117*x10119))+(((-1.0)*x10116*x10123))+(((0.37429)*x10124))+(((-1.0)*px))+((r02*x10122))+((x10117*x10123))+(((-1.0)*x10116*x10119)));
evalcond[3]=((-0.43342)+((x10117*x10118))+(((-1.0)*py))+(((0.37429)*x10114))+(((-1.0)*x10115*x10116))+((x10115*x10117))+(((-1.0)*x10116*x10118))+((r12*x10122)));
evalcond[4]=((1.0)+(((-1.0)*x10120*x10121))+(((-1.0)*x10121*x10125))+x10126);
evalcond[5]=((((-1.0)*x10115*x10121))+x10114+(((-1.0)*x10118*x10121)));
evalcond[6]=((((-1.0)*x10121*x10123))+x10124+(((-1.0)*x10119*x10121)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10127=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10127;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10127);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10128=((1.0)*cj6);
IkReal x10129=(((cj5*r22))+(((-1.0)*r21*sj5*x10128))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x10129;
j4eval[1]=IKsign(x10129);
j4eval[2]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x10128))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10130=cj6*cj6;
IkReal x10131=cj5*cj5;
IkReal x10132=r00*r00;
IkReal x10133=r01*r01;
IkReal x10134=r02*r02;
IkReal x10135=(r00*sj6);
IkReal x10136=((2.0)*cj6*r01);
IkReal x10137=(cj5*r02*sj5);
IkReal x10138=((1.0)*x10130);
IkReal x10139=(x10131*x10132);
IkReal x10140=((((-1.0)*x10132*x10138))+(((-1.0)*x10131*x10133*x10138))+(((-1.0)*x10131*x10135*x10136))+(((-2.0)*x10135*x10137))+(((-1.0)*x10136*x10137))+(((-1.0)*x10139))+(((-1.0)*x10133))+(((-1.0)*x10134))+((x10131*x10134))+((x10130*x10133))+((x10130*x10139))+((x10135*x10136)));
j4eval[0]=x10140;
j4eval[1]=((IKabs((((r02*sj5))+((cj5*cj6*r01))+((cj5*x10135)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10140);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10141=cj6*cj6;
IkReal x10142=cj5*cj5;
IkReal x10143=r00*r00;
IkReal x10144=r01*r01;
IkReal x10145=r02*r02;
IkReal x10146=(r01*sj6);
IkReal x10147=(cj6*r00);
IkReal x10148=(cj5*cj6*r01);
IkReal x10149=((2.0)*r02*sj5);
IkReal x10150=((1.0)*x10141);
IkReal x10151=(cj5*r00*sj6);
IkReal x10152=(x10142*x10143);
CheckValue<IkReal> x10153 = IKatan2WithCheck(IkReal((((r02*sj5))+x10148+x10151)),(x10146+(((-1.0)*x10147))),IKFAST_ATAN2_MAGTHRESH);
if(!x10153.valid){
continue;
}
CheckValue<IkReal> x10154=IKPowWithIntegerCheck(IKsign(((((2.0)*x10146*x10147))+(((-1.0)*x10148*x10149))+(((-1.0)*x10143*x10150))+((x10142*x10145))+(((-1.0)*x10149*x10151))+(((-1.0)*x10142*x10144*x10150))+(((-2.0)*x10142*x10146*x10147))+(((-1.0)*x10145))+(((-1.0)*x10144))+(((-1.0)*x10152))+((x10141*x10144))+((x10141*x10152)))),-1);
if(!x10154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10153.value)+(((1.5707963267949)*(x10154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10155=IKcos(j4);
IkReal x10156=IKsin(j4);
IkReal x10157=(cj5*sj6);
IkReal x10158=(cj5*r21);
IkReal x10159=(cj5*r01);
IkReal x10160=(cj5*cj6*r11);
IkReal x10161=((1.0)*x10156);
IkReal x10162=(cj6*x10155);
IkReal x10163=(sj5*x10155);
IkReal x10164=(cj6*x10156);
IkReal x10165=(sj5*x10161);
IkReal x10166=((1.0)*sj6*x10155);
evalcond[0]=(((r22*x10163))+((x10158*x10162))+((r20*x10155*x10157))+((r20*x10164))+(((-1.0)*r21*sj6*x10161)));
evalcond[1]=(((r00*x10164))+(((-1.0)*r01*sj6*x10161))+((x10159*x10162))+((r02*x10163))+((r00*x10155*x10157)));
evalcond[2]=((1.0)+((r10*x10164))+((r10*x10155*x10157))+((x10155*x10160))+((r12*x10163))+(((-1.0)*r11*sj6*x10161)));
evalcond[3]=((((-1.0)*r21*x10166))+(((-1.0)*r22*x10165))+(((-1.0)*cj6*x10158*x10161))+(((-1.0)*r20*x10157*x10161))+((r20*x10162)));
evalcond[4]=(((r10*x10162))+(((-1.0)*r11*x10166))+(((-1.0)*r12*x10165))+(((-1.0)*x10160*x10161))+(((-1.0)*r10*x10157*x10161)));
evalcond[5]=((-1.0)+(((-1.0)*r01*x10166))+((r00*x10162))+(((-1.0)*r00*x10157*x10161))+(((-1.0)*r02*x10165))+(((-1.0)*cj6*x10159*x10161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10167=((1.0)*cj6);
CheckValue<IkReal> x10168=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x10167))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x10168.valid){
continue;
}
CheckValue<IkReal> x10169 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x10167))),IKFAST_ATAN2_MAGTHRESH);
if(!x10169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10168.value)))+(x10169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10170=IKcos(j4);
IkReal x10171=IKsin(j4);
IkReal x10172=(cj5*sj6);
IkReal x10173=(cj5*r21);
IkReal x10174=(cj5*r01);
IkReal x10175=(cj5*cj6*r11);
IkReal x10176=((1.0)*x10171);
IkReal x10177=(cj6*x10170);
IkReal x10178=(sj5*x10170);
IkReal x10179=(cj6*x10171);
IkReal x10180=(sj5*x10176);
IkReal x10181=((1.0)*sj6*x10170);
evalcond[0]=(((x10173*x10177))+((r22*x10178))+((r20*x10170*x10172))+((r20*x10179))+(((-1.0)*r21*sj6*x10176)));
evalcond[1]=(((r02*x10178))+((r00*x10179))+((x10174*x10177))+(((-1.0)*r01*sj6*x10176))+((r00*x10170*x10172)));
evalcond[2]=((1.0)+((r10*x10179))+((x10170*x10175))+((r12*x10178))+((r10*x10170*x10172))+(((-1.0)*r11*sj6*x10176)));
evalcond[3]=((((-1.0)*cj6*x10173*x10176))+(((-1.0)*r21*x10181))+(((-1.0)*r20*x10172*x10176))+((r20*x10177))+(((-1.0)*r22*x10180)));
evalcond[4]=(((r10*x10177))+(((-1.0)*r10*x10172*x10176))+(((-1.0)*r12*x10180))+(((-1.0)*r11*x10181))+(((-1.0)*x10175*x10176)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x10180))+((r00*x10177))+(((-1.0)*r00*x10172*x10176))+(((-1.0)*cj6*x10174*x10176))+(((-1.0)*r01*x10181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10182=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10182.valid){
continue;
}
CheckValue<IkReal> x10183 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10183.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10182.value)))+(x10183.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10184=IKcos(j4);
IkReal x10185=IKsin(j4);
IkReal x10186=(cj5*sj6);
IkReal x10187=(cj5*r21);
IkReal x10188=(cj5*r01);
IkReal x10189=(cj5*cj6*r11);
IkReal x10190=((1.0)*x10185);
IkReal x10191=(cj6*x10184);
IkReal x10192=(sj5*x10184);
IkReal x10193=(cj6*x10185);
IkReal x10194=(sj5*x10190);
IkReal x10195=((1.0)*sj6*x10184);
evalcond[0]=(((r20*x10184*x10186))+((r22*x10192))+((r20*x10193))+((x10187*x10191))+(((-1.0)*r21*sj6*x10190)));
evalcond[1]=(((r02*x10192))+(((-1.0)*r01*sj6*x10190))+((x10188*x10191))+((r00*x10184*x10186))+((r00*x10193)));
evalcond[2]=((1.0)+(((-1.0)*r11*sj6*x10190))+((r10*x10193))+((r12*x10192))+((r10*x10184*x10186))+((x10184*x10189)));
evalcond[3]=((((-1.0)*r21*x10195))+(((-1.0)*cj6*x10187*x10190))+((r20*x10191))+(((-1.0)*r20*x10186*x10190))+(((-1.0)*r22*x10194)));
evalcond[4]=(((r10*x10191))+(((-1.0)*r11*x10195))+(((-1.0)*r12*x10194))+(((-1.0)*r10*x10186*x10190))+(((-1.0)*x10189*x10190)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x10194))+(((-1.0)*cj6*x10188*x10190))+((r00*x10191))+(((-1.0)*r01*x10195))+(((-1.0)*r00*x10186*x10190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10196=cj5*cj5;
IkReal x10197=cj6*cj6;
IkReal x10198=(cj6*r21);
IkReal x10199=(r20*sj6);
IkReal x10200=(r00*sj6);
IkReal x10201=(r22*sj5);
IkReal x10202=(r02*r22);
IkReal x10203=(cj6*r01);
IkReal x10204=(cj5*sj0);
IkReal x10205=(cj5*r02*sj5);
IkReal x10206=(r01*x10196);
IkReal x10207=(r21*x10197);
IkReal x10208=(r00*r20*x10196);
CheckValue<IkReal> x10209=IKPowWithIntegerCheck(IKsign((((cj5*x10201*x10203))+(((-1.0)*x10198*x10200))+((r00*r20*x10197))+((x10206*x10207))+((x10199*x10205))+((r01*r21))+(((-1.0)*x10196*x10202))+(((-1.0)*x10197*x10208))+((x10198*x10205))+x10202+x10208+((x10196*x10198*x10200))+((cj5*x10200*x10201))+(((-1.0)*r01*x10207))+(((-1.0)*x10199*x10203))+((x10196*x10199*x10203)))),-1);
if(!x10209.valid){
continue;
}
CheckValue<IkReal> x10210 = IKatan2WithCheck(IkReal((((x10199*x10204))+((x10198*x10204))+((sj0*x10201)))),(((r21*sj0*sj6))+(((-1.0)*cj6*r20*sj0))),IKFAST_ATAN2_MAGTHRESH);
if(!x10210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10209.value)))+(x10210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10211=IKcos(j4);
IkReal x10212=IKsin(j4);
IkReal x10213=((1.0)*cj0);
IkReal x10214=(cj5*r11);
IkReal x10215=((1.0)*sj6);
IkReal x10216=(cj5*r01);
IkReal x10217=(cj6*x10211);
IkReal x10218=(sj5*x10211);
IkReal x10219=(r21*x10212);
IkReal x10220=(cj6*x10212);
IkReal x10221=((1.0)*sj5*x10212);
IkReal x10222=(cj5*sj6*x10211);
IkReal x10223=(cj5*x10212*x10215);
evalcond[0]=((((-1.0)*x10215*x10219))+((r20*x10222))+((r20*x10220))+((r22*x10218))+((cj5*r21*x10217)));
evalcond[1]=((((-1.0)*r20*x10223))+((r20*x10217))+(((-1.0)*r21*x10211*x10215))+(((-1.0)*r22*x10221))+(((-1.0)*cj5*cj6*x10219)));
evalcond[2]=((((-1.0)*r01*x10212*x10215))+(((-1.0)*x10213))+((x10216*x10217))+((r02*x10218))+((r00*x10220))+((r00*x10222)));
evalcond[3]=(((x10214*x10217))+((r10*x10222))+((r10*x10220))+(((-1.0)*sj0))+((r12*x10218))+(((-1.0)*r11*x10212*x10215)));
evalcond[4]=((((-1.0)*r01*x10211*x10215))+(((-1.0)*r02*x10221))+sj0+((r00*x10217))+(((-1.0)*r00*x10223))+(((-1.0)*x10216*x10220)));
evalcond[5]=((((-1.0)*r10*x10223))+(((-1.0)*x10213))+((r10*x10217))+(((-1.0)*r12*x10221))+(((-1.0)*x10214*x10220))+(((-1.0)*r11*x10211*x10215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10224=(sj0*sj6);
IkReal x10225=((1.0)*cj6);
CheckValue<IkReal> x10226 = IKatan2WithCheck(IkReal((((r22*sj0*sj5))+((cj5*cj6*r21*sj0))+((cj5*r20*x10224)))),(((r21*x10224))+(((-1.0)*r20*sj0*x10225))),IKFAST_ATAN2_MAGTHRESH);
if(!x10226.valid){
continue;
}
CheckValue<IkReal> x10227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10225))+((cj5*r02)))),-1);
if(!x10227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10226.value)+(((1.5707963267949)*(x10227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10228=IKcos(j4);
IkReal x10229=IKsin(j4);
IkReal x10230=((1.0)*cj0);
IkReal x10231=(cj5*r11);
IkReal x10232=((1.0)*sj6);
IkReal x10233=(cj5*r01);
IkReal x10234=(cj6*x10228);
IkReal x10235=(sj5*x10228);
IkReal x10236=(r21*x10229);
IkReal x10237=(cj6*x10229);
IkReal x10238=((1.0)*sj5*x10229);
IkReal x10239=(cj5*sj6*x10228);
IkReal x10240=(cj5*x10229*x10232);
evalcond[0]=((((-1.0)*x10232*x10236))+((r22*x10235))+((cj5*r21*x10234))+((r20*x10237))+((r20*x10239)));
evalcond[1]=((((-1.0)*cj5*cj6*x10236))+(((-1.0)*r20*x10240))+(((-1.0)*r21*x10228*x10232))+(((-1.0)*r22*x10238))+((r20*x10234)));
evalcond[2]=(((r02*x10235))+(((-1.0)*r01*x10229*x10232))+((r00*x10239))+((r00*x10237))+(((-1.0)*x10230))+((x10233*x10234)));
evalcond[3]=((((-1.0)*sj0))+(((-1.0)*r11*x10229*x10232))+((x10231*x10234))+((r12*x10235))+((r10*x10237))+((r10*x10239)));
evalcond[4]=(sj0+(((-1.0)*x10233*x10237))+(((-1.0)*r01*x10228*x10232))+(((-1.0)*r00*x10240))+((r00*x10234))+(((-1.0)*r02*x10238)));
evalcond[5]=((((-1.0)*x10231*x10237))+(((-1.0)*r11*x10228*x10232))+(((-1.0)*x10230))+(((-1.0)*r12*x10238))+(((-1.0)*r10*x10240))+((r10*x10234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10241=(cj0*r20);
IkReal x10242=(cj0*r21);
CheckValue<IkReal> x10243=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10243.valid){
continue;
}
CheckValue<IkReal> x10244 = IKatan2WithCheck(IkReal((((cj5*sj6*x10241))+((cj5*cj6*x10242))+((cj0*r22*sj5)))),((((-1.0)*cj6*x10241))+((sj6*x10242))),IKFAST_ATAN2_MAGTHRESH);
if(!x10244.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10243.value)))+(x10244.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10245=IKcos(j4);
IkReal x10246=IKsin(j4);
IkReal x10247=((1.0)*cj0);
IkReal x10248=(cj5*r11);
IkReal x10249=((1.0)*sj6);
IkReal x10250=(cj5*r01);
IkReal x10251=(cj6*x10245);
IkReal x10252=(sj5*x10245);
IkReal x10253=(r21*x10246);
IkReal x10254=(cj6*x10246);
IkReal x10255=((1.0)*sj5*x10246);
IkReal x10256=(cj5*sj6*x10245);
IkReal x10257=(cj5*x10246*x10249);
evalcond[0]=(((cj5*r21*x10251))+((r22*x10252))+((r20*x10256))+((r20*x10254))+(((-1.0)*x10249*x10253)));
evalcond[1]=((((-1.0)*r20*x10257))+(((-1.0)*cj5*cj6*x10253))+(((-1.0)*r22*x10255))+(((-1.0)*r21*x10245*x10249))+((r20*x10251)));
evalcond[2]=(((r02*x10252))+(((-1.0)*x10247))+(((-1.0)*r01*x10246*x10249))+((x10250*x10251))+((r00*x10254))+((r00*x10256)));
evalcond[3]=(((r12*x10252))+((r10*x10256))+((r10*x10254))+(((-1.0)*sj0))+((x10248*x10251))+(((-1.0)*r11*x10246*x10249)));
evalcond[4]=((((-1.0)*r02*x10255))+sj0+(((-1.0)*x10250*x10254))+(((-1.0)*r00*x10257))+(((-1.0)*r01*x10245*x10249))+((r00*x10251)));
evalcond[5]=((((-1.0)*r10*x10257))+((r10*x10251))+(((-1.0)*x10247))+(((-1.0)*r12*x10255))+(((-1.0)*x10248*x10254))+(((-1.0)*r11*x10245*x10249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10258=(r10*sj6);
IkReal x10259=((0.37429)*sj5);
IkReal x10260=((0.01)*cj5);
IkReal x10261=(cj6*r11);
IkReal x10262=(r00*sj6);
IkReal x10263=(r20*sj6);
IkReal x10264=((0.01)*sj5);
IkReal x10265=(cj6*r01);
IkReal x10266=((0.37429)*cj5);
IkReal x10267=(cj6*r21);
IkReal x10268=((1.0)*sj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((-0.36442)+((r22*x10266))+((r22*x10264))+(((-1.0)*pz))+(((-1.0)*x10259*x10263))+(((-1.0)*x10259*x10267))+((x10260*x10267))+((x10260*x10263)));
evalcond[2]=(((r02*x10264))+((r02*x10266))+(((-1.0)*px))+(((-1.0)*x10259*x10262))+(((-1.0)*x10259*x10265))+((x10260*x10265))+((x10260*x10262)));
evalcond[3]=(((r12*x10266))+((r12*x10264))+(((-1.0)*x10258*x10259))+(((-1.0)*py))+((x10258*x10260))+(((-1.0)*x10259*x10261))+((x10260*x10261)));
evalcond[4]=(((cj5*r22))+(((-1.0)*x10267*x10268))+(((-1.0)*x10263*x10268)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10269=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x10269))+(((-1.0)*cj6*r11*x10269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x10269))+(((-1.0)*cj6*r01*x10269))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x10269))+(((-1.0)*cj6*r11*x10269))))+IKsqr(((((-1.0)*r00*sj6*x10269))+(((-1.0)*cj6*r01*x10269))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x10269))+(((-1.0)*cj6*r11*x10269))), ((((-1.0)*r00*sj6*x10269))+(((-1.0)*cj6*r01*x10269))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x10270=((1.0)*sj5);
evalcond[0]=(((cj5*r12))+(((-1.0)*cj6*r11*x10270))+(((-1.0)*(IKsin(j0))))+(((-1.0)*r10*sj6*x10270)));
evalcond[1]=((((-1.0)*cj6*r01*x10270))+(((-1.0)*(IKcos(j0))))+(((-1.0)*r00*sj6*x10270))+((cj5*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10271=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10271;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10272=((1.0)*cj6);
IkReal x10273=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10272))+((cj5*r02)));
j4eval[0]=x10273;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs((((r11*sj6))+(((-1.0)*r10*x10272))))));
j4eval[2]=IKsign(x10273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10274=r11*r11;
IkReal x10275=cj5*cj5;
IkReal x10276=cj6*cj6;
IkReal x10277=r10*r10;
IkReal x10278=r12*r12;
IkReal x10279=(cj6*r10);
IkReal x10280=(r12*sj5);
IkReal x10281=((2.0)*r11);
IkReal x10282=(cj5*cj6);
IkReal x10283=(cj0*sj6);
IkReal x10284=(cj5*r10);
IkReal x10285=((1.0)*x10276);
IkReal x10286=(x10275*x10277);
IkReal x10287=(((sj6*x10275*x10279*x10281))+((x10276*x10277))+(((2.0)*sj6*x10280*x10284))+x10274+x10278+x10286+((x10280*x10281*x10282))+((x10274*x10275*x10276))+(((-1.0)*x10275*x10278))+(((-1.0)*x10285*x10286))+(((-1.0)*sj6*x10279*x10281))+(((-1.0)*x10274*x10285)));
j4eval[0]=x10287;
j4eval[1]=IKsign(x10287);
j4eval[2]=((IKabs((((r11*x10283))+(((-1.0)*cj0*x10279)))))+(IKabs((((x10283*x10284))+((cj0*x10280))+((cj0*r11*x10282))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10288=(cj5*r12);
IkReal x10289=(r10*sj6);
IkReal x10290=((0.37429)*sj5);
IkReal x10291=((0.01)*cj5);
IkReal x10292=(cj6*r11);
IkReal x10293=(r00*sj6);
IkReal x10294=(r20*sj6);
IkReal x10295=((1.0)*sj5);
IkReal x10296=((0.01)*sj5);
IkReal x10297=(cj6*r01);
IkReal x10298=(cj5*r02);
IkReal x10299=(cj6*r21);
IkReal x10300=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+(((0.37429)*x10300))+((x10291*x10299))+((x10291*x10294))+(((-1.0)*pz))+(((-1.0)*x10290*x10294))+(((-1.0)*x10290*x10299))+((r22*x10296)));
evalcond[2]=(((x10291*x10297))+((x10291*x10293))+(((0.37429)*x10298))+(((-1.0)*px))+(((-1.0)*x10290*x10293))+(((-1.0)*x10290*x10297))+((r02*x10296)));
evalcond[3]=(((x10289*x10291))+((x10291*x10292))+((r12*x10296))+(((0.37429)*x10288))+(((-1.0)*py))+(((-1.0)*x10290*x10292))+(((-1.0)*x10289*x10290)));
evalcond[4]=((((-1.0)*x10294*x10295))+x10300+(((-1.0)*x10295*x10299)));
evalcond[5]=((-1.0)+(((-1.0)*x10292*x10295))+x10288+(((-1.0)*x10289*x10295)));
evalcond[6]=((((-1.0)*x10293*x10295))+(((-1.0)*x10295*x10297))+x10298);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10301=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10301;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10301);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10302=((1.0)*cj6);
IkReal x10303=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10302))+((cj5*r02)));
j4eval[0]=x10303;
j4eval[1]=((IKabs(((((-1.0)*r10*x10302))+((r11*sj6)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x10303);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10304=cj6*cj6;
IkReal x10305=cj5*cj5;
IkReal x10306=r00*r00;
IkReal x10307=r01*r01;
IkReal x10308=r02*r02;
IkReal x10309=(r00*sj6);
IkReal x10310=((2.0)*cj6*r01);
IkReal x10311=(cj5*r02*sj5);
IkReal x10312=((1.0)*x10304);
IkReal x10313=(x10305*x10306);
IkReal x10314=(((x10305*x10308))+(((-1.0)*x10305*x10309*x10310))+((x10304*x10307))+(((-1.0)*x10310*x10311))+(((-1.0)*x10307))+(((-1.0)*x10308))+(((-1.0)*x10306*x10312))+(((-2.0)*x10309*x10311))+((x10304*x10313))+(((-1.0)*x10305*x10307*x10312))+(((-1.0)*x10313))+((x10309*x10310)));
j4eval[0]=x10314;
j4eval[1]=((IKabs((((cj5*x10309))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10315=cj6*cj6;
IkReal x10316=cj5*cj5;
IkReal x10317=r00*r00;
IkReal x10318=r01*r01;
IkReal x10319=r02*r02;
IkReal x10320=(r01*sj6);
IkReal x10321=(cj6*r00);
IkReal x10322=(cj5*cj6*r01);
IkReal x10323=((2.0)*r02*sj5);
IkReal x10324=((1.0)*x10315);
IkReal x10325=(cj5*r00*sj6);
IkReal x10326=(x10316*x10317);
CheckValue<IkReal> x10327=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10326))+(((-2.0)*x10316*x10320*x10321))+(((-1.0)*x10316*x10318*x10324))+((x10315*x10318))+(((-1.0)*x10318))+(((-1.0)*x10319))+((x10316*x10319))+(((-1.0)*x10323*x10325))+(((-1.0)*x10322*x10323))+((x10315*x10326))+(((-1.0)*x10317*x10324))+(((2.0)*x10320*x10321)))),-1);
if(!x10327.valid){
continue;
}
CheckValue<IkReal> x10328 = IKatan2WithCheck(IkReal((((r02*sj5))+x10322+x10325)),((((-1.0)*x10321))+x10320),IKFAST_ATAN2_MAGTHRESH);
if(!x10328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10327.value)))+(x10328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10329=IKcos(j4);
IkReal x10330=IKsin(j4);
IkReal x10331=(cj5*r11);
IkReal x10332=(cj5*r10);
IkReal x10333=(cj5*r00);
IkReal x10334=(cj5*r01);
IkReal x10335=(cj5*r20);
IkReal x10336=(cj5*r21);
IkReal x10337=(cj6*x10329);
IkReal x10338=(sj5*x10329);
IkReal x10339=(cj6*x10330);
IkReal x10340=(sj6*x10329);
IkReal x10341=((1.0)*sj5*x10330);
IkReal x10342=((1.0)*sj6*x10330);
IkReal x10343=((1.0)*x10340);
evalcond[0]=(((r02*x10338))+((x10333*x10340))+((r00*x10339))+((x10334*x10337))+(((-1.0)*r01*x10342)));
evalcond[1]=(((x10332*x10340))+(((-1.0)*r11*x10342))+((r12*x10338))+((x10331*x10337))+((r10*x10339)));
evalcond[2]=((1.0)+((r22*x10338))+((x10335*x10340))+((r20*x10339))+((x10336*x10337))+(((-1.0)*r21*x10342)));
evalcond[3]=(((r20*x10337))+(((-1.0)*r22*x10341))+(((-1.0)*x10335*x10342))+(((-1.0)*x10336*x10339))+(((-1.0)*r21*x10343)));
evalcond[4]=((((-1.0)*r12*x10341))+(((-1.0)*r11*x10343))+(((-1.0)*x10332*x10342))+(((-1.0)*x10331*x10339))+((r10*x10337)));
evalcond[5]=((-1.0)+((r00*x10337))+(((-1.0)*r02*x10341))+(((-1.0)*x10333*x10342))+(((-1.0)*x10334*x10339))+(((-1.0)*r01*x10343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10344=((1.0)*sj5);
CheckValue<IkReal> x10345=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x10344))+((cj5*r02))+(((-1.0)*r00*sj6*x10344)))),-1);
if(!x10345.valid){
continue;
}
CheckValue<IkReal> x10346 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10345.value)))+(x10346.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10347=IKcos(j4);
IkReal x10348=IKsin(j4);
IkReal x10349=(cj5*r11);
IkReal x10350=(cj5*r10);
IkReal x10351=(cj5*r00);
IkReal x10352=(cj5*r01);
IkReal x10353=(cj5*r20);
IkReal x10354=(cj5*r21);
IkReal x10355=(cj6*x10347);
IkReal x10356=(sj5*x10347);
IkReal x10357=(cj6*x10348);
IkReal x10358=(sj6*x10347);
IkReal x10359=((1.0)*sj5*x10348);
IkReal x10360=((1.0)*sj6*x10348);
IkReal x10361=((1.0)*x10358);
evalcond[0]=(((x10352*x10355))+((x10351*x10358))+((r00*x10357))+(((-1.0)*r01*x10360))+((r02*x10356)));
evalcond[1]=(((x10350*x10358))+((x10349*x10355))+(((-1.0)*r11*x10360))+((r10*x10357))+((r12*x10356)));
evalcond[2]=((1.0)+((r20*x10357))+((x10354*x10355))+((x10353*x10358))+((r22*x10356))+(((-1.0)*r21*x10360)));
evalcond[3]=(((r20*x10355))+(((-1.0)*r22*x10359))+(((-1.0)*r21*x10361))+(((-1.0)*x10353*x10360))+(((-1.0)*x10354*x10357)));
evalcond[4]=((((-1.0)*x10350*x10360))+(((-1.0)*r12*x10359))+(((-1.0)*r11*x10361))+((r10*x10355))+(((-1.0)*x10349*x10357)));
evalcond[5]=((-1.0)+((r00*x10355))+(((-1.0)*r01*x10361))+(((-1.0)*x10351*x10360))+(((-1.0)*r02*x10359))+(((-1.0)*x10352*x10357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10362 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10362.valid){
continue;
}
CheckValue<IkReal> x10363=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10362.value)+(((1.5707963267949)*(x10363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10364=IKcos(j4);
IkReal x10365=IKsin(j4);
IkReal x10366=(cj5*r11);
IkReal x10367=(cj5*r10);
IkReal x10368=(cj5*r00);
IkReal x10369=(cj5*r01);
IkReal x10370=(cj5*r20);
IkReal x10371=(cj5*r21);
IkReal x10372=(cj6*x10364);
IkReal x10373=(sj5*x10364);
IkReal x10374=(cj6*x10365);
IkReal x10375=(sj6*x10364);
IkReal x10376=((1.0)*sj5*x10365);
IkReal x10377=((1.0)*sj6*x10365);
IkReal x10378=((1.0)*x10375);
evalcond[0]=(((r00*x10374))+(((-1.0)*r01*x10377))+((r02*x10373))+((x10368*x10375))+((x10369*x10372)));
evalcond[1]=(((x10366*x10372))+((r10*x10374))+((x10367*x10375))+(((-1.0)*r11*x10377))+((r12*x10373)));
evalcond[2]=((1.0)+((r22*x10373))+((r20*x10374))+(((-1.0)*r21*x10377))+((x10371*x10372))+((x10370*x10375)));
evalcond[3]=((((-1.0)*x10371*x10374))+((r20*x10372))+(((-1.0)*r21*x10378))+(((-1.0)*r22*x10376))+(((-1.0)*x10370*x10377)));
evalcond[4]=(((r10*x10372))+(((-1.0)*r11*x10378))+(((-1.0)*x10367*x10377))+(((-1.0)*x10366*x10374))+(((-1.0)*r12*x10376)));
evalcond[5]=((-1.0)+(((-1.0)*x10369*x10374))+((r00*x10372))+(((-1.0)*r01*x10378))+(((-1.0)*r02*x10376))+(((-1.0)*x10368*x10377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10379=(cj5*r12);
IkReal x10380=(r10*sj6);
IkReal x10381=((0.37429)*sj5);
IkReal x10382=((0.01)*cj5);
IkReal x10383=(cj6*r11);
IkReal x10384=(r00*sj6);
IkReal x10385=(r20*sj6);
IkReal x10386=((1.0)*sj5);
IkReal x10387=((0.01)*sj5);
IkReal x10388=(cj6*r01);
IkReal x10389=(cj5*r02);
IkReal x10390=(cj6*r21);
IkReal x10391=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+(((-1.0)*x10381*x10390))+((r22*x10387))+((x10382*x10390))+(((-1.0)*x10381*x10385))+(((-1.0)*pz))+(((0.37429)*x10391))+((x10382*x10385)));
evalcond[2]=((((-1.0)*x10381*x10384))+(((-1.0)*x10381*x10388))+(((-1.0)*px))+((r02*x10387))+((x10382*x10384))+((x10382*x10388))+(((0.37429)*x10389)));
evalcond[3]=(((r12*x10387))+(((0.37429)*x10379))+(((-1.0)*x10381*x10383))+(((-1.0)*py))+(((-1.0)*x10380*x10381))+((x10380*x10382))+((x10382*x10383)));
evalcond[4]=((((-1.0)*x10385*x10386))+(((-1.0)*x10386*x10390))+x10391);
evalcond[5]=((1.0)+(((-1.0)*x10380*x10386))+x10379+(((-1.0)*x10383*x10386)));
evalcond[6]=((((-1.0)*x10384*x10386))+(((-1.0)*x10386*x10388))+x10389);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10392=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10392;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10392);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10393=((1.0)*cj6);
IkReal x10394=((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x10393))+((cj5*r02)));
j4eval[0]=x10394;
j4eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x10393)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x10394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10395=cj6*cj6;
IkReal x10396=r01*r01;
IkReal x10397=cj5*cj5;
IkReal x10398=r00*r00;
IkReal x10399=r02*r02;
IkReal x10400=(r02*sj5);
IkReal x10401=(r01*sj6);
IkReal x10402=(cj6*r00);
IkReal x10403=(cj5*cj6*r01);
IkReal x10404=(cj5*r00*sj6);
IkReal x10405=((1.0)*x10397);
IkReal x10406=(x10395*x10398);
IkReal x10407=(x10395*x10396);
IkReal x10408=((((-2.0)*x10401*x10402))+((x10397*x10398))+(((2.0)*x10400*x10403))+(((2.0)*x10400*x10404))+(((-1.0)*x10405*x10406))+(((2.0)*x10397*x10401*x10402))+x10396+x10399+(((-1.0)*x10399*x10405))+x10406+((x10397*x10407))+(((-1.0)*x10407)));
j4eval[0]=x10408;
j4eval[1]=((IKabs((x10403+x10400+x10404)))+(IKabs((x10401+(((-1.0)*x10402))))));
j4eval[2]=IKsign(x10408);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10409=cj6*cj6;
IkReal x10410=r01*r01;
IkReal x10411=cj5*cj5;
IkReal x10412=r00*r00;
IkReal x10413=r02*r02;
IkReal x10414=(r00*sj6);
IkReal x10415=(r02*sj5);
IkReal x10416=((2.0)*cj6*r01);
IkReal x10417=((1.0)*x10411);
IkReal x10418=(x10409*x10412);
IkReal x10419=(x10409*x10410);
CheckValue<IkReal> x10420=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10413*x10417))+((x10411*x10414*x10416))+(((-1.0)*x10414*x10416))+((x10411*x10419))+((x10411*x10412))+((cj5*x10415*x10416))+(((2.0)*cj5*x10414*x10415))+x10410+x10413+x10418+(((-1.0)*x10417*x10418))+(((-1.0)*x10419)))),-1);
if(!x10420.valid){
continue;
}
CheckValue<IkReal> x10421 = IKatan2WithCheck(IkReal((((cj5*cj6*r01))+((cj5*x10414))+x10415)),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10420.value)))+(x10421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10422=IKcos(j4);
IkReal x10423=IKsin(j4);
IkReal x10424=(cj5*r11);
IkReal x10425=(cj5*r10);
IkReal x10426=(cj5*r00);
IkReal x10427=(cj5*r01);
IkReal x10428=(cj5*r20);
IkReal x10429=(cj5*r21);
IkReal x10430=(cj6*x10422);
IkReal x10431=(sj5*x10422);
IkReal x10432=(cj6*x10423);
IkReal x10433=(sj6*x10422);
IkReal x10434=((1.0)*sj5*x10423);
IkReal x10435=((1.0)*sj6*x10423);
IkReal x10436=((1.0)*x10433);
evalcond[0]=(((x10426*x10433))+(((-1.0)*r01*x10435))+((r02*x10431))+((x10427*x10430))+((r00*x10432)));
evalcond[1]=(((x10425*x10433))+((r10*x10432))+((r12*x10431))+(((-1.0)*r11*x10435))+((x10424*x10430)));
evalcond[2]=((1.0)+((r22*x10431))+(((-1.0)*r21*x10435))+((x10428*x10433))+((x10429*x10430))+((r20*x10432)));
evalcond[3]=((((-1.0)*x10428*x10435))+(((-1.0)*r21*x10436))+(((-1.0)*r22*x10434))+(((-1.0)*x10429*x10432))+((r20*x10430)));
evalcond[4]=((((-1.0)*x10424*x10432))+((r10*x10430))+(((-1.0)*r12*x10434))+(((-1.0)*r11*x10436))+(((-1.0)*x10425*x10435)));
evalcond[5]=((1.0)+(((-1.0)*x10426*x10435))+(((-1.0)*x10427*x10432))+(((-1.0)*r01*x10436))+(((-1.0)*r02*x10434))+((r00*x10430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10437=((1.0)*sj5);
CheckValue<IkReal> x10438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj6*x10437))+(((-1.0)*cj6*r01*x10437))+((cj5*r02)))),-1);
if(!x10438.valid){
continue;
}
CheckValue<IkReal> x10439 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10438.value)))+(x10439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10440=IKcos(j4);
IkReal x10441=IKsin(j4);
IkReal x10442=(cj5*r11);
IkReal x10443=(cj5*r10);
IkReal x10444=(cj5*r00);
IkReal x10445=(cj5*r01);
IkReal x10446=(cj5*r20);
IkReal x10447=(cj5*r21);
IkReal x10448=(cj6*x10440);
IkReal x10449=(sj5*x10440);
IkReal x10450=(cj6*x10441);
IkReal x10451=(sj6*x10440);
IkReal x10452=((1.0)*sj5*x10441);
IkReal x10453=((1.0)*sj6*x10441);
IkReal x10454=((1.0)*x10451);
evalcond[0]=(((x10445*x10448))+(((-1.0)*r01*x10453))+((r00*x10450))+((r02*x10449))+((x10444*x10451)));
evalcond[1]=(((r10*x10450))+((x10442*x10448))+((x10443*x10451))+((r12*x10449))+(((-1.0)*r11*x10453)));
evalcond[2]=((1.0)+((r22*x10449))+((x10447*x10448))+((x10446*x10451))+(((-1.0)*r21*x10453))+((r20*x10450)));
evalcond[3]=((((-1.0)*x10447*x10450))+(((-1.0)*r22*x10452))+((r20*x10448))+(((-1.0)*r21*x10454))+(((-1.0)*x10446*x10453)));
evalcond[4]=((((-1.0)*x10442*x10450))+(((-1.0)*r12*x10452))+(((-1.0)*x10443*x10453))+((r10*x10448))+(((-1.0)*r11*x10454)));
evalcond[5]=((1.0)+(((-1.0)*r02*x10452))+(((-1.0)*r01*x10454))+((r00*x10448))+(((-1.0)*x10445*x10450))+(((-1.0)*x10444*x10453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10455 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10455.valid){
continue;
}
CheckValue<IkReal> x10456=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10455.value)+(((1.5707963267949)*(x10456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10457=IKcos(j4);
IkReal x10458=IKsin(j4);
IkReal x10459=(cj5*r11);
IkReal x10460=(cj5*r10);
IkReal x10461=(cj5*r00);
IkReal x10462=(cj5*r01);
IkReal x10463=(cj5*r20);
IkReal x10464=(cj5*r21);
IkReal x10465=(cj6*x10457);
IkReal x10466=(sj5*x10457);
IkReal x10467=(cj6*x10458);
IkReal x10468=(sj6*x10457);
IkReal x10469=((1.0)*sj5*x10458);
IkReal x10470=((1.0)*sj6*x10458);
IkReal x10471=((1.0)*x10468);
evalcond[0]=((((-1.0)*r01*x10470))+((x10461*x10468))+((r00*x10467))+((x10462*x10465))+((r02*x10466)));
evalcond[1]=(((x10459*x10465))+((r12*x10466))+((x10460*x10468))+(((-1.0)*r11*x10470))+((r10*x10467)));
evalcond[2]=((1.0)+((r20*x10467))+((x10464*x10465))+((x10463*x10468))+((r22*x10466))+(((-1.0)*r21*x10470)));
evalcond[3]=(((r20*x10465))+(((-1.0)*r22*x10469))+(((-1.0)*x10463*x10470))+(((-1.0)*r21*x10471))+(((-1.0)*x10464*x10467)));
evalcond[4]=((((-1.0)*x10460*x10470))+(((-1.0)*x10459*x10467))+(((-1.0)*r11*x10471))+((r10*x10465))+(((-1.0)*r12*x10469)));
evalcond[5]=((1.0)+(((-1.0)*x10462*x10467))+(((-1.0)*r02*x10469))+(((-1.0)*r01*x10471))+((r00*x10465))+(((-1.0)*x10461*x10470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10472=r11*r11;
IkReal x10473=cj5*cj5;
IkReal x10474=cj6*cj6;
IkReal x10475=r10*r10;
IkReal x10476=r12*r12;
IkReal x10477=(cj6*r10);
IkReal x10478=(r12*sj5);
IkReal x10479=((2.0)*r11);
IkReal x10480=(cj5*cj6);
IkReal x10481=(cj0*sj6);
IkReal x10482=(cj5*r10);
IkReal x10483=((1.0)*x10474);
IkReal x10484=(x10473*x10475);
CheckValue<IkReal> x10485 = IKatan2WithCheck(IkReal((((cj0*x10478))+((cj0*r11*x10480))+((x10481*x10482)))),((((-1.0)*cj0*x10477))+((r11*x10481))),IKFAST_ATAN2_MAGTHRESH);
if(!x10485.valid){
continue;
}
CheckValue<IkReal> x10486=IKPowWithIntegerCheck(IKsign((((sj6*x10473*x10477*x10479))+(((2.0)*sj6*x10478*x10482))+(((-1.0)*sj6*x10477*x10479))+(((-1.0)*x10472*x10483))+((x10472*x10473*x10474))+((x10478*x10479*x10480))+((x10474*x10475))+(((-1.0)*x10483*x10484))+x10476+x10472+x10484+(((-1.0)*x10473*x10476)))),-1);
if(!x10486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10485.value)+(((1.5707963267949)*(x10486.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10487=IKcos(j4);
IkReal x10488=IKsin(j4);
IkReal x10489=(cj5*r11);
IkReal x10490=(cj5*r10);
IkReal x10491=(cj5*r00);
IkReal x10492=(cj5*r01);
IkReal x10493=(cj5*r20);
IkReal x10494=(cj5*r21);
IkReal x10495=(cj6*x10487);
IkReal x10496=(sj5*x10487);
IkReal x10497=(cj6*x10488);
IkReal x10498=(sj6*x10487);
IkReal x10499=((1.0)*sj5*x10488);
IkReal x10500=((1.0)*sj6*x10488);
IkReal x10501=((1.0)*x10498);
evalcond[0]=((((-1.0)*r01*x10500))+((x10491*x10498))+((r02*x10496))+((x10492*x10495))+((r00*x10497)));
evalcond[1]=(((r10*x10497))+((r12*x10496))+((x10489*x10495))+(((-1.0)*r11*x10500))+((x10490*x10498)));
evalcond[2]=((1.0)+((x10494*x10495))+((r22*x10496))+((x10493*x10498))+((r20*x10497))+(((-1.0)*r21*x10500)));
evalcond[3]=((((-1.0)*x10493*x10500))+(((-1.0)*r22*x10499))+(((-1.0)*x10494*x10497))+((r20*x10495))+(((-1.0)*r21*x10501)));
evalcond[4]=(((r10*x10495))+(((-1.0)*x10490*x10500))+cj0+(((-1.0)*r11*x10501))+(((-1.0)*r12*x10499))+(((-1.0)*x10489*x10497)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x10501))+(((-1.0)*x10492*x10497))+(((-1.0)*x10491*x10500))+(((-1.0)*r02*x10499))+((r00*x10495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10502=((1.0)*sj5);
CheckValue<IkReal> x10503=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x10502))+(((-1.0)*r00*sj6*x10502))+((cj5*r02)))),-1);
if(!x10503.valid){
continue;
}
CheckValue<IkReal> x10504 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10503.value)))+(x10504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10505=IKcos(j4);
IkReal x10506=IKsin(j4);
IkReal x10507=(cj5*r11);
IkReal x10508=(cj5*r10);
IkReal x10509=(cj5*r00);
IkReal x10510=(cj5*r01);
IkReal x10511=(cj5*r20);
IkReal x10512=(cj5*r21);
IkReal x10513=(cj6*x10505);
IkReal x10514=(sj5*x10505);
IkReal x10515=(cj6*x10506);
IkReal x10516=(sj6*x10505);
IkReal x10517=((1.0)*sj5*x10506);
IkReal x10518=((1.0)*sj6*x10506);
IkReal x10519=((1.0)*x10516);
evalcond[0]=(((x10510*x10513))+((x10509*x10516))+((r00*x10515))+((r02*x10514))+(((-1.0)*r01*x10518)));
evalcond[1]=(((r12*x10514))+((r10*x10515))+((x10507*x10513))+(((-1.0)*r11*x10518))+((x10508*x10516)));
evalcond[2]=((1.0)+(((-1.0)*r21*x10518))+((r20*x10515))+((x10512*x10513))+((x10511*x10516))+((r22*x10514)));
evalcond[3]=((((-1.0)*r21*x10519))+(((-1.0)*x10511*x10518))+(((-1.0)*r22*x10517))+((r20*x10513))+(((-1.0)*x10512*x10515)));
evalcond[4]=(((r10*x10513))+cj0+(((-1.0)*x10507*x10515))+(((-1.0)*x10508*x10518))+(((-1.0)*r11*x10519))+(((-1.0)*r12*x10517)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x10517))+((r00*x10513))+(((-1.0)*x10509*x10518))+(((-1.0)*x10510*x10515))+(((-1.0)*r01*x10519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10520 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10520.valid){
continue;
}
CheckValue<IkReal> x10521=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10521.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10520.value)+(((1.5707963267949)*(x10521.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10522=IKcos(j4);
IkReal x10523=IKsin(j4);
IkReal x10524=(cj5*r11);
IkReal x10525=(cj5*r10);
IkReal x10526=(cj5*r00);
IkReal x10527=(cj5*r01);
IkReal x10528=(cj5*r20);
IkReal x10529=(cj5*r21);
IkReal x10530=(cj6*x10522);
IkReal x10531=(sj5*x10522);
IkReal x10532=(cj6*x10523);
IkReal x10533=(sj6*x10522);
IkReal x10534=((1.0)*sj5*x10523);
IkReal x10535=((1.0)*sj6*x10523);
IkReal x10536=((1.0)*x10533);
evalcond[0]=(((r02*x10531))+(((-1.0)*r01*x10535))+((x10527*x10530))+((x10526*x10533))+((r00*x10532)));
evalcond[1]=((((-1.0)*r11*x10535))+((r10*x10532))+((x10524*x10530))+((r12*x10531))+((x10525*x10533)));
evalcond[2]=((1.0)+((x10528*x10533))+(((-1.0)*r21*x10535))+((x10529*x10530))+((r22*x10531))+((r20*x10532)));
evalcond[3]=((((-1.0)*r22*x10534))+(((-1.0)*r21*x10536))+(((-1.0)*x10528*x10535))+((r20*x10530))+(((-1.0)*x10529*x10532)));
evalcond[4]=(cj0+(((-1.0)*r11*x10536))+((r10*x10530))+(((-1.0)*r12*x10534))+(((-1.0)*x10525*x10535))+(((-1.0)*x10524*x10532)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x10534))+(((-1.0)*r01*x10536))+((r00*x10530))+(((-1.0)*x10527*x10532))+(((-1.0)*x10526*x10535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10537=(cj5*r22);
IkReal x10538=(cj6*r21);
IkReal x10539=((1.0)*sj5);
IkReal x10540=((0.01)*cj5);
IkReal x10541=(r20*sj6);
IkReal x10542=((0.37429)*sj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
evalcond[1]=((0.069)+((x10538*x10540))+(((-1.0)*x10538*x10542))+((x10540*x10541))+(((0.37429)*x10537))+(((-1.0)*x10541*x10542))+(((0.01)*r22*sj5))+(((-1.0)*pz)));
evalcond[2]=((1.0)+(((-1.0)*x10539*x10541))+(((-1.0)*x10538*x10539))+x10537);
evalcond[3]=(((cj5*r12))+(((-1.0)*r10*sj6*x10539))+(((-1.0)*cj6*r11*x10539)));
evalcond[4]=((((-1.0)*cj6*r01*x10539))+(((-1.0)*r00*sj6*x10539))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10543=((1.26697583102024)*cj5);
IkReal x10544=((0.0338501117053686)*cj5);
IkReal x10545=(r00*sj6);
IkReal x10546=(r10*sj6);
IkReal x10547=((1.26697583102024)*sj5);
IkReal x10548=(cj6*r11);
IkReal x10549=((0.0338501117053686)*sj5);
IkReal x10550=(cj6*r01);
if( IKabs(((((-3.38501117053686)*py))+(((-1.0)*x10547*x10548))+((r12*x10543))+((r12*x10549))+((x10544*x10546))+((x10544*x10548))+(((-1.0)*x10546*x10547)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-3.38501117053686)*px))+(((-1.0)*x10547*x10550))+((x10544*x10545))+((r02*x10543))+((r02*x10549))+(((-1.0)*x10545*x10547))+((x10544*x10550)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.38501117053686)*py))+(((-1.0)*x10547*x10548))+((r12*x10543))+((r12*x10549))+((x10544*x10546))+((x10544*x10548))+(((-1.0)*x10546*x10547))))+IKsqr(((((-3.38501117053686)*px))+(((-1.0)*x10547*x10550))+((x10544*x10545))+((r02*x10543))+((r02*x10549))+(((-1.0)*x10545*x10547))+((x10544*x10550))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.38501117053686)*py))+(((-1.0)*x10547*x10548))+((r12*x10543))+((r12*x10549))+((x10544*x10546))+((x10544*x10548))+(((-1.0)*x10546*x10547))), ((((-3.38501117053686)*px))+(((-1.0)*x10547*x10550))+((x10544*x10545))+((r02*x10543))+((r02*x10549))+(((-1.0)*x10545*x10547))+((x10544*x10550))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x10551=((0.01)*cj5);
IkReal x10552=(cj6*r01);
IkReal x10553=(r00*sj6);
IkReal x10554=((0.01)*sj5);
IkReal x10555=((0.37429)*sj5);
IkReal x10556=((0.37429)*cj5);
IkReal x10557=(r10*sj6);
IkReal x10558=(cj6*r11);
evalcond[0]=(((r02*x10554))+((r02*x10556))+((x10551*x10553))+((x10551*x10552))+(((-1.0)*px))+(((-0.29542)*(IKcos(j0))))+(((-1.0)*x10553*x10555))+(((-1.0)*x10552*x10555)));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+((x10551*x10558))+((x10551*x10557))+(((-1.0)*py))+(((-1.0)*x10555*x10558))+(((-1.0)*x10555*x10557))+((r12*x10556))+((r12*x10554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10559=(r21*sj0);
IkReal x10560=(r20*sj0);
IkReal x10561=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10561;
j4eval[1]=((IKabs((((cj5*sj6*x10560))+((cj5*cj6*x10559))+((r22*sj0*sj5)))))+(IKabs(((((-1.0)*cj6*x10560))+((sj6*x10559))))));
j4eval[2]=IKsign(x10561);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10562=(cj0*r20);
IkReal x10563=((1.0)*cj6);
IkReal x10564=(cj0*r21);
IkReal x10565=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x10563)));
j4eval[0]=x10565;
j4eval[1]=((IKabs((((sj6*x10564))+(((-1.0)*x10562*x10563)))))+(IKabs((((cj5*sj6*x10562))+((cj0*r22*sj5))+((cj5*cj6*x10564))))));
j4eval[2]=IKsign(x10565);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x10566=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10566;
j4eval[1]=IKsign(x10566);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10567=(cj5*r12);
IkReal x10568=(r10*sj6);
IkReal x10569=((0.37429)*sj5);
IkReal x10570=((0.01)*cj5);
IkReal x10571=(cj6*r11);
IkReal x10572=(r00*sj6);
IkReal x10573=(r20*sj6);
IkReal x10574=((1.0)*sj5);
IkReal x10575=((0.01)*sj5);
IkReal x10576=(cj6*r01);
IkReal x10577=(cj5*r02);
IkReal x10578=(cj6*r21);
IkReal x10579=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x10569*x10578))+(((-1.0)*x10569*x10573))+((x10570*x10573))+((x10570*x10578))+(((-1.0)*pz))+((r22*x10575))+(((0.37429)*x10579)));
evalcond[2]=((((-1.0)*x10569*x10576))+(((-1.0)*x10569*x10572))+((x10570*x10572))+((x10570*x10576))+(((-1.0)*px))+((r02*x10575))+(((0.37429)*x10577)));
evalcond[3]=((-0.29542)+(((-1.0)*x10569*x10571))+(((-1.0)*x10568*x10569))+((x10570*x10571))+(((-1.0)*py))+((x10568*x10570))+(((0.37429)*x10567))+((r12*x10575)));
evalcond[4]=((1.0)+(((-1.0)*x10573*x10574))+(((-1.0)*x10574*x10578))+x10579);
evalcond[5]=((((-1.0)*x10571*x10574))+(((-1.0)*x10568*x10574))+x10567);
evalcond[6]=((((-1.0)*x10574*x10576))+x10577+(((-1.0)*x10572*x10574)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10580=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10580;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10580);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10581=((1.0)*cj6);
IkReal x10582=(((cj5*r22))+(((-1.0)*r21*sj5*x10581))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x10582;
j4eval[1]=IKsign(x10582);
j4eval[2]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x10581))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10583=cj6*cj6;
IkReal x10584=cj5*cj5;
IkReal x10585=r00*r00;
IkReal x10586=r01*r01;
IkReal x10587=r02*r02;
IkReal x10588=(r00*sj6);
IkReal x10589=((2.0)*cj6*r01);
IkReal x10590=(cj5*r02*sj5);
IkReal x10591=((1.0)*x10583);
IkReal x10592=(x10584*x10585);
IkReal x10593=((((-1.0)*x10585*x10591))+((x10583*x10586))+(((-1.0)*x10592))+(((-1.0)*x10589*x10590))+((x10584*x10587))+(((-2.0)*x10588*x10590))+(((-1.0)*x10586))+(((-1.0)*x10587))+(((-1.0)*x10584*x10588*x10589))+((x10588*x10589))+(((-1.0)*x10584*x10586*x10591))+((x10583*x10592)));
j4eval[0]=x10593;
j4eval[1]=((IKabs((((cj5*x10588))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10594=cj6*cj6;
IkReal x10595=cj5*cj5;
IkReal x10596=r00*r00;
IkReal x10597=r01*r01;
IkReal x10598=r02*r02;
IkReal x10599=(r01*sj6);
IkReal x10600=(cj6*r00);
IkReal x10601=(cj5*cj6*r01);
IkReal x10602=((2.0)*r02*sj5);
IkReal x10603=((1.0)*x10594);
IkReal x10604=(cj5*r00*sj6);
IkReal x10605=(x10595*x10596);
CheckValue<IkReal> x10606=IKPowWithIntegerCheck(IKsign((((x10594*x10605))+(((-1.0)*x10597))+(((-1.0)*x10598))+((x10594*x10597))+(((-1.0)*x10605))+((x10595*x10598))+(((2.0)*x10599*x10600))+(((-2.0)*x10595*x10599*x10600))+(((-1.0)*x10602*x10604))+(((-1.0)*x10596*x10603))+(((-1.0)*x10595*x10597*x10603))+(((-1.0)*x10601*x10602)))),-1);
if(!x10606.valid){
continue;
}
CheckValue<IkReal> x10607 = IKatan2WithCheck(IkReal((((r02*sj5))+x10601+x10604)),((((-1.0)*x10600))+x10599),IKFAST_ATAN2_MAGTHRESH);
if(!x10607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10606.value)))+(x10607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10608=IKcos(j4);
IkReal x10609=IKsin(j4);
IkReal x10610=(cj5*sj6);
IkReal x10611=(cj5*r21);
IkReal x10612=(cj5*r01);
IkReal x10613=(cj5*cj6*r11);
IkReal x10614=((1.0)*x10609);
IkReal x10615=(cj6*x10608);
IkReal x10616=(sj5*x10608);
IkReal x10617=(cj6*x10609);
IkReal x10618=(sj5*x10614);
IkReal x10619=((1.0)*sj6*x10608);
evalcond[0]=(((r20*x10608*x10610))+((r22*x10616))+((x10611*x10615))+(((-1.0)*r21*sj6*x10614))+((r20*x10617)));
evalcond[1]=(((r02*x10616))+((x10612*x10615))+((r00*x10608*x10610))+((r00*x10617))+(((-1.0)*r01*sj6*x10614)));
evalcond[2]=((1.0)+((r12*x10616))+((x10608*x10613))+((r10*x10608*x10610))+((r10*x10617))+(((-1.0)*r11*sj6*x10614)));
evalcond[3]=((((-1.0)*cj6*x10611*x10614))+(((-1.0)*r21*x10619))+((r20*x10615))+(((-1.0)*r22*x10618))+(((-1.0)*r20*x10610*x10614)));
evalcond[4]=(((r10*x10615))+(((-1.0)*r11*x10619))+(((-1.0)*r12*x10618))+(((-1.0)*x10613*x10614))+(((-1.0)*r10*x10610*x10614)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x10612*x10614))+(((-1.0)*r02*x10618))+(((-1.0)*r00*x10610*x10614))+((r00*x10615))+(((-1.0)*r01*x10619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10620=((1.0)*cj6);
CheckValue<IkReal> x10621=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x10620))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x10621.valid){
continue;
}
CheckValue<IkReal> x10622 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x10620))),IKFAST_ATAN2_MAGTHRESH);
if(!x10622.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10621.value)))+(x10622.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10623=IKcos(j4);
IkReal x10624=IKsin(j4);
IkReal x10625=(cj5*sj6);
IkReal x10626=(cj5*r21);
IkReal x10627=(cj5*r01);
IkReal x10628=(cj5*cj6*r11);
IkReal x10629=((1.0)*x10624);
IkReal x10630=(cj6*x10623);
IkReal x10631=(sj5*x10623);
IkReal x10632=(cj6*x10624);
IkReal x10633=(sj5*x10629);
IkReal x10634=((1.0)*sj6*x10623);
evalcond[0]=(((r20*x10632))+((x10626*x10630))+(((-1.0)*r21*sj6*x10629))+((r22*x10631))+((r20*x10623*x10625)));
evalcond[1]=(((r00*x10632))+((r00*x10623*x10625))+((x10627*x10630))+(((-1.0)*r01*sj6*x10629))+((r02*x10631)));
evalcond[2]=((1.0)+((r10*x10632))+(((-1.0)*r11*sj6*x10629))+((x10623*x10628))+((r12*x10631))+((r10*x10623*x10625)));
evalcond[3]=(((r20*x10630))+(((-1.0)*cj6*x10626*x10629))+(((-1.0)*r22*x10633))+(((-1.0)*r21*x10634))+(((-1.0)*r20*x10625*x10629)));
evalcond[4]=(((r10*x10630))+(((-1.0)*r12*x10633))+(((-1.0)*x10628*x10629))+(((-1.0)*r11*x10634))+(((-1.0)*r10*x10625*x10629)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x10633))+(((-1.0)*r01*x10634))+((r00*x10630))+(((-1.0)*r00*x10625*x10629))+(((-1.0)*cj6*x10627*x10629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10635=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10635.valid){
continue;
}
CheckValue<IkReal> x10636 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10636.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10635.value)))+(x10636.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10637=IKcos(j4);
IkReal x10638=IKsin(j4);
IkReal x10639=(cj5*sj6);
IkReal x10640=(cj5*r21);
IkReal x10641=(cj5*r01);
IkReal x10642=(cj5*cj6*r11);
IkReal x10643=((1.0)*x10638);
IkReal x10644=(cj6*x10637);
IkReal x10645=(sj5*x10637);
IkReal x10646=(cj6*x10638);
IkReal x10647=(sj5*x10643);
IkReal x10648=((1.0)*sj6*x10637);
evalcond[0]=(((x10640*x10644))+((r20*x10646))+(((-1.0)*r21*sj6*x10643))+((r22*x10645))+((r20*x10637*x10639)));
evalcond[1]=(((r00*x10637*x10639))+((r00*x10646))+((r02*x10645))+(((-1.0)*r01*sj6*x10643))+((x10641*x10644)));
evalcond[2]=((1.0)+((r10*x10637*x10639))+((x10637*x10642))+((r10*x10646))+(((-1.0)*r11*sj6*x10643))+((r12*x10645)));
evalcond[3]=(((r20*x10644))+(((-1.0)*r22*x10647))+(((-1.0)*r21*x10648))+(((-1.0)*cj6*x10640*x10643))+(((-1.0)*r20*x10639*x10643)));
evalcond[4]=((((-1.0)*r11*x10648))+(((-1.0)*r12*x10647))+((r10*x10644))+(((-1.0)*r10*x10639*x10643))+(((-1.0)*x10642*x10643)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x10641*x10643))+(((-1.0)*r02*x10647))+(((-1.0)*r01*x10648))+((r00*x10644))+(((-1.0)*r00*x10639*x10643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10649=(cj5*r12);
IkReal x10650=(r10*sj6);
IkReal x10651=((0.37429)*sj5);
IkReal x10652=((0.01)*cj5);
IkReal x10653=(cj6*r11);
IkReal x10654=(r00*sj6);
IkReal x10655=(r20*sj6);
IkReal x10656=((1.0)*sj5);
IkReal x10657=((0.01)*sj5);
IkReal x10658=(cj6*r01);
IkReal x10659=(cj5*r02);
IkReal x10660=(cj6*r21);
IkReal x10661=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*x10651*x10660))+((r22*x10657))+(((-1.0)*pz))+((x10652*x10655))+(((-1.0)*x10651*x10655))+(((0.37429)*x10661))+((x10652*x10660)));
evalcond[2]=((((0.37429)*x10659))+((r02*x10657))+(((-1.0)*px))+((x10652*x10658))+((x10652*x10654))+(((-1.0)*x10651*x10654))+(((-1.0)*x10651*x10658)));
evalcond[3]=((0.29542)+(((0.37429)*x10649))+(((-1.0)*py))+((x10650*x10652))+((x10652*x10653))+((r12*x10657))+(((-1.0)*x10650*x10651))+(((-1.0)*x10651*x10653)));
evalcond[4]=((1.0)+(((-1.0)*x10655*x10656))+(((-1.0)*x10656*x10660))+x10661);
evalcond[5]=((((-1.0)*x10653*x10656))+(((-1.0)*x10650*x10656))+x10649);
evalcond[6]=((((-1.0)*x10656*x10658))+(((-1.0)*x10654*x10656))+x10659);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10662=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10662;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x10662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10663=((1.0)*sj5);
IkReal x10664=((((-1.0)*cj6*r01*x10663))+(((-1.0)*r00*sj6*x10663))+((cj5*r02)));
j4eval[0]=x10664;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x10665=cj6*cj6;
IkReal x10666=r01*r01;
IkReal x10667=cj5*cj5;
IkReal x10668=r00*r00;
IkReal x10669=r02*r02;
IkReal x10670=(r02*sj5);
IkReal x10671=(r01*sj6);
IkReal x10672=(cj6*r00);
IkReal x10673=(cj5*cj6*r01);
IkReal x10674=(cj5*r00*sj6);
IkReal x10675=((1.0)*x10667);
IkReal x10676=(x10665*x10668);
IkReal x10677=(x10665*x10666);
IkReal x10678=((((-1.0)*x10669*x10675))+((x10667*x10668))+(((2.0)*x10670*x10674))+(((2.0)*x10670*x10673))+(((2.0)*x10667*x10671*x10672))+(((-1.0)*x10675*x10676))+(((-1.0)*x10677))+x10676+x10666+x10669+((x10667*x10677))+(((-2.0)*x10671*x10672)));
j4eval[0]=x10678;
j4eval[1]=((IKabs((x10670+x10673+x10674)))+(IKabs(((((-1.0)*x10672))+x10671))));
j4eval[2]=IKsign(x10678);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10679=cj6*cj6;
IkReal x10680=r01*r01;
IkReal x10681=cj5*cj5;
IkReal x10682=r00*r00;
IkReal x10683=r02*r02;
IkReal x10684=(r00*sj6);
IkReal x10685=(r02*sj5);
IkReal x10686=((2.0)*cj6*r01);
IkReal x10687=((1.0)*x10681);
IkReal x10688=(x10679*x10682);
IkReal x10689=(x10679*x10680);
CheckValue<IkReal> x10690 = IKatan2WithCheck(IkReal((((cj5*cj6*r01))+x10685+((cj5*x10684)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10690.valid){
continue;
}
CheckValue<IkReal> x10691=IKPowWithIntegerCheck(IKsign((((x10681*x10689))+((x10681*x10682))+(((-1.0)*x10687*x10688))+(((-1.0)*x10683*x10687))+(((-1.0)*x10684*x10686))+((cj5*x10685*x10686))+((x10681*x10684*x10686))+(((-1.0)*x10689))+x10688+x10680+x10683+(((2.0)*cj5*x10684*x10685)))),-1);
if(!x10691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10690.value)+(((1.5707963267949)*(x10691.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10692=IKcos(j4);
IkReal x10693=IKsin(j4);
IkReal x10694=(cj5*sj6);
IkReal x10695=(cj5*r21);
IkReal x10696=(cj5*r01);
IkReal x10697=(cj5*cj6*r11);
IkReal x10698=((1.0)*x10693);
IkReal x10699=(cj6*x10692);
IkReal x10700=(sj5*x10692);
IkReal x10701=(cj6*x10693);
IkReal x10702=(sj5*x10698);
IkReal x10703=((1.0)*sj6*x10692);
evalcond[0]=(((r20*x10692*x10694))+((r22*x10700))+((r20*x10701))+(((-1.0)*r21*sj6*x10698))+((x10695*x10699)));
evalcond[1]=(((r00*x10701))+((r02*x10700))+(((-1.0)*r01*sj6*x10698))+((r00*x10692*x10694))+((x10696*x10699)));
evalcond[2]=((-1.0)+(((-1.0)*r11*sj6*x10698))+((x10692*x10697))+((r10*x10692*x10694))+((r12*x10700))+((r10*x10701)));
evalcond[3]=((((-1.0)*r20*x10694*x10698))+(((-1.0)*r22*x10702))+(((-1.0)*cj6*x10695*x10698))+(((-1.0)*r21*x10703))+((r20*x10699)));
evalcond[4]=((((-1.0)*r12*x10702))+((r10*x10699))+(((-1.0)*x10697*x10698))+(((-1.0)*r10*x10694*x10698))+(((-1.0)*r11*x10703)));
evalcond[5]=((1.0)+(((-1.0)*r00*x10694*x10698))+(((-1.0)*r02*x10702))+(((-1.0)*cj6*x10696*x10698))+((r00*x10699))+(((-1.0)*r01*x10703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10704=((1.0)*sj5);
CheckValue<IkReal> x10705=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x10704))+((cj5*r02))+(((-1.0)*r00*sj6*x10704)))),-1);
if(!x10705.valid){
continue;
}
CheckValue<IkReal> x10706 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10705.value)))+(x10706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10707=IKcos(j4);
IkReal x10708=IKsin(j4);
IkReal x10709=(cj5*sj6);
IkReal x10710=(cj5*r21);
IkReal x10711=(cj5*r01);
IkReal x10712=(cj5*cj6*r11);
IkReal x10713=((1.0)*x10708);
IkReal x10714=(cj6*x10707);
IkReal x10715=(sj5*x10707);
IkReal x10716=(cj6*x10708);
IkReal x10717=(sj5*x10713);
IkReal x10718=((1.0)*sj6*x10707);
evalcond[0]=(((r20*x10716))+((r22*x10715))+((r20*x10707*x10709))+((x10710*x10714))+(((-1.0)*r21*sj6*x10713)));
evalcond[1]=(((r00*x10716))+(((-1.0)*r01*sj6*x10713))+((x10711*x10714))+((r00*x10707*x10709))+((r02*x10715)));
evalcond[2]=((-1.0)+((r12*x10715))+(((-1.0)*r11*sj6*x10713))+((r10*x10707*x10709))+((r10*x10716))+((x10707*x10712)));
evalcond[3]=((((-1.0)*r21*x10718))+((r20*x10714))+(((-1.0)*cj6*x10710*x10713))+(((-1.0)*r22*x10717))+(((-1.0)*r20*x10709*x10713)));
evalcond[4]=((((-1.0)*r12*x10717))+(((-1.0)*r10*x10709*x10713))+(((-1.0)*r11*x10718))+(((-1.0)*x10712*x10713))+((r10*x10714)));
evalcond[5]=((1.0)+(((-1.0)*r01*x10718))+((r00*x10714))+(((-1.0)*r00*x10709*x10713))+(((-1.0)*cj6*x10711*x10713))+(((-1.0)*r02*x10717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10719 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x10719.valid){
continue;
}
CheckValue<IkReal> x10720=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10720.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10719.value)+(((1.5707963267949)*(x10720.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10721=IKcos(j4);
IkReal x10722=IKsin(j4);
IkReal x10723=(cj5*sj6);
IkReal x10724=(cj5*r21);
IkReal x10725=(cj5*r01);
IkReal x10726=(cj5*cj6*r11);
IkReal x10727=((1.0)*x10722);
IkReal x10728=(cj6*x10721);
IkReal x10729=(sj5*x10721);
IkReal x10730=(cj6*x10722);
IkReal x10731=(sj5*x10727);
IkReal x10732=((1.0)*sj6*x10721);
evalcond[0]=(((r22*x10729))+((r20*x10721*x10723))+((x10724*x10728))+(((-1.0)*r21*sj6*x10727))+((r20*x10730)));
evalcond[1]=(((r02*x10729))+((x10725*x10728))+(((-1.0)*r01*sj6*x10727))+((r00*x10721*x10723))+((r00*x10730)));
evalcond[2]=((-1.0)+((r10*x10730))+((r10*x10721*x10723))+((x10721*x10726))+((r12*x10729))+(((-1.0)*r11*sj6*x10727)));
evalcond[3]=((((-1.0)*r22*x10731))+(((-1.0)*cj6*x10724*x10727))+(((-1.0)*r20*x10723*x10727))+(((-1.0)*r21*x10732))+((r20*x10728)));
evalcond[4]=(((r10*x10728))+(((-1.0)*x10726*x10727))+(((-1.0)*r10*x10723*x10727))+(((-1.0)*r11*x10732))+(((-1.0)*r12*x10731)));
evalcond[5]=((1.0)+(((-1.0)*r01*x10732))+(((-1.0)*r02*x10731))+(((-1.0)*cj6*x10725*x10727))+(((-1.0)*r00*x10723*x10727))+((r00*x10728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10733=(cj5*r12);
IkReal x10734=(r10*sj6);
IkReal x10735=((0.37429)*sj5);
IkReal x10736=((0.01)*cj5);
IkReal x10737=(cj6*r11);
IkReal x10738=(r00*sj6);
IkReal x10739=(r20*sj6);
IkReal x10740=((1.0)*sj5);
IkReal x10741=((0.01)*sj5);
IkReal x10742=(cj6*r01);
IkReal x10743=(cj5*r02);
IkReal x10744=(cj6*r21);
IkReal x10745=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.069)+(((0.37429)*x10745))+(((-1.0)*x10735*x10739))+((r22*x10741))+((x10736*x10744))+(((-1.0)*x10735*x10744))+(((-1.0)*pz))+((x10736*x10739)));
evalcond[2]=((-0.29542)+(((0.37429)*x10743))+(((-1.0)*x10735*x10738))+((x10736*x10742))+(((-1.0)*x10735*x10742))+((r02*x10741))+(((-1.0)*px))+((x10736*x10738)));
evalcond[3]=((((-1.0)*x10734*x10735))+(((-1.0)*x10735*x10737))+(((-1.0)*py))+(((0.37429)*x10733))+((x10736*x10737))+((r12*x10741))+((x10734*x10736)));
evalcond[4]=((1.0)+(((-1.0)*x10739*x10740))+x10745+(((-1.0)*x10740*x10744)));
evalcond[5]=((((-1.0)*x10734*x10740))+(((-1.0)*x10737*x10740))+x10733);
evalcond[6]=((((-1.0)*x10738*x10740))+x10743+(((-1.0)*x10740*x10742)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x10746=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10746;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x10746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x10747=((1.0)*sj5);
IkReal x10748=((((-1.0)*r10*sj6*x10747))+((cj5*r12))+(((-1.0)*cj6*r11*x10747)));
j4eval[0]=x10748;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10748);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x10749=r11*r11;
IkReal x10750=cj5*cj5;
IkReal x10751=cj6*cj6;
IkReal x10752=r10*r10;
IkReal x10753=r12*r12;
IkReal x10754=(r12*sj5);
IkReal x10755=(r11*sj6);
IkReal x10756=((1.0)*x10751);
IkReal x10757=(cj5*cj6*r11);
IkReal x10758=(cj5*r10*sj6);
IkReal x10759=((2.0)*cj6*r10);
IkReal x10760=(x10750*x10752);
IkReal x10761=((((2.0)*x10754*x10757))+(((2.0)*x10754*x10758))+((x10751*x10752))+((x10750*x10755*x10759))+((x10749*x10750*x10751))+(((-1.0)*x10755*x10759))+(((-1.0)*x10750*x10753))+(((-1.0)*x10749*x10756))+x10749+x10753+x10760+(((-1.0)*x10756*x10760)));
j4eval[0]=x10761;
j4eval[1]=((IKabs(((((-1.0)*cj6*r10))+x10755)))+(IKabs((x10758+x10757+x10754))));
j4eval[2]=IKsign(x10761);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10762=r11*r11;
IkReal x10763=cj5*cj5;
IkReal x10764=cj6*cj6;
IkReal x10765=r10*r10;
IkReal x10766=r12*r12;
IkReal x10767=(r10*sj6);
IkReal x10768=(r12*sj5);
IkReal x10769=((1.0)*x10764);
IkReal x10770=(cj5*cj6*r11);
IkReal x10771=((2.0)*cj6*r11);
IkReal x10772=(x10763*x10765);
CheckValue<IkReal> x10773=IKPowWithIntegerCheck(IKsign((((x10762*x10763*x10764))+(((-1.0)*x10762*x10769))+((x10764*x10765))+((x10763*x10767*x10771))+(((2.0)*x10768*x10770))+(((-1.0)*x10763*x10766))+(((2.0)*cj5*x10767*x10768))+(((-1.0)*x10767*x10771))+(((-1.0)*x10769*x10772))+x10762+x10766+x10772)),-1);
if(!x10773.valid){
continue;
}
CheckValue<IkReal> x10774 = IKatan2WithCheck(IkReal((((cj5*x10767))+x10768+x10770)),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10774.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10773.value)))+(x10774.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10775=IKcos(j4);
IkReal x10776=IKsin(j4);
IkReal x10777=(cj5*sj6);
IkReal x10778=(cj5*r01);
IkReal x10779=(cj5*r21);
IkReal x10780=(cj5*cj6*r11);
IkReal x10781=((1.0)*x10776);
IkReal x10782=(cj6*x10775);
IkReal x10783=(sj5*x10775);
IkReal x10784=(cj6*x10776);
IkReal x10785=(sj5*x10781);
IkReal x10786=((1.0)*sj6*x10775);
evalcond[0]=(((r22*x10783))+((x10779*x10782))+((r20*x10784))+((r20*x10775*x10777))+(((-1.0)*r21*sj6*x10781)));
evalcond[1]=((((-1.0)*r11*sj6*x10781))+((r10*x10775*x10777))+((x10775*x10780))+((r12*x10783))+((r10*x10784)));
evalcond[2]=((1.0)+(((-1.0)*r01*sj6*x10781))+((x10778*x10782))+((r02*x10783))+((r00*x10784))+((r00*x10775*x10777)));
evalcond[3]=((((-1.0)*r21*x10786))+(((-1.0)*r20*x10777*x10781))+((r20*x10782))+(((-1.0)*cj6*x10779*x10781))+(((-1.0)*r22*x10785)));
evalcond[4]=((((-1.0)*r01*x10786))+(((-1.0)*r00*x10777*x10781))+((r00*x10782))+(((-1.0)*cj6*x10778*x10781))+(((-1.0)*r02*x10785)));
evalcond[5]=((1.0)+(((-1.0)*x10780*x10781))+(((-1.0)*r11*x10786))+(((-1.0)*r10*x10777*x10781))+(((-1.0)*r12*x10785))+((r10*x10782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10787=((1.0)*sj5);
CheckValue<IkReal> x10788=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x10787))+(((-1.0)*r10*sj6*x10787)))),-1);
if(!x10788.valid){
continue;
}
CheckValue<IkReal> x10789 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10788.value)))+(x10789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10790=IKcos(j4);
IkReal x10791=IKsin(j4);
IkReal x10792=(cj5*sj6);
IkReal x10793=(cj5*r01);
IkReal x10794=(cj5*r21);
IkReal x10795=(cj5*cj6*r11);
IkReal x10796=((1.0)*x10791);
IkReal x10797=(cj6*x10790);
IkReal x10798=(sj5*x10790);
IkReal x10799=(cj6*x10791);
IkReal x10800=(sj5*x10796);
IkReal x10801=((1.0)*sj6*x10790);
evalcond[0]=((((-1.0)*r21*sj6*x10796))+((r20*x10790*x10792))+((r20*x10799))+((x10794*x10797))+((r22*x10798)));
evalcond[1]=(((r10*x10799))+((r12*x10798))+(((-1.0)*r11*sj6*x10796))+((r10*x10790*x10792))+((x10790*x10795)));
evalcond[2]=((1.0)+((r02*x10798))+(((-1.0)*r01*sj6*x10796))+((r00*x10790*x10792))+((r00*x10799))+((x10793*x10797)));
evalcond[3]=((((-1.0)*r21*x10801))+(((-1.0)*cj6*x10794*x10796))+(((-1.0)*r22*x10800))+((r20*x10797))+(((-1.0)*r20*x10792*x10796)));
evalcond[4]=((((-1.0)*cj6*x10793*x10796))+(((-1.0)*r02*x10800))+(((-1.0)*r00*x10792*x10796))+((r00*x10797))+(((-1.0)*r01*x10801)));
evalcond[5]=((1.0)+((r10*x10797))+(((-1.0)*r10*x10792*x10796))+(((-1.0)*x10795*x10796))+(((-1.0)*r11*x10801))+(((-1.0)*r12*x10800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10802=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10802.valid){
continue;
}
CheckValue<IkReal> x10803 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10802.value)))+(x10803.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10804=IKcos(j4);
IkReal x10805=IKsin(j4);
IkReal x10806=(cj5*sj6);
IkReal x10807=(cj5*r01);
IkReal x10808=(cj5*r21);
IkReal x10809=(cj5*cj6*r11);
IkReal x10810=((1.0)*x10805);
IkReal x10811=(cj6*x10804);
IkReal x10812=(sj5*x10804);
IkReal x10813=(cj6*x10805);
IkReal x10814=(sj5*x10810);
IkReal x10815=((1.0)*sj6*x10804);
evalcond[0]=(((r22*x10812))+((r20*x10804*x10806))+((x10808*x10811))+(((-1.0)*r21*sj6*x10810))+((r20*x10813)));
evalcond[1]=(((r10*x10804*x10806))+((r10*x10813))+((x10804*x10809))+(((-1.0)*r11*sj6*x10810))+((r12*x10812)));
evalcond[2]=((1.0)+(((-1.0)*r01*sj6*x10810))+((r02*x10812))+((x10807*x10811))+((r00*x10804*x10806))+((r00*x10813)));
evalcond[3]=((((-1.0)*cj6*x10808*x10810))+((r20*x10811))+(((-1.0)*r21*x10815))+(((-1.0)*r20*x10806*x10810))+(((-1.0)*r22*x10814)));
evalcond[4]=((((-1.0)*r02*x10814))+(((-1.0)*cj6*x10807*x10810))+(((-1.0)*r01*x10815))+(((-1.0)*r00*x10806*x10810))+((r00*x10811)));
evalcond[5]=((1.0)+(((-1.0)*x10809*x10810))+(((-1.0)*r11*x10815))+(((-1.0)*r12*x10814))+(((-1.0)*r10*x10806*x10810))+((r10*x10811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10816=(cj5*r12);
IkReal x10817=(r10*sj6);
IkReal x10818=((0.37429)*sj5);
IkReal x10819=((0.01)*cj5);
IkReal x10820=(cj6*r11);
IkReal x10821=(r00*sj6);
IkReal x10822=(r20*sj6);
IkReal x10823=((1.0)*sj5);
IkReal x10824=((0.01)*sj5);
IkReal x10825=(cj6*r01);
IkReal x10826=(cj5*r02);
IkReal x10827=(cj6*r21);
IkReal x10828=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.069)+(((-1.0)*pz))+(((0.37429)*x10828))+(((-1.0)*x10818*x10822))+(((-1.0)*x10818*x10827))+((r22*x10824))+((x10819*x10827))+((x10819*x10822)));
evalcond[2]=((0.29542)+((r02*x10824))+(((-1.0)*px))+(((0.37429)*x10826))+(((-1.0)*x10818*x10821))+(((-1.0)*x10818*x10825))+((x10819*x10825))+((x10819*x10821)));
evalcond[3]=((((-1.0)*x10817*x10818))+((r12*x10824))+((x10817*x10819))+(((-1.0)*py))+(((0.37429)*x10816))+(((-1.0)*x10818*x10820))+((x10819*x10820)));
evalcond[4]=((1.0)+(((-1.0)*x10822*x10823))+(((-1.0)*x10823*x10827))+x10828);
evalcond[5]=((((-1.0)*x10820*x10823))+(((-1.0)*x10817*x10823))+x10816);
evalcond[6]=((((-1.0)*x10821*x10823))+(((-1.0)*x10823*x10825))+x10826);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x10829=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x10829;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10829);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x10830=((1.0)*cj6);
IkReal x10831=(((cj5*r22))+(((-1.0)*r21*sj5*x10830))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x10831;
j4eval[1]=((IKabs(((((-1.0)*r10*x10830))+((r11*sj6)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x10831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x10832=cj6*cj6;
IkReal x10833=cj5*cj5;
IkReal x10834=r10*r10;
IkReal x10835=r11*r11;
IkReal x10836=r12*r12;
IkReal x10837=(r10*sj6);
IkReal x10838=(r12*sj5);
IkReal x10839=((2.0)*cj6*r11);
IkReal x10840=((1.0)*x10834);
IkReal x10841=(x10832*x10835);
IkReal x10842=((((-1.0)*x10836))+(((-1.0)*x10835))+(((-1.0)*x10832*x10840))+(((-1.0)*x10833*x10840))+((x10833*x10836))+(((-1.0)*cj5*x10838*x10839))+((x10837*x10839))+(((-1.0)*x10833*x10837*x10839))+(((-2.0)*cj5*x10837*x10838))+(((-1.0)*x10833*x10841))+((x10832*x10833*x10834))+x10841);
j4eval[0]=x10842;
j4eval[1]=((IKabs((((cj5*x10837))+((cj5*cj6*r11))+x10838)))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x10842);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10843=cj6*cj6;
IkReal x10844=cj5*cj5;
IkReal x10845=r10*r10;
IkReal x10846=r11*r11;
IkReal x10847=r12*r12;
IkReal x10848=(r10*sj6);
IkReal x10849=(r12*sj5);
IkReal x10850=((2.0)*cj6*r11);
IkReal x10851=(x10843*x10846);
IkReal x10852=(x10844*x10845);
CheckValue<IkReal> x10853 = IKatan2WithCheck(IkReal((((cj5*x10848))+((cj5*cj6*r11))+x10849)),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10853.valid){
continue;
}
CheckValue<IkReal> x10854=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*x10849*x10850))+((x10843*x10852))+(((-1.0)*x10844*x10851))+(((-1.0)*x10844*x10848*x10850))+(((-1.0)*x10846))+(((-1.0)*x10847))+((x10844*x10847))+((x10848*x10850))+(((-1.0)*x10843*x10845))+(((-2.0)*cj5*x10848*x10849))+(((-1.0)*x10852))+x10851)),-1);
if(!x10854.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10853.value)+(((1.5707963267949)*(x10854.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10855=IKcos(j4);
IkReal x10856=IKsin(j4);
IkReal x10857=(cj5*sj6);
IkReal x10858=(cj5*r01);
IkReal x10859=(cj5*r21);
IkReal x10860=(cj5*cj6*r11);
IkReal x10861=((1.0)*x10856);
IkReal x10862=(cj6*x10855);
IkReal x10863=(sj5*x10855);
IkReal x10864=(cj6*x10856);
IkReal x10865=(sj5*x10861);
IkReal x10866=((1.0)*sj6*x10855);
evalcond[0]=(((x10859*x10862))+(((-1.0)*r21*sj6*x10861))+((r20*x10864))+((r22*x10863))+((r20*x10855*x10857)));
evalcond[1]=(((r10*x10855*x10857))+((r12*x10863))+((x10855*x10860))+((r10*x10864))+(((-1.0)*r11*sj6*x10861)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj6*x10861))+((r00*x10855*x10857))+((r00*x10864))+((x10858*x10862))+((r02*x10863)));
evalcond[3]=((((-1.0)*r22*x10865))+(((-1.0)*r21*x10866))+((r20*x10862))+(((-1.0)*cj6*x10859*x10861))+(((-1.0)*r20*x10857*x10861)));
evalcond[4]=((((-1.0)*r00*x10857*x10861))+(((-1.0)*cj6*x10858*x10861))+((r00*x10862))+(((-1.0)*r01*x10866))+(((-1.0)*r02*x10865)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x10865))+(((-1.0)*r11*x10866))+(((-1.0)*x10860*x10861))+((r10*x10862))+(((-1.0)*r10*x10857*x10861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10867=((1.0)*cj6);
CheckValue<IkReal> x10868 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),(((r11*sj6))+(((-1.0)*r10*x10867))),IKFAST_ATAN2_MAGTHRESH);
if(!x10868.valid){
continue;
}
CheckValue<IkReal> x10869=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*r21*sj5*x10867)))),-1);
if(!x10869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10868.value)+(((1.5707963267949)*(x10869.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10870=IKcos(j4);
IkReal x10871=IKsin(j4);
IkReal x10872=(cj5*sj6);
IkReal x10873=(cj5*r01);
IkReal x10874=(cj5*r21);
IkReal x10875=(cj5*cj6*r11);
IkReal x10876=((1.0)*x10871);
IkReal x10877=(cj6*x10870);
IkReal x10878=(sj5*x10870);
IkReal x10879=(cj6*x10871);
IkReal x10880=(sj5*x10876);
IkReal x10881=((1.0)*sj6*x10870);
evalcond[0]=(((x10874*x10877))+((r20*x10879))+((r20*x10870*x10872))+(((-1.0)*r21*sj6*x10876))+((r22*x10878)));
evalcond[1]=(((x10870*x10875))+((r12*x10878))+((r10*x10870*x10872))+((r10*x10879))+(((-1.0)*r11*sj6*x10876)));
evalcond[2]=((-1.0)+(((-1.0)*r01*sj6*x10876))+((r00*x10870*x10872))+((r02*x10878))+((r00*x10879))+((x10873*x10877)));
evalcond[3]=((((-1.0)*cj6*x10874*x10876))+(((-1.0)*r20*x10872*x10876))+((r20*x10877))+(((-1.0)*r22*x10880))+(((-1.0)*r21*x10881)));
evalcond[4]=((((-1.0)*r01*x10881))+(((-1.0)*r02*x10880))+(((-1.0)*cj6*x10873*x10876))+(((-1.0)*r00*x10872*x10876))+((r00*x10877)));
evalcond[5]=((-1.0)+((r10*x10877))+(((-1.0)*x10875*x10876))+(((-1.0)*r10*x10872*x10876))+(((-1.0)*r11*x10881))+(((-1.0)*r12*x10880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10882=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x10882.valid){
continue;
}
CheckValue<IkReal> x10883 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x10883.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10882.value)))+(x10883.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10884=IKcos(j4);
IkReal x10885=IKsin(j4);
IkReal x10886=(cj5*sj6);
IkReal x10887=(cj5*r01);
IkReal x10888=(cj5*r21);
IkReal x10889=(cj5*cj6*r11);
IkReal x10890=((1.0)*x10885);
IkReal x10891=(cj6*x10884);
IkReal x10892=(sj5*x10884);
IkReal x10893=(cj6*x10885);
IkReal x10894=(sj5*x10890);
IkReal x10895=((1.0)*sj6*x10884);
evalcond[0]=(((r20*x10893))+((r20*x10884*x10886))+((r22*x10892))+(((-1.0)*r21*sj6*x10890))+((x10888*x10891)));
evalcond[1]=(((r10*x10884*x10886))+((r12*x10892))+((r10*x10893))+(((-1.0)*r11*sj6*x10890))+((x10884*x10889)));
evalcond[2]=((-1.0)+((x10887*x10891))+((r00*x10884*x10886))+(((-1.0)*r01*sj6*x10890))+((r02*x10892))+((r00*x10893)));
evalcond[3]=(((r20*x10891))+(((-1.0)*r20*x10886*x10890))+(((-1.0)*cj6*x10888*x10890))+(((-1.0)*r22*x10894))+(((-1.0)*r21*x10895)));
evalcond[4]=((((-1.0)*r01*x10895))+(((-1.0)*r02*x10894))+(((-1.0)*cj6*x10887*x10890))+(((-1.0)*r00*x10886*x10890))+((r00*x10891)));
evalcond[5]=((-1.0)+(((-1.0)*x10889*x10890))+((r10*x10891))+(((-1.0)*r12*x10894))+(((-1.0)*r11*x10895))+(((-1.0)*r10*x10886*x10890)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10896=(cj0*cj6);
IkReal x10897=((1.0)*sj0);
IkReal x10898=(cj0*sj6);
IkReal x10899=(sj6*x10897);
CheckValue<IkReal> x10900=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x10900.valid){
continue;
}
CheckValue<IkReal> x10901 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj5*x10897))+(((-1.0)*cj5*cj6*r01*x10897))+((cj5*r10*x10898))+((cj0*r12*sj5))+((cj5*r11*x10896))+(((-1.0)*cj5*r00*x10899)))),((((-1.0)*r01*x10899))+((cj6*r00*sj0))+((r11*x10898))+(((-1.0)*r10*x10896))),IKFAST_ATAN2_MAGTHRESH);
if(!x10901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10900.value)))+(x10901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10902=IKcos(j4);
IkReal x10903=IKsin(j4);
IkReal x10904=(cj5*sj6);
IkReal x10905=(cj5*r21);
IkReal x10906=(cj5*r01);
IkReal x10907=(cj5*cj6*r11);
IkReal x10908=((1.0)*x10903);
IkReal x10909=(cj6*x10902);
IkReal x10910=(sj5*x10902);
IkReal x10911=(cj6*x10903);
IkReal x10912=(sj5*x10908);
IkReal x10913=((1.0)*sj6*x10902);
evalcond[0]=((((-1.0)*r21*sj6*x10908))+((x10905*x10909))+((r22*x10910))+((r20*x10902*x10904))+((r20*x10911)));
evalcond[1]=(cj0+((r02*x10910))+((r00*x10911))+((r00*x10902*x10904))+((x10906*x10909))+(((-1.0)*r01*sj6*x10908)));
evalcond[2]=((((-1.0)*r11*sj6*x10908))+sj0+((x10902*x10907))+((r10*x10902*x10904))+((r12*x10910))+((r10*x10911)));
evalcond[3]=((((-1.0)*cj6*x10905*x10908))+(((-1.0)*r22*x10912))+(((-1.0)*r21*x10913))+((r20*x10909))+(((-1.0)*r20*x10904*x10908)));
evalcond[4]=((((-1.0)*r12*x10912))+cj0+(((-1.0)*r11*x10913))+(((-1.0)*r10*x10904*x10908))+(((-1.0)*x10907*x10908))+((r10*x10909)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x10912))+(((-1.0)*cj6*x10906*x10908))+(((-1.0)*r00*x10904*x10908))+((r00*x10909))+(((-1.0)*r01*x10913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10914=(cj0*r20);
IkReal x10915=((1.0)*cj6);
IkReal x10916=(cj0*r21);
CheckValue<IkReal> x10917=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x10915)))),-1);
if(!x10917.valid){
continue;
}
CheckValue<IkReal> x10918 = IKatan2WithCheck(IkReal((((cj5*cj6*x10916))+((cj5*sj6*x10914))+((cj0*r22*sj5)))),((((-1.0)*x10914*x10915))+((sj6*x10916))),IKFAST_ATAN2_MAGTHRESH);
if(!x10918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10917.value)))+(x10918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10919=IKcos(j4);
IkReal x10920=IKsin(j4);
IkReal x10921=(cj5*sj6);
IkReal x10922=(cj5*r21);
IkReal x10923=(cj5*r01);
IkReal x10924=(cj5*cj6*r11);
IkReal x10925=((1.0)*x10920);
IkReal x10926=(cj6*x10919);
IkReal x10927=(sj5*x10919);
IkReal x10928=(cj6*x10920);
IkReal x10929=(sj5*x10925);
IkReal x10930=((1.0)*sj6*x10919);
evalcond[0]=(((r20*x10919*x10921))+(((-1.0)*r21*sj6*x10925))+((r22*x10927))+((r20*x10928))+((x10922*x10926)));
evalcond[1]=(cj0+(((-1.0)*r01*sj6*x10925))+((r02*x10927))+((r00*x10919*x10921))+((r00*x10928))+((x10923*x10926)));
evalcond[2]=(((r10*x10928))+sj0+(((-1.0)*r11*sj6*x10925))+((r10*x10919*x10921))+((r12*x10927))+((x10919*x10924)));
evalcond[3]=((((-1.0)*r22*x10929))+(((-1.0)*r21*x10930))+(((-1.0)*cj6*x10922*x10925))+(((-1.0)*r20*x10921*x10925))+((r20*x10926)));
evalcond[4]=((((-1.0)*r11*x10930))+((r10*x10926))+cj0+(((-1.0)*r12*x10929))+(((-1.0)*x10924*x10925))+(((-1.0)*r10*x10921*x10925)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x10929))+((r00*x10926))+(((-1.0)*r00*x10921*x10925))+(((-1.0)*r01*x10930))+(((-1.0)*cj6*x10923*x10925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10931=(r21*sj0);
IkReal x10932=(r20*sj0);
CheckValue<IkReal> x10933 = IKatan2WithCheck(IkReal((((cj5*cj6*x10931))+((r22*sj0*sj5))+((cj5*sj6*x10932)))),((((-1.0)*cj6*x10932))+((sj6*x10931))),IKFAST_ATAN2_MAGTHRESH);
if(!x10933.valid){
continue;
}
CheckValue<IkReal> x10934=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x10934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10933.value)+(((1.5707963267949)*(x10934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10935=IKcos(j4);
IkReal x10936=IKsin(j4);
IkReal x10937=(cj5*sj6);
IkReal x10938=(cj5*r21);
IkReal x10939=(cj5*r01);
IkReal x10940=(cj5*cj6*r11);
IkReal x10941=((1.0)*x10936);
IkReal x10942=(cj6*x10935);
IkReal x10943=(sj5*x10935);
IkReal x10944=(cj6*x10936);
IkReal x10945=(sj5*x10941);
IkReal x10946=((1.0)*sj6*x10935);
evalcond[0]=(((r20*x10944))+((r20*x10935*x10937))+((x10938*x10942))+((r22*x10943))+(((-1.0)*r21*sj6*x10941)));
evalcond[1]=(cj0+((r00*x10944))+((x10939*x10942))+((r00*x10935*x10937))+((r02*x10943))+(((-1.0)*r01*sj6*x10941)));
evalcond[2]=(sj0+((r12*x10943))+((x10935*x10940))+((r10*x10944))+(((-1.0)*r11*sj6*x10941))+((r10*x10935*x10937)));
evalcond[3]=((((-1.0)*r20*x10937*x10941))+((r20*x10942))+(((-1.0)*r22*x10945))+(((-1.0)*cj6*x10938*x10941))+(((-1.0)*r21*x10946)));
evalcond[4]=((((-1.0)*r10*x10937*x10941))+cj0+(((-1.0)*r11*x10946))+(((-1.0)*r12*x10945))+((r10*x10942))+(((-1.0)*x10940*x10941)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r01*x10946))+((r00*x10942))+(((-1.0)*r02*x10945))+(((-1.0)*r00*x10937*x10941))+(((-1.0)*cj6*x10939*x10941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10947=(cj5*r22);
IkReal x10948=(cj6*r21);
IkReal x10949=((1.0)*sj5);
IkReal x10950=((0.01)*cj5);
IkReal x10951=(r20*sj6);
IkReal x10952=((0.37429)*sj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-0.069)+(((-1.0)*x10948*x10952))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((0.37429)*x10947))+(((-1.0)*x10951*x10952))+((x10950*x10951))+((x10948*x10950)));
evalcond[2]=((-1.0)+(((-1.0)*x10948*x10949))+(((-1.0)*x10949*x10951))+x10947);
evalcond[3]=(((cj5*r12))+(((-1.0)*r10*sj6*x10949))+(((-1.0)*cj6*r11*x10949)));
evalcond[4]=((((-1.0)*cj6*r01*x10949))+(((-1.0)*r00*sj6*x10949))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x10953=((1.26697583102024)*cj5);
IkReal x10954=((0.0338501117053686)*cj5);
IkReal x10955=(r00*sj6);
IkReal x10956=(r10*sj6);
IkReal x10957=((1.26697583102024)*sj5);
IkReal x10958=(cj6*r11);
IkReal x10959=((0.0338501117053686)*sj5);
IkReal x10960=(cj6*r01);
if( IKabs(((((-3.38501117053686)*py))+(((-1.0)*x10957*x10958))+((x10954*x10956))+((x10954*x10958))+((r12*x10953))+((r12*x10959))+(((-1.0)*x10956*x10957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x10959))+((r02*x10953))+(((-3.38501117053686)*px))+((x10954*x10955))+(((-1.0)*x10957*x10960))+((x10954*x10960))+(((-1.0)*x10955*x10957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-3.38501117053686)*py))+(((-1.0)*x10957*x10958))+((x10954*x10956))+((x10954*x10958))+((r12*x10953))+((r12*x10959))+(((-1.0)*x10956*x10957))))+IKsqr((((r02*x10959))+((r02*x10953))+(((-3.38501117053686)*px))+((x10954*x10955))+(((-1.0)*x10957*x10960))+((x10954*x10960))+(((-1.0)*x10955*x10957))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-3.38501117053686)*py))+(((-1.0)*x10957*x10958))+((x10954*x10956))+((x10954*x10958))+((r12*x10953))+((r12*x10959))+(((-1.0)*x10956*x10957))), (((r02*x10959))+((r02*x10953))+(((-3.38501117053686)*px))+((x10954*x10955))+(((-1.0)*x10957*x10960))+((x10954*x10960))+(((-1.0)*x10955*x10957))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x10961=((0.01)*cj5);
IkReal x10962=(cj6*r01);
IkReal x10963=(r00*sj6);
IkReal x10964=((0.01)*sj5);
IkReal x10965=((0.37429)*sj5);
IkReal x10966=((0.37429)*cj5);
IkReal x10967=(r10*sj6);
IkReal x10968=(cj6*r11);
evalcond[0]=(((r02*x10964))+((r02*x10966))+(((-1.0)*x10963*x10965))+(((-1.0)*px))+(((-1.0)*x10962*x10965))+(((-0.29542)*(IKcos(j0))))+((x10961*x10963))+((x10961*x10962)));
evalcond[1]=((((-0.29542)*(IKsin(j0))))+(((-1.0)*py))+((x10961*x10968))+((x10961*x10967))+((r12*x10964))+((r12*x10966))+(((-1.0)*x10965*x10968))+(((-1.0)*x10965*x10967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x10969=(r21*sj0);
IkReal x10970=(r20*sj0);
IkReal x10971=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10971;
j4eval[1]=((IKabs((((r22*sj0*sj5))+((cj5*sj6*x10970))+((cj5*cj6*x10969)))))+(IKabs(((((-1.0)*cj6*x10970))+((sj6*x10969))))));
j4eval[2]=IKsign(x10971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x10972=(cj0*r20);
IkReal x10973=((1.0)*cj6);
IkReal x10974=(cj0*r21);
IkReal x10975=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x10973)));
j4eval[0]=x10975;
j4eval[1]=((IKabs((((cj5*sj6*x10972))+((cj0*r22*sj5))+((cj5*cj6*x10974)))))+(IKabs(((((-1.0)*x10972*x10973))+((sj6*x10974))))));
j4eval[2]=IKsign(x10975);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x10976=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x10976;
j4eval[1]=IKsign(x10976);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x10977=(cj5*r12);
IkReal x10978=(r10*sj6);
IkReal x10979=((0.37429)*sj5);
IkReal x10980=((0.01)*cj5);
IkReal x10981=(cj6*r11);
IkReal x10982=(r00*sj6);
IkReal x10983=(r20*sj6);
IkReal x10984=((1.0)*sj5);
IkReal x10985=((0.01)*sj5);
IkReal x10986=(cj6*r01);
IkReal x10987=(cj5*r02);
IkReal x10988=(cj6*r21);
IkReal x10989=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x10985))+((x10980*x10988))+((x10980*x10983))+(((-1.0)*pz))+(((0.37429)*x10989))+(((-1.0)*x10979*x10983))+(((-1.0)*x10979*x10988)));
evalcond[2]=(((x10980*x10986))+((x10980*x10982))+(((-1.0)*px))+(((0.37429)*x10987))+(((-1.0)*x10979*x10982))+(((-1.0)*x10979*x10986))+((r02*x10985)));
evalcond[3]=((-0.29542)+(((0.37429)*x10977))+((x10978*x10980))+((r12*x10985))+((x10980*x10981))+(((-1.0)*py))+(((-1.0)*x10979*x10981))+(((-1.0)*x10978*x10979)));
evalcond[4]=((-1.0)+(((-1.0)*x10983*x10984))+(((-1.0)*x10984*x10988))+x10989);
evalcond[5]=((((-1.0)*x10981*x10984))+(((-1.0)*x10978*x10984))+x10977);
evalcond[6]=((((-1.0)*x10982*x10984))+(((-1.0)*x10984*x10986))+x10987);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10990=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x10990;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x10990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10991=((1.0)*cj6);
IkReal x10992=(((cj5*r22))+(((-1.0)*r20*sj5*sj6))+(((-1.0)*r21*sj5*x10991)));
j4eval[0]=x10992;
j4eval[1]=IKsign(x10992);
j4eval[2]=((IKabs((((r01*sj6))+(((-1.0)*r00*x10991)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x10993=cj6*cj6;
IkReal x10994=r01*r01;
IkReal x10995=cj5*cj5;
IkReal x10996=r00*r00;
IkReal x10997=r02*r02;
IkReal x10998=(r02*sj5);
IkReal x10999=(r01*sj6);
IkReal x11000=(cj6*r00);
IkReal x11001=(cj5*cj6*r01);
IkReal x11002=(cj5*r00*sj6);
IkReal x11003=((1.0)*x10995);
IkReal x11004=(x10993*x10996);
IkReal x11005=(x10993*x10994);
IkReal x11006=((((2.0)*x10998*x11001))+(((2.0)*x10998*x11002))+(((-2.0)*x10999*x11000))+((x10995*x10996))+x11004+(((-1.0)*x10997*x11003))+((x10995*x11005))+(((-1.0)*x11003*x11004))+(((-1.0)*x11005))+(((2.0)*x10995*x10999*x11000))+x10994+x10997);
j4eval[0]=x11006;
j4eval[1]=((IKabs(((((-1.0)*x11000))+x10999)))+(IKabs((x11001+x11002+x10998))));
j4eval[2]=IKsign(x11006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11007=cj6*cj6;
IkReal x11008=r01*r01;
IkReal x11009=cj5*cj5;
IkReal x11010=r00*r00;
IkReal x11011=r02*r02;
IkReal x11012=(r00*sj6);
IkReal x11013=(r02*sj5);
IkReal x11014=((2.0)*cj6*r01);
IkReal x11015=((1.0)*x11009);
IkReal x11016=(x11007*x11010);
IkReal x11017=(x11007*x11008);
CheckValue<IkReal> x11018 = IKatan2WithCheck(IkReal((((cj5*x11012))+x11013+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x11018.valid){
continue;
}
CheckValue<IkReal> x11019=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11012*x11014))+((x11009*x11012*x11014))+(((-1.0)*x11011*x11015))+((cj5*x11013*x11014))+(((-1.0)*x11015*x11016))+x11008+x11016+x11011+((x11009*x11010))+((x11009*x11017))+(((2.0)*cj5*x11012*x11013))+(((-1.0)*x11017)))),-1);
if(!x11019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11018.value)+(((1.5707963267949)*(x11019.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11020=IKcos(j4);
IkReal x11021=IKsin(j4);
IkReal x11022=(cj5*sj6);
IkReal x11023=(cj5*r21);
IkReal x11024=(cj5*r01);
IkReal x11025=(cj5*cj6*r11);
IkReal x11026=((1.0)*x11021);
IkReal x11027=(cj6*x11020);
IkReal x11028=(sj5*x11020);
IkReal x11029=(cj6*x11021);
IkReal x11030=(sj5*x11026);
IkReal x11031=((1.0)*sj6*x11020);
evalcond[0]=((((-1.0)*r21*sj6*x11026))+((r20*x11029))+((r20*x11020*x11022))+((r22*x11028))+((x11023*x11027)));
evalcond[1]=(((r00*x11020*x11022))+((r00*x11029))+((x11024*x11027))+(((-1.0)*r01*sj6*x11026))+((r02*x11028)));
evalcond[2]=((1.0)+((r10*x11020*x11022))+((x11020*x11025))+((r10*x11029))+(((-1.0)*r11*sj6*x11026))+((r12*x11028)));
evalcond[3]=((((-1.0)*r21*x11031))+((r20*x11027))+(((-1.0)*r20*x11022*x11026))+(((-1.0)*cj6*x11023*x11026))+(((-1.0)*r22*x11030)));
evalcond[4]=((((-1.0)*r10*x11022*x11026))+((r10*x11027))+(((-1.0)*r11*x11031))+(((-1.0)*r12*x11030))+(((-1.0)*x11025*x11026)));
evalcond[5]=((1.0)+(((-1.0)*r02*x11030))+(((-1.0)*cj6*x11024*x11026))+((r00*x11027))+(((-1.0)*r00*x11022*x11026))+(((-1.0)*r01*x11031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11032=((1.0)*cj6);
CheckValue<IkReal> x11033 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x11032))),IKFAST_ATAN2_MAGTHRESH);
if(!x11033.valid){
continue;
}
CheckValue<IkReal> x11034=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x11032))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x11034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11033.value)+(((1.5707963267949)*(x11034.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11035=IKcos(j4);
IkReal x11036=IKsin(j4);
IkReal x11037=(cj5*sj6);
IkReal x11038=(cj5*r21);
IkReal x11039=(cj5*r01);
IkReal x11040=(cj5*cj6*r11);
IkReal x11041=((1.0)*x11036);
IkReal x11042=(cj6*x11035);
IkReal x11043=(sj5*x11035);
IkReal x11044=(cj6*x11036);
IkReal x11045=(sj5*x11041);
IkReal x11046=((1.0)*sj6*x11035);
evalcond[0]=((((-1.0)*r21*sj6*x11041))+((r20*x11044))+((r22*x11043))+((r20*x11035*x11037))+((x11038*x11042)));
evalcond[1]=((((-1.0)*r01*sj6*x11041))+((r00*x11044))+((r00*x11035*x11037))+((r02*x11043))+((x11039*x11042)));
evalcond[2]=((1.0)+((r10*x11044))+(((-1.0)*r11*sj6*x11041))+((x11035*x11040))+((r12*x11043))+((r10*x11035*x11037)));
evalcond[3]=(((r20*x11042))+(((-1.0)*r22*x11045))+(((-1.0)*cj6*x11038*x11041))+(((-1.0)*r21*x11046))+(((-1.0)*r20*x11037*x11041)));
evalcond[4]=(((r10*x11042))+(((-1.0)*r11*x11046))+(((-1.0)*r12*x11045))+(((-1.0)*r10*x11037*x11041))+(((-1.0)*x11040*x11041)));
evalcond[5]=((1.0)+(((-1.0)*r01*x11046))+(((-1.0)*cj6*x11039*x11041))+(((-1.0)*r00*x11037*x11041))+((r00*x11042))+(((-1.0)*r02*x11045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11047=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11047.valid){
continue;
}
CheckValue<IkReal> x11048 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11047.value)))+(x11048.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11049=IKcos(j4);
IkReal x11050=IKsin(j4);
IkReal x11051=(cj5*sj6);
IkReal x11052=(cj5*r21);
IkReal x11053=(cj5*r01);
IkReal x11054=(cj5*cj6*r11);
IkReal x11055=((1.0)*x11050);
IkReal x11056=(cj6*x11049);
IkReal x11057=(sj5*x11049);
IkReal x11058=(cj6*x11050);
IkReal x11059=(sj5*x11055);
IkReal x11060=((1.0)*sj6*x11049);
evalcond[0]=(((r20*x11058))+(((-1.0)*r21*sj6*x11055))+((r22*x11057))+((x11052*x11056))+((r20*x11049*x11051)));
evalcond[1]=(((r00*x11049*x11051))+(((-1.0)*r01*sj6*x11055))+((r00*x11058))+((x11053*x11056))+((r02*x11057)));
evalcond[2]=((1.0)+((r12*x11057))+((r10*x11058))+(((-1.0)*r11*sj6*x11055))+((r10*x11049*x11051))+((x11049*x11054)));
evalcond[3]=(((r20*x11056))+(((-1.0)*r22*x11059))+(((-1.0)*cj6*x11052*x11055))+(((-1.0)*r20*x11051*x11055))+(((-1.0)*r21*x11060)));
evalcond[4]=((((-1.0)*x11054*x11055))+(((-1.0)*r10*x11051*x11055))+((r10*x11056))+(((-1.0)*r12*x11059))+(((-1.0)*r11*x11060)));
evalcond[5]=((1.0)+(((-1.0)*r01*x11060))+(((-1.0)*cj6*x11053*x11055))+((r00*x11056))+(((-1.0)*r00*x11051*x11055))+(((-1.0)*r02*x11059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11061=(cj5*r12);
IkReal x11062=(r10*sj6);
IkReal x11063=((0.37429)*sj5);
IkReal x11064=((0.01)*cj5);
IkReal x11065=(cj6*r11);
IkReal x11066=(r00*sj6);
IkReal x11067=(r20*sj6);
IkReal x11068=((1.0)*sj5);
IkReal x11069=((0.01)*sj5);
IkReal x11070=(cj6*r01);
IkReal x11071=(cj5*r02);
IkReal x11072=(cj6*r21);
IkReal x11073=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x11064*x11067))+(((-1.0)*x11063*x11072))+(((-1.0)*pz))+((x11064*x11072))+((r22*x11069))+(((0.37429)*x11073))+(((-1.0)*x11063*x11067)));
evalcond[2]=(((x11064*x11066))+(((-1.0)*x11063*x11070))+(((-1.0)*px))+((x11064*x11070))+(((0.37429)*x11071))+((r02*x11069))+(((-1.0)*x11063*x11066)));
evalcond[3]=((0.29542)+((x11062*x11064))+((x11064*x11065))+(((0.37429)*x11061))+(((-1.0)*py))+((r12*x11069))+(((-1.0)*x11062*x11063))+(((-1.0)*x11063*x11065)));
evalcond[4]=((-1.0)+(((-1.0)*x11067*x11068))+x11073+(((-1.0)*x11068*x11072)));
evalcond[5]=(x11061+(((-1.0)*x11062*x11068))+(((-1.0)*x11065*x11068)));
evalcond[6]=(x11071+(((-1.0)*x11066*x11068))+(((-1.0)*x11068*x11070)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x11074=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x11074;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x11074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x11075=((1.0)*sj5);
IkReal x11076=((((-1.0)*cj6*r01*x11075))+(((-1.0)*r00*sj6*x11075))+((cj5*r02)));
j4eval[0]=x11076;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x11076);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x11077=cj6*cj6;
IkReal x11078=cj5*cj5;
IkReal x11079=r00*r00;
IkReal x11080=r01*r01;
IkReal x11081=r02*r02;
IkReal x11082=(r00*sj6);
IkReal x11083=((2.0)*cj6*r01);
IkReal x11084=(cj5*r02*sj5);
IkReal x11085=((1.0)*x11077);
IkReal x11086=(x11078*x11079);
IkReal x11087=(((x11082*x11083))+(((-1.0)*x11086))+(((-1.0)*x11081))+(((-1.0)*x11080))+(((-2.0)*x11082*x11084))+(((-1.0)*x11078*x11080*x11085))+((x11077*x11086))+((x11077*x11080))+(((-1.0)*x11079*x11085))+((x11078*x11081))+(((-1.0)*x11083*x11084))+(((-1.0)*x11078*x11082*x11083)));
j4eval[0]=x11087;
j4eval[1]=((IKabs((((r02*sj5))+((cj5*cj6*r01))+((cj5*x11082)))))+(IKabs((((r01*sj6))+(((-1.0)*cj6*r00))))));
j4eval[2]=IKsign(x11087);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11088=cj6*cj6;
IkReal x11089=cj5*cj5;
IkReal x11090=r00*r00;
IkReal x11091=r01*r01;
IkReal x11092=r02*r02;
IkReal x11093=(r01*sj6);
IkReal x11094=(cj6*r00);
IkReal x11095=(cj5*cj6*r01);
IkReal x11096=((2.0)*r02*sj5);
IkReal x11097=((1.0)*x11088);
IkReal x11098=(cj5*r00*sj6);
IkReal x11099=(x11089*x11090);
CheckValue<IkReal> x11100 = IKatan2WithCheck(IkReal((x11095+x11098+((r02*sj5)))),((((-1.0)*x11094))+x11093),IKFAST_ATAN2_MAGTHRESH);
if(!x11100.valid){
continue;
}
CheckValue<IkReal> x11101=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11096*x11098))+(((-1.0)*x11089*x11091*x11097))+(((-1.0)*x11095*x11096))+(((-1.0)*x11099))+(((-1.0)*x11091))+(((-1.0)*x11092))+((x11089*x11092))+(((-1.0)*x11090*x11097))+((x11088*x11091))+((x11088*x11099))+(((2.0)*x11093*x11094))+(((-2.0)*x11089*x11093*x11094)))),-1);
if(!x11101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11100.value)+(((1.5707963267949)*(x11101.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11102=IKcos(j4);
IkReal x11103=IKsin(j4);
IkReal x11104=(cj5*sj6);
IkReal x11105=(cj5*r21);
IkReal x11106=(cj5*r01);
IkReal x11107=(cj5*cj6*r11);
IkReal x11108=((1.0)*x11103);
IkReal x11109=(cj6*x11102);
IkReal x11110=(sj5*x11102);
IkReal x11111=(cj6*x11103);
IkReal x11112=(sj5*x11108);
IkReal x11113=((1.0)*sj6*x11102);
evalcond[0]=(((x11105*x11109))+((r20*x11102*x11104))+((r20*x11111))+((r22*x11110))+(((-1.0)*r21*sj6*x11108)));
evalcond[1]=(((x11106*x11109))+((r02*x11110))+((r00*x11102*x11104))+(((-1.0)*r01*sj6*x11108))+((r00*x11111)));
evalcond[2]=((-1.0)+(((-1.0)*r11*sj6*x11108))+((x11102*x11107))+((r10*x11111))+((r10*x11102*x11104))+((r12*x11110)));
evalcond[3]=((((-1.0)*r21*x11113))+(((-1.0)*cj6*x11105*x11108))+(((-1.0)*r22*x11112))+((r20*x11109))+(((-1.0)*r20*x11104*x11108)));
evalcond[4]=(((r10*x11109))+(((-1.0)*x11107*x11108))+(((-1.0)*r12*x11112))+(((-1.0)*r11*x11113))+(((-1.0)*r10*x11104*x11108)));
evalcond[5]=((-1.0)+(((-1.0)*r02*x11112))+(((-1.0)*r00*x11104*x11108))+(((-1.0)*cj6*x11106*x11108))+(((-1.0)*r01*x11113))+((r00*x11109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11114=((1.0)*sj5);
CheckValue<IkReal> x11115=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj6*r01*x11114))+(((-1.0)*r00*sj6*x11114))+((cj5*r02)))),-1);
if(!x11115.valid){
continue;
}
CheckValue<IkReal> x11116 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11115.value)))+(x11116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11117=IKcos(j4);
IkReal x11118=IKsin(j4);
IkReal x11119=(cj5*sj6);
IkReal x11120=(cj5*r21);
IkReal x11121=(cj5*r01);
IkReal x11122=(cj5*cj6*r11);
IkReal x11123=((1.0)*x11118);
IkReal x11124=(cj6*x11117);
IkReal x11125=(sj5*x11117);
IkReal x11126=(cj6*x11118);
IkReal x11127=(sj5*x11123);
IkReal x11128=((1.0)*sj6*x11117);
evalcond[0]=((((-1.0)*r21*sj6*x11123))+((r22*x11125))+((x11120*x11124))+((r20*x11117*x11119))+((r20*x11126)));
evalcond[1]=(((x11121*x11124))+((r02*x11125))+(((-1.0)*r01*sj6*x11123))+((r00*x11117*x11119))+((r00*x11126)));
evalcond[2]=((-1.0)+((r10*x11117*x11119))+(((-1.0)*r11*sj6*x11123))+((x11117*x11122))+((r12*x11125))+((r10*x11126)));
evalcond[3]=((((-1.0)*r21*x11128))+(((-1.0)*cj6*x11120*x11123))+(((-1.0)*r22*x11127))+(((-1.0)*r20*x11119*x11123))+((r20*x11124)));
evalcond[4]=((((-1.0)*r12*x11127))+(((-1.0)*r11*x11128))+((r10*x11124))+(((-1.0)*x11122*x11123))+(((-1.0)*r10*x11119*x11123)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x11121*x11123))+(((-1.0)*r01*x11128))+(((-1.0)*r02*x11127))+((r00*x11124))+(((-1.0)*r00*x11119*x11123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11129 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*cj6*r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x11129.valid){
continue;
}
CheckValue<IkReal> x11130=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x11130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11129.value)+(((1.5707963267949)*(x11130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11131=IKcos(j4);
IkReal x11132=IKsin(j4);
IkReal x11133=(cj5*sj6);
IkReal x11134=(cj5*r21);
IkReal x11135=(cj5*r01);
IkReal x11136=(cj5*cj6*r11);
IkReal x11137=((1.0)*x11132);
IkReal x11138=(cj6*x11131);
IkReal x11139=(sj5*x11131);
IkReal x11140=(cj6*x11132);
IkReal x11141=(sj5*x11137);
IkReal x11142=((1.0)*sj6*x11131);
evalcond[0]=(((r22*x11139))+((x11134*x11138))+((r20*x11131*x11133))+((r20*x11140))+(((-1.0)*r21*sj6*x11137)));
evalcond[1]=(((r02*x11139))+((r00*x11140))+((x11135*x11138))+((r00*x11131*x11133))+(((-1.0)*r01*sj6*x11137)));
evalcond[2]=((-1.0)+(((-1.0)*r11*sj6*x11137))+((x11131*x11136))+((r10*x11140))+((r10*x11131*x11133))+((r12*x11139)));
evalcond[3]=((((-1.0)*r20*x11133*x11137))+(((-1.0)*r21*x11142))+(((-1.0)*r22*x11141))+(((-1.0)*cj6*x11134*x11137))+((r20*x11138)));
evalcond[4]=(((r10*x11138))+(((-1.0)*r10*x11133*x11137))+(((-1.0)*r11*x11142))+(((-1.0)*x11136*x11137))+(((-1.0)*r12*x11141)));
evalcond[5]=((-1.0)+(((-1.0)*cj6*x11135*x11137))+(((-1.0)*r01*x11142))+(((-1.0)*r02*x11141))+(((-1.0)*r00*x11133*x11137))+((r00*x11138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11143=(cj5*r12);
IkReal x11144=(r10*sj6);
IkReal x11145=((0.37429)*sj5);
IkReal x11146=((0.01)*cj5);
IkReal x11147=(cj6*r11);
IkReal x11148=(r00*sj6);
IkReal x11149=(r20*sj6);
IkReal x11150=((1.0)*sj5);
IkReal x11151=((0.01)*sj5);
IkReal x11152=(cj6*r01);
IkReal x11153=(cj5*r02);
IkReal x11154=(cj6*r21);
IkReal x11155=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((-0.069)+((x11146*x11154))+((x11146*x11149))+((r22*x11151))+(((-1.0)*pz))+(((-1.0)*x11145*x11154))+(((-1.0)*x11145*x11149))+(((0.37429)*x11155)));
evalcond[2]=((-0.29542)+((x11146*x11152))+((x11146*x11148))+((r02*x11151))+(((-1.0)*px))+(((-1.0)*x11145*x11152))+(((-1.0)*x11145*x11148))+(((0.37429)*x11153)));
evalcond[3]=(((x11146*x11147))+(((-1.0)*py))+((r12*x11151))+((x11144*x11146))+(((0.37429)*x11143))+(((-1.0)*x11144*x11145))+(((-1.0)*x11145*x11147)));
evalcond[4]=((-1.0)+(((-1.0)*x11150*x11154))+x11155+(((-1.0)*x11149*x11150)));
evalcond[5]=(x11143+(((-1.0)*x11144*x11150))+(((-1.0)*x11147*x11150)));
evalcond[6]=((((-1.0)*x11150*x11152))+(((-1.0)*x11148*x11150))+x11153);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11156=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x11156;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11157=((1.0)*sj5);
IkReal x11158=(((cj5*r12))+(((-1.0)*r10*sj6*x11157))+(((-1.0)*cj6*r11*x11157)));
j4eval[0]=x11158;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x11158);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11159=cj6*cj6;
IkReal x11160=cj5*cj5;
IkReal x11161=r10*r10;
IkReal x11162=r11*r11;
IkReal x11163=r12*r12;
IkReal x11164=(r10*sj6);
IkReal x11165=(r12*sj5);
IkReal x11166=((2.0)*cj6*r11);
IkReal x11167=((1.0)*x11161);
IkReal x11168=(x11159*x11162);
IkReal x11169=((((-1.0)*x11160*x11164*x11166))+((x11160*x11163))+((x11159*x11160*x11161))+(((-1.0)*cj5*x11165*x11166))+x11168+(((-1.0)*x11162))+(((-1.0)*x11163))+(((-1.0)*x11160*x11167))+(((-1.0)*x11160*x11168))+(((-1.0)*x11159*x11167))+((x11164*x11166))+(((-2.0)*cj5*x11164*x11165)));
j4eval[0]=x11169;
j4eval[1]=((IKabs((x11165+((cj5*cj6*r11))+((cj5*x11164)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11169);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11170=cj6*cj6;
IkReal x11171=cj5*cj5;
IkReal x11172=r10*r10;
IkReal x11173=r11*r11;
IkReal x11174=r12*r12;
IkReal x11175=(r10*sj6);
IkReal x11176=(r12*sj5);
IkReal x11177=((2.0)*cj6*r11);
IkReal x11178=(x11170*x11173);
IkReal x11179=(x11171*x11172);
CheckValue<IkReal> x11180=IKPowWithIntegerCheck(IKsign((((x11175*x11177))+(((-2.0)*cj5*x11175*x11176))+(((-1.0)*x11170*x11172))+(((-1.0)*x11179))+(((-1.0)*x11174))+(((-1.0)*x11173))+x11178+(((-1.0)*x11171*x11178))+(((-1.0)*cj5*x11176*x11177))+((x11171*x11174))+(((-1.0)*x11171*x11175*x11177))+((x11170*x11179)))),-1);
if(!x11180.valid){
continue;
}
CheckValue<IkReal> x11181 = IKatan2WithCheck(IkReal((x11176+((cj5*cj6*r11))+((cj5*x11175)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11180.value)))+(x11181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11182=IKcos(j4);
IkReal x11183=IKsin(j4);
IkReal x11184=(cj5*sj6);
IkReal x11185=(cj5*r01);
IkReal x11186=(cj5*r21);
IkReal x11187=(cj5*cj6*r11);
IkReal x11188=((1.0)*x11183);
IkReal x11189=(cj6*x11182);
IkReal x11190=(sj5*x11182);
IkReal x11191=(cj6*x11183);
IkReal x11192=(sj5*x11188);
IkReal x11193=((1.0)*sj6*x11182);
evalcond[0]=(((r20*x11191))+((x11186*x11189))+((r22*x11190))+((r20*x11182*x11184))+(((-1.0)*r21*sj6*x11188)));
evalcond[1]=(((r12*x11190))+((x11182*x11187))+((r10*x11182*x11184))+(((-1.0)*r11*sj6*x11188))+((r10*x11191)));
evalcond[2]=((1.0)+((r00*x11191))+(((-1.0)*r01*sj6*x11188))+((x11185*x11189))+((r02*x11190))+((r00*x11182*x11184)));
evalcond[3]=(((r20*x11189))+(((-1.0)*r22*x11192))+(((-1.0)*r20*x11184*x11188))+(((-1.0)*r21*x11193))+(((-1.0)*cj6*x11186*x11188)));
evalcond[4]=((((-1.0)*r02*x11192))+(((-1.0)*r01*x11193))+((r00*x11189))+(((-1.0)*cj6*x11185*x11188))+(((-1.0)*r00*x11184*x11188)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11192))+(((-1.0)*r11*x11193))+(((-1.0)*r10*x11184*x11188))+(((-1.0)*x11187*x11188))+((r10*x11189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11194=((1.0)*sj5);
CheckValue<IkReal> x11195=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x11194))+(((-1.0)*cj6*r11*x11194)))),-1);
if(!x11195.valid){
continue;
}
CheckValue<IkReal> x11196 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11195.value)))+(x11196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11197=IKcos(j4);
IkReal x11198=IKsin(j4);
IkReal x11199=(cj5*sj6);
IkReal x11200=(cj5*r01);
IkReal x11201=(cj5*r21);
IkReal x11202=(cj5*cj6*r11);
IkReal x11203=((1.0)*x11198);
IkReal x11204=(cj6*x11197);
IkReal x11205=(sj5*x11197);
IkReal x11206=(cj6*x11198);
IkReal x11207=(sj5*x11203);
IkReal x11208=((1.0)*sj6*x11197);
evalcond[0]=(((x11201*x11204))+((r20*x11206))+((r20*x11197*x11199))+((r22*x11205))+(((-1.0)*r21*sj6*x11203)));
evalcond[1]=(((x11197*x11202))+((r10*x11206))+((r12*x11205))+(((-1.0)*r11*sj6*x11203))+((r10*x11197*x11199)));
evalcond[2]=((1.0)+((r02*x11205))+((r00*x11197*x11199))+((x11200*x11204))+(((-1.0)*r01*sj6*x11203))+((r00*x11206)));
evalcond[3]=((((-1.0)*r22*x11207))+((r20*x11204))+(((-1.0)*r21*x11208))+(((-1.0)*cj6*x11201*x11203))+(((-1.0)*r20*x11199*x11203)));
evalcond[4]=((((-1.0)*r00*x11199*x11203))+(((-1.0)*r01*x11208))+((r00*x11204))+(((-1.0)*cj6*x11200*x11203))+(((-1.0)*r02*x11207)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11207))+((r10*x11204))+(((-1.0)*r11*x11208))+(((-1.0)*x11202*x11203))+(((-1.0)*r10*x11199*x11203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11209=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x11209.valid){
continue;
}
CheckValue<IkReal> x11210 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11209.value)))+(x11210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11211=IKcos(j4);
IkReal x11212=IKsin(j4);
IkReal x11213=(cj5*sj6);
IkReal x11214=(cj5*r01);
IkReal x11215=(cj5*r21);
IkReal x11216=(cj5*cj6*r11);
IkReal x11217=((1.0)*x11212);
IkReal x11218=(cj6*x11211);
IkReal x11219=(sj5*x11211);
IkReal x11220=(cj6*x11212);
IkReal x11221=(sj5*x11217);
IkReal x11222=((1.0)*sj6*x11211);
evalcond[0]=(((r20*x11211*x11213))+((r20*x11220))+((x11215*x11218))+((r22*x11219))+(((-1.0)*r21*sj6*x11217)));
evalcond[1]=((((-1.0)*r11*sj6*x11217))+((r10*x11211*x11213))+((x11211*x11216))+((r10*x11220))+((r12*x11219)));
evalcond[2]=((1.0)+((r02*x11219))+(((-1.0)*r01*sj6*x11217))+((r00*x11211*x11213))+((r00*x11220))+((x11214*x11218)));
evalcond[3]=(((r20*x11218))+(((-1.0)*r20*x11213*x11217))+(((-1.0)*r21*x11222))+(((-1.0)*cj6*x11215*x11217))+(((-1.0)*r22*x11221)));
evalcond[4]=((((-1.0)*r01*x11222))+((r00*x11218))+(((-1.0)*r00*x11213*x11217))+(((-1.0)*r02*x11221))+(((-1.0)*cj6*x11214*x11217)));
evalcond[5]=((-1.0)+(((-1.0)*r11*x11222))+(((-1.0)*r10*x11213*x11217))+(((-1.0)*x11216*x11217))+((r10*x11218))+(((-1.0)*r12*x11221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11223=(cj5*r12);
IkReal x11224=(r10*sj6);
IkReal x11225=((0.37429)*sj5);
IkReal x11226=((0.01)*cj5);
IkReal x11227=(cj6*r11);
IkReal x11228=(r00*sj6);
IkReal x11229=(r20*sj6);
IkReal x11230=((1.0)*sj5);
IkReal x11231=((0.01)*sj5);
IkReal x11232=(cj6*r01);
IkReal x11233=(cj5*r02);
IkReal x11234=(cj6*r21);
IkReal x11235=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((-0.069)+((r22*x11231))+(((0.37429)*x11235))+(((-1.0)*x11225*x11229))+(((-1.0)*x11225*x11234))+((x11226*x11229))+(((-1.0)*pz))+((x11226*x11234)));
evalcond[2]=((0.29542)+(((0.37429)*x11233))+(((-1.0)*x11225*x11228))+(((-1.0)*x11225*x11232))+((r02*x11231))+((x11226*x11228))+(((-1.0)*px))+((x11226*x11232)));
evalcond[3]=((((-1.0)*x11225*x11227))+((x11224*x11226))+(((0.37429)*x11223))+((x11226*x11227))+((r12*x11231))+(((-1.0)*py))+(((-1.0)*x11224*x11225)));
evalcond[4]=((-1.0)+(((-1.0)*x11230*x11234))+x11235+(((-1.0)*x11229*x11230)));
evalcond[5]=(x11223+(((-1.0)*x11224*x11230))+(((-1.0)*x11227*x11230)));
evalcond[6]=((((-1.0)*x11230*x11232))+x11233+(((-1.0)*x11228*x11230)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11236=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x11236;
j4eval[1]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs(((((-1.0)*cj6*r20))+((r21*sj6))))));
j4eval[2]=IKsign(x11236);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11237=((1.0)*cj6);
IkReal x11238=(((cj5*r22))+(((-1.0)*r21*sj5*x11237))+(((-1.0)*r20*sj5*sj6)));
j4eval[0]=x11238;
j4eval[1]=((IKabs((((r11*sj6))+(((-1.0)*r10*x11237)))))+(IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5))))));
j4eval[2]=IKsign(x11238);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11239=r11*r11;
IkReal x11240=cj5*cj5;
IkReal x11241=cj6*cj6;
IkReal x11242=r10*r10;
IkReal x11243=r12*r12;
IkReal x11244=(r12*sj5);
IkReal x11245=(r11*sj6);
IkReal x11246=((1.0)*x11241);
IkReal x11247=(cj5*cj6*r11);
IkReal x11248=(cj5*r10*sj6);
IkReal x11249=((2.0)*cj6*r10);
IkReal x11250=(x11240*x11242);
IkReal x11251=(((x11239*x11240*x11241))+(((2.0)*x11244*x11248))+(((2.0)*x11244*x11247))+((x11240*x11245*x11249))+x11239+x11243+x11250+(((-1.0)*x11245*x11249))+(((-1.0)*x11246*x11250))+(((-1.0)*x11240*x11243))+((x11241*x11242))+(((-1.0)*x11239*x11246)));
j4eval[0]=x11251;
j4eval[1]=((IKabs((x11245+(((-1.0)*cj6*r10)))))+(IKabs((x11248+x11247+x11244))));
j4eval[2]=IKsign(x11251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11252=r11*r11;
IkReal x11253=cj5*cj5;
IkReal x11254=cj6*cj6;
IkReal x11255=r10*r10;
IkReal x11256=r12*r12;
IkReal x11257=(r10*sj6);
IkReal x11258=(r12*sj5);
IkReal x11259=((1.0)*x11254);
IkReal x11260=(cj5*cj6*r11);
IkReal x11261=((2.0)*cj6*r11);
IkReal x11262=(x11253*x11255);
CheckValue<IkReal> x11263=IKPowWithIntegerCheck(IKsign((((x11254*x11255))+x11256+x11252+x11262+(((-1.0)*x11253*x11256))+(((2.0)*cj5*x11257*x11258))+((x11253*x11257*x11261))+(((-1.0)*x11259*x11262))+(((-1.0)*x11257*x11261))+(((-1.0)*x11252*x11259))+(((2.0)*x11258*x11260))+((x11252*x11253*x11254)))),-1);
if(!x11263.valid){
continue;
}
CheckValue<IkReal> x11264 = IKatan2WithCheck(IkReal((x11258+x11260+((cj5*x11257)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11263.value)))+(x11264.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11265=IKcos(j4);
IkReal x11266=IKsin(j4);
IkReal x11267=(cj5*sj6);
IkReal x11268=(cj5*r01);
IkReal x11269=(cj5*r21);
IkReal x11270=(cj5*cj6*r11);
IkReal x11271=((1.0)*x11266);
IkReal x11272=(cj6*x11265);
IkReal x11273=(sj5*x11265);
IkReal x11274=(cj6*x11266);
IkReal x11275=(sj5*x11271);
IkReal x11276=((1.0)*sj6*x11265);
evalcond[0]=(((r22*x11273))+(((-1.0)*r21*sj6*x11271))+((r20*x11274))+((x11269*x11272))+((r20*x11265*x11267)));
evalcond[1]=(((r10*x11274))+((r10*x11265*x11267))+((r12*x11273))+((x11265*x11270))+(((-1.0)*r11*sj6*x11271)));
evalcond[2]=((-1.0)+((r00*x11274))+((x11268*x11272))+((r02*x11273))+((r00*x11265*x11267))+(((-1.0)*r01*sj6*x11271)));
evalcond[3]=((((-1.0)*r21*x11276))+(((-1.0)*r20*x11267*x11271))+(((-1.0)*r22*x11275))+((r20*x11272))+(((-1.0)*cj6*x11269*x11271)));
evalcond[4]=(((r00*x11272))+(((-1.0)*cj6*x11268*x11271))+(((-1.0)*r01*x11276))+(((-1.0)*r02*x11275))+(((-1.0)*r00*x11267*x11271)));
evalcond[5]=((1.0)+((r10*x11272))+(((-1.0)*r12*x11275))+(((-1.0)*r11*x11276))+(((-1.0)*r10*x11267*x11271))+(((-1.0)*x11270*x11271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11277=((1.0)*cj6);
CheckValue<IkReal> x11278 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),(((r11*sj6))+(((-1.0)*r10*x11277))),IKFAST_ATAN2_MAGTHRESH);
if(!x11278.valid){
continue;
}
CheckValue<IkReal> x11279=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*r21*sj5*x11277))+(((-1.0)*r20*sj5*sj6)))),-1);
if(!x11279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11278.value)+(((1.5707963267949)*(x11279.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11280=IKcos(j4);
IkReal x11281=IKsin(j4);
IkReal x11282=(cj5*sj6);
IkReal x11283=(cj5*r01);
IkReal x11284=(cj5*r21);
IkReal x11285=(cj5*cj6*r11);
IkReal x11286=((1.0)*x11281);
IkReal x11287=(cj6*x11280);
IkReal x11288=(sj5*x11280);
IkReal x11289=(cj6*x11281);
IkReal x11290=(sj5*x11286);
IkReal x11291=((1.0)*sj6*x11280);
evalcond[0]=(((x11284*x11287))+((r22*x11288))+((r20*x11280*x11282))+(((-1.0)*r21*sj6*x11286))+((r20*x11289)));
evalcond[1]=(((x11280*x11285))+((r10*x11289))+((r10*x11280*x11282))+(((-1.0)*r11*sj6*x11286))+((r12*x11288)));
evalcond[2]=((-1.0)+((r00*x11280*x11282))+((r02*x11288))+(((-1.0)*r01*sj6*x11286))+((x11283*x11287))+((r00*x11289)));
evalcond[3]=((((-1.0)*cj6*x11284*x11286))+(((-1.0)*r22*x11290))+(((-1.0)*r21*x11291))+((r20*x11287))+(((-1.0)*r20*x11282*x11286)));
evalcond[4]=((((-1.0)*r02*x11290))+(((-1.0)*r01*x11291))+(((-1.0)*r00*x11282*x11286))+(((-1.0)*cj6*x11283*x11286))+((r00*x11287)));
evalcond[5]=((1.0)+((r10*x11287))+(((-1.0)*r10*x11282*x11286))+(((-1.0)*x11285*x11286))+(((-1.0)*r12*x11290))+(((-1.0)*r11*x11291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11292=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x11292.valid){
continue;
}
CheckValue<IkReal> x11293 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11292.value)))+(x11293.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11294=IKcos(j4);
IkReal x11295=IKsin(j4);
IkReal x11296=(cj5*sj6);
IkReal x11297=(cj5*r01);
IkReal x11298=(cj5*r21);
IkReal x11299=(cj5*cj6*r11);
IkReal x11300=((1.0)*x11295);
IkReal x11301=(cj6*x11294);
IkReal x11302=(sj5*x11294);
IkReal x11303=(cj6*x11295);
IkReal x11304=(sj5*x11300);
IkReal x11305=((1.0)*sj6*x11294);
evalcond[0]=(((r20*x11303))+(((-1.0)*r21*sj6*x11300))+((r20*x11294*x11296))+((r22*x11302))+((x11298*x11301)));
evalcond[1]=((((-1.0)*r11*sj6*x11300))+((r12*x11302))+((r10*x11294*x11296))+((x11294*x11299))+((r10*x11303)));
evalcond[2]=((-1.0)+((r02*x11302))+((r00*x11303))+((x11297*x11301))+((r00*x11294*x11296))+(((-1.0)*r01*sj6*x11300)));
evalcond[3]=(((r20*x11301))+(((-1.0)*cj6*x11298*x11300))+(((-1.0)*r22*x11304))+(((-1.0)*r21*x11305))+(((-1.0)*r20*x11296*x11300)));
evalcond[4]=(((r00*x11301))+(((-1.0)*r02*x11304))+(((-1.0)*r01*x11305))+(((-1.0)*r00*x11296*x11300))+(((-1.0)*cj6*x11297*x11300)));
evalcond[5]=((1.0)+(((-1.0)*x11299*x11300))+(((-1.0)*r10*x11296*x11300))+((r10*x11301))+(((-1.0)*r11*x11305))+(((-1.0)*r12*x11304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11306=(cj0*cj6);
IkReal x11307=((1.0)*sj0);
IkReal x11308=(cj0*sj6);
IkReal x11309=(sj6*x11307);
CheckValue<IkReal> x11310=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x11310.valid){
continue;
}
CheckValue<IkReal> x11311 = IKatan2WithCheck(IkReal(((((-1.0)*r02*sj5*x11307))+(((-1.0)*cj5*r00*x11309))+(((-1.0)*cj5*cj6*r01*x11307))+((cj0*r12*sj5))+((cj5*r10*x11308))+((cj5*r11*x11306)))),(((cj6*r00*sj0))+(((-1.0)*r10*x11306))+(((-1.0)*r01*x11309))+((r11*x11308))),IKFAST_ATAN2_MAGTHRESH);
if(!x11311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11310.value)))+(x11311.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11312=IKcos(j4);
IkReal x11313=IKsin(j4);
IkReal x11314=(cj5*sj6);
IkReal x11315=(cj5*r21);
IkReal x11316=(cj5*r01);
IkReal x11317=(cj5*cj6*r11);
IkReal x11318=((1.0)*x11313);
IkReal x11319=(cj6*x11312);
IkReal x11320=(sj5*x11312);
IkReal x11321=(cj6*x11313);
IkReal x11322=(sj5*x11318);
IkReal x11323=((1.0)*sj6*x11312);
evalcond[0]=(((r22*x11320))+((r20*x11312*x11314))+((x11315*x11319))+(((-1.0)*r21*sj6*x11318))+((r20*x11321)));
evalcond[1]=(((x11316*x11319))+(((-1.0)*r01*sj6*x11318))+cj0+((r00*x11312*x11314))+((r02*x11320))+((r00*x11321)));
evalcond[2]=(sj0+(((-1.0)*r11*sj6*x11318))+((r10*x11321))+((r12*x11320))+((r10*x11312*x11314))+((x11312*x11317)));
evalcond[3]=((((-1.0)*r22*x11322))+(((-1.0)*r21*x11323))+(((-1.0)*r20*x11314*x11318))+(((-1.0)*cj6*x11315*x11318))+((r20*x11319)));
evalcond[4]=((((-1.0)*r00*x11314*x11318))+(((-1.0)*r02*x11322))+sj0+(((-1.0)*cj6*x11316*x11318))+(((-1.0)*r01*x11323))+((r00*x11319)));
evalcond[5]=((((-1.0)*r10*x11314*x11318))+(((-1.0)*r12*x11322))+(((-1.0)*x11317*x11318))+(((-1.0)*r11*x11323))+((r10*x11319))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11324=(cj0*r20);
IkReal x11325=((1.0)*cj6);
IkReal x11326=(cj0*r21);
CheckValue<IkReal> x11327=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11325)))),-1);
if(!x11327.valid){
continue;
}
CheckValue<IkReal> x11328 = IKatan2WithCheck(IkReal((((cj5*sj6*x11324))+((cj0*r22*sj5))+((cj5*cj6*x11326)))),(((sj6*x11326))+(((-1.0)*x11324*x11325))),IKFAST_ATAN2_MAGTHRESH);
if(!x11328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11327.value)))+(x11328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11329=IKcos(j4);
IkReal x11330=IKsin(j4);
IkReal x11331=(cj5*sj6);
IkReal x11332=(cj5*r21);
IkReal x11333=(cj5*r01);
IkReal x11334=(cj5*cj6*r11);
IkReal x11335=((1.0)*x11330);
IkReal x11336=(cj6*x11329);
IkReal x11337=(sj5*x11329);
IkReal x11338=(cj6*x11330);
IkReal x11339=(sj5*x11335);
IkReal x11340=((1.0)*sj6*x11329);
evalcond[0]=(((x11332*x11336))+((r20*x11338))+(((-1.0)*r21*sj6*x11335))+((r22*x11337))+((r20*x11329*x11331)));
evalcond[1]=(cj0+((r00*x11329*x11331))+(((-1.0)*r01*sj6*x11335))+((x11333*x11336))+((r00*x11338))+((r02*x11337)));
evalcond[2]=(sj0+(((-1.0)*r11*sj6*x11335))+((r12*x11337))+((r10*x11338))+((x11329*x11334))+((r10*x11329*x11331)));
evalcond[3]=((((-1.0)*cj6*x11332*x11335))+(((-1.0)*r21*x11340))+(((-1.0)*r22*x11339))+((r20*x11336))+(((-1.0)*r20*x11331*x11335)));
evalcond[4]=(sj0+(((-1.0)*r01*x11340))+(((-1.0)*cj6*x11333*x11335))+((r00*x11336))+(((-1.0)*r00*x11331*x11335))+(((-1.0)*r02*x11339)));
evalcond[5]=((((-1.0)*r11*x11340))+(((-1.0)*r12*x11339))+((r10*x11336))+(((-1.0)*x11334*x11335))+(((-1.0)*r10*x11331*x11335))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11341=(r21*sj0);
IkReal x11342=(r20*sj0);
CheckValue<IkReal> x11343 = IKatan2WithCheck(IkReal((((r22*sj0*sj5))+((cj5*cj6*x11341))+((cj5*sj6*x11342)))),(((sj6*x11341))+(((-1.0)*cj6*x11342))),IKFAST_ATAN2_MAGTHRESH);
if(!x11343.valid){
continue;
}
CheckValue<IkReal> x11344=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11344.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11343.value)+(((1.5707963267949)*(x11344.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11345=IKcos(j4);
IkReal x11346=IKsin(j4);
IkReal x11347=(cj5*sj6);
IkReal x11348=(cj5*r21);
IkReal x11349=(cj5*r01);
IkReal x11350=(cj5*cj6*r11);
IkReal x11351=((1.0)*x11346);
IkReal x11352=(cj6*x11345);
IkReal x11353=(sj5*x11345);
IkReal x11354=(cj6*x11346);
IkReal x11355=(sj5*x11351);
IkReal x11356=((1.0)*sj6*x11345);
evalcond[0]=(((r20*x11345*x11347))+(((-1.0)*r21*sj6*x11351))+((r20*x11354))+((r22*x11353))+((x11348*x11352)));
evalcond[1]=(((r02*x11353))+((x11349*x11352))+cj0+(((-1.0)*r01*sj6*x11351))+((r00*x11354))+((r00*x11345*x11347)));
evalcond[2]=(((r12*x11353))+sj0+((r10*x11354))+((r10*x11345*x11347))+((x11345*x11350))+(((-1.0)*r11*sj6*x11351)));
evalcond[3]=((((-1.0)*r21*x11356))+(((-1.0)*cj6*x11348*x11351))+((r20*x11352))+(((-1.0)*r22*x11355))+(((-1.0)*r20*x11347*x11351)));
evalcond[4]=(sj0+(((-1.0)*r00*x11347*x11351))+(((-1.0)*cj6*x11349*x11351))+((r00*x11352))+(((-1.0)*r02*x11355))+(((-1.0)*r01*x11356)));
evalcond[5]=((((-1.0)*r11*x11356))+(((-1.0)*r12*x11355))+((r10*x11352))+(((-1.0)*x11350*x11351))+(((-1.0)*r10*x11347*x11351))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11357=(r10*sj6);
IkReal x11358=((0.37429)*sj5);
IkReal x11359=((0.01)*cj5);
IkReal x11360=(cj6*r11);
IkReal x11361=(r00*sj6);
IkReal x11362=(r20*sj6);
IkReal x11363=((0.01)*sj5);
IkReal x11364=(cj6*r01);
IkReal x11365=((0.37429)*cj5);
IkReal x11366=(cj6*r21);
IkReal x11367=((1.0)*sj5);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
evalcond[1]=((0.36442)+((x11359*x11362))+((x11359*x11366))+((r22*x11365))+((r22*x11363))+(((-1.0)*pz))+(((-1.0)*x11358*x11362))+(((-1.0)*x11358*x11366)));
evalcond[2]=(((x11359*x11361))+((x11359*x11364))+(((-1.0)*px))+(((-1.0)*x11358*x11361))+(((-1.0)*x11358*x11364))+((r02*x11365))+((r02*x11363)));
evalcond[3]=(((x11359*x11360))+(((-1.0)*py))+((r12*x11363))+((r12*x11365))+(((-1.0)*x11358*x11360))+(((-1.0)*x11357*x11358))+((x11357*x11359)));
evalcond[4]=(((cj5*r22))+(((-1.0)*x11362*x11367))+(((-1.0)*x11366*x11367)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11368=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x11368))+(((-1.0)*cj6*r11*x11368)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x11368))+(((-1.0)*r00*sj6*x11368))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x11368))+(((-1.0)*cj6*r11*x11368))))+IKsqr(((((-1.0)*cj6*r01*x11368))+(((-1.0)*r00*sj6*x11368))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x11368))+(((-1.0)*cj6*r11*x11368))), ((((-1.0)*cj6*r01*x11368))+(((-1.0)*r00*sj6*x11368))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x11369=((1.0)*sj5);
evalcond[0]=(((cj5*r12))+(((-1.0)*r10*sj6*x11369))+(((-1.0)*cj6*r11*x11369))+(((-1.0)*(IKsin(j0)))));
evalcond[1]=((((-1.0)*cj6*r01*x11369))+(((-1.0)*r00*sj6*x11369))+(((-1.0)*(IKcos(j0))))+((cj5*r02)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11370=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x11370;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11370);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11371=((1.0)*cj6);
IkReal x11372=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11371)));
j4eval[0]=x11372;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x11371))))));
j4eval[2]=IKsign(x11372);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x11373=cj6*cj6;
IkReal x11374=r01*r01;
IkReal x11375=cj5*cj5;
IkReal x11376=r00*r00;
IkReal x11377=r02*r02;
IkReal x11378=(r02*sj5);
IkReal x11379=(r01*sj6);
IkReal x11380=(cj5*cj6*r01);
IkReal x11381=((2.0)*cj6*r00);
IkReal x11382=((1.0)*x11375);
IkReal x11383=(cj5*r00*sj6);
IkReal x11384=(x11373*x11376);
IkReal x11385=(x11373*x11374);
IkReal x11386=(((x11375*x11385))+(((-1.0)*x11382*x11384))+((x11375*x11376))+(((-1.0)*x11379*x11381))+x11377+x11374+x11384+(((2.0)*x11378*x11383))+(((2.0)*x11378*x11380))+((x11375*x11379*x11381))+(((-1.0)*x11377*x11382))+(((-1.0)*x11385)));
j4eval[0]=x11386;
j4eval[1]=((IKabs((((sj0*x11378))+((sj0*x11380))+((sj0*x11383)))))+(IKabs((((sj0*x11379))+(((-1.0)*cj6*r00*sj0))))));
j4eval[2]=IKsign(x11386);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x11387=(cj5*r12);
IkReal x11388=(r10*sj6);
IkReal x11389=((0.37429)*sj5);
IkReal x11390=((0.01)*cj5);
IkReal x11391=(cj6*r11);
IkReal x11392=(r00*sj6);
IkReal x11393=(r20*sj6);
IkReal x11394=((1.0)*sj5);
IkReal x11395=((0.01)*sj5);
IkReal x11396=(cj6*r01);
IkReal x11397=(cj5*r02);
IkReal x11398=(cj6*r21);
IkReal x11399=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=((0.36442)+(((-1.0)*pz))+(((0.37429)*x11399))+((r22*x11395))+((x11390*x11393))+((x11390*x11398))+(((-1.0)*x11389*x11393))+(((-1.0)*x11389*x11398)));
evalcond[2]=(((r02*x11395))+(((-1.0)*px))+(((0.37429)*x11397))+((x11390*x11392))+((x11390*x11396))+(((-1.0)*x11389*x11392))+(((-1.0)*x11389*x11396)));
evalcond[3]=(((r12*x11395))+(((-1.0)*py))+((x11388*x11390))+(((0.37429)*x11387))+(((-1.0)*x11388*x11389))+((x11390*x11391))+(((-1.0)*x11389*x11391)));
evalcond[4]=((((-1.0)*x11393*x11394))+x11399+(((-1.0)*x11394*x11398)));
evalcond[5]=(x11387+(((-1.0)*x11391*x11394))+(((-1.0)*x11388*x11394)));
evalcond[6]=((-1.0)+(((-1.0)*x11392*x11394))+x11397+(((-1.0)*x11394*x11396)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11400=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x11400;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11401=((1.0)*cj6);
IkReal x11402=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11401)));
j4eval[0]=x11402;
j4eval[1]=((IKabs((((r01*sj6))+(((-1.0)*r00*x11401)))))+(IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01))))));
j4eval[2]=IKsign(x11402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x11403=cj6*cj6;
IkReal x11404=cj5*cj5;
IkReal x11405=r10*r10;
IkReal x11406=r11*r11;
IkReal x11407=r12*r12;
IkReal x11408=(r10*sj6);
IkReal x11409=(r12*sj5);
IkReal x11410=((2.0)*cj6*r11);
IkReal x11411=((1.0)*x11405);
IkReal x11412=(x11403*x11406);
IkReal x11413=((((-1.0)*x11404*x11412))+(((-1.0)*x11404*x11411))+x11412+(((-1.0)*x11403*x11411))+(((-1.0)*x11404*x11408*x11410))+(((-1.0)*cj5*x11409*x11410))+((x11408*x11410))+((x11404*x11407))+(((-1.0)*x11407))+(((-1.0)*x11406))+(((-2.0)*cj5*x11408*x11409))+((x11403*x11404*x11405)));
j4eval[0]=x11413;
j4eval[1]=((IKabs(((((-1.0)*cj6*r10))+((r11*sj6)))))+(IKabs((x11409+((cj5*cj6*r11))+((cj5*x11408))))));
j4eval[2]=IKsign(x11413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11414=cj6*cj6;
IkReal x11415=cj5*cj5;
IkReal x11416=r10*r10;
IkReal x11417=r11*r11;
IkReal x11418=r12*r12;
IkReal x11419=(r10*sj6);
IkReal x11420=(r12*sj5);
IkReal x11421=((2.0)*cj6*r11);
IkReal x11422=(x11414*x11417);
IkReal x11423=(x11415*x11416);
CheckValue<IkReal> x11424=IKPowWithIntegerCheck(IKsign((((x11415*x11418))+(((-1.0)*cj5*x11420*x11421))+(((-1.0)*x11414*x11416))+x11422+(((-1.0)*x11415*x11422))+(((-1.0)*x11418))+(((-1.0)*x11417))+(((-1.0)*x11415*x11419*x11421))+((x11414*x11423))+(((-2.0)*cj5*x11419*x11420))+(((-1.0)*x11423))+((x11419*x11421)))),-1);
if(!x11424.valid){
continue;
}
CheckValue<IkReal> x11425 = IKatan2WithCheck(IkReal((x11420+((cj5*cj6*r11))+((cj5*x11419)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11424.value)))+(x11425.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11426=IKcos(j4);
IkReal x11427=IKsin(j4);
IkReal x11428=(cj5*sj6);
IkReal x11429=(cj5*r01);
IkReal x11430=(cj5*r21);
IkReal x11431=(cj5*cj6*r11);
IkReal x11432=((1.0)*x11427);
IkReal x11433=(cj6*x11426);
IkReal x11434=(sj5*x11426);
IkReal x11435=(cj6*x11427);
IkReal x11436=(sj5*x11432);
IkReal x11437=((1.0)*sj6*x11426);
evalcond[0]=(((r02*x11434))+((x11429*x11433))+(((-1.0)*r01*sj6*x11432))+((r00*x11435))+((r00*x11426*x11428)));
evalcond[1]=(((r10*x11435))+((x11426*x11431))+(((-1.0)*r11*sj6*x11432))+((r10*x11426*x11428))+((r12*x11434)));
evalcond[2]=((-1.0)+((x11430*x11433))+((r20*x11435))+((r20*x11426*x11428))+((r22*x11434))+(((-1.0)*r21*sj6*x11432)));
evalcond[3]=(((r20*x11433))+(((-1.0)*r20*x11428*x11432))+(((-1.0)*r21*x11437))+(((-1.0)*r22*x11436))+(((-1.0)*cj6*x11430*x11432)));
evalcond[4]=((((-1.0)*r01*x11437))+(((-1.0)*cj6*x11429*x11432))+(((-1.0)*r02*x11436))+((r00*x11433))+(((-1.0)*r00*x11428*x11432)));
evalcond[5]=((-1.0)+(((-1.0)*r10*x11428*x11432))+((r10*x11433))+(((-1.0)*r11*x11437))+(((-1.0)*r12*x11436))+(((-1.0)*x11431*x11432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11438=((1.0)*cj6);
CheckValue<IkReal> x11439 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x11438))),IKFAST_ATAN2_MAGTHRESH);
if(!x11439.valid){
continue;
}
CheckValue<IkReal> x11440=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11438)))),-1);
if(!x11440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11439.value)+(((1.5707963267949)*(x11440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11441=IKcos(j4);
IkReal x11442=IKsin(j4);
IkReal x11443=(cj5*sj6);
IkReal x11444=(cj5*r01);
IkReal x11445=(cj5*r21);
IkReal x11446=(cj5*cj6*r11);
IkReal x11447=((1.0)*x11442);
IkReal x11448=(cj6*x11441);
IkReal x11449=(sj5*x11441);
IkReal x11450=(cj6*x11442);
IkReal x11451=(sj5*x11447);
IkReal x11452=((1.0)*sj6*x11441);
evalcond[0]=(((x11444*x11448))+((r00*x11450))+((r02*x11449))+((r00*x11441*x11443))+(((-1.0)*r01*sj6*x11447)));
evalcond[1]=(((r12*x11449))+(((-1.0)*r11*sj6*x11447))+((r10*x11441*x11443))+((r10*x11450))+((x11441*x11446)));
evalcond[2]=((-1.0)+((r20*x11450))+(((-1.0)*r21*sj6*x11447))+((r22*x11449))+((x11445*x11448))+((r20*x11441*x11443)));
evalcond[3]=((((-1.0)*cj6*x11445*x11447))+(((-1.0)*r21*x11452))+((r20*x11448))+(((-1.0)*r20*x11443*x11447))+(((-1.0)*r22*x11451)));
evalcond[4]=(((r00*x11448))+(((-1.0)*r02*x11451))+(((-1.0)*cj6*x11444*x11447))+(((-1.0)*r00*x11443*x11447))+(((-1.0)*r01*x11452)));
evalcond[5]=((-1.0)+(((-1.0)*x11446*x11447))+(((-1.0)*r11*x11452))+(((-1.0)*r10*x11443*x11447))+((r10*x11448))+(((-1.0)*r12*x11451)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11453 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11453.valid){
continue;
}
CheckValue<IkReal> x11454=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11453.value)+(((1.5707963267949)*(x11454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11455=IKcos(j4);
IkReal x11456=IKsin(j4);
IkReal x11457=(cj5*sj6);
IkReal x11458=(cj5*r01);
IkReal x11459=(cj5*r21);
IkReal x11460=(cj5*cj6*r11);
IkReal x11461=((1.0)*x11456);
IkReal x11462=(cj6*x11455);
IkReal x11463=(sj5*x11455);
IkReal x11464=(cj6*x11456);
IkReal x11465=(sj5*x11461);
IkReal x11466=((1.0)*sj6*x11455);
evalcond[0]=(((x11458*x11462))+((r02*x11463))+(((-1.0)*r01*sj6*x11461))+((r00*x11455*x11457))+((r00*x11464)));
evalcond[1]=(((r10*x11455*x11457))+((r12*x11463))+((r10*x11464))+((x11455*x11460))+(((-1.0)*r11*sj6*x11461)));
evalcond[2]=((-1.0)+((r20*x11455*x11457))+(((-1.0)*r21*sj6*x11461))+((r22*x11463))+((r20*x11464))+((x11459*x11462)));
evalcond[3]=((((-1.0)*r21*x11466))+(((-1.0)*r20*x11457*x11461))+(((-1.0)*r22*x11465))+((r20*x11462))+(((-1.0)*cj6*x11459*x11461)));
evalcond[4]=((((-1.0)*cj6*x11458*x11461))+(((-1.0)*r00*x11457*x11461))+(((-1.0)*r01*x11466))+(((-1.0)*r02*x11465))+((r00*x11462)));
evalcond[5]=((-1.0)+(((-1.0)*r12*x11465))+(((-1.0)*r10*x11457*x11461))+(((-1.0)*r11*x11466))+((r10*x11462))+(((-1.0)*x11460*x11461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11467=(cj5*r12);
IkReal x11468=(r10*sj6);
IkReal x11469=((0.37429)*sj5);
IkReal x11470=((0.01)*cj5);
IkReal x11471=(cj6*r11);
IkReal x11472=(r00*sj6);
IkReal x11473=(r20*sj6);
IkReal x11474=((1.0)*sj5);
IkReal x11475=((0.01)*sj5);
IkReal x11476=(cj6*r01);
IkReal x11477=(cj5*r02);
IkReal x11478=(cj6*r21);
IkReal x11479=(cj5*r22);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=((0.36442)+(((0.37429)*x11479))+(((-1.0)*x11469*x11478))+(((-1.0)*x11469*x11473))+((r22*x11475))+(((-1.0)*pz))+((x11470*x11473))+((x11470*x11478)));
evalcond[2]=((((0.37429)*x11477))+(((-1.0)*x11469*x11472))+(((-1.0)*x11469*x11476))+(((-1.0)*px))+((r02*x11475))+((x11470*x11476))+((x11470*x11472)));
evalcond[3]=(((x11468*x11470))+((r12*x11475))+(((-1.0)*x11469*x11471))+(((0.37429)*x11467))+(((-1.0)*x11468*x11469))+(((-1.0)*py))+((x11470*x11471)));
evalcond[4]=(x11479+(((-1.0)*x11474*x11478))+(((-1.0)*x11473*x11474)));
evalcond[5]=(x11467+(((-1.0)*x11471*x11474))+(((-1.0)*x11468*x11474)));
evalcond[6]=((1.0)+x11477+(((-1.0)*x11474*x11476))+(((-1.0)*x11472*x11474)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11480=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x11480;
j4eval[1]=((IKabs((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))))+(IKabs(((((-1.0)*cj6*r10))+((r11*sj6))))));
j4eval[2]=IKsign(x11480);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11481=((1.0)*cj6);
IkReal x11482=(((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11481)));
j4eval[0]=x11482;
j4eval[1]=((IKabs((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))))+(IKabs((((r01*sj6))+(((-1.0)*r00*x11481))))));
j4eval[2]=IKsign(x11482);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x11483=r11*r11;
IkReal x11484=cj5*cj5;
IkReal x11485=cj6*cj6;
IkReal x11486=r10*r10;
IkReal x11487=r12*r12;
IkReal x11488=(r12*sj5);
IkReal x11489=(r11*sj6);
IkReal x11490=((1.0)*x11485);
IkReal x11491=(cj5*cj6*r11);
IkReal x11492=(cj5*r10*sj6);
IkReal x11493=((2.0)*cj6*r10);
IkReal x11494=(x11484*x11486);
IkReal x11495=((((2.0)*x11488*x11492))+(((2.0)*x11488*x11491))+x11494+x11487+x11483+(((-1.0)*x11483*x11490))+(((-1.0)*x11490*x11494))+(((-1.0)*x11489*x11493))+((x11484*x11489*x11493))+((x11485*x11486))+(((-1.0)*x11484*x11487))+((x11483*x11484*x11485)));
j4eval[0]=x11495;
j4eval[1]=((IKabs((x11492+x11491+x11488)))+(IKabs((x11489+(((-1.0)*cj6*r10))))));
j4eval[2]=IKsign(x11495);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11496=r11*r11;
IkReal x11497=cj5*cj5;
IkReal x11498=cj6*cj6;
IkReal x11499=r10*r10;
IkReal x11500=r12*r12;
IkReal x11501=(r10*sj6);
IkReal x11502=(r12*sj5);
IkReal x11503=((1.0)*x11498);
IkReal x11504=(cj5*cj6*r11);
IkReal x11505=((2.0)*cj6*r11);
IkReal x11506=(x11497*x11499);
CheckValue<IkReal> x11507 = IKatan2WithCheck(IkReal((x11504+x11502+((cj5*x11501)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11507.valid){
continue;
}
CheckValue<IkReal> x11508=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11501*x11505))+x11496+(((-1.0)*x11497*x11500))+x11506+x11500+(((2.0)*x11502*x11504))+((x11496*x11497*x11498))+((x11498*x11499))+(((2.0)*cj5*x11501*x11502))+(((-1.0)*x11503*x11506))+(((-1.0)*x11496*x11503))+((x11497*x11501*x11505)))),-1);
if(!x11508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11507.value)+(((1.5707963267949)*(x11508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11509=IKcos(j4);
IkReal x11510=IKsin(j4);
IkReal x11511=(cj5*sj6);
IkReal x11512=(cj5*r01);
IkReal x11513=(cj5*r21);
IkReal x11514=(cj5*cj6*r11);
IkReal x11515=((1.0)*x11510);
IkReal x11516=(cj6*x11509);
IkReal x11517=(sj5*x11509);
IkReal x11518=(cj6*x11510);
IkReal x11519=(sj5*x11515);
IkReal x11520=((1.0)*sj6*x11509);
evalcond[0]=(((x11512*x11516))+((r02*x11517))+(((-1.0)*r01*sj6*x11515))+((r00*x11518))+((r00*x11509*x11511)));
evalcond[1]=(((x11509*x11514))+(((-1.0)*r11*sj6*x11515))+((r12*x11517))+((r10*x11518))+((r10*x11509*x11511)));
evalcond[2]=((-1.0)+((r20*x11518))+((r20*x11509*x11511))+((r22*x11517))+((x11513*x11516))+(((-1.0)*r21*sj6*x11515)));
evalcond[3]=((((-1.0)*cj6*x11513*x11515))+((r20*x11516))+(((-1.0)*r22*x11519))+(((-1.0)*r20*x11511*x11515))+(((-1.0)*r21*x11520)));
evalcond[4]=((((-1.0)*cj6*x11512*x11515))+(((-1.0)*r00*x11511*x11515))+(((-1.0)*r02*x11519))+((r00*x11516))+(((-1.0)*r01*x11520)));
evalcond[5]=((1.0)+(((-1.0)*r12*x11519))+(((-1.0)*x11514*x11515))+((r10*x11516))+(((-1.0)*r10*x11511*x11515))+(((-1.0)*r11*x11520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11521=((1.0)*cj6);
CheckValue<IkReal> x11522=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11521)))),-1);
if(!x11522.valid){
continue;
}
CheckValue<IkReal> x11523 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),((((-1.0)*r00*x11521))+((r01*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11522.value)))+(x11523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11524=IKcos(j4);
IkReal x11525=IKsin(j4);
IkReal x11526=(cj5*sj6);
IkReal x11527=(cj5*r01);
IkReal x11528=(cj5*r21);
IkReal x11529=(cj5*cj6*r11);
IkReal x11530=((1.0)*x11525);
IkReal x11531=(cj6*x11524);
IkReal x11532=(sj5*x11524);
IkReal x11533=(cj6*x11525);
IkReal x11534=(sj5*x11530);
IkReal x11535=((1.0)*sj6*x11524);
evalcond[0]=(((r00*x11524*x11526))+(((-1.0)*r01*sj6*x11530))+((x11527*x11531))+((r00*x11533))+((r02*x11532)));
evalcond[1]=(((r10*x11524*x11526))+(((-1.0)*r11*sj6*x11530))+((x11524*x11529))+((r12*x11532))+((r10*x11533)));
evalcond[2]=((-1.0)+((r22*x11532))+((r20*x11524*x11526))+(((-1.0)*r21*sj6*x11530))+((r20*x11533))+((x11528*x11531)));
evalcond[3]=((((-1.0)*r20*x11526*x11530))+(((-1.0)*cj6*x11528*x11530))+(((-1.0)*r22*x11534))+((r20*x11531))+(((-1.0)*r21*x11535)));
evalcond[4]=(((r00*x11531))+(((-1.0)*r00*x11526*x11530))+(((-1.0)*cj6*x11527*x11530))+(((-1.0)*r01*x11535))+(((-1.0)*r02*x11534)));
evalcond[5]=((1.0)+(((-1.0)*r11*x11535))+(((-1.0)*r10*x11526*x11530))+(((-1.0)*r12*x11534))+((r10*x11531))+(((-1.0)*x11529*x11530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11536 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11536.valid){
continue;
}
CheckValue<IkReal> x11537=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11536.value)+(((1.5707963267949)*(x11537.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11538=IKcos(j4);
IkReal x11539=IKsin(j4);
IkReal x11540=(cj5*sj6);
IkReal x11541=(cj5*r01);
IkReal x11542=(cj5*r21);
IkReal x11543=(cj5*cj6*r11);
IkReal x11544=((1.0)*x11539);
IkReal x11545=(cj6*x11538);
IkReal x11546=(sj5*x11538);
IkReal x11547=(cj6*x11539);
IkReal x11548=(sj5*x11544);
IkReal x11549=((1.0)*sj6*x11538);
evalcond[0]=(((r00*x11547))+(((-1.0)*r01*sj6*x11544))+((r02*x11546))+((x11541*x11545))+((r00*x11538*x11540)));
evalcond[1]=(((r10*x11547))+((x11538*x11543))+((r12*x11546))+(((-1.0)*r11*sj6*x11544))+((r10*x11538*x11540)));
evalcond[2]=((-1.0)+(((-1.0)*r21*sj6*x11544))+((x11542*x11545))+((r20*x11547))+((r20*x11538*x11540))+((r22*x11546)));
evalcond[3]=((((-1.0)*r20*x11540*x11544))+((r20*x11545))+(((-1.0)*r21*x11549))+(((-1.0)*cj6*x11542*x11544))+(((-1.0)*r22*x11548)));
evalcond[4]=((((-1.0)*r01*x11549))+((r00*x11545))+(((-1.0)*cj6*x11541*x11544))+(((-1.0)*r02*x11548))+(((-1.0)*r00*x11540*x11544)));
evalcond[5]=((1.0)+(((-1.0)*r10*x11540*x11544))+((r10*x11545))+(((-1.0)*r12*x11548))+(((-1.0)*r11*x11549))+(((-1.0)*x11543*x11544)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11550=cj6*cj6;
IkReal x11551=r01*r01;
IkReal x11552=cj5*cj5;
IkReal x11553=r00*r00;
IkReal x11554=r02*r02;
IkReal x11555=(r00*sj6);
IkReal x11556=(r02*sj5);
IkReal x11557=(r01*sj0);
IkReal x11558=((2.0)*cj6*r01);
IkReal x11559=((1.0)*x11552);
IkReal x11560=(x11550*x11553);
IkReal x11561=(x11550*x11551);
CheckValue<IkReal> x11562=IKPowWithIntegerCheck(IKsign((((x11552*x11561))+(((-1.0)*x11555*x11558))+(((-1.0)*x11554*x11559))+x11560+x11551+x11554+((x11552*x11555*x11558))+(((-1.0)*x11559*x11560))+(((-1.0)*x11561))+((x11552*x11553))+((cj5*x11556*x11558))+(((2.0)*cj5*x11555*x11556)))),-1);
if(!x11562.valid){
continue;
}
CheckValue<IkReal> x11563 = IKatan2WithCheck(IkReal((((cj5*sj0*x11555))+((cj5*cj6*x11557))+((sj0*x11556)))),(((sj6*x11557))+(((-1.0)*cj6*r00*sj0))),IKFAST_ATAN2_MAGTHRESH);
if(!x11563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11562.value)))+(x11563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11564=IKcos(j4);
IkReal x11565=IKsin(j4);
IkReal x11566=(cj5*sj6);
IkReal x11567=(cj5*r01);
IkReal x11568=(cj5*r21);
IkReal x11569=(cj5*cj6*r11);
IkReal x11570=((1.0)*x11565);
IkReal x11571=(cj6*x11564);
IkReal x11572=(sj5*x11564);
IkReal x11573=(cj6*x11565);
IkReal x11574=(sj5*x11570);
IkReal x11575=((1.0)*sj6*x11564);
evalcond[0]=(((r00*x11564*x11566))+((x11567*x11571))+((r00*x11573))+(((-1.0)*r01*sj6*x11570))+((r02*x11572)));
evalcond[1]=(((x11564*x11569))+((r10*x11573))+((r12*x11572))+((r10*x11564*x11566))+(((-1.0)*r11*sj6*x11570)));
evalcond[2]=((-1.0)+((r20*x11573))+((r20*x11564*x11566))+((x11568*x11571))+((r22*x11572))+(((-1.0)*r21*sj6*x11570)));
evalcond[3]=((((-1.0)*cj6*x11568*x11570))+((r20*x11571))+(((-1.0)*r21*x11575))+(((-1.0)*r20*x11566*x11570))+(((-1.0)*r22*x11574)));
evalcond[4]=((((-1.0)*r01*x11575))+sj0+((r00*x11571))+(((-1.0)*r00*x11566*x11570))+(((-1.0)*r02*x11574))+(((-1.0)*cj6*x11567*x11570)));
evalcond[5]=(((r10*x11571))+(((-1.0)*x11569*x11570))+(((-1.0)*r11*x11575))+(((-1.0)*r12*x11574))+(((-1.0)*r10*x11566*x11570))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11576=((1.0)*cj6);
CheckValue<IkReal> x11577=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj5*sj6))+(((-1.0)*r11*sj5*x11576)))),-1);
if(!x11577.valid){
continue;
}
CheckValue<IkReal> x11578 = IKatan2WithCheck(IkReal((((cj5*r00*sj6))+((r02*sj5))+((cj5*cj6*r01)))),(((r01*sj6))+(((-1.0)*r00*x11576))),IKFAST_ATAN2_MAGTHRESH);
if(!x11578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11577.value)))+(x11578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11579=IKcos(j4);
IkReal x11580=IKsin(j4);
IkReal x11581=(cj5*sj6);
IkReal x11582=(cj5*r01);
IkReal x11583=(cj5*r21);
IkReal x11584=(cj5*cj6*r11);
IkReal x11585=((1.0)*x11580);
IkReal x11586=(cj6*x11579);
IkReal x11587=(sj5*x11579);
IkReal x11588=(cj6*x11580);
IkReal x11589=(sj5*x11585);
IkReal x11590=((1.0)*sj6*x11579);
evalcond[0]=(((x11582*x11586))+((r00*x11579*x11581))+((r02*x11587))+((r00*x11588))+(((-1.0)*r01*sj6*x11585)));
evalcond[1]=((((-1.0)*r11*sj6*x11585))+((x11579*x11584))+((r10*x11588))+((r10*x11579*x11581))+((r12*x11587)));
evalcond[2]=((-1.0)+(((-1.0)*r21*sj6*x11585))+((r20*x11579*x11581))+((r20*x11588))+((x11583*x11586))+((r22*x11587)));
evalcond[3]=((((-1.0)*r20*x11581*x11585))+((r20*x11586))+(((-1.0)*cj6*x11583*x11585))+(((-1.0)*r21*x11590))+(((-1.0)*r22*x11589)));
evalcond[4]=(sj0+(((-1.0)*cj6*x11582*x11585))+(((-1.0)*r01*x11590))+(((-1.0)*r00*x11581*x11585))+(((-1.0)*r02*x11589))+((r00*x11586)));
evalcond[5]=((((-1.0)*x11584*x11585))+(((-1.0)*r12*x11589))+(((-1.0)*r11*x11590))+((r10*x11586))+(((-1.0)*r10*x11581*x11585))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11591 = IKatan2WithCheck(IkReal((((cj5*r10*sj6))+((cj5*cj6*r11))+((r12*sj5)))),((((-1.0)*cj6*r10))+((r11*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x11591.valid){
continue;
}
CheckValue<IkReal> x11592=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x11592.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11591.value)+(((1.5707963267949)*(x11592.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11593=IKcos(j4);
IkReal x11594=IKsin(j4);
IkReal x11595=(cj5*sj6);
IkReal x11596=(cj5*r01);
IkReal x11597=(cj5*r21);
IkReal x11598=(cj5*cj6*r11);
IkReal x11599=((1.0)*x11594);
IkReal x11600=(cj6*x11593);
IkReal x11601=(sj5*x11593);
IkReal x11602=(cj6*x11594);
IkReal x11603=(sj5*x11599);
IkReal x11604=((1.0)*sj6*x11593);
evalcond[0]=(((r00*x11602))+((r02*x11601))+((r00*x11593*x11595))+((x11596*x11600))+(((-1.0)*r01*sj6*x11599)));
evalcond[1]=(((r10*x11602))+((x11593*x11598))+((r12*x11601))+((r10*x11593*x11595))+(((-1.0)*r11*sj6*x11599)));
evalcond[2]=((-1.0)+(((-1.0)*r21*sj6*x11599))+((r20*x11593*x11595))+((r22*x11601))+((x11597*x11600))+((r20*x11602)));
evalcond[3]=((((-1.0)*r21*x11604))+(((-1.0)*r20*x11595*x11599))+(((-1.0)*r22*x11603))+(((-1.0)*cj6*x11597*x11599))+((r20*x11600)));
evalcond[4]=(sj0+(((-1.0)*r01*x11604))+(((-1.0)*r02*x11603))+((r00*x11600))+(((-1.0)*cj6*x11596*x11599))+(((-1.0)*r00*x11595*x11599)));
evalcond[5]=((((-1.0)*x11598*x11599))+(((-1.0)*r10*x11595*x11599))+(((-1.0)*r11*x11604))+(((-1.0)*r12*x11603))+((r10*x11600))+(((-1.0)*cj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11605=(cj2*sj1);
IkReal x11606=((364.42)*cj1);
IkReal x11607=((1000.0)*px);
IkReal x11608=(cj5*sj2);
IkReal x11609=(cj6*r01);
IkReal x11610=((69.0)*r12);
IkReal x11611=(sj5*sj6);
IkReal x11612=((69.0)*r10);
IkReal x11613=((374.29)*r00);
IkReal x11614=((374.29)*sj5);
IkReal x11615=((374.29)*r02);
IkReal x11616=((10.0)*r02*sj5);
IkReal x11617=((10.0)*r00*sj6);
IkReal x11618=(cj6*r11*sj5);
CheckValue<IkReal> x11619=IKPowWithIntegerCheck(IKsign(((-69.0)+((x11605*x11606))+(((69.0)*x11605))+(((69.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x11619.valid){
continue;
}
CheckValue<IkReal> x11620 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x11616))+((cj5*r12*x11606))+(((-10.0)*x11608*x11609))+(((-1.0)*r10*x11606*x11611))+((sj2*x11609*x11614))+(((-1.0)*x11608*x11615))+(((-1.0)*x11608*x11617))+(((-1.0)*x11611*x11612))+(((-1.0)*cj5*x11605*x11610))+(((-1.0)*x11606*x11618))+((sj2*x11607))+((x11605*x11611*x11612))+(((-69.0)*x11618))+((cj5*x11610))+((sj2*x11611*x11613))+(((69.0)*x11605*x11618)))),((((-10.0)*cj5*x11605*x11609))+((x11605*x11607))+(((-69.0)*sj2*x11618))+(((-1.0)*sj2*x11611*x11612))+(((-1.0)*cj5*x11605*x11617))+(((-1.0)*cj5*x11605*x11615))+((x11605*x11609*x11614))+((x11605*x11611*x11613))+(((-1.0)*x11605*x11616))+((x11608*x11610))),IKFAST_ATAN2_MAGTHRESH);
if(!x11620.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11619.value)))+(x11620.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x11621=IKsin(j0);
IkReal x11622=IKcos(j0);
IkReal x11623=((0.01)*cj5);
IkReal x11624=(cj6*r11);
IkReal x11625=(cj5*r12);
IkReal x11626=(r10*sj6);
IkReal x11627=((0.37429)*sj5);
IkReal x11628=((0.36442)*cj1);
IkReal x11629=((1.0)*sj5);
IkReal x11630=(r00*sj6);
IkReal x11631=(cj6*r01);
IkReal x11632=(cj2*sj1);
IkReal x11633=(cj5*r02);
IkReal x11634=((0.01)*sj5);
IkReal x11635=((0.069)*x11621);
IkReal x11636=((0.069)*x11622);
IkReal x11637=((1.0)*x11621);
evalcond[0]=(x11625+(((-1.0)*x11632*x11637))+((sj2*x11622))+(((-1.0)*x11624*x11629))+(((-1.0)*x11626*x11629)));
evalcond[1]=(x11633+(((-1.0)*x11622*x11632))+(((-1.0)*sj2*x11637))+(((-1.0)*x11629*x11630))+(((-1.0)*x11629*x11631)));
evalcond[2]=(((x11622*x11628))+x11636+((x11623*x11630))+((x11623*x11631))+(((0.37429)*x11633))+((r02*x11634))+(((-1.0)*px))+(((-1.0)*x11632*x11636))+(((-1.0)*sj2*x11635))+(((-1.0)*x11627*x11630))+(((-1.0)*x11627*x11631)));
evalcond[3]=(x11635+((r12*x11634))+((x11623*x11624))+((x11623*x11626))+(((-1.0)*py))+(((0.37429)*x11625))+((sj2*x11636))+(((-1.0)*x11632*x11635))+((x11621*x11628))+(((-1.0)*x11624*x11627))+(((-1.0)*x11626*x11627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11638=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x11638;
j4eval[1]=IKsign(x11638);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11639=((1.0)*sj5);
IkReal x11640=((((-1.0)*r00*sj6*x11639))+(((-1.0)*cj6*r01*x11639))+((cj5*r02)));
j4eval[0]=x11640;
j4eval[1]=IKsign(x11640);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11641=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x11641;
j4eval[1]=IKsign(x11641);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11642=(cj1*sj0);
IkReal x11643=(cj0*cj1);
IkReal x11644=(cj5*cj6);
IkReal x11645=((1.0)*sj6);
CheckValue<IkReal> x11646=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x11646.valid){
continue;
}
CheckValue<IkReal> x11647 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10*x11643*x11645))+(((-1.0)*r12*sj5*x11643))+((r01*x11642*x11644))+(((-1.0)*r11*x11643*x11644))+((r02*sj5*x11642))+((cj5*r00*sj6*x11642)))),(((r01*sj6*x11642))+((cj6*r10*x11643))+(((-1.0)*r11*x11643*x11645))+(((-1.0)*cj6*r00*x11642))),IKFAST_ATAN2_MAGTHRESH);
if(!x11647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11646.value)))+(x11647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11648=IKcos(j4);
IkReal x11649=IKsin(j4);
IkReal x11650=((1.0)*cj1);
IkReal x11651=(sj1*sj2);
IkReal x11652=(r10*sj6);
IkReal x11653=(r00*sj6);
IkReal x11654=((1.0)*sj6);
IkReal x11655=(r20*sj6);
IkReal x11656=(cj6*x11648);
IkReal x11657=(sj5*x11648);
IkReal x11658=(cj6*x11649);
IkReal x11659=(cj5*x11648);
IkReal x11660=(cj5*x11656);
IkReal x11661=((1.0)*sj5*x11649);
IkReal x11662=((1.0)*cj5*x11649);
evalcond[0]=(((r21*x11660))+sj1+((r22*x11657))+((x11655*x11659))+((r20*x11658))+(((-1.0)*r21*x11649*x11654)));
evalcond[1]=((((-1.0)*r01*x11649*x11654))+((x11653*x11659))+(((-1.0)*cj0*x11650))+((r02*x11657))+((r01*x11660))+((r00*x11658)));
evalcond[2]=(((r12*x11657))+((r10*x11658))+((x11652*x11659))+((r11*x11660))+(((-1.0)*sj0*x11650))+(((-1.0)*r11*x11649*x11654)));
evalcond[3]=(((cj1*sj2))+((r20*x11656))+(((-1.0)*cj5*r20*x11649*x11654))+(((-1.0)*cj5*r21*x11658))+(((-1.0)*r22*x11661))+(((-1.0)*r21*x11648*x11654)));
evalcond[4]=(((r10*x11656))+((cj0*cj2))+(((-1.0)*r11*x11648*x11654))+((sj0*x11651))+(((-1.0)*x11652*x11662))+(((-1.0)*r12*x11661))+(((-1.0)*cj5*r11*x11658)));
evalcond[5]=((((-1.0)*cj2*sj0))+(((-1.0)*x11653*x11662))+(((-1.0)*r02*x11661))+((cj0*x11651))+(((-1.0)*r01*x11648*x11654))+((r00*x11656))+(((-1.0)*cj5*r01*x11658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11663=(sj1*sj6);
IkReal x11664=((1.0)*cj6);
IkReal x11665=(cj1*sj0);
IkReal x11666=(cj5*cj6);
IkReal x11667=(r20*x11665);
CheckValue<IkReal> x11668 = IKatan2WithCheck(IkReal((((r22*sj5*x11665))+((r21*x11665*x11666))+((r12*sj1*sj5))+((cj5*sj6*x11667))+((r11*sj1*x11666))+((cj5*r10*x11663)))),((((-1.0)*x11664*x11667))+(((-1.0)*r10*sj1*x11664))+((r11*x11663))+((r21*sj6*x11665))),IKFAST_ATAN2_MAGTHRESH);
if(!x11668.valid){
continue;
}
CheckValue<IkReal> x11669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x11664))+((cj5*r02)))),-1);
if(!x11669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11668.value)+(((1.5707963267949)*(x11669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11670=IKcos(j4);
IkReal x11671=IKsin(j4);
IkReal x11672=((1.0)*cj1);
IkReal x11673=(sj1*sj2);
IkReal x11674=(r10*sj6);
IkReal x11675=(r00*sj6);
IkReal x11676=((1.0)*sj6);
IkReal x11677=(r20*sj6);
IkReal x11678=(cj6*x11670);
IkReal x11679=(sj5*x11670);
IkReal x11680=(cj6*x11671);
IkReal x11681=(cj5*x11670);
IkReal x11682=(cj5*x11678);
IkReal x11683=((1.0)*sj5*x11671);
IkReal x11684=((1.0)*cj5*x11671);
evalcond[0]=(((x11677*x11681))+((r22*x11679))+sj1+(((-1.0)*r21*x11671*x11676))+((r21*x11682))+((r20*x11680)));
evalcond[1]=((((-1.0)*cj0*x11672))+((r00*x11680))+((x11675*x11681))+((r02*x11679))+((r01*x11682))+(((-1.0)*r01*x11671*x11676)));
evalcond[2]=((((-1.0)*r11*x11671*x11676))+((r11*x11682))+((r12*x11679))+((r10*x11680))+((x11674*x11681))+(((-1.0)*sj0*x11672)));
evalcond[3]=((((-1.0)*r22*x11683))+((cj1*sj2))+(((-1.0)*r21*x11670*x11676))+((r20*x11678))+(((-1.0)*cj5*r21*x11680))+(((-1.0)*cj5*r20*x11671*x11676)));
evalcond[4]=((((-1.0)*r11*x11670*x11676))+((cj0*cj2))+(((-1.0)*x11674*x11684))+(((-1.0)*r12*x11683))+((sj0*x11673))+(((-1.0)*cj5*r11*x11680))+((r10*x11678)));
evalcond[5]=(((cj0*x11673))+(((-1.0)*r02*x11683))+(((-1.0)*cj5*r01*x11680))+(((-1.0)*cj2*sj0))+((r00*x11678))+(((-1.0)*x11675*x11684))+(((-1.0)*r01*x11670*x11676)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11685=(cj0*cj1);
IkReal x11686=(cj5*cj6);
IkReal x11687=(cj5*sj6);
IkReal x11688=(r00*sj1);
IkReal x11689=((1.0)*cj6);
IkReal x11690=(r01*sj1);
CheckValue<IkReal> x11691 = IKatan2WithCheck(IkReal((((r20*x11685*x11687))+((r22*sj5*x11685))+((x11686*x11690))+((r21*x11685*x11686))+((r02*sj1*sj5))+((x11687*x11688)))),(((r21*sj6*x11685))+(((-1.0)*r20*x11685*x11689))+(((-1.0)*x11688*x11689))+((sj6*x11690))),IKFAST_ATAN2_MAGTHRESH);
if(!x11691.valid){
continue;
}
CheckValue<IkReal> x11692=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x11692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11691.value)+(((1.5707963267949)*(x11692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11693=IKcos(j4);
IkReal x11694=IKsin(j4);
IkReal x11695=((1.0)*cj1);
IkReal x11696=(sj1*sj2);
IkReal x11697=(r10*sj6);
IkReal x11698=(r00*sj6);
IkReal x11699=((1.0)*sj6);
IkReal x11700=(r20*sj6);
IkReal x11701=(cj6*x11693);
IkReal x11702=(sj5*x11693);
IkReal x11703=(cj6*x11694);
IkReal x11704=(cj5*x11693);
IkReal x11705=(cj5*x11701);
IkReal x11706=((1.0)*sj5*x11694);
IkReal x11707=((1.0)*cj5*x11694);
evalcond[0]=(sj1+((r22*x11702))+(((-1.0)*r21*x11694*x11699))+((r21*x11705))+((x11700*x11704))+((r20*x11703)));
evalcond[1]=((((-1.0)*r01*x11694*x11699))+((r01*x11705))+((r00*x11703))+((x11698*x11704))+(((-1.0)*cj0*x11695))+((r02*x11702)));
evalcond[2]=(((x11697*x11704))+((r12*x11702))+((r10*x11703))+((r11*x11705))+(((-1.0)*r11*x11694*x11699))+(((-1.0)*sj0*x11695)));
evalcond[3]=((((-1.0)*r22*x11706))+((cj1*sj2))+(((-1.0)*cj5*r21*x11703))+(((-1.0)*cj5*r20*x11694*x11699))+(((-1.0)*r21*x11693*x11699))+((r20*x11701)));
evalcond[4]=(((cj0*cj2))+(((-1.0)*x11697*x11707))+((sj0*x11696))+((r10*x11701))+(((-1.0)*r12*x11706))+(((-1.0)*cj5*r11*x11703))+(((-1.0)*r11*x11693*x11699)));
evalcond[5]=((((-1.0)*cj5*r01*x11703))+((cj0*x11696))+(((-1.0)*r01*x11693*x11699))+(((-1.0)*cj2*sj0))+(((-1.0)*x11698*x11707))+((r00*x11701))+(((-1.0)*r02*x11706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11708=cj5*cj5;
IkReal x11709=cj6*cj6;
IkReal x11710=r22*r22;
IkReal x11711=r21*r21;
IkReal x11712=r20*r20;
IkReal x11713=(r21*sj1);
IkReal x11714=(cj5*cj6);
IkReal x11715=((1.0)*sj6);
IkReal x11716=(r22*sj5);
IkReal x11717=(cj1*sj2);
IkReal x11718=(cj5*r20);
IkReal x11719=(cj6*r20);
IkReal x11720=((1.0)*x11711);
IkReal x11721=(x11709*x11712);
IkReal x11722=((2.0)*r21*sj6*x11719);
CheckValue<IkReal> x11723 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x11714*x11717))+((sj1*x11719))+(((-1.0)*x11713*x11715))+(((-1.0)*x11715*x11717*x11718))+(((-1.0)*x11716*x11717)))),(((x11717*x11719))+((sj1*x11716))+(((-1.0)*r21*x11715*x11717))+((x11713*x11714))+((sj1*sj6*x11718))),IKFAST_ATAN2_MAGTHRESH);
if(!x11723.valid){
continue;
}
CheckValue<IkReal> x11724=IKPowWithIntegerCheck(IKsign((((x11708*x11721))+x11722+((x11708*x11710))+(((-1.0)*x11720))+(((-2.0)*r21*x11714*x11716))+(((-1.0)*x11708*x11722))+(((-1.0)*x11721))+(((-1.0)*x11708*x11709*x11720))+(((-1.0)*x11710))+(((-1.0)*x11708*x11712))+(((-2.0)*sj6*x11716*x11718))+((x11709*x11711)))),-1);
if(!x11724.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11723.value)+(((1.5707963267949)*(x11724.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x11725=IKcos(j4);
IkReal x11726=IKsin(j4);
IkReal x11727=(r22*sj5);
IkReal x11728=(cj6*r20);
IkReal x11729=((1.0)*r21*sj6);
IkReal x11730=((1.0)*x11726);
IkReal x11731=(cj5*cj6*r21);
IkReal x11732=(cj5*r20*sj6);
evalcond[0]=(((x11726*x11728))+sj1+((x11725*x11727))+((x11725*x11732))+((x11725*x11731))+(((-1.0)*x11726*x11729)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*x11730*x11731))+(((-1.0)*x11730*x11732))+((x11725*x11728))+(((-1.0)*x11727*x11730))+(((-1.0)*x11725*x11729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x11733=((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))));
j0eval[0]=x11733;
j0eval[1]=IKsign(x11733);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x11734=(cj6*sj4);
IkReal x11735=((1.0)*sj6);
IkReal x11736=(cj5*r21);
IkReal x11737=(r22*sj5);
IkReal x11738=(cj4*cj6);
IkReal x11739=(cj4*sj5);
IkReal x11740=(r20*sj5);
IkReal x11741=(cj5*r22);
IkReal x11742=(cj5*r20*sj6);
IkReal x11743=(cj6*r21*sj5);
IkReal x11744=(cj4*cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj5*r20*sj4*x11735))+((r20*x11738))+(((-1.0)*sj4*x11737))+(((-1.0)*x11734*x11736))+(((-1.0)*cj4*r21*x11735)));
evalcond[2]=((-0.36442)+(((0.37429)*x11741))+(((0.01)*x11742))+(((0.01)*x11737))+(((-1.0)*pz))+(((0.01)*cj6*x11736))+(((-0.37429)*x11743))+(((-0.37429)*sj6*x11740)));
evalcond[3]=((1.0)+((cj4*x11737))+((x11736*x11738))+((cj4*x11742))+(((-1.0)*r21*sj4*x11735))+((r20*x11734)));
evalcond[4]=(x11741+(((-1.0)*x11743))+(((-1.0)*x11735*x11740)));
evalcond[5]=(((r00*x11744))+((r00*x11734))+(((-1.0)*r01*sj4*x11735))+((r02*x11739))+((cj5*r01*x11738)));
evalcond[6]=(((cj5*r11*x11738))+((r10*x11744))+((r10*x11734))+((r12*x11739))+(((-1.0)*r11*sj4*x11735)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11745=(sj2*sj5);
IkReal x11746=(r10*sj6);
IkReal x11747=(cj6*r11);
IkReal x11748=(cj5*r02);
IkReal x11749=(cj6*r01);
IkReal x11750=(r00*sj6);
IkReal x11751=(cj5*r12);
IkReal x11752=((1.0)*cj2*sj5);
if( IKabs((((sj2*x11748))+(((-1.0)*x11745*x11749))+(((-1.0)*x11745*x11750))+(((-1.0)*x11747*x11752))+(((-1.0)*x11746*x11752))+((cj2*x11751)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x11745*x11747))+((x11745*x11746))+(((-1.0)*x11749*x11752))+(((-1.0)*sj2*x11751))+(((-1.0)*x11750*x11752))+((cj2*x11748)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj2*x11748))+(((-1.0)*x11745*x11749))+(((-1.0)*x11745*x11750))+(((-1.0)*x11747*x11752))+(((-1.0)*x11746*x11752))+((cj2*x11751))))+IKsqr((((x11745*x11747))+((x11745*x11746))+(((-1.0)*x11749*x11752))+(((-1.0)*sj2*x11751))+(((-1.0)*x11750*x11752))+((cj2*x11748))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj2*x11748))+(((-1.0)*x11745*x11749))+(((-1.0)*x11745*x11750))+(((-1.0)*x11747*x11752))+(((-1.0)*x11746*x11752))+((cj2*x11751))), (((x11745*x11747))+((x11745*x11746))+(((-1.0)*x11749*x11752))+(((-1.0)*sj2*x11751))+(((-1.0)*x11750*x11752))+((cj2*x11748))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11753=IKcos(j0);
IkReal x11754=IKsin(j0);
IkReal x11755=((1.0)*sj4);
IkReal x11756=(cj5*r12);
IkReal x11757=((0.37429)*sj5);
IkReal x11758=(r10*sj6);
IkReal x11759=((0.069)*sj2);
IkReal x11760=(cj6*r01);
IkReal x11761=((0.01)*cj5);
IkReal x11762=(r12*sj5);
IkReal x11763=(r00*sj6);
IkReal x11764=((1.0)*sj5);
IkReal x11765=(r02*sj5);
IkReal x11766=(cj6*r11);
IkReal x11767=(cj4*cj6);
IkReal x11768=(cj5*r02);
IkReal x11769=(sj2*x11753);
IkReal x11770=(cj5*x11766);
IkReal x11771=(cj2*x11753);
IkReal x11772=((0.069)*x11754);
IkReal x11773=(sj2*x11754);
IkReal x11774=((1.0)*cj4*sj6);
IkReal x11775=((1.0)*cj2*x11754);
evalcond[0]=(x11769+x11756+(((-1.0)*x11758*x11764))+(((-1.0)*x11764*x11766))+(((-1.0)*x11775)));
evalcond[1]=(x11768+(((-1.0)*x11773))+(((-1.0)*x11771))+(((-1.0)*x11760*x11764))+(((-1.0)*x11763*x11764)));
evalcond[2]=(x11773+x11771+(((-1.0)*x11755*x11762))+(((-1.0)*r11*x11774))+((r10*x11767))+(((-1.0)*cj5*x11755*x11758))+(((-1.0)*x11755*x11770)));
evalcond[3]=(x11769+(((-1.0)*cj5*x11755*x11763))+(((-1.0)*cj5*x11755*x11760))+(((-1.0)*x11755*x11765))+(((-1.0)*r01*x11774))+(((-1.0)*x11775))+((r00*x11767)));
evalcond[4]=((((-1.0)*x11754*x11759))+(((-0.069)*x11771))+(((-1.0)*px))+(((-1.0)*x11757*x11763))+(((-1.0)*x11757*x11760))+(((0.37429)*x11768))+(((0.069)*x11753))+(((0.01)*x11765))+((x11761*x11763))+((x11760*x11761)));
evalcond[5]=(x11772+(((-1.0)*cj2*x11772))+((x11753*x11759))+(((-1.0)*py))+(((-1.0)*x11757*x11766))+(((-1.0)*x11757*x11758))+(((0.37429)*x11756))+((x11758*x11761))+(((0.01)*x11762))+((x11761*x11766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11776=(cj6*sj4);
IkReal x11777=((1.0)*sj6);
IkReal x11778=(cj5*r21);
IkReal x11779=(r22*sj5);
IkReal x11780=(cj4*cj6);
IkReal x11781=(cj4*sj5);
IkReal x11782=(r20*sj5);
IkReal x11783=(cj5*r22);
IkReal x11784=(cj5*r20*sj6);
IkReal x11785=(cj6*r21*sj5);
IkReal x11786=(cj4*cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((r20*x11780))+(((-1.0)*cj4*r21*x11777))+(((-1.0)*cj5*r20*sj4*x11777))+(((-1.0)*x11776*x11778))+(((-1.0)*sj4*x11779)));
evalcond[2]=((0.36442)+(((-0.37429)*x11785))+(((0.01)*x11779))+(((-0.37429)*sj6*x11782))+(((-1.0)*pz))+(((0.37429)*x11783))+(((0.01)*x11784))+(((0.01)*cj6*x11778)));
evalcond[3]=((-1.0)+((r20*x11776))+((cj4*x11784))+((cj4*x11779))+(((-1.0)*r21*sj4*x11777))+((x11778*x11780)));
evalcond[4]=(x11783+(((-1.0)*x11785))+(((-1.0)*x11777*x11782)));
evalcond[5]=(((cj5*r01*x11780))+((r02*x11781))+(((-1.0)*r01*sj4*x11777))+((r00*x11776))+((r00*x11786)));
evalcond[6]=(((r10*x11776))+((r12*x11781))+(((-1.0)*r11*sj4*x11777))+((r10*x11786))+((cj5*r11*x11780)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11787=((1.0)*sj2);
IkReal x11788=((1.0)*cj2*cj5);
IkReal x11789=(cj6*r11*sj5);
IkReal x11790=(cj6*r01*sj5);
IkReal x11791=(r00*sj5*sj6);
IkReal x11792=(r10*sj5*sj6);
if( IKabs(((((-1.0)*r12*x11788))+(((-1.0)*x11787*x11790))+(((-1.0)*x11787*x11791))+((cj5*r02*sj2))+((cj2*x11789))+((cj2*x11792)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj2*x11789))+((sj2*x11792))+((cj2*x11790))+((cj2*x11791))+(((-1.0)*r02*x11788))+(((-1.0)*cj5*r12*x11787)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x11788))+(((-1.0)*x11787*x11790))+(((-1.0)*x11787*x11791))+((cj5*r02*sj2))+((cj2*x11789))+((cj2*x11792))))+IKsqr((((sj2*x11789))+((sj2*x11792))+((cj2*x11790))+((cj2*x11791))+(((-1.0)*r02*x11788))+(((-1.0)*cj5*r12*x11787))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x11788))+(((-1.0)*x11787*x11790))+(((-1.0)*x11787*x11791))+((cj5*r02*sj2))+((cj2*x11789))+((cj2*x11792))), (((sj2*x11789))+((sj2*x11792))+((cj2*x11790))+((cj2*x11791))+(((-1.0)*r02*x11788))+(((-1.0)*cj5*r12*x11787))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11793=IKcos(j0);
IkReal x11794=IKsin(j0);
IkReal x11795=((1.0)*sj4);
IkReal x11796=(cj5*r12);
IkReal x11797=((0.37429)*sj5);
IkReal x11798=(r10*sj6);
IkReal x11799=((0.069)*sj2);
IkReal x11800=(cj6*r01);
IkReal x11801=((0.01)*cj5);
IkReal x11802=(r12*sj5);
IkReal x11803=(r00*sj6);
IkReal x11804=((1.0)*sj5);
IkReal x11805=(r02*sj5);
IkReal x11806=(cj6*r11);
IkReal x11807=(cj4*cj6);
IkReal x11808=(cj5*r02);
IkReal x11809=(cj2*x11793);
IkReal x11810=(cj5*x11806);
IkReal x11811=((0.069)*x11794);
IkReal x11812=(sj2*x11793);
IkReal x11813=(cj2*x11794);
IkReal x11814=((1.0)*cj4*sj6);
IkReal x11815=((1.0)*sj2*x11794);
evalcond[0]=(x11796+(((-1.0)*x11798*x11804))+(((-1.0)*x11804*x11806))+x11812+x11813);
evalcond[1]=((((-1.0)*x11803*x11804))+(((-1.0)*x11800*x11804))+(((-1.0)*x11815))+x11809+x11808);
evalcond[2]=((((-1.0)*x11795*x11802))+(((-1.0)*r11*x11814))+(((-1.0)*x11795*x11810))+((r10*x11807))+(((-1.0)*x11815))+(((-1.0)*cj5*x11795*x11798))+x11809);
evalcond[3]=(((r00*x11807))+(((-1.0)*r01*x11814))+(((-1.0)*x11812))+(((-1.0)*x11813))+(((-1.0)*x11795*x11805))+(((-1.0)*cj5*x11795*x11803))+(((-1.0)*cj5*x11795*x11800)));
evalcond[4]=(((x11800*x11801))+(((0.069)*x11793))+(((-1.0)*x11797*x11800))+(((-1.0)*x11797*x11803))+(((-1.0)*x11794*x11799))+(((0.37429)*x11808))+(((0.069)*x11809))+(((0.01)*x11805))+(((-1.0)*px))+((x11801*x11803)));
evalcond[5]=((((-1.0)*x11797*x11806))+((x11798*x11801))+(((-1.0)*x11797*x11798))+((x11793*x11799))+(((0.01)*x11802))+(((-1.0)*py))+((x11801*x11806))+(((0.37429)*x11796))+((cj2*x11811))+x11811);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11816=((1.0)*r21);
IkReal x11817=(cj6*sj5);
IkReal x11818=(sj4*sj6);
IkReal x11819=(cj5*r22);
IkReal x11820=(r22*sj5);
IkReal x11821=(cj5*cj6);
IkReal x11822=(cj4*sj6);
IkReal x11823=(cj6*r20);
IkReal x11824=(cj5*r20);
IkReal x11825=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(cj1+(((-1.0)*x11818*x11824))+(((-1.0)*sj4*x11820))+((cj4*x11823))+(((-1.0)*sj4*x11816*x11821))+(((-1.0)*x11816*x11822)));
evalcond[2]=((((0.37429)*x11819))+(((0.01)*r21*x11821))+(((-0.37429)*x11825))+(((-1.0)*pz))+(((0.01)*x11820))+(((0.01)*sj6*x11824))+(((-0.37429)*r21*x11817))+(((-0.36442)*sj1)));
evalcond[3]=(((sj4*x11823))+sj1+((cj4*r21*x11821))+(((-1.0)*x11816*x11818))+((x11822*x11824))+((cj4*x11820)));
evalcond[4]=((((-1.0)*x11825))+(((-1.0)*x11816*x11817))+x11819);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11826=(sj5*sj6);
IkReal x11827=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x11826))+(((-1.0)*r01*x11827))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x11826))+((r11*x11827)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x11826))+(((-1.0)*r01*x11827))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x11826))+((r11*x11827))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x11826))+(((-1.0)*r01*x11827))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x11826))+((r11*x11827))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11828=IKcos(j0);
IkReal x11829=IKsin(j0);
IkReal x11830=((1.0)*sj4);
IkReal x11831=(cj5*r12);
IkReal x11832=((0.37429)*sj5);
IkReal x11833=(r10*sj6);
IkReal x11834=(r01*sj6);
IkReal x11835=((0.36442)*cj1);
IkReal x11836=(cj6*r01);
IkReal x11837=((0.01)*cj5);
IkReal x11838=(cj6*r10);
IkReal x11839=(r00*sj6);
IkReal x11840=((1.0)*sj5);
IkReal x11841=(r02*sj5);
IkReal x11842=(cj6*r11);
IkReal x11843=(r12*sj5);
IkReal x11844=(cj5*r02);
IkReal x11845=(cj4*cj5);
IkReal x11846=(cj6*r00);
IkReal x11847=((1.0)*cj4);
IkReal x11848=(r11*sj6);
IkReal x11849=((0.069)*x11829);
IkReal x11850=((0.069)*x11828);
IkReal x11851=(cj5*x11842);
IkReal x11852=((1.0)*x11829);
evalcond[0]=((((-1.0)*x11833*x11840))+(((-1.0)*x11840*x11842))+x11828+x11831);
evalcond[1]=((((-1.0)*x11852))+(((-1.0)*x11839*x11840))+(((-1.0)*x11836*x11840))+x11844);
evalcond[2]=(((x11839*x11845))+((cj4*x11841))+((x11836*x11845))+(((-1.0)*x11830*x11834))+((sj4*x11846))+(((-1.0)*cj1*x11828)));
evalcond[3]=(((cj4*x11843))+(((-1.0)*cj1*x11852))+(((-1.0)*x11830*x11848))+((x11842*x11845))+((sj4*x11838))+((x11833*x11845)));
evalcond[4]=((((-1.0)*cj5*x11830*x11833))+((cj4*x11838))+(((-1.0)*x11830*x11843))+(((-1.0)*x11830*x11851))+((sj1*x11829))+(((-1.0)*x11847*x11848)));
evalcond[5]=(((cj4*x11846))+(((-1.0)*cj5*x11830*x11839))+(((-1.0)*cj5*x11830*x11836))+(((-1.0)*x11830*x11841))+(((-1.0)*x11834*x11847))+((sj1*x11828)));
evalcond[6]=(((x11837*x11839))+(((-1.0)*x11849))+(((0.01)*x11841))+(((-1.0)*px))+(((0.37429)*x11844))+((x11836*x11837))+(((-1.0)*x11832*x11836))+(((-1.0)*x11832*x11839))+((x11828*x11835))+x11850);
evalcond[7]=((((0.01)*x11843))+(((0.37429)*x11831))+((x11829*x11835))+(((-1.0)*x11832*x11842))+(((-1.0)*py))+(((-1.0)*x11832*x11833))+((x11837*x11842))+((x11833*x11837))+x11849+x11850);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11853=(cj6*sj4);
IkReal x11854=(cj5*r21);
IkReal x11855=(r22*sj5);
IkReal x11856=(cj4*cj6);
IkReal x11857=((1.0)*r21);
IkReal x11858=(cj6*sj5);
IkReal x11859=((1.0)*sj4);
IkReal x11860=(cj5*r22);
IkReal x11861=(cj5*r20*sj6);
IkReal x11862=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((r20*x11856))+(((-1.0)*x11855*x11859))+(((-1.0)*x11859*x11861))+(((-1.0)*x11853*x11854))+(((-1.0)*cj4*sj6*x11857))+(((-1.0)*cj1)));
evalcond[2]=((((0.01)*cj6*x11854))+(((-0.37429)*x11862))+(((0.01)*x11855))+(((0.01)*x11861))+(((-1.0)*pz))+(((-0.37429)*r21*x11858))+(((0.37429)*x11860))+(((-0.36442)*sj1)));
evalcond[3]=(((cj4*x11855))+sj1+((x11854*x11856))+((r20*x11853))+((cj4*x11861))+(((-1.0)*sj4*sj6*x11857)));
evalcond[4]=((((-1.0)*x11857*x11858))+(((-1.0)*x11862))+x11860);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11863=(cj6*sj5);
IkReal x11864=(sj5*sj6);
if( IKabs((((r00*x11864))+((r01*x11863))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r10*x11864))+(((-1.0)*r11*x11863)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x11864))+((r01*x11863))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r10*x11864))+(((-1.0)*r11*x11863))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x11864))+((r01*x11863))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r10*x11864))+(((-1.0)*r11*x11863))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x11865=IKcos(j0);
IkReal x11866=IKsin(j0);
IkReal x11867=((1.0)*sj4);
IkReal x11868=(cj5*r12);
IkReal x11869=((0.37429)*sj5);
IkReal x11870=(r10*sj6);
IkReal x11871=(r01*sj6);
IkReal x11872=((0.36442)*cj1);
IkReal x11873=(cj6*r01);
IkReal x11874=((0.01)*cj5);
IkReal x11875=(r12*sj5);
IkReal x11876=(cj6*r10);
IkReal x11877=(r00*sj6);
IkReal x11878=((1.0)*sj5);
IkReal x11879=(r02*sj5);
IkReal x11880=(cj6*r11);
IkReal x11881=(cj5*r02);
IkReal x11882=(cj4*cj5);
IkReal x11883=(cj6*r00);
IkReal x11884=((1.0)*cj4);
IkReal x11885=(r11*sj6);
IkReal x11886=((0.069)*x11866);
IkReal x11887=((0.069)*x11865);
IkReal x11888=(cj5*x11880);
IkReal x11889=((1.0)*x11865);
IkReal x11890=((1.0)*x11866);
evalcond[0]=((((-1.0)*x11873*x11878))+(((-1.0)*x11877*x11878))+x11881+x11866);
evalcond[1]=((((-1.0)*x11870*x11878))+(((-1.0)*x11878*x11880))+x11868+(((-1.0)*x11889)));
evalcond[2]=((((-1.0)*x11867*x11871))+((cj4*x11879))+((sj4*x11883))+((x11877*x11882))+((x11873*x11882))+(((-1.0)*cj1*x11889)));
evalcond[3]=((((-1.0)*cj1*x11890))+((x11880*x11882))+((cj4*x11875))+(((-1.0)*x11867*x11885))+((sj4*x11876))+((x11870*x11882)));
evalcond[4]=((((-1.0)*x11884*x11885))+(((-1.0)*cj5*x11867*x11870))+(((-1.0)*x11867*x11875))+((cj4*x11876))+(((-1.0)*x11867*x11888))+(((-1.0)*sj1*x11890)));
evalcond[5]=((((-1.0)*cj5*x11867*x11877))+(((-1.0)*cj5*x11867*x11873))+(((-1.0)*x11867*x11879))+(((-1.0)*x11871*x11884))+((cj4*x11883))+(((-1.0)*sj1*x11889)));
evalcond[6]=((((0.37429)*x11881))+(((0.01)*x11879))+(((-1.0)*px))+(((-1.0)*x11869*x11877))+(((-1.0)*x11869*x11873))+((x11874*x11877))+((x11873*x11874))+x11887+x11886+((x11865*x11872)));
evalcond[7]=(((x11866*x11872))+((x11874*x11880))+(((0.01)*x11875))+(((-1.0)*py))+(((-1.0)*x11869*x11870))+((x11870*x11874))+(((0.37429)*x11868))+(((-1.0)*x11869*x11880))+x11886+(((-1.0)*x11887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11891=(cj6*sj4);
IkReal x11892=(cj5*r21);
IkReal x11893=(r22*sj5);
IkReal x11894=(cj4*cj6);
IkReal x11895=((1.0)*r21);
IkReal x11896=(cj6*sj5);
IkReal x11897=((1.0)*sj4);
IkReal x11898=(cj5*r22);
IkReal x11899=(cj5*r20*sj6);
IkReal x11900=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(sj2+(((-1.0)*x11897*x11899))+(((-1.0)*cj4*sj6*x11895))+(((-1.0)*x11891*x11892))+(((-1.0)*x11893*x11897))+((r20*x11894)));
evalcond[2]=((((0.01)*x11899))+(((0.01)*x11893))+(((0.37429)*x11898))+(((-0.069)*cj2))+(((0.01)*cj6*x11892))+(((-1.0)*pz))+(((-0.37429)*x11900))+(((-0.37429)*r21*x11896)));
evalcond[3]=((((-1.0)*sj4*sj6*x11895))+((cj4*x11893))+((cj4*x11899))+((x11892*x11894))+((r20*x11891)));
evalcond[4]=((((-1.0)*x11895*x11896))+(((-1.0)*x11900))+x11898+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
IkReal x11901=(sj5*sj6);
IkReal x11902=(cj6*sj5);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs(((((-1.0)*r01*x11902))+(((-1.0)*r00*x11901))+((cj5*r02)))))+(IKabs(((((-1.0)*cj5*r12))+((r10*x11901))+((r11*x11902))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=1.0;
j1=0;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x11903=(cj6*r20);
IkReal x11904=(r22*sj5);
IkReal x11905=(cj4*cj6);
IkReal x11906=(cj5*r21);
IkReal x11907=((1.0)*r21);
IkReal x11908=(cj6*sj5);
IkReal x11909=(cj4*sj6);
IkReal x11910=(cj5*r22);
IkReal x11911=((1.0)*sj6);
IkReal x11912=(r20*sj5);
IkReal x11913=(cj5*sj4);
IkReal x11914=((1.0)*sj4*sj5);
IkReal x11915=(cj5*r20*sj6);
IkReal x11916=((1.0)*cj6*x11913);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*cj6*sj4*x11906))+(((-1.0)*r20*x11911*x11913))+((cj4*x11903))+(((-1.0)*sj4*x11904))+(((-1.0)*x11907*x11909)));
evalcond[2]=((((0.01)*cj6*x11906))+(((-0.37429)*sj6*x11912))+(((0.01)*x11904))+(((-1.0)*pz))+(((0.01)*x11915))+(((0.37429)*x11910))+(((-0.37429)*r21*x11908)));
evalcond[3]=((((-1.0)*r11*x11909))+(((-1.0)*r10*x11911*x11913))+((r10*x11905))+(((-1.0)*r12*x11914))+(((-1.0)*r11*x11916)));
evalcond[4]=((((-1.0)*r00*x11911*x11913))+(((-1.0)*r01*x11909))+((r00*x11905))+(((-1.0)*r02*x11914))+(((-1.0)*r01*x11916)));
evalcond[5]=(((x11905*x11906))+((cj4*x11904))+(((-1.0)*sj4*sj6*x11907))+((cj5*r20*x11909))+((sj4*x11903)));
evalcond[6]=(x11910+(((-1.0)*x11911*x11912))+(((-1.0)*x11907*x11908)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11917=(sj5*sj6);
IkReal x11918=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x11917))+(((-1.0)*r01*x11918))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r11*x11918))+((r10*x11917)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x11917))+(((-1.0)*r01*x11918))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r11*x11918))+((r10*x11917))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x11917))+(((-1.0)*r01*x11918))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r11*x11918))+((r10*x11917))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11919=IKcos(j0);
IkReal x11920=IKsin(j0);
IkReal x11921=((0.01)*cj5);
IkReal x11922=(cj6*r11);
IkReal x11923=(cj5*r12);
IkReal x11924=(r10*sj6);
IkReal x11925=((0.37429)*sj5);
IkReal x11926=((1.0)*r01);
IkReal x11927=(sj4*sj6);
IkReal x11928=(cj6*sj4);
IkReal x11929=(r00*sj6);
IkReal x11930=((1.0)*sj5);
IkReal x11931=(cj4*sj5);
IkReal x11932=(cj6*r01);
IkReal x11933=(cj5*r02);
IkReal x11934=(cj4*cj5);
IkReal x11935=((0.01)*sj5);
IkReal x11936=((1.0)*x11920);
evalcond[0]=(x11923+x11919+(((-1.0)*x11924*x11930))+(((-1.0)*x11922*x11930)));
evalcond[1]=(x11933+(((-1.0)*cj6*sj5*x11926))+(((-1.0)*x11936))+(((-1.0)*x11929*x11930)));
evalcond[2]=(((x11932*x11934))+((r02*x11931))+(((-1.0)*x11919))+((x11929*x11934))+(((-1.0)*x11926*x11927))+((r00*x11928)));
evalcond[3]=(((x11922*x11934))+((r10*x11928))+(((-1.0)*x11936))+((x11924*x11934))+((r12*x11931))+(((-1.0)*r11*x11927)));
evalcond[4]=(((r02*x11935))+(((0.37429)*x11933))+(((-1.0)*x11925*x11932))+(((-1.0)*x11925*x11929))+(((-1.0)*px))+((x11921*x11932))+((x11921*x11929))+(((0.43342)*x11919))+(((-0.069)*x11920)));
evalcond[5]=((((0.43342)*x11920))+(((0.37429)*x11923))+(((-1.0)*x11924*x11925))+(((-1.0)*py))+((x11921*x11922))+((x11921*x11924))+((r12*x11935))+(((-1.0)*x11922*x11925))+(((0.069)*x11919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11937=(cj6*r20);
IkReal x11938=(r22*sj5);
IkReal x11939=(cj4*cj6);
IkReal x11940=(cj5*r21);
IkReal x11941=((1.0)*r21);
IkReal x11942=(cj6*sj5);
IkReal x11943=(cj4*sj6);
IkReal x11944=(cj5*r22);
IkReal x11945=((1.0)*sj6);
IkReal x11946=(r20*sj5);
IkReal x11947=(cj5*sj4);
IkReal x11948=((1.0)*sj4*sj5);
IkReal x11949=(cj5*r20*sj6);
IkReal x11950=((1.0)*cj6*x11947);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+((cj4*x11937))+(((-1.0)*sj4*x11938))+(((-1.0)*cj6*sj4*x11940))+(((-1.0)*x11941*x11943))+(((-1.0)*r20*x11945*x11947)));
evalcond[2]=((((-0.37429)*sj6*x11946))+(((0.37429)*x11944))+(((0.01)*x11949))+(((-1.0)*pz))+(((-0.37429)*r21*x11942))+(((0.01)*cj6*x11940))+(((0.01)*x11938)));
evalcond[3]=((((-1.0)*r10*x11945*x11947))+((r10*x11939))+(((-1.0)*r11*x11943))+(((-1.0)*r12*x11948))+(((-1.0)*r11*x11950)));
evalcond[4]=((((-1.0)*r00*x11945*x11947))+(((-1.0)*r02*x11948))+(((-1.0)*r01*x11950))+(((-1.0)*r01*x11943))+((r00*x11939)));
evalcond[5]=(((cj4*x11938))+(((-1.0)*sj4*sj6*x11941))+((sj4*x11937))+((x11939*x11940))+((cj5*r20*x11943)));
evalcond[6]=(x11944+(((-1.0)*x11945*x11946))+(((-1.0)*x11941*x11942)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11951=(cj6*sj5);
IkReal x11952=(sj5*sj6);
if( IKabs((((r01*x11951))+((r00*x11952))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r11*x11951))+(((-1.0)*r10*x11952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x11951))+((r00*x11952))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r11*x11951))+(((-1.0)*r10*x11952))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x11951))+((r00*x11952))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r11*x11951))+(((-1.0)*r10*x11952))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11953=IKsin(j0);
IkReal x11954=IKcos(j0);
IkReal x11955=((0.01)*cj5);
IkReal x11956=(cj6*r11);
IkReal x11957=(cj5*r12);
IkReal x11958=(r10*sj6);
IkReal x11959=((0.37429)*sj5);
IkReal x11960=((1.0)*r01);
IkReal x11961=(sj4*sj6);
IkReal x11962=(cj6*sj4);
IkReal x11963=(r00*sj6);
IkReal x11964=((1.0)*sj5);
IkReal x11965=(cj4*sj5);
IkReal x11966=(cj6*r01);
IkReal x11967=(cj5*r02);
IkReal x11968=(cj4*cj5);
IkReal x11969=((0.01)*sj5);
IkReal x11970=((1.0)*x11954);
evalcond[0]=(x11967+x11953+(((-1.0)*cj6*sj5*x11960))+(((-1.0)*x11963*x11964)));
evalcond[1]=(x11957+(((-1.0)*x11958*x11964))+(((-1.0)*x11970))+(((-1.0)*x11956*x11964)));
evalcond[2]=(((r00*x11962))+((x11963*x11968))+((r02*x11965))+(((-1.0)*x11970))+((x11966*x11968))+(((-1.0)*x11960*x11961)));
evalcond[3]=(((x11958*x11968))+((r12*x11965))+(((-1.0)*x11953))+((r10*x11962))+(((-1.0)*r11*x11961))+((x11956*x11968)));
evalcond[4]=((((0.43342)*x11954))+(((-1.0)*x11959*x11966))+(((-1.0)*x11959*x11963))+((r02*x11969))+(((0.37429)*x11967))+(((-1.0)*px))+((x11955*x11966))+((x11955*x11963))+(((0.069)*x11953)));
evalcond[5]=((((0.43342)*x11953))+(((-0.069)*x11954))+(((0.37429)*x11957))+((r12*x11969))+(((-1.0)*py))+((x11955*x11958))+((x11955*x11956))+(((-1.0)*x11956*x11959))+(((-1.0)*x11958*x11959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11971=((1.0)*cj6);
IkReal x11972=(cj5*r21);
IkReal x11973=(cj6*r20);
IkReal x11974=(r22*sj5);
IkReal x11975=(r21*sj5);
IkReal x11976=((1.0)*sj6);
IkReal x11977=((1.0)*sj4);
IkReal x11978=(r20*sj5);
IkReal x11979=(cj5*r22);
IkReal x11980=(cj5*r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj4*r21*x11976))+(((-1.0)*x11974*x11977))+(((-1.0)*sj4*x11971*x11972))+(((-1.0)*cj5*r20*sj4*x11976))+((cj4*x11973)));
evalcond[2]=((-0.069)+(((0.01)*x11980))+(((0.01)*x11974))+(((0.37429)*x11979))+(((0.01)*cj6*x11972))+(((-1.0)*pz))+(((-0.37429)*cj6*x11975))+(((-0.37429)*sj6*x11978)));
evalcond[3]=(((cj4*cj6*x11972))+((cj4*x11980))+((sj4*x11973))+(((-1.0)*r21*sj4*x11976))+((cj4*x11974)));
evalcond[4]=((-1.0)+x11979+(((-1.0)*x11971*x11975))+(((-1.0)*x11976*x11978)));
evalcond[5]=(((cj5*r12))+(((-1.0)*r11*sj5*x11971))+(((-1.0)*r10*sj5*x11976)));
evalcond[6]=((((-1.0)*r00*sj5*x11976))+(((-1.0)*r01*sj5*x11971))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x11981=(cj6*sj4);
IkReal x11982=(cj4*sj5);
IkReal x11983=(cj4*cj5*cj6);
IkReal x11984=((1.0)*sj4*sj6);
IkReal x11985=(cj4*cj5*sj6);
if( IKabs((((r10*x11985))+((r10*x11981))+(((-1.0)*r11*x11984))+((r12*x11982))+((r11*x11983)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x11982))+(((-1.0)*r01*x11984))+((r00*x11985))+((r00*x11981))+((r01*x11983)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x11985))+((r10*x11981))+(((-1.0)*r11*x11984))+((r12*x11982))+((r11*x11983))))+IKsqr((((r02*x11982))+(((-1.0)*r01*x11984))+((r00*x11985))+((r00*x11981))+((r01*x11983))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x11985))+((r10*x11981))+(((-1.0)*r11*x11984))+((r12*x11982))+((r11*x11983))), (((r02*x11982))+(((-1.0)*r01*x11984))+((r00*x11985))+((r00*x11981))+((r01*x11983))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x11986=IKcos(j0);
IkReal x11987=IKsin(j0);
IkReal x11988=((1.0)*sj4);
IkReal x11989=(cj6*sj4);
IkReal x11990=(r10*sj6);
IkReal x11991=((0.37429)*sj5);
IkReal x11992=(r01*sj6);
IkReal x11993=((0.37429)*cj5);
IkReal x11994=((0.01)*cj5);
IkReal x11995=(r12*sj5);
IkReal x11996=(r00*sj6);
IkReal x11997=(r02*sj5);
IkReal x11998=(cj4*cj6);
IkReal x11999=(cj4*cj5);
IkReal x12000=((1.0)*cj4);
IkReal x12001=(r11*sj6);
IkReal x12002=((1.0)*x11987);
IkReal x12003=(cj5*cj6*r11);
IkReal x12004=(cj5*cj6*r01);
evalcond[0]=(((x11996*x11999))+(((-1.0)*x11988*x11992))+((cj4*x11997))+(((-1.0)*x11986))+((r00*x11989))+((cj5*r01*x11998)));
evalcond[1]=(((r10*x11989))+((cj5*r11*x11998))+((x11990*x11999))+(((-1.0)*x11988*x12001))+((cj4*x11995))+(((-1.0)*x12002)));
evalcond[2]=(x11986+(((-1.0)*x11988*x12003))+(((-1.0)*x11988*x11995))+(((-1.0)*x12000*x12001))+(((-1.0)*cj5*x11988*x11990))+((r10*x11998)));
evalcond[3]=((((-1.0)*x11988*x12004))+(((-1.0)*x11988*x11997))+(((-1.0)*x12002))+((r00*x11998))+(((-1.0)*cj5*x11988*x11996))+(((-1.0)*x11992*x12000)));
evalcond[4]=((((0.43342)*x11986))+((cj6*r01*x11994))+(((-1.0)*px))+(((-1.0)*x11991*x11996))+((x11994*x11996))+(((0.01)*x11997))+((r02*x11993))+(((-1.0)*cj6*r01*x11991)));
evalcond[5]=((((-1.0)*cj6*r11*x11991))+(((-1.0)*x11990*x11991))+((x11990*x11994))+(((0.43342)*x11987))+(((-1.0)*py))+((cj6*r11*x11994))+(((0.01)*x11995))+((r12*x11993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12005=((1.0)*cj6);
IkReal x12006=(cj5*r21);
IkReal x12007=(cj6*r20);
IkReal x12008=(r22*sj5);
IkReal x12009=(r21*sj5);
IkReal x12010=((1.0)*sj6);
IkReal x12011=((1.0)*sj4);
IkReal x12012=(r20*sj5);
IkReal x12013=(cj5*r22);
IkReal x12014=(cj5*r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x12008*x12011))+(((-1.0)*sj4*x12005*x12006))+((cj4*x12007))+(((-1.0)*cj4*r21*x12010))+(((-1.0)*cj5*r20*sj4*x12010)));
evalcond[2]=((0.069)+(((0.01)*cj6*x12006))+(((0.01)*x12014))+(((-1.0)*pz))+(((-0.37429)*cj6*x12009))+(((-0.37429)*sj6*x12012))+(((0.01)*x12008))+(((0.37429)*x12013)));
evalcond[3]=(((cj4*cj6*x12006))+((cj4*x12008))+((sj4*x12007))+((cj4*x12014))+(((-1.0)*r21*sj4*x12010)));
evalcond[4]=((1.0)+(((-1.0)*x12005*x12009))+(((-1.0)*x12010*x12012))+x12013);
evalcond[5]=(((cj5*r12))+(((-1.0)*r11*sj5*x12005))+(((-1.0)*r10*sj5*x12010)));
evalcond[6]=((((-1.0)*r01*sj5*x12005))+(((-1.0)*r00*sj5*x12010))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12015=(cj6*sj4);
IkReal x12016=(cj4*sj5);
IkReal x12017=(cj4*cj5*cj6);
IkReal x12018=((1.0)*sj4*sj6);
IkReal x12019=(cj4*cj5*sj6);
if( IKabs((((r12*x12016))+((r10*x12015))+((r10*x12019))+((r11*x12017))+(((-1.0)*r11*x12018)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x12018))+((r02*x12016))+((r00*x12015))+((r00*x12019))+((r01*x12017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x12016))+((r10*x12015))+((r10*x12019))+((r11*x12017))+(((-1.0)*r11*x12018))))+IKsqr(((((-1.0)*r01*x12018))+((r02*x12016))+((r00*x12015))+((r00*x12019))+((r01*x12017))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r12*x12016))+((r10*x12015))+((r10*x12019))+((r11*x12017))+(((-1.0)*r11*x12018))), ((((-1.0)*r01*x12018))+((r02*x12016))+((r00*x12015))+((r00*x12019))+((r01*x12017))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12020=IKsin(j0);
IkReal x12021=IKcos(j0);
IkReal x12022=((1.0)*sj4);
IkReal x12023=(cj6*sj4);
IkReal x12024=(r10*sj6);
IkReal x12025=((0.37429)*sj5);
IkReal x12026=(r01*sj6);
IkReal x12027=((0.37429)*cj5);
IkReal x12028=((0.01)*cj5);
IkReal x12029=(r12*sj5);
IkReal x12030=(r00*sj6);
IkReal x12031=(r02*sj5);
IkReal x12032=(cj4*cj6);
IkReal x12033=(cj4*cj5);
IkReal x12034=((1.0)*cj4);
IkReal x12035=(r11*sj6);
IkReal x12036=((1.0)*x12021);
IkReal x12037=(cj5*cj6*r11);
IkReal x12038=(cj5*cj6*r01);
evalcond[0]=(((cj4*x12031))+(((-1.0)*x12036))+((x12030*x12033))+((r00*x12023))+((cj5*r01*x12032))+(((-1.0)*x12022*x12026)));
evalcond[1]=(((cj5*r11*x12032))+((cj4*x12029))+(((-1.0)*x12020))+((x12024*x12033))+((r10*x12023))+(((-1.0)*x12022*x12035)));
evalcond[2]=((((-1.0)*cj5*x12022*x12030))+(((-1.0)*x12026*x12034))+((r00*x12032))+x12020+(((-1.0)*x12022*x12031))+(((-1.0)*x12022*x12038)));
evalcond[3]=((((-1.0)*cj5*x12022*x12024))+(((-1.0)*x12034*x12035))+(((-1.0)*x12036))+((r10*x12032))+(((-1.0)*x12022*x12029))+(((-1.0)*x12022*x12037)));
evalcond[4]=((((-1.0)*x12025*x12030))+(((-1.0)*px))+((x12028*x12030))+((r02*x12027))+(((-1.0)*cj6*r01*x12025))+(((0.01)*x12031))+((cj6*r01*x12028))+(((0.43342)*x12021)));
evalcond[5]=((((-1.0)*cj6*r11*x12025))+(((-1.0)*x12024*x12025))+(((-1.0)*py))+((cj6*r11*x12028))+((r12*x12027))+((x12024*x12028))+(((0.01)*x12029))+(((0.43342)*x12020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12039=((1.0)*sj6);
IkReal x12040=(cj5*sj4);
CheckValue<IkReal> x12041=IKPowWithIntegerCheck(cj2,-1);
if(!x12041.valid){
continue;
}
CheckValue<IkReal> x12042=IKPowWithIntegerCheck(sj2,-1);
if(!x12042.valid){
continue;
}
if( IKabs(((x12041.value)*(((((-1.0)*cj6*r01*x12040))+(((-1.0)*r00*x12039*x12040))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*x12039))+(((-1.0)*r02*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12042.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12041.value)*(((((-1.0)*cj6*r01*x12040))+(((-1.0)*r00*x12039*x12040))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*x12039))+(((-1.0)*r02*sj4*sj5))))))+IKsqr(((x12042.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12041.value)*(((((-1.0)*cj6*r01*x12040))+(((-1.0)*r00*x12039*x12040))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*x12039))+(((-1.0)*r02*sj4*sj5))))), ((x12042.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12043=IKcos(j0);
IkReal x12044=IKsin(j0);
IkReal x12045=((1.0)*sj4);
IkReal x12046=(cj5*r12);
IkReal x12047=((0.37429)*sj5);
IkReal x12048=(r10*sj6);
IkReal x12049=(r01*sj6);
IkReal x12050=((0.069)*sj2);
IkReal x12051=(cj6*r01);
IkReal x12052=((0.01)*cj5);
IkReal x12053=(r12*sj5);
IkReal x12054=(cj6*r10);
IkReal x12055=(r00*sj6);
IkReal x12056=((1.0)*sj5);
IkReal x12057=(r02*sj5);
IkReal x12058=(cj6*r11);
IkReal x12059=(cj5*r02);
IkReal x12060=(cj4*cj5);
IkReal x12061=(cj6*r00);
IkReal x12062=((1.0)*cj4);
IkReal x12063=(r11*sj6);
IkReal x12064=(cj5*x12058);
IkReal x12065=((1.0)*x12044);
evalcond[0]=((((-1.0)*x12048*x12056))+((sj2*x12043))+x12046+(((-1.0)*x12056*x12058)));
evalcond[1]=((((-1.0)*x12055*x12056))+(((-1.0)*sj2*x12065))+x12059+(((-1.0)*x12051*x12056)));
evalcond[2]=(((cj4*x12057))+(((-1.0)*x12045*x12049))+(((-1.0)*x12043))+((x12055*x12060))+((x12051*x12060))+((sj4*x12061)));
evalcond[3]=(((cj4*x12053))+((sj4*x12054))+((x12048*x12060))+(((-1.0)*x12045*x12063))+(((-1.0)*x12065))+((x12058*x12060)));
evalcond[4]=(((cj4*x12054))+(((-1.0)*x12045*x12053))+(((-1.0)*x12062*x12063))+(((-1.0)*cj5*x12045*x12048))+((cj2*x12043))+(((-1.0)*x12045*x12064)));
evalcond[5]=((((-1.0)*x12045*x12057))+(((-1.0)*cj5*x12045*x12055))+(((-1.0)*cj5*x12045*x12051))+((cj4*x12061))+(((-1.0)*cj2*x12065))+(((-1.0)*x12049*x12062)));
evalcond[6]=((((0.37429)*x12059))+(((0.43342)*x12043))+((x12052*x12055))+(((-1.0)*px))+(((-1.0)*x12044*x12050))+((x12051*x12052))+(((0.01)*x12057))+(((-1.0)*x12047*x12055))+(((-1.0)*x12047*x12051)));
evalcond[7]=(((x12043*x12050))+(((0.43342)*x12044))+((x12052*x12058))+(((-1.0)*x12047*x12048))+(((-1.0)*py))+(((0.37429)*x12046))+(((0.01)*x12053))+(((-1.0)*x12047*x12058))+((x12048*x12052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12066=(cj6*r11);
IkReal x12067=(cj4*cj5);
IkReal x12068=(r10*sj6);
CheckValue<IkReal> x12069=IKPowWithIntegerCheck(sj2,-1);
if(!x12069.valid){
continue;
}
if( IKabs((((x12067*x12068))+((cj6*r10*sj4))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))+((x12066*x12067)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12069.value)*(((((-1.0)*cj5*r12))+((sj5*x12066))+((sj5*x12068)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x12067*x12068))+((cj6*r10*sj4))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))+((x12066*x12067))))+IKsqr(((x12069.value)*(((((-1.0)*cj5*r12))+((sj5*x12066))+((sj5*x12068))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x12067*x12068))+((cj6*r10*sj4))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))+((x12066*x12067))), ((x12069.value)*(((((-1.0)*cj5*r12))+((sj5*x12066))+((sj5*x12068))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12070=IKcos(j0);
IkReal x12071=IKsin(j0);
IkReal x12072=((1.0)*sj4);
IkReal x12073=(cj5*r12);
IkReal x12074=((0.37429)*sj5);
IkReal x12075=(r10*sj6);
IkReal x12076=(r01*sj6);
IkReal x12077=((0.069)*sj2);
IkReal x12078=(cj6*r01);
IkReal x12079=((0.01)*cj5);
IkReal x12080=(r12*sj5);
IkReal x12081=(cj6*r10);
IkReal x12082=(r00*sj6);
IkReal x12083=((1.0)*sj5);
IkReal x12084=(r02*sj5);
IkReal x12085=(cj6*r11);
IkReal x12086=(cj5*r02);
IkReal x12087=(cj4*cj5);
IkReal x12088=(cj6*r00);
IkReal x12089=((1.0)*cj4);
IkReal x12090=(r11*sj6);
IkReal x12091=(cj5*x12085);
IkReal x12092=((1.0)*x12071);
evalcond[0]=((((-1.0)*x12075*x12083))+((sj2*x12070))+x12073+(((-1.0)*x12083*x12085)));
evalcond[1]=((((-1.0)*sj2*x12092))+x12086+(((-1.0)*x12082*x12083))+(((-1.0)*x12078*x12083)));
evalcond[2]=((((-1.0)*x12070))+((x12082*x12087))+(((-1.0)*x12072*x12076))+((sj4*x12088))+((cj4*x12084))+((x12078*x12087)));
evalcond[3]=(((sj4*x12081))+(((-1.0)*x12072*x12090))+((x12075*x12087))+((cj4*x12080))+(((-1.0)*x12092))+((x12085*x12087)));
evalcond[4]=((((-1.0)*x12089*x12090))+(((-1.0)*x12072*x12091))+((cj4*x12081))+(((-1.0)*x12072*x12080))+((cj2*x12070))+(((-1.0)*cj5*x12072*x12075)));
evalcond[5]=((((-1.0)*x12076*x12089))+(((-1.0)*cj5*x12072*x12082))+((cj4*x12088))+(((-1.0)*x12072*x12084))+(((-1.0)*cj2*x12092))+(((-1.0)*cj5*x12072*x12078)));
evalcond[6]=((((0.01)*x12084))+(((-1.0)*x12074*x12082))+((x12079*x12082))+(((-1.0)*px))+(((0.37429)*x12086))+((x12078*x12079))+(((0.43342)*x12070))+(((-1.0)*x12071*x12077))+(((-1.0)*x12074*x12078)));
evalcond[7]=((((0.01)*x12080))+(((0.37429)*x12073))+(((-1.0)*x12074*x12085))+((x12070*x12077))+((x12079*x12085))+((x12075*x12079))+(((-1.0)*py))+(((0.43342)*x12071))+(((-1.0)*x12074*x12075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12093=(sj5*sj6);
IkReal x12094=(cj6*sj5);
CheckValue<IkReal> x12095=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x12095.valid){
continue;
}
CheckValue<IkReal> x12096 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x12094))+(((-1.0)*r00*x12093))+((cj5*r02)))),(((r11*x12094))+(((-1.0)*cj5*r12))+((r10*x12093))),IKFAST_ATAN2_MAGTHRESH);
if(!x12096.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12095.value)))+(x12096.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12097=IKcos(j0);
IkReal x12098=IKsin(j0);
IkReal x12099=((1.0)*sj4);
IkReal x12100=(cj5*r12);
IkReal x12101=((0.37429)*sj5);
IkReal x12102=(r10*sj6);
IkReal x12103=(r01*sj6);
IkReal x12104=((0.069)*sj2);
IkReal x12105=(cj6*r01);
IkReal x12106=((0.01)*cj5);
IkReal x12107=(r12*sj5);
IkReal x12108=(cj6*r10);
IkReal x12109=(r00*sj6);
IkReal x12110=((1.0)*sj5);
IkReal x12111=(r02*sj5);
IkReal x12112=(cj6*r11);
IkReal x12113=(cj5*r02);
IkReal x12114=(cj4*cj5);
IkReal x12115=(cj6*r00);
IkReal x12116=((1.0)*cj4);
IkReal x12117=(r11*sj6);
IkReal x12118=(cj5*x12112);
IkReal x12119=((1.0)*x12098);
evalcond[0]=(((sj2*x12097))+(((-1.0)*x12102*x12110))+x12100+(((-1.0)*x12110*x12112)));
evalcond[1]=(x12113+(((-1.0)*sj2*x12119))+(((-1.0)*x12105*x12110))+(((-1.0)*x12109*x12110)));
evalcond[2]=(((x12105*x12114))+(((-1.0)*x12097))+((x12109*x12114))+((sj4*x12115))+(((-1.0)*x12099*x12103))+((cj4*x12111)));
evalcond[3]=(((sj4*x12108))+((x12112*x12114))+(((-1.0)*x12099*x12117))+(((-1.0)*x12119))+((x12102*x12114))+((cj4*x12107)));
evalcond[4]=((((-1.0)*cj5*x12099*x12102))+(((-1.0)*x12116*x12117))+(((-1.0)*x12099*x12118))+(((-1.0)*x12099*x12107))+((cj4*x12108))+((cj2*x12097)));
evalcond[5]=((((-1.0)*cj5*x12099*x12109))+(((-1.0)*cj5*x12099*x12105))+(((-1.0)*x12099*x12111))+(((-1.0)*x12103*x12116))+((cj4*x12115))+(((-1.0)*cj2*x12119)));
evalcond[6]=(((x12105*x12106))+(((-1.0)*x12101*x12109))+(((-1.0)*x12101*x12105))+((x12106*x12109))+(((0.37429)*x12113))+(((0.43342)*x12097))+(((-1.0)*px))+(((-1.0)*x12098*x12104))+(((0.01)*x12111)));
evalcond[7]=((((-1.0)*x12101*x12112))+(((-1.0)*x12101*x12102))+((x12106*x12112))+(((0.43342)*x12098))+(((0.37429)*x12100))+(((-1.0)*py))+((x12097*x12104))+((x12102*x12106))+(((0.01)*x12107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12120=(cj6*sj4);
IkReal x12121=(cj5*r21);
IkReal x12122=(r22*sj5);
IkReal x12123=(cj4*cj6);
IkReal x12124=((1.0)*r21);
IkReal x12125=(cj6*sj5);
IkReal x12126=((1.0)*sj4);
IkReal x12127=(cj5*r22);
IkReal x12128=(cj5*r20*sj6);
IkReal x12129=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+(((-1.0)*cj4*sj6*x12124))+(((-1.0)*x12120*x12121))+(((-1.0)*x12122*x12126))+((r20*x12123))+(((-1.0)*x12126*x12128)));
evalcond[2]=((((0.37429)*x12127))+(((-0.37429)*x12129))+(((0.069)*cj2))+(((0.01)*x12122))+(((0.01)*x12128))+(((-1.0)*pz))+(((0.01)*cj6*x12121))+(((-0.37429)*r21*x12125)));
evalcond[3]=((((-1.0)*sj4*sj6*x12124))+((cj4*x12128))+((cj4*x12122))+((x12121*x12123))+((r20*x12120)));
evalcond[4]=(cj2+x12127+(((-1.0)*x12124*x12125))+(((-1.0)*x12129)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
IkReal x12130=(sj5*sj6);
IkReal x12131=(cj6*sj5);
j0eval[0]=sj2;
j0eval[1]=IKsign(sj2);
j0eval[2]=((IKabs(((((-1.0)*cj5*r12))+((r11*x12131))+((r10*x12130)))))+(IKabs(((((-1.0)*r00*x12130))+(((-1.0)*r01*x12131))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj1=0;
cj1=-1.0;
j1=3.14159265358979;
j0eval[0]=cj2;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x12132=(cj6*r20);
IkReal x12133=(r22*sj5);
IkReal x12134=(cj4*cj6);
IkReal x12135=(cj5*r21);
IkReal x12136=((1.0)*r21);
IkReal x12137=(cj6*sj5);
IkReal x12138=(cj4*sj6);
IkReal x12139=(cj5*r22);
IkReal x12140=((1.0)*sj6);
IkReal x12141=(r20*sj5);
IkReal x12142=(cj5*sj4);
IkReal x12143=((1.0)*sj4*sj5);
IkReal x12144=(cj5*r20*sj6);
IkReal x12145=((1.0)*cj6*x12142);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((-1.0)+(((-1.0)*cj6*sj4*x12135))+(((-1.0)*sj4*x12133))+(((-1.0)*x12136*x12138))+(((-1.0)*r20*x12140*x12142))+((cj4*x12132)));
evalcond[2]=((((0.37429)*x12139))+(((0.01)*x12144))+(((0.01)*x12133))+(((-1.0)*pz))+(((-0.37429)*r21*x12137))+(((0.01)*cj6*x12135))+(((-0.37429)*sj6*x12141)));
evalcond[3]=((((-1.0)*r10*x12140*x12142))+(((-1.0)*r12*x12143))+(((-1.0)*r11*x12145))+(((-1.0)*r11*x12138))+((r10*x12134)));
evalcond[4]=((((-1.0)*r02*x12143))+((r00*x12134))+(((-1.0)*r01*x12145))+(((-1.0)*r00*x12140*x12142))+(((-1.0)*r01*x12138)));
evalcond[5]=(((cj5*r20*x12138))+(((-1.0)*sj4*sj6*x12136))+((x12134*x12135))+((sj4*x12132))+((cj4*x12133)));
evalcond[6]=((((-1.0)*x12140*x12141))+x12139+(((-1.0)*x12136*x12137)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12146=(sj5*sj6);
IkReal x12147=(cj6*sj5);
if( IKabs(((((-1.0)*r00*x12146))+(((-1.0)*r01*x12147))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r12))+((r10*x12146))+((r11*x12147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x12146))+(((-1.0)*r01*x12147))+((cj5*r02))))+IKsqr(((((-1.0)*cj5*r12))+((r10*x12146))+((r11*x12147))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x12146))+(((-1.0)*r01*x12147))+((cj5*r02))), ((((-1.0)*cj5*r12))+((r10*x12146))+((r11*x12147))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12148=IKcos(j0);
IkReal x12149=IKsin(j0);
IkReal x12150=((0.01)*cj5);
IkReal x12151=(cj6*r11);
IkReal x12152=(cj5*r12);
IkReal x12153=(r10*sj6);
IkReal x12154=((0.37429)*sj5);
IkReal x12155=((1.0)*r01);
IkReal x12156=(sj4*sj6);
IkReal x12157=(cj6*sj4);
IkReal x12158=(r00*sj6);
IkReal x12159=((1.0)*sj5);
IkReal x12160=(cj4*sj5);
IkReal x12161=(cj6*r01);
IkReal x12162=(cj5*r02);
IkReal x12163=(cj4*cj5);
IkReal x12164=((0.01)*sj5);
evalcond[0]=(x12148+x12152+(((-1.0)*x12153*x12159))+(((-1.0)*x12151*x12159)));
evalcond[1]=((((-1.0)*x12149))+x12162+(((-1.0)*cj6*sj5*x12155))+(((-1.0)*x12158*x12159)));
evalcond[2]=(((r02*x12160))+((x12158*x12163))+x12148+((r00*x12157))+((x12161*x12163))+(((-1.0)*x12155*x12156)));
evalcond[3]=(((r10*x12157))+x12149+(((-1.0)*r11*x12156))+((x12151*x12163))+((x12153*x12163))+((r12*x12160)));
evalcond[4]=(((r02*x12164))+(((0.37429)*x12162))+((x12150*x12158))+(((-1.0)*px))+(((-1.0)*x12154*x12161))+(((-1.0)*x12154*x12158))+(((-0.29542)*x12148))+((x12150*x12161))+(((-0.069)*x12149)));
evalcond[5]=(((x12150*x12151))+((x12150*x12153))+(((-1.0)*py))+(((-1.0)*x12153*x12154))+(((0.37429)*x12152))+(((-0.29542)*x12149))+(((-1.0)*x12151*x12154))+(((0.069)*x12148))+((r12*x12164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12165=(cj6*r20);
IkReal x12166=(r22*sj5);
IkReal x12167=(cj4*cj6);
IkReal x12168=(cj5*r21);
IkReal x12169=((1.0)*r21);
IkReal x12170=(cj6*sj5);
IkReal x12171=(cj4*sj6);
IkReal x12172=(cj5*r22);
IkReal x12173=((1.0)*sj6);
IkReal x12174=(r20*sj5);
IkReal x12175=(cj5*sj4);
IkReal x12176=((1.0)*sj4*sj5);
IkReal x12177=(cj5*r20*sj6);
IkReal x12178=((1.0)*cj6*x12175);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((1.0)+(((-1.0)*r20*x12173*x12175))+(((-1.0)*sj4*x12166))+(((-1.0)*cj6*sj4*x12168))+((cj4*x12165))+(((-1.0)*x12169*x12171)));
evalcond[2]=((((0.37429)*x12172))+(((-0.37429)*sj6*x12174))+(((0.01)*cj6*x12168))+(((-1.0)*pz))+(((-0.37429)*r21*x12170))+(((0.01)*x12166))+(((0.01)*x12177)));
evalcond[3]=((((-1.0)*r10*x12173*x12175))+((r10*x12167))+(((-1.0)*r11*x12171))+(((-1.0)*r11*x12178))+(((-1.0)*r12*x12176)));
evalcond[4]=((((-1.0)*r00*x12173*x12175))+(((-1.0)*r01*x12171))+(((-1.0)*r01*x12178))+((r00*x12167))+(((-1.0)*r02*x12176)));
evalcond[5]=(((sj4*x12165))+((cj5*r20*x12171))+((cj4*x12166))+(((-1.0)*sj4*sj6*x12169))+((x12167*x12168)));
evalcond[6]=((((-1.0)*x12173*x12174))+x12172+(((-1.0)*x12169*x12170)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12179=(cj6*sj5);
IkReal x12180=(sj5*sj6);
if( IKabs((((r01*x12179))+((r00*x12180))+(((-1.0)*cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj5*r12))+(((-1.0)*r11*x12179))+(((-1.0)*r10*x12180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x12179))+((r00*x12180))+(((-1.0)*cj5*r02))))+IKsqr((((cj5*r12))+(((-1.0)*r11*x12179))+(((-1.0)*r10*x12180))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x12179))+((r00*x12180))+(((-1.0)*cj5*r02))), (((cj5*r12))+(((-1.0)*r11*x12179))+(((-1.0)*r10*x12180))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12181=IKcos(j0);
IkReal x12182=IKsin(j0);
IkReal x12183=((0.01)*cj5);
IkReal x12184=(cj6*r11);
IkReal x12185=(cj5*r12);
IkReal x12186=(r10*sj6);
IkReal x12187=((0.37429)*sj5);
IkReal x12188=((1.0)*r01);
IkReal x12189=(sj4*sj6);
IkReal x12190=(cj6*sj4);
IkReal x12191=(r00*sj6);
IkReal x12192=((1.0)*sj5);
IkReal x12193=(cj4*sj5);
IkReal x12194=(cj6*r01);
IkReal x12195=(cj5*r02);
IkReal x12196=(cj4*cj5);
IkReal x12197=((0.01)*sj5);
evalcond[0]=((((-1.0)*cj6*sj5*x12188))+x12182+x12195+(((-1.0)*x12191*x12192)));
evalcond[1]=(x12185+(((-1.0)*x12186*x12192))+(((-1.0)*x12181))+(((-1.0)*x12184*x12192)));
evalcond[2]=(((x12191*x12196))+((x12194*x12196))+x12181+((r02*x12193))+(((-1.0)*x12188*x12189))+((r00*x12190)));
evalcond[3]=(((r12*x12193))+(((-1.0)*r11*x12189))+((x12186*x12196))+x12182+((x12184*x12196))+((r10*x12190)));
evalcond[4]=((((-0.29542)*x12181))+((x12183*x12194))+((x12183*x12191))+(((-1.0)*px))+(((-1.0)*x12187*x12191))+(((-1.0)*x12187*x12194))+((r02*x12197))+(((0.069)*x12182))+(((0.37429)*x12195)));
evalcond[5]=((((0.37429)*x12185))+((r12*x12197))+(((-0.069)*x12181))+(((-0.29542)*x12182))+(((-1.0)*py))+((x12183*x12184))+((x12183*x12186))+(((-1.0)*x12186*x12187))+(((-1.0)*x12184*x12187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12198=((1.0)*cj6);
IkReal x12199=(cj5*r21);
IkReal x12200=(cj6*r20);
IkReal x12201=(r22*sj5);
IkReal x12202=(r21*sj5);
IkReal x12203=((1.0)*sj6);
IkReal x12204=((1.0)*sj4);
IkReal x12205=(r20*sj5);
IkReal x12206=(cj5*r22);
IkReal x12207=(cj5*r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((cj4*x12200))+(((-1.0)*cj5*r20*sj4*x12203))+(((-1.0)*x12201*x12204))+(((-1.0)*cj4*r21*x12203))+(((-1.0)*sj4*x12198*x12199)));
evalcond[2]=((0.069)+(((0.01)*cj6*x12199))+(((-0.37429)*cj6*x12202))+(((-0.37429)*sj6*x12205))+(((-1.0)*pz))+(((0.01)*x12201))+(((0.01)*x12207))+(((0.37429)*x12206)));
evalcond[3]=(((cj4*x12201))+((cj4*x12207))+((cj4*cj6*x12199))+((sj4*x12200))+(((-1.0)*r21*sj4*x12203)));
evalcond[4]=((1.0)+x12206+(((-1.0)*x12203*x12205))+(((-1.0)*x12198*x12202)));
evalcond[5]=(((cj5*r12))+(((-1.0)*r10*sj5*x12203))+(((-1.0)*r11*sj5*x12198)));
evalcond[6]=((((-1.0)*r00*sj5*x12203))+(((-1.0)*r01*sj5*x12198))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12208=(cj6*sj4);
IkReal x12209=(cj5*r11);
IkReal x12210=(r11*sj6);
IkReal x12211=(r12*sj5);
IkReal x12212=((1.0)*r10);
IkReal x12213=(cj4*cj6);
IkReal x12214=(cj5*sj6);
if( IKabs(((((-1.0)*x12209*x12213))+((sj4*x12210))+(((-1.0)*cj4*x12211))+(((-1.0)*cj4*x12212*x12214))+(((-1.0)*x12208*x12212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*x12210))+(((-1.0)*x12212*x12213))+((sj4*x12211))+((x12208*x12209))+((r10*sj4*x12214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12209*x12213))+((sj4*x12210))+(((-1.0)*cj4*x12211))+(((-1.0)*cj4*x12212*x12214))+(((-1.0)*x12208*x12212))))+IKsqr((((cj4*x12210))+(((-1.0)*x12212*x12213))+((sj4*x12211))+((x12208*x12209))+((r10*sj4*x12214))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x12209*x12213))+((sj4*x12210))+(((-1.0)*cj4*x12211))+(((-1.0)*cj4*x12212*x12214))+(((-1.0)*x12208*x12212))), (((cj4*x12210))+(((-1.0)*x12212*x12213))+((sj4*x12211))+((x12208*x12209))+((r10*sj4*x12214))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12215=IKcos(j0);
IkReal x12216=IKsin(j0);
IkReal x12217=((1.0)*sj4);
IkReal x12218=(cj6*sj4);
IkReal x12219=(r10*sj6);
IkReal x12220=((0.37429)*sj5);
IkReal x12221=(r01*sj6);
IkReal x12222=((0.01)*cj5);
IkReal x12223=(r12*sj5);
IkReal x12224=(r00*sj6);
IkReal x12225=(r02*sj5);
IkReal x12226=((0.37429)*cj5);
IkReal x12227=(cj4*cj6);
IkReal x12228=(cj4*cj5);
IkReal x12229=((1.0)*cj4);
IkReal x12230=(r11*sj6);
IkReal x12231=(cj5*cj6*r11);
IkReal x12232=(cj5*cj6*r01);
evalcond[0]=(((cj4*x12225))+x12215+(((-1.0)*x12217*x12221))+((x12224*x12228))+((r00*x12218))+((cj5*r01*x12227)));
evalcond[1]=((((-1.0)*x12217*x12230))+((cj4*x12223))+((cj5*r11*x12227))+((x12219*x12228))+x12216+((r10*x12218)));
evalcond[2]=((((-1.0)*x12217*x12231))+(((-1.0)*cj5*x12217*x12219))+(((-1.0)*x12229*x12230))+x12215+((r10*x12227))+(((-1.0)*x12217*x12223)));
evalcond[3]=((((-1.0)*cj5*x12217*x12224))+(((-1.0)*x12217*x12232))+(((-1.0)*x12217*x12225))+((r00*x12227))+(((-1.0)*x12221*x12229))+(((-1.0)*x12216)));
evalcond[4]=((((-1.0)*cj6*r01*x12220))+((cj6*r01*x12222))+(((-1.0)*x12220*x12224))+(((-0.29542)*x12215))+((r02*x12226))+(((-1.0)*px))+((x12222*x12224))+(((0.01)*x12225)));
evalcond[5]=((((-0.29542)*x12216))+((x12219*x12222))+((cj6*r11*x12222))+(((-1.0)*py))+(((-1.0)*cj6*r11*x12220))+(((-1.0)*x12219*x12220))+(((0.01)*x12223))+((r12*x12226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12233=((1.0)*cj6);
IkReal x12234=(cj5*r21);
IkReal x12235=(cj6*r20);
IkReal x12236=(r22*sj5);
IkReal x12237=(r21*sj5);
IkReal x12238=((1.0)*sj6);
IkReal x12239=((1.0)*sj4);
IkReal x12240=(r20*sj5);
IkReal x12241=(cj5*r22);
IkReal x12242=(cj5*r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj5*r20*sj4*x12238))+(((-1.0)*sj4*x12233*x12234))+((cj4*x12235))+(((-1.0)*x12236*x12239))+(((-1.0)*cj4*r21*x12238)));
evalcond[2]=((-0.069)+(((0.01)*x12242))+(((0.01)*x12236))+(((-1.0)*pz))+(((-0.37429)*cj6*x12237))+(((-0.37429)*sj6*x12240))+(((0.37429)*x12241))+(((0.01)*cj6*x12234)));
evalcond[3]=(((sj4*x12235))+((cj4*x12242))+((cj4*cj6*x12234))+((cj4*x12236))+(((-1.0)*r21*sj4*x12238)));
evalcond[4]=((-1.0)+x12241+(((-1.0)*x12238*x12240))+(((-1.0)*x12233*x12237)));
evalcond[5]=(((cj5*r12))+(((-1.0)*r11*sj5*x12233))+(((-1.0)*r10*sj5*x12238)));
evalcond[6]=((((-1.0)*r00*sj5*x12238))+(((-1.0)*r01*sj5*x12233))+((cj5*r02)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12243=(cj5*r01);
IkReal x12244=(cj4*sj6);
IkReal x12245=((1.0)*r00);
IkReal x12246=(cj6*sj4);
IkReal x12247=(r02*sj5);
IkReal x12248=(sj4*sj6);
IkReal x12249=((1.0)*cj4*cj6);
if( IKabs((((sj4*x12247))+((cj5*r00*x12248))+((r01*x12244))+((x12243*x12246))+(((-1.0)*cj4*cj6*x12245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*x12247))+(((-1.0)*cj5*x12244*x12245))+(((-1.0)*x12245*x12246))+((r01*x12248))+(((-1.0)*x12243*x12249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x12247))+((cj5*r00*x12248))+((r01*x12244))+((x12243*x12246))+(((-1.0)*cj4*cj6*x12245))))+IKsqr(((((-1.0)*cj4*x12247))+(((-1.0)*cj5*x12244*x12245))+(((-1.0)*x12245*x12246))+((r01*x12248))+(((-1.0)*x12243*x12249))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((sj4*x12247))+((cj5*r00*x12248))+((r01*x12244))+((x12243*x12246))+(((-1.0)*cj4*cj6*x12245))), ((((-1.0)*cj4*x12247))+(((-1.0)*cj5*x12244*x12245))+(((-1.0)*x12245*x12246))+((r01*x12248))+(((-1.0)*x12243*x12249))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12250=IKsin(j0);
IkReal x12251=IKcos(j0);
IkReal x12252=((1.0)*sj4);
IkReal x12253=(cj6*sj4);
IkReal x12254=(r10*sj6);
IkReal x12255=((0.37429)*sj5);
IkReal x12256=(r01*sj6);
IkReal x12257=((0.01)*cj5);
IkReal x12258=(r12*sj5);
IkReal x12259=(r00*sj6);
IkReal x12260=(r02*sj5);
IkReal x12261=((0.37429)*cj5);
IkReal x12262=(cj4*cj6);
IkReal x12263=(cj4*cj5);
IkReal x12264=((1.0)*cj4);
IkReal x12265=(r11*sj6);
IkReal x12266=(cj5*cj6*r11);
IkReal x12267=(cj5*cj6*r01);
evalcond[0]=(x12251+((cj4*x12260))+((r00*x12253))+(((-1.0)*x12252*x12256))+((cj5*r01*x12262))+((x12259*x12263)));
evalcond[1]=(((r10*x12253))+x12250+((cj4*x12258))+((x12254*x12263))+(((-1.0)*x12252*x12265))+((cj5*r11*x12262)));
evalcond[2]=((((-1.0)*x12256*x12264))+(((-1.0)*cj5*x12252*x12259))+x12250+((r00*x12262))+(((-1.0)*x12252*x12267))+(((-1.0)*x12252*x12260)));
evalcond[3]=((((-1.0)*cj5*x12252*x12254))+((r10*x12262))+(((-1.0)*x12264*x12265))+(((-1.0)*x12251))+(((-1.0)*x12252*x12258))+(((-1.0)*x12252*x12266)));
evalcond[4]=((((-0.29542)*x12251))+((x12257*x12259))+(((0.01)*x12260))+(((-1.0)*cj6*r01*x12255))+(((-1.0)*px))+(((-1.0)*x12255*x12259))+((cj6*r01*x12257))+((r02*x12261)));
evalcond[5]=((((-1.0)*cj6*r11*x12255))+(((-0.29542)*x12250))+((r12*x12261))+(((0.01)*x12258))+(((-1.0)*py))+(((-1.0)*x12254*x12255))+((x12254*x12257))+((cj6*r11*x12257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12268=((1.0)*sj6);
IkReal x12269=(cj5*sj4);
CheckValue<IkReal> x12270=IKPowWithIntegerCheck(cj2,-1);
if(!x12270.valid){
continue;
}
CheckValue<IkReal> x12271=IKPowWithIntegerCheck(sj2,-1);
if(!x12271.valid){
continue;
}
if( IKabs(((x12270.value)*(((((-1.0)*r00*x12268*x12269))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*x12268))+(((-1.0)*r02*sj4*sj5))+(((-1.0)*cj6*r01*x12269)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12271.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12270.value)*(((((-1.0)*r00*x12268*x12269))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*x12268))+(((-1.0)*r02*sj4*sj5))+(((-1.0)*cj6*r01*x12269))))))+IKsqr(((x12271.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12270.value)*(((((-1.0)*r00*x12268*x12269))+((cj4*cj6*r00))+(((-1.0)*cj4*r01*x12268))+(((-1.0)*r02*sj4*sj5))+(((-1.0)*cj6*r01*x12269))))), ((x12271.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12272=IKcos(j0);
IkReal x12273=IKsin(j0);
IkReal x12274=((1.0)*sj4);
IkReal x12275=(cj5*r12);
IkReal x12276=((0.37429)*sj5);
IkReal x12277=(r10*sj6);
IkReal x12278=(r01*sj6);
IkReal x12279=((0.069)*sj2);
IkReal x12280=(cj6*r01);
IkReal x12281=((0.01)*cj5);
IkReal x12282=(r12*sj5);
IkReal x12283=(cj6*r10);
IkReal x12284=(r00*sj6);
IkReal x12285=((1.0)*sj5);
IkReal x12286=(r02*sj5);
IkReal x12287=(cj6*r11);
IkReal x12288=(cj5*r02);
IkReal x12289=(cj4*cj5);
IkReal x12290=(cj6*r00);
IkReal x12291=((1.0)*cj4);
IkReal x12292=(r11*sj6);
IkReal x12293=(cj5*x12287);
IkReal x12294=((1.0)*x12273);
evalcond[0]=((((-1.0)*x12277*x12285))+x12275+((sj2*x12272))+(((-1.0)*x12285*x12287)));
evalcond[1]=((((-1.0)*x12280*x12285))+x12288+(((-1.0)*sj2*x12294))+(((-1.0)*x12284*x12285)));
evalcond[2]=(((x12280*x12289))+((sj4*x12290))+((cj4*x12286))+x12272+((x12284*x12289))+(((-1.0)*x12274*x12278)));
evalcond[3]=(((x12287*x12289))+((cj4*x12282))+x12273+(((-1.0)*x12274*x12292))+((x12277*x12289))+((sj4*x12283)));
evalcond[4]=((((-1.0)*x12291*x12292))+((cj4*x12283))+(((-1.0)*x12274*x12293))+(((-1.0)*cj5*x12274*x12277))+(((-1.0)*x12274*x12282))+((cj2*x12272)));
evalcond[5]=(((cj4*x12290))+(((-1.0)*x12274*x12286))+(((-1.0)*cj5*x12274*x12284))+(((-1.0)*cj5*x12274*x12280))+(((-1.0)*cj2*x12294))+(((-1.0)*x12278*x12291)));
evalcond[6]=(((x12280*x12281))+((x12281*x12284))+(((0.37429)*x12288))+(((-1.0)*x12273*x12279))+(((0.01)*x12286))+(((-1.0)*x12276*x12280))+(((-1.0)*x12276*x12284))+(((-1.0)*px))+(((-0.29542)*x12272)));
evalcond[7]=(((x12281*x12287))+(((0.01)*x12282))+(((-1.0)*x12276*x12287))+(((0.37429)*x12275))+((x12272*x12279))+((x12277*x12281))+(((-1.0)*py))+(((-1.0)*x12276*x12277))+(((-0.29542)*x12273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12295=(r10*sj6);
IkReal x12296=(cj6*r11);
IkReal x12297=((1.0)*r12);
IkReal x12298=((1.0)*cj4*cj5);
CheckValue<IkReal> x12299=IKPowWithIntegerCheck(sj2,-1);
if(!x12299.valid){
continue;
}
if( IKabs(((((-1.0)*x12295*x12298))+(((-1.0)*cj6*r10*sj4))+(((-1.0)*x12296*x12298))+((r11*sj4*sj6))+(((-1.0)*cj4*sj5*x12297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12299.value)*(((((-1.0)*cj5*x12297))+((sj5*x12295))+((sj5*x12296)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x12295*x12298))+(((-1.0)*cj6*r10*sj4))+(((-1.0)*x12296*x12298))+((r11*sj4*sj6))+(((-1.0)*cj4*sj5*x12297))))+IKsqr(((x12299.value)*(((((-1.0)*cj5*x12297))+((sj5*x12295))+((sj5*x12296))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x12295*x12298))+(((-1.0)*cj6*r10*sj4))+(((-1.0)*x12296*x12298))+((r11*sj4*sj6))+(((-1.0)*cj4*sj5*x12297))), ((x12299.value)*(((((-1.0)*cj5*x12297))+((sj5*x12295))+((sj5*x12296))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12300=IKcos(j0);
IkReal x12301=IKsin(j0);
IkReal x12302=((1.0)*sj4);
IkReal x12303=(cj5*r12);
IkReal x12304=((0.37429)*sj5);
IkReal x12305=(r10*sj6);
IkReal x12306=(r01*sj6);
IkReal x12307=((0.069)*sj2);
IkReal x12308=(cj6*r01);
IkReal x12309=((0.01)*cj5);
IkReal x12310=(r12*sj5);
IkReal x12311=(cj6*r10);
IkReal x12312=(r00*sj6);
IkReal x12313=((1.0)*sj5);
IkReal x12314=(r02*sj5);
IkReal x12315=(cj6*r11);
IkReal x12316=(cj5*r02);
IkReal x12317=(cj4*cj5);
IkReal x12318=(cj6*r00);
IkReal x12319=((1.0)*cj4);
IkReal x12320=(r11*sj6);
IkReal x12321=(cj5*x12315);
IkReal x12322=((1.0)*x12301);
evalcond[0]=((((-1.0)*x12305*x12313))+x12303+(((-1.0)*x12313*x12315))+((sj2*x12300)));
evalcond[1]=(x12316+(((-1.0)*x12312*x12313))+(((-1.0)*sj2*x12322))+(((-1.0)*x12308*x12313)));
evalcond[2]=(x12300+((cj4*x12314))+(((-1.0)*x12302*x12306))+((x12308*x12317))+((sj4*x12318))+((x12312*x12317)));
evalcond[3]=((((-1.0)*x12302*x12320))+x12301+((cj4*x12310))+((sj4*x12311))+((x12305*x12317))+((x12315*x12317)));
evalcond[4]=((((-1.0)*x12302*x12321))+(((-1.0)*x12319*x12320))+((cj2*x12300))+((cj4*x12311))+(((-1.0)*cj5*x12302*x12305))+(((-1.0)*x12302*x12310)));
evalcond[5]=((((-1.0)*x12306*x12319))+((cj4*x12318))+(((-1.0)*cj2*x12322))+(((-1.0)*cj5*x12302*x12308))+(((-1.0)*x12302*x12314))+(((-1.0)*cj5*x12302*x12312)));
evalcond[6]=((((0.37429)*x12316))+(((-1.0)*x12301*x12307))+((x12308*x12309))+((x12309*x12312))+(((-1.0)*px))+(((-1.0)*x12304*x12312))+(((0.01)*x12314))+(((-1.0)*x12304*x12308))+(((-0.29542)*x12300)));
evalcond[7]=(((x12300*x12307))+((x12305*x12309))+((x12309*x12315))+(((-1.0)*py))+(((-1.0)*x12304*x12315))+(((0.01)*x12310))+(((-1.0)*x12304*x12305))+(((-0.29542)*x12301))+(((0.37429)*x12303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12323=(sj5*sj6);
IkReal x12324=(cj6*sj5);
CheckValue<IkReal> x12325=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x12325.valid){
continue;
}
CheckValue<IkReal> x12326 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x12323))+(((-1.0)*r01*x12324))+((cj5*r02)))),((((-1.0)*cj5*r12))+((r10*x12323))+((r11*x12324))),IKFAST_ATAN2_MAGTHRESH);
if(!x12326.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12325.value)))+(x12326.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12327=IKcos(j0);
IkReal x12328=IKsin(j0);
IkReal x12329=((1.0)*sj4);
IkReal x12330=(cj5*r12);
IkReal x12331=((0.37429)*sj5);
IkReal x12332=(r10*sj6);
IkReal x12333=(r01*sj6);
IkReal x12334=((0.069)*sj2);
IkReal x12335=(cj6*r01);
IkReal x12336=((0.01)*cj5);
IkReal x12337=(r12*sj5);
IkReal x12338=(cj6*r10);
IkReal x12339=(r00*sj6);
IkReal x12340=((1.0)*sj5);
IkReal x12341=(r02*sj5);
IkReal x12342=(cj6*r11);
IkReal x12343=(cj5*r02);
IkReal x12344=(cj4*cj5);
IkReal x12345=(cj6*r00);
IkReal x12346=((1.0)*cj4);
IkReal x12347=(r11*sj6);
IkReal x12348=(cj5*x12342);
IkReal x12349=((1.0)*x12328);
evalcond[0]=((((-1.0)*x12340*x12342))+(((-1.0)*x12332*x12340))+x12330+((sj2*x12327)));
evalcond[1]=((((-1.0)*x12335*x12340))+x12343+(((-1.0)*x12339*x12340))+(((-1.0)*sj2*x12349)));
evalcond[2]=(((sj4*x12345))+((x12339*x12344))+((x12335*x12344))+x12327+(((-1.0)*x12329*x12333))+((cj4*x12341)));
evalcond[3]=(((x12332*x12344))+((sj4*x12338))+x12328+(((-1.0)*x12329*x12347))+((cj4*x12337))+((x12342*x12344)));
evalcond[4]=((((-1.0)*x12346*x12347))+(((-1.0)*cj5*x12329*x12332))+(((-1.0)*x12329*x12337))+((cj2*x12327))+(((-1.0)*x12329*x12348))+((cj4*x12338)));
evalcond[5]=((((-1.0)*cj5*x12329*x12339))+(((-1.0)*cj5*x12329*x12335))+(((-1.0)*cj2*x12349))+(((-1.0)*x12329*x12341))+(((-1.0)*x12333*x12346))+((cj4*x12345)));
evalcond[6]=((((-0.29542)*x12327))+((x12335*x12336))+(((0.01)*x12341))+((x12336*x12339))+(((-1.0)*x12331*x12339))+(((-1.0)*x12331*x12335))+(((-1.0)*x12328*x12334))+(((-1.0)*px))+(((0.37429)*x12343)));
evalcond[7]=((((-0.29542)*x12328))+((x12332*x12336))+((x12336*x12342))+(((-1.0)*x12331*x12342))+(((0.01)*x12337))+(((-1.0)*x12331*x12332))+((x12327*x12334))+(((-1.0)*py))+(((0.37429)*x12330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12350=(cj6*sj4);
IkReal x12351=(cj5*r21);
IkReal x12352=(r22*sj5);
IkReal x12353=(cj4*cj6);
IkReal x12354=((1.0)*r21);
IkReal x12355=(cj6*sj5);
IkReal x12356=((1.0)*sj4);
IkReal x12357=(cj5*r22);
IkReal x12358=(cj5*r20*sj6);
IkReal x12359=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x12350*x12351))+((r20*x12353))+(((-1.0)*x12356*x12358))+(((-1.0)*cj4*sj6*x12354))+(((-1.0)*x12352*x12356)));
evalcond[2]=((((0.01)*x12358))+(((0.01)*x12352))+(((-0.37429)*r21*x12355))+(((-0.069)*cj1))+(((-1.0)*pz))+(((0.37429)*x12357))+(((0.01)*cj6*x12351))+(((-0.37429)*x12359))+(((-0.36442)*sj1)));
evalcond[3]=(((r20*x12350))+sj1+((x12351*x12353))+(((-1.0)*sj4*sj6*x12354))+((cj4*x12352))+((cj4*x12358)));
evalcond[4]=((((-1.0)*x12359))+(((-1.0)*x12354*x12355))+x12357+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
IkReal x12360=((1.0)*cj6*sj5);
IkReal x12361=((1.0)*sj5*sj6);
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r10*x12361))+(((-1.0)*r11*x12360)))))+(IKabs(((((-1.0)*r00*x12361))+(((-1.0)*r01*x12360))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x12362=((0.01)*cj5);
IkReal x12363=(cj6*r11);
IkReal x12364=(cj6*sj4);
IkReal x12365=(r10*sj6);
IkReal x12366=((0.37429)*sj5);
IkReal x12367=((1.0)*sj6);
IkReal x12368=(r00*sj6);
IkReal x12369=(r20*sj6);
IkReal x12370=(cj5*r21);
IkReal x12371=((0.01)*sj5);
IkReal x12372=(cj4*cj6);
IkReal x12373=(cj4*cj5);
IkReal x12374=(cj6*r01);
IkReal x12375=((0.37429)*cj5);
IkReal x12376=((1.0)*sj5);
IkReal x12377=(cj6*r21);
IkReal x12378=(cj4*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj4*r21*x12367))+(((-1.0)*x12364*x12370))+(((-1.0)*cj5*r20*sj4*x12367))+((r20*x12372))+(((-1.0)*r22*sj4*x12376)));
evalcond[2]=((-0.36442)+((x12362*x12369))+(((-1.0)*x12366*x12369))+((x12362*x12377))+(((-1.0)*x12366*x12377))+(((-1.0)*pz))+((r22*x12371))+((r22*x12375)));
evalcond[3]=(((x12362*x12368))+(((-1.0)*x12366*x12368))+((x12362*x12374))+(((-1.0)*x12366*x12374))+(((-1.0)*px))+((r02*x12375))+((r02*x12371)));
evalcond[4]=((((-1.0)*x12365*x12366))+((x12362*x12363))+((x12362*x12365))+(((-1.0)*py))+(((-1.0)*x12363*x12366))+((r12*x12371))+((r12*x12375)));
evalcond[5]=((1.0)+((x12370*x12372))+((r22*x12378))+((x12369*x12373))+(((-1.0)*r21*sj4*x12367))+((r20*x12364)));
evalcond[6]=(((cj5*r22))+(((-1.0)*x12376*x12377))+(((-1.0)*r20*sj5*x12367)));
evalcond[7]=((((-1.0)*r01*sj4*x12367))+((cj5*r01*x12372))+((x12368*x12373))+((r02*x12378))+((r00*x12364)));
evalcond[8]=((((-1.0)*r11*sj4*x12367))+((r10*x12364))+((x12365*x12373))+((x12363*x12373))+((r12*x12378)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12379=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x12379))+(((-1.0)*cj6*r11*x12379)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x12379))+(((-1.0)*r00*sj6*x12379))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x12379))+(((-1.0)*cj6*r11*x12379))))+IKsqr(((((-1.0)*cj6*r01*x12379))+(((-1.0)*r00*sj6*x12379))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x12379))+(((-1.0)*cj6*r11*x12379))), ((((-1.0)*cj6*r01*x12379))+(((-1.0)*r00*sj6*x12379))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x12380=IKcos(j0);
IkReal x12381=(cj4*cj6);
IkReal x12382=(r00*sj6);
IkReal x12383=(cj6*r01);
IkReal x12384=((1.0)*sj5);
IkReal x12385=(cj6*r11);
IkReal x12386=(r10*sj6);
IkReal x12387=((1.0)*(IKsin(j0)));
IkReal x12388=((1.0)*cj4*sj6);
IkReal x12389=((1.0)*cj5*sj4);
evalcond[0]=(((cj5*r12))+(((-1.0)*x12384*x12386))+(((-1.0)*x12384*x12385))+(((-1.0)*x12387)));
evalcond[1]=((((-1.0)*x12383*x12384))+(((-1.0)*x12382*x12384))+(((-1.0)*x12380))+((cj5*r02)));
evalcond[2]=((((-1.0)*r11*x12388))+((r10*x12381))+x12380+(((-1.0)*r12*sj4*x12384))+(((-1.0)*x12386*x12389))+(((-1.0)*x12385*x12389)));
evalcond[3]=((((-1.0)*x12383*x12389))+(((-1.0)*x12382*x12389))+((r00*x12381))+(((-1.0)*r01*x12388))+(((-1.0)*x12387))+(((-1.0)*r02*sj4*x12384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12390=(cj6*sj4);
IkReal x12391=((1.0)*sj6);
IkReal x12392=(cj5*r21);
IkReal x12393=(r22*sj5);
IkReal x12394=(cj4*cj6);
IkReal x12395=(cj4*sj5);
IkReal x12396=(r20*sj5);
IkReal x12397=(cj5*r22);
IkReal x12398=(cj5*r20*sj6);
IkReal x12399=(cj6*r21*sj5);
IkReal x12400=(cj4*cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj5*r20*sj4*x12391))+(((-1.0)*x12390*x12392))+((r20*x12394))+(((-1.0)*sj4*x12393))+(((-1.0)*cj4*r21*x12391)));
evalcond[2]=((0.36442)+(((0.37429)*x12397))+(((-0.37429)*sj6*x12396))+(((0.01)*x12393))+(((0.01)*x12398))+(((-1.0)*pz))+(((-0.37429)*x12399))+(((0.01)*cj6*x12392)));
evalcond[3]=((-1.0)+(((-1.0)*r21*sj4*x12391))+((r20*x12390))+((x12392*x12394))+((cj4*x12393))+((cj4*x12398)));
evalcond[4]=(x12397+(((-1.0)*x12399))+(((-1.0)*x12391*x12396)));
evalcond[5]=(((r02*x12395))+((cj5*r01*x12394))+((r00*x12390))+((r00*x12400))+(((-1.0)*r01*sj4*x12391)));
evalcond[6]=(((r10*x12390))+((r10*x12400))+(((-1.0)*r11*sj4*x12391))+((cj5*r11*x12394))+((r12*x12395)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12401=(cj6*sj5);
IkReal x12402=(sj5*sj6);
IkReal x12403=((1.0)*cj5);
if( IKabs(((((-1.0)*r12*x12403))+((r10*x12402))+((r11*x12401)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x12403))+((r01*x12401))+((r00*x12402)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x12403))+((r10*x12402))+((r11*x12401))))+IKsqr(((((-1.0)*r02*x12403))+((r01*x12401))+((r00*x12402))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x12403))+((r10*x12402))+((r11*x12401))), ((((-1.0)*r02*x12403))+((r01*x12401))+((r00*x12402))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12404=IKcos(j0);
IkReal x12405=IKsin(j0);
IkReal x12406=((1.0)*sj4);
IkReal x12407=(cj5*r12);
IkReal x12408=(r10*sj6);
IkReal x12409=((0.37429)*sj5);
IkReal x12410=(cj6*r01);
IkReal x12411=((0.01)*cj5);
IkReal x12412=(r12*sj5);
IkReal x12413=(r00*sj6);
IkReal x12414=((1.0)*sj5);
IkReal x12415=(r02*sj5);
IkReal x12416=(cj6*r11);
IkReal x12417=(cj4*cj6);
IkReal x12418=(cj5*r02);
IkReal x12419=(cj5*x12416);
IkReal x12420=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x12408*x12414))+x12405+x12407+(((-1.0)*x12414*x12416)));
evalcond[1]=((((-1.0)*x12410*x12414))+(((-1.0)*x12413*x12414))+x12404+x12418);
evalcond[2]=(((r10*x12417))+(((-1.0)*x12406*x12419))+(((-1.0)*x12406*x12412))+(((-1.0)*cj5*x12406*x12408))+(((-1.0)*r11*x12420))+x12404);
evalcond[3]=((((-1.0)*x12406*x12415))+(((-1.0)*r01*x12420))+((r00*x12417))+(((-1.0)*cj5*x12406*x12413))+(((-1.0)*cj5*x12406*x12410))+(((-1.0)*x12405)));
evalcond[4]=((((0.01)*x12415))+(((0.37429)*x12418))+(((0.138)*x12404))+((x12411*x12413))+((x12410*x12411))+(((-1.0)*x12409*x12413))+(((-1.0)*x12409*x12410))+(((-1.0)*px)));
evalcond[5]=((((0.01)*x12412))+(((-1.0)*x12408*x12409))+(((0.138)*x12405))+((x12411*x12416))+(((-1.0)*x12409*x12416))+(((0.37429)*x12407))+((x12408*x12411))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12421=(cj4*cj5);
IkReal x12422=((1.0)*sj6);
CheckValue<IkReal> x12423=IKPowWithIntegerCheck(sj1,-1);
if(!x12423.valid){
continue;
}
CheckValue<IkReal> x12424=IKPowWithIntegerCheck(cj1,-1);
if(!x12424.valid){
continue;
}
if( IKabs(((x12423.value)*((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x12422)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12424.value)*((((r00*sj6*x12421))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*x12422))+((cj6*r01*x12421)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12423.value)*((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x12422))))))+IKsqr(((x12424.value)*((((r00*sj6*x12421))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*x12422))+((cj6*r01*x12421))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12423.value)*((((cj5*r12))+(((-1.0)*cj6*r11*sj5))+(((-1.0)*r10*sj5*x12422))))), ((x12424.value)*((((r00*sj6*x12421))+((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*x12422))+((cj6*r01*x12421))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12425=IKcos(j0);
IkReal x12426=IKsin(j0);
IkReal x12427=(r02*sj5);
IkReal x12428=((1.0)*sj4);
IkReal x12429=(cj5*r12);
IkReal x12430=((0.37429)*sj5);
IkReal x12431=(r10*sj6);
IkReal x12432=(r01*sj6);
IkReal x12433=((0.36442)*cj1);
IkReal x12434=(cj6*r01);
IkReal x12435=((0.01)*cj5);
IkReal x12436=(r12*sj5);
IkReal x12437=(cj6*sj4);
IkReal x12438=(r00*sj6);
IkReal x12439=((1.0)*sj5);
IkReal x12440=(cj6*r11);
IkReal x12441=(cj4*cj6);
IkReal x12442=(cj5*r02);
IkReal x12443=(cj4*cj5);
IkReal x12444=((1.0)*cj4);
IkReal x12445=(r11*sj6);
IkReal x12446=(cj5*x12440);
IkReal x12447=((0.069)*x12425);
IkReal x12448=((0.069)*x12426);
IkReal x12449=((1.0)*x12426);
IkReal x12450=((1.0)*x12425);
evalcond[0]=((((-1.0)*x12431*x12439))+(((-1.0)*sj1*x12449))+(((-1.0)*x12439*x12440))+x12429);
evalcond[1]=((((-1.0)*x12434*x12439))+(((-1.0)*sj1*x12450))+(((-1.0)*x12438*x12439))+x12442);
evalcond[2]=((((-1.0)*x12444*x12445))+(((-1.0)*x12428*x12436))+(((-1.0)*x12428*x12446))+(((-1.0)*cj5*x12428*x12431))+((r10*x12441))+x12425);
evalcond[3]=(((x12434*x12443))+(((-1.0)*x12428*x12432))+((x12438*x12443))+(((-1.0)*cj1*x12450))+((cj4*x12427))+((r00*x12437)));
evalcond[4]=(((x12440*x12443))+(((-1.0)*x12428*x12445))+((r10*x12437))+(((-1.0)*cj1*x12449))+((x12431*x12443))+((cj4*x12436)));
evalcond[5]=(((r00*x12441))+(((-1.0)*x12449))+(((-1.0)*x12427*x12428))+(((-1.0)*cj5*x12428*x12434))+(((-1.0)*cj5*x12428*x12438))+(((-1.0)*x12432*x12444)));
evalcond[6]=(((x12425*x12433))+(((-1.0)*x12430*x12434))+(((-1.0)*x12430*x12438))+(((-1.0)*sj1*x12447))+(((-1.0)*px))+(((0.37429)*x12442))+((x12435*x12438))+x12447+((x12434*x12435))+(((0.01)*x12427)));
evalcond[7]=((((-1.0)*x12430*x12440))+(((-1.0)*x12430*x12431))+(((-1.0)*sj1*x12448))+(((-1.0)*py))+((x12431*x12435))+((x12435*x12440))+x12448+(((0.37429)*x12429))+(((0.01)*x12436))+((x12426*x12433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12451=(cj5*sj4);
IkReal x12452=(cj6*r11);
IkReal x12453=(r10*sj6);
IkReal x12454=((1.0)*sj5);
CheckValue<IkReal> x12455=IKPowWithIntegerCheck(sj1,-1);
if(!x12455.valid){
continue;
}
if( IKabs(((x12455.value)*((((cj5*r12))+(((-1.0)*x12452*x12454))+(((-1.0)*x12453*x12454)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*cj6*r10))+((x12451*x12452))+((x12451*x12453))+((cj4*r11*sj6))+((r12*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12455.value)*((((cj5*r12))+(((-1.0)*x12452*x12454))+(((-1.0)*x12453*x12454))))))+IKsqr(((((-1.0)*cj4*cj6*r10))+((x12451*x12452))+((x12451*x12453))+((cj4*r11*sj6))+((r12*sj4*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12455.value)*((((cj5*r12))+(((-1.0)*x12452*x12454))+(((-1.0)*x12453*x12454))))), ((((-1.0)*cj4*cj6*r10))+((x12451*x12452))+((x12451*x12453))+((cj4*r11*sj6))+((r12*sj4*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12456=IKcos(j0);
IkReal x12457=IKsin(j0);
IkReal x12458=(r02*sj5);
IkReal x12459=((1.0)*sj4);
IkReal x12460=(cj5*r12);
IkReal x12461=((0.37429)*sj5);
IkReal x12462=(r10*sj6);
IkReal x12463=(r01*sj6);
IkReal x12464=((0.36442)*cj1);
IkReal x12465=(cj6*r01);
IkReal x12466=((0.01)*cj5);
IkReal x12467=(r12*sj5);
IkReal x12468=(cj6*sj4);
IkReal x12469=(r00*sj6);
IkReal x12470=((1.0)*sj5);
IkReal x12471=(cj6*r11);
IkReal x12472=(cj4*cj6);
IkReal x12473=(cj5*r02);
IkReal x12474=(cj4*cj5);
IkReal x12475=((1.0)*cj4);
IkReal x12476=(r11*sj6);
IkReal x12477=(cj5*x12471);
IkReal x12478=((0.069)*x12456);
IkReal x12479=((0.069)*x12457);
IkReal x12480=((1.0)*x12457);
IkReal x12481=((1.0)*x12456);
evalcond[0]=((((-1.0)*x12470*x12471))+(((-1.0)*x12462*x12470))+x12460+(((-1.0)*sj1*x12480)));
evalcond[1]=((((-1.0)*x12465*x12470))+x12473+(((-1.0)*sj1*x12481))+(((-1.0)*x12469*x12470)));
evalcond[2]=((((-1.0)*cj5*x12459*x12462))+(((-1.0)*x12459*x12467))+(((-1.0)*x12475*x12476))+(((-1.0)*x12459*x12477))+x12456+((r10*x12472)));
evalcond[3]=(((cj4*x12458))+((x12465*x12474))+((r00*x12468))+(((-1.0)*x12459*x12463))+(((-1.0)*cj1*x12481))+((x12469*x12474)));
evalcond[4]=(((x12462*x12474))+(((-1.0)*x12459*x12476))+(((-1.0)*cj1*x12480))+((cj4*x12467))+((x12471*x12474))+((r10*x12468)));
evalcond[5]=((((-1.0)*x12458*x12459))+(((-1.0)*x12480))+(((-1.0)*cj5*x12459*x12469))+(((-1.0)*cj5*x12459*x12465))+((r00*x12472))+(((-1.0)*x12463*x12475)));
evalcond[6]=(((x12465*x12466))+(((0.37429)*x12473))+(((0.01)*x12458))+(((-1.0)*px))+((x12456*x12464))+x12478+(((-1.0)*x12461*x12469))+(((-1.0)*x12461*x12465))+((x12466*x12469))+(((-1.0)*sj1*x12478)));
evalcond[7]=(((x12457*x12464))+(((0.37429)*x12460))+((x12462*x12466))+(((0.01)*x12467))+(((-1.0)*py))+x12479+(((-1.0)*x12461*x12462))+((x12466*x12471))+(((-1.0)*x12461*x12471))+(((-1.0)*sj1*x12479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12482=((1.0)*sj5);
CheckValue<IkReal> x12483=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x12483.valid){
continue;
}
CheckValue<IkReal> x12484 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*cj6*r11*x12482))+(((-1.0)*r10*sj6*x12482)))),((((-1.0)*r00*sj6*x12482))+(((-1.0)*cj6*r01*x12482))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x12484.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12483.value)))+(x12484.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12485=IKcos(j0);
IkReal x12486=IKsin(j0);
IkReal x12487=(r02*sj5);
IkReal x12488=((1.0)*sj4);
IkReal x12489=(cj5*r12);
IkReal x12490=((0.37429)*sj5);
IkReal x12491=(r10*sj6);
IkReal x12492=(r01*sj6);
IkReal x12493=((0.36442)*cj1);
IkReal x12494=(cj6*r01);
IkReal x12495=((0.01)*cj5);
IkReal x12496=(r12*sj5);
IkReal x12497=(cj6*sj4);
IkReal x12498=(r00*sj6);
IkReal x12499=((1.0)*sj5);
IkReal x12500=(cj6*r11);
IkReal x12501=(cj4*cj6);
IkReal x12502=(cj5*r02);
IkReal x12503=(cj4*cj5);
IkReal x12504=((1.0)*cj4);
IkReal x12505=(r11*sj6);
IkReal x12506=(cj5*x12500);
IkReal x12507=((0.069)*x12485);
IkReal x12508=((0.069)*x12486);
IkReal x12509=((1.0)*x12486);
IkReal x12510=((1.0)*x12485);
evalcond[0]=((((-1.0)*x12491*x12499))+(((-1.0)*sj1*x12509))+x12489+(((-1.0)*x12499*x12500)));
evalcond[1]=((((-1.0)*x12498*x12499))+(((-1.0)*sj1*x12510))+x12502+(((-1.0)*x12494*x12499)));
evalcond[2]=(((r10*x12501))+(((-1.0)*x12504*x12505))+(((-1.0)*x12488*x12496))+(((-1.0)*cj5*x12488*x12491))+x12485+(((-1.0)*x12488*x12506)));
evalcond[3]=(((r00*x12497))+((cj4*x12487))+((x12498*x12503))+(((-1.0)*x12488*x12492))+((x12494*x12503))+(((-1.0)*cj1*x12510)));
evalcond[4]=(((r10*x12497))+(((-1.0)*cj1*x12509))+((x12491*x12503))+((cj4*x12496))+((x12500*x12503))+(((-1.0)*x12488*x12505)));
evalcond[5]=((((-1.0)*x12487*x12488))+(((-1.0)*x12509))+((r00*x12501))+(((-1.0)*cj5*x12488*x12494))+(((-1.0)*cj5*x12488*x12498))+(((-1.0)*x12492*x12504)));
evalcond[6]=((((0.01)*x12487))+((x12495*x12498))+(((-1.0)*px))+(((0.37429)*x12502))+((x12494*x12495))+(((-1.0)*x12490*x12494))+(((-1.0)*x12490*x12498))+((x12485*x12493))+(((-1.0)*sj1*x12507))+x12507);
evalcond[7]=(((x12486*x12493))+(((-1.0)*py))+((x12495*x12500))+(((-1.0)*x12490*x12491))+(((-1.0)*x12490*x12500))+(((0.37429)*x12489))+((x12491*x12495))+(((0.01)*x12496))+(((-1.0)*sj1*x12508))+x12508);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12511=(cj6*sj4);
IkReal x12512=(cj5*r21);
IkReal x12513=(r22*sj5);
IkReal x12514=(cj4*cj6);
IkReal x12515=((1.0)*r21);
IkReal x12516=(cj6*sj5);
IkReal x12517=((1.0)*sj4);
IkReal x12518=(cj5*r22);
IkReal x12519=(cj5*r20*sj6);
IkReal x12520=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj4*sj6*x12515))+((r20*x12514))+(((-1.0)*x12513*x12517))+(((-1.0)*x12511*x12512))+(((-1.0)*x12517*x12519)));
evalcond[2]=((((0.01)*cj6*x12512))+(((0.069)*cj1))+(((0.37429)*x12518))+(((-1.0)*pz))+(((0.01)*x12519))+(((0.01)*x12513))+(((-0.37429)*x12520))+(((-0.37429)*r21*x12516))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+((r20*x12511))+(((-1.0)*sj4*sj6*x12515))+((cj4*x12513))+((cj4*x12519))+((x12512*x12514)));
evalcond[4]=(cj1+x12518+(((-1.0)*x12520))+(((-1.0)*x12515*x12516)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x12521=(cj6*sj5);
IkReal x12522=(sj5*sj6);
IkReal x12523=((1.0)*cj5);
j0eval[0]=sj1;
j0eval[1]=((IKabs((((r10*x12522))+(((-1.0)*r12*x12523))+((r11*x12521)))))+(IKabs(((((-1.0)*r02*x12523))+((r01*x12521))+((r00*x12522))))));
j0eval[2]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x12524=(cj6*sj4);
IkReal x12525=((1.0)*sj6);
IkReal x12526=(cj5*r21);
IkReal x12527=(r22*sj5);
IkReal x12528=(cj4*cj6);
IkReal x12529=(cj4*sj5);
IkReal x12530=(r20*sj5);
IkReal x12531=(cj5*r22);
IkReal x12532=(cj5*r20*sj6);
IkReal x12533=(cj6*r21*sj5);
IkReal x12534=(cj4*cj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*cj4*r21*x12525))+((r20*x12528))+(((-1.0)*sj4*x12527))+(((-1.0)*cj5*r20*sj4*x12525))+(((-1.0)*x12524*x12526)));
evalcond[2]=((-0.36442)+(((-0.37429)*x12533))+(((0.01)*x12532))+(((0.37429)*x12531))+(((-0.37429)*sj6*x12530))+(((-1.0)*pz))+(((0.01)*cj6*x12526))+(((0.01)*x12527)));
evalcond[3]=((1.0)+((cj4*x12527))+(((-1.0)*r21*sj4*x12525))+((r20*x12524))+((x12526*x12528))+((cj4*x12532)));
evalcond[4]=((((-1.0)*x12525*x12530))+(((-1.0)*x12533))+x12531);
evalcond[5]=(((r00*x12534))+((cj5*r01*x12528))+((r00*x12524))+(((-1.0)*r01*sj4*x12525))+((r02*x12529)));
evalcond[6]=(((r10*x12524))+(((-1.0)*r11*sj4*x12525))+((cj5*r11*x12528))+((r12*x12529))+((r10*x12534)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12535=(cj6*sj5);
IkReal x12536=(sj5*sj6);
IkReal x12537=((1.0)*cj5);
if( IKabs((((r11*x12535))+(((-1.0)*r12*x12537))+((r10*x12536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x12536))+(((-1.0)*r02*x12537))+((r01*x12535)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x12535))+(((-1.0)*r12*x12537))+((r10*x12536))))+IKsqr((((r00*x12536))+(((-1.0)*r02*x12537))+((r01*x12535))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x12535))+(((-1.0)*r12*x12537))+((r10*x12536))), (((r00*x12536))+(((-1.0)*r02*x12537))+((r01*x12535))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12538=IKsin(j0);
IkReal x12539=IKcos(j0);
IkReal x12540=((1.0)*sj4);
IkReal x12541=(cj5*r12);
IkReal x12542=(r10*sj6);
IkReal x12543=((0.37429)*sj5);
IkReal x12544=(cj6*r01);
IkReal x12545=((0.01)*cj5);
IkReal x12546=(r12*sj5);
IkReal x12547=(r00*sj6);
IkReal x12548=((1.0)*sj5);
IkReal x12549=(r02*sj5);
IkReal x12550=(cj6*r11);
IkReal x12551=(cj4*cj6);
IkReal x12552=(cj5*r02);
IkReal x12553=(cj5*x12550);
IkReal x12554=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x12548*x12550))+(((-1.0)*x12542*x12548))+x12541+x12538);
evalcond[1]=((((-1.0)*x12544*x12548))+(((-1.0)*x12547*x12548))+x12552+x12539);
evalcond[2]=(((r00*x12551))+(((-1.0)*r01*x12554))+(((-1.0)*cj5*x12540*x12547))+(((-1.0)*cj5*x12540*x12544))+(((-1.0)*x12540*x12549))+x12538);
evalcond[3]=(((r10*x12551))+(((-1.0)*cj5*x12540*x12542))+(((-1.0)*x12539))+(((-1.0)*x12540*x12553))+(((-1.0)*x12540*x12546))+(((-1.0)*r11*x12554)));
evalcond[4]=((((0.37429)*x12552))+(((0.138)*x12539))+(((0.01)*x12549))+(((-1.0)*px))+((x12545*x12547))+((x12544*x12545))+(((-1.0)*x12543*x12547))+(((-1.0)*x12543*x12544)));
evalcond[5]=(((x12542*x12545))+(((0.37429)*x12541))+(((-1.0)*x12542*x12543))+(((0.138)*x12538))+(((0.01)*x12546))+(((-1.0)*py))+((x12545*x12550))+(((-1.0)*x12543*x12550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12555=((0.01)*cj5);
IkReal x12556=(cj6*r11);
IkReal x12557=(cj6*sj4);
IkReal x12558=(r10*sj6);
IkReal x12559=((0.37429)*sj5);
IkReal x12560=((1.0)*sj6);
IkReal x12561=(r00*sj6);
IkReal x12562=(r20*sj6);
IkReal x12563=(cj5*r21);
IkReal x12564=((0.01)*sj5);
IkReal x12565=(cj4*cj6);
IkReal x12566=(cj4*cj5);
IkReal x12567=(cj6*r01);
IkReal x12568=((0.37429)*cj5);
IkReal x12569=((1.0)*sj5);
IkReal x12570=(cj6*r21);
IkReal x12571=(cj4*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r22*sj4*x12569))+((r20*x12565))+(((-1.0)*x12557*x12563))+(((-1.0)*cj4*r21*x12560))+(((-1.0)*cj5*r20*sj4*x12560)));
evalcond[2]=((0.36442)+(((-1.0)*pz))+(((-1.0)*x12559*x12562))+((x12555*x12570))+((r22*x12564))+((r22*x12568))+(((-1.0)*x12559*x12570))+((x12555*x12562)));
evalcond[3]=((((-1.0)*px))+(((-1.0)*x12559*x12567))+(((-1.0)*x12559*x12561))+((r02*x12568))+((r02*x12564))+((x12555*x12561))+((x12555*x12567)));
evalcond[4]=(((x12555*x12556))+((x12555*x12558))+((r12*x12564))+((r12*x12568))+(((-1.0)*x12558*x12559))+(((-1.0)*py))+(((-1.0)*x12556*x12559)));
evalcond[5]=((-1.0)+((x12563*x12565))+((r22*x12571))+((r20*x12557))+((x12562*x12566))+(((-1.0)*r21*sj4*x12560)));
evalcond[6]=((((-1.0)*r20*sj5*x12560))+((cj5*r22))+(((-1.0)*x12569*x12570)));
evalcond[7]=(((r00*x12557))+((r02*x12571))+((cj5*r01*x12565))+((x12561*x12566))+(((-1.0)*r01*sj4*x12560)));
evalcond[8]=(((x12556*x12566))+((x12558*x12566))+((r10*x12557))+((r12*x12571))+(((-1.0)*r11*sj4*x12560)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12572=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x12572))+(((-1.0)*r10*sj6*x12572)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x12572))+(((-1.0)*r00*sj6*x12572))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x12572))+(((-1.0)*r10*sj6*x12572))))+IKsqr(((((-1.0)*cj6*r01*x12572))+(((-1.0)*r00*sj6*x12572))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x12572))+(((-1.0)*r10*sj6*x12572))), ((((-1.0)*cj6*r01*x12572))+(((-1.0)*r00*sj6*x12572))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x12573=IKsin(j0);
IkReal x12574=(cj4*cj6);
IkReal x12575=((1.0)*sj5);
IkReal x12576=(cj6*r11);
IkReal x12577=(cj6*r01);
IkReal x12578=((1.0)*(IKcos(j0)));
IkReal x12579=((1.0)*cj4*sj6);
IkReal x12580=((1.0)*cj5*sj4);
IkReal x12581=(sj6*x12580);
evalcond[0]=(((cj5*r12))+(((-1.0)*x12575*x12576))+(((-1.0)*x12573))+(((-1.0)*r10*sj6*x12575)));
evalcond[1]=((((-1.0)*x12575*x12577))+(((-1.0)*x12578))+(((-1.0)*r00*sj6*x12575))+((cj5*r02)));
evalcond[2]=(((r00*x12574))+x12573+(((-1.0)*x12577*x12580))+(((-1.0)*r01*x12579))+(((-1.0)*r02*sj4*x12575))+(((-1.0)*r00*x12581)));
evalcond[3]=((((-1.0)*r12*sj4*x12575))+(((-1.0)*r10*x12581))+(((-1.0)*x12578))+(((-1.0)*r11*x12579))+((r10*x12574))+(((-1.0)*x12576*x12580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12582=(cj4*cj5);
CheckValue<IkReal> x12583=IKPowWithIntegerCheck(sj1,-1);
if(!x12583.valid){
continue;
}
CheckValue<IkReal> x12584=IKPowWithIntegerCheck(cj1,-1);
if(!x12584.valid){
continue;
}
if( IKabs(((x12583.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12584.value)*((((cj6*r01*x12582))+((cj6*r00*sj4))+((r00*sj6*x12582))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12583.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))))+IKsqr(((x12584.value)*((((cj6*r01*x12582))+((cj6*r00*sj4))+((r00*sj6*x12582))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x12583.value)*(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6))))), ((x12584.value)*((((cj6*r01*x12582))+((cj6*r00*sj4))+((r00*sj6*x12582))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12585=IKsin(j0);
IkReal x12586=IKcos(j0);
IkReal x12587=((1.0)*sj4);
IkReal x12588=(cj5*r12);
IkReal x12589=((0.37429)*sj5);
IkReal x12590=(r10*sj6);
IkReal x12591=(r01*sj6);
IkReal x12592=((0.36442)*cj1);
IkReal x12593=(cj6*r01);
IkReal x12594=((0.01)*cj5);
IkReal x12595=(cj6*sj4);
IkReal x12596=(r00*sj6);
IkReal x12597=((1.0)*sj5);
IkReal x12598=(r02*sj5);
IkReal x12599=(cj6*r11);
IkReal x12600=(r12*sj5);
IkReal x12601=(cj4*cj6);
IkReal x12602=(cj5*r02);
IkReal x12603=(cj4*cj5);
IkReal x12604=((1.0)*cj4);
IkReal x12605=(r11*sj6);
IkReal x12606=(cj5*x12599);
IkReal x12607=(sj1*x12585);
IkReal x12608=((1.0)*x12586);
IkReal x12609=((0.069)*x12586);
evalcond[0]=((((-1.0)*x12597*x12599))+(((-1.0)*x12590*x12597))+x12607+x12588);
evalcond[1]=((((-1.0)*x12596*x12597))+x12602+(((-1.0)*x12593*x12597))+((sj1*x12586)));
evalcond[2]=((((-1.0)*x12591*x12604))+((r00*x12601))+(((-1.0)*cj5*x12587*x12596))+(((-1.0)*cj5*x12587*x12593))+(((-1.0)*x12587*x12598))+x12585);
evalcond[3]=(((r00*x12595))+(((-1.0)*cj1*x12608))+(((-1.0)*x12587*x12591))+((cj4*x12598))+((x12596*x12603))+((x12593*x12603)));
evalcond[4]=(((x12599*x12603))+(((-1.0)*x12587*x12605))+((x12590*x12603))+((cj4*x12600))+(((-1.0)*cj1*x12585))+((r10*x12595)));
evalcond[5]=((((-1.0)*x12587*x12600))+(((-1.0)*x12587*x12606))+(((-1.0)*x12608))+((r10*x12601))+(((-1.0)*cj5*x12587*x12590))+(((-1.0)*x12604*x12605)));
evalcond[6]=((((-1.0)*px))+(((0.37429)*x12602))+(((-1.0)*x12589*x12596))+(((-1.0)*x12589*x12593))+x12609+((sj1*x12609))+((x12593*x12594))+((x12586*x12592))+(((0.01)*x12598))+((x12594*x12596)));
evalcond[7]=(((x12585*x12592))+((x12590*x12594))+(((0.01)*x12600))+(((0.069)*x12585))+(((0.37429)*x12588))+(((-1.0)*py))+(((-1.0)*x12589*x12590))+(((-1.0)*x12589*x12599))+(((0.069)*x12607))+((x12594*x12599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12610=(cj6*r01);
IkReal x12611=(cj5*sj4);
IkReal x12612=(r00*sj6);
CheckValue<IkReal> x12613=IKPowWithIntegerCheck(sj1,-1);
if(!x12613.valid){
continue;
}
if( IKabs((((x12611*x12612))+(((-1.0)*cj4*cj6*r00))+((cj4*r01*sj6))+((x12610*x12611))+((r02*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12613.value)*((((sj5*x12610))+((sj5*x12612))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x12611*x12612))+(((-1.0)*cj4*cj6*r00))+((cj4*r01*sj6))+((x12610*x12611))+((r02*sj4*sj5))))+IKsqr(((x12613.value)*((((sj5*x12610))+((sj5*x12612))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x12611*x12612))+(((-1.0)*cj4*cj6*r00))+((cj4*r01*sj6))+((x12610*x12611))+((r02*sj4*sj5))), ((x12613.value)*((((sj5*x12610))+((sj5*x12612))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12614=IKsin(j0);
IkReal x12615=IKcos(j0);
IkReal x12616=((1.0)*sj4);
IkReal x12617=(cj5*r12);
IkReal x12618=((0.37429)*sj5);
IkReal x12619=(r10*sj6);
IkReal x12620=(r01*sj6);
IkReal x12621=((0.36442)*cj1);
IkReal x12622=(cj6*r01);
IkReal x12623=((0.01)*cj5);
IkReal x12624=(cj6*sj4);
IkReal x12625=(r00*sj6);
IkReal x12626=((1.0)*sj5);
IkReal x12627=(r02*sj5);
IkReal x12628=(cj6*r11);
IkReal x12629=(r12*sj5);
IkReal x12630=(cj4*cj6);
IkReal x12631=(cj5*r02);
IkReal x12632=(cj4*cj5);
IkReal x12633=((1.0)*cj4);
IkReal x12634=(r11*sj6);
IkReal x12635=(cj5*x12628);
IkReal x12636=(sj1*x12614);
IkReal x12637=((1.0)*x12615);
IkReal x12638=((0.069)*x12615);
evalcond[0]=((((-1.0)*x12619*x12626))+x12636+x12617+(((-1.0)*x12626*x12628)));
evalcond[1]=((((-1.0)*x12622*x12626))+(((-1.0)*x12625*x12626))+((sj1*x12615))+x12631);
evalcond[2]=((((-1.0)*x12616*x12627))+(((-1.0)*x12620*x12633))+((r00*x12630))+x12614+(((-1.0)*cj5*x12616*x12625))+(((-1.0)*cj5*x12616*x12622)));
evalcond[3]=((((-1.0)*x12616*x12620))+((x12625*x12632))+((r00*x12624))+((x12622*x12632))+(((-1.0)*cj1*x12637))+((cj4*x12627)));
evalcond[4]=(((x12628*x12632))+(((-1.0)*cj1*x12614))+((x12619*x12632))+(((-1.0)*x12616*x12634))+((cj4*x12629))+((r10*x12624)));
evalcond[5]=((((-1.0)*x12616*x12629))+(((-1.0)*x12633*x12634))+(((-1.0)*x12616*x12635))+(((-1.0)*x12637))+((r10*x12630))+(((-1.0)*cj5*x12616*x12619)));
evalcond[6]=((((-1.0)*px))+(((0.37429)*x12631))+((x12615*x12621))+(((-1.0)*x12618*x12622))+(((-1.0)*x12618*x12625))+((sj1*x12638))+x12638+((x12623*x12625))+(((0.01)*x12627))+((x12622*x12623)));
evalcond[7]=(((x12619*x12623))+(((0.069)*x12614))+((x12614*x12621))+(((-1.0)*py))+(((0.069)*x12636))+(((-1.0)*x12618*x12628))+(((-1.0)*x12618*x12619))+((x12623*x12628))+(((0.01)*x12629))+(((0.37429)*x12617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12639=(cj6*sj5);
IkReal x12640=(sj5*sj6);
IkReal x12641=((1.0)*cj5);
CheckValue<IkReal> x12642 = IKatan2WithCheck(IkReal((((r11*x12639))+((r10*x12640))+(((-1.0)*r12*x12641)))),((((-1.0)*r02*x12641))+((r01*x12639))+((r00*x12640))),IKFAST_ATAN2_MAGTHRESH);
if(!x12642.valid){
continue;
}
CheckValue<IkReal> x12643=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x12643.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x12642.value)+(((1.5707963267949)*(x12643.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12644=IKsin(j0);
IkReal x12645=IKcos(j0);
IkReal x12646=((1.0)*sj4);
IkReal x12647=(cj5*r12);
IkReal x12648=((0.37429)*sj5);
IkReal x12649=(r10*sj6);
IkReal x12650=(r01*sj6);
IkReal x12651=((0.36442)*cj1);
IkReal x12652=(cj6*r01);
IkReal x12653=((0.01)*cj5);
IkReal x12654=(cj6*sj4);
IkReal x12655=(r00*sj6);
IkReal x12656=((1.0)*sj5);
IkReal x12657=(r02*sj5);
IkReal x12658=(cj6*r11);
IkReal x12659=(r12*sj5);
IkReal x12660=(cj4*cj6);
IkReal x12661=(cj5*r02);
IkReal x12662=(cj4*cj5);
IkReal x12663=((1.0)*cj4);
IkReal x12664=(r11*sj6);
IkReal x12665=(cj5*x12658);
IkReal x12666=(sj1*x12644);
IkReal x12667=((1.0)*x12645);
IkReal x12668=((0.069)*x12645);
evalcond[0]=((((-1.0)*x12656*x12658))+(((-1.0)*x12649*x12656))+x12647+x12666);
evalcond[1]=((((-1.0)*x12652*x12656))+((sj1*x12645))+x12661+(((-1.0)*x12655*x12656)));
evalcond[2]=((((-1.0)*x12646*x12657))+x12644+(((-1.0)*cj5*x12646*x12655))+(((-1.0)*cj5*x12646*x12652))+(((-1.0)*x12650*x12663))+((r00*x12660)));
evalcond[3]=((((-1.0)*cj1*x12667))+((x12655*x12662))+(((-1.0)*x12646*x12650))+((cj4*x12657))+((x12652*x12662))+((r00*x12654)));
evalcond[4]=(((r10*x12654))+((x12658*x12662))+((cj4*x12659))+((x12649*x12662))+(((-1.0)*x12646*x12664))+(((-1.0)*cj1*x12644)));
evalcond[5]=(((r10*x12660))+(((-1.0)*cj5*x12646*x12649))+(((-1.0)*x12667))+(((-1.0)*x12646*x12659))+(((-1.0)*x12663*x12664))+(((-1.0)*x12646*x12665)));
evalcond[6]=(((x12652*x12653))+((sj1*x12668))+((x12645*x12651))+(((0.37429)*x12661))+(((-1.0)*px))+x12668+(((0.01)*x12657))+(((-1.0)*x12648*x12652))+(((-1.0)*x12648*x12655))+((x12653*x12655)));
evalcond[7]=((((0.069)*x12666))+(((-1.0)*x12648*x12649))+((x12644*x12651))+(((0.069)*x12644))+(((-1.0)*py))+((x12649*x12653))+(((0.37429)*x12647))+(((0.01)*x12659))+(((-1.0)*x12648*x12658))+((x12653*x12658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x12678=IKPowWithIntegerCheck(cj1,-1);
if(!x12678.valid){
continue;
}
IkReal x12669=x12678.value;
IkReal x12670=(cj4*cj5);
IkReal x12671=(r00*sj2);
IkReal x12672=((1.0)*sj6);
IkReal x12673=(r01*sj4);
IkReal x12674=(cj1*sj5);
IkReal x12675=(cj6*r01);
IkReal x12676=(cj6*sj4);
IkReal x12677=(cj4*r02*sj5);
CheckValue<IkReal> x12679=IKPowWithIntegerCheck(cj2,-1);
if(!x12679.valid){
continue;
}
CheckValue<IkReal> x12680=IKPowWithIntegerCheck(sj1,-1);
if(!x12680.valid){
continue;
}
if( IKabs((x12669*(x12679.value)*(x12680.value)*((((sj2*x12670*x12675))+((cj1*cj5*r12))+(((-1.0)*r10*x12672*x12674))+(((-1.0)*sj2*x12672*x12673))+((sj6*x12670*x12671))+(((-1.0)*cj6*r11*x12674))+((x12671*x12676))+((sj2*x12677)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12669*((((r00*sj6*x12670))+((x12670*x12675))+x12677+(((-1.0)*x12672*x12673))+((r00*x12676)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12669*(x12679.value)*(x12680.value)*((((sj2*x12670*x12675))+((cj1*cj5*r12))+(((-1.0)*r10*x12672*x12674))+(((-1.0)*sj2*x12672*x12673))+((sj6*x12670*x12671))+(((-1.0)*cj6*r11*x12674))+((x12671*x12676))+((sj2*x12677))))))+IKsqr((x12669*((((r00*sj6*x12670))+((x12670*x12675))+x12677+(((-1.0)*x12672*x12673))+((r00*x12676))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x12669*(x12679.value)*(x12680.value)*((((sj2*x12670*x12675))+((cj1*cj5*r12))+(((-1.0)*r10*x12672*x12674))+(((-1.0)*sj2*x12672*x12673))+((sj6*x12670*x12671))+(((-1.0)*cj6*r11*x12674))+((x12671*x12676))+((sj2*x12677))))), (x12669*((((r00*sj6*x12670))+((x12670*x12675))+x12677+(((-1.0)*x12672*x12673))+((r00*x12676))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12681=IKsin(j0);
IkReal x12682=IKcos(j0);
IkReal x12683=((1.0)*sj4);
IkReal x12684=(cj5*r12);
IkReal x12685=((0.37429)*sj5);
IkReal x12686=(r10*sj6);
IkReal x12687=((0.36442)*cj1);
IkReal x12688=(cj6*r11);
IkReal x12689=(r01*sj6);
IkReal x12690=(r00*sj6);
IkReal x12691=((0.069)*sj2);
IkReal x12692=(cj6*r01);
IkReal x12693=((0.01)*cj5);
IkReal x12694=(r12*sj5);
IkReal x12695=((1.0)*sj5);
IkReal x12696=(cj6*r10);
IkReal x12697=(r02*sj5);
IkReal x12698=((1.0)*sj1);
IkReal x12699=((1.0)*cj1);
IkReal x12700=(cj5*r02);
IkReal x12701=(cj4*cj5);
IkReal x12702=(cj6*r00);
IkReal x12703=((1.0)*cj4);
IkReal x12704=(r11*sj6);
IkReal x12705=(cj5*x12688);
IkReal x12706=(cj2*x12682);
IkReal x12707=((0.069)*x12681);
IkReal x12708=(sj2*x12682);
IkReal x12709=((1.0)*x12681);
evalcond[0]=((((-1.0)*x12688*x12695))+x12708+(((-1.0)*cj2*x12681*x12698))+x12684+(((-1.0)*x12686*x12695)));
evalcond[1]=((((-1.0)*x12692*x12695))+(((-1.0)*sj2*x12709))+(((-1.0)*x12698*x12706))+x12700+(((-1.0)*x12690*x12695)));
evalcond[2]=(((x12690*x12701))+(((-1.0)*x12682*x12699))+((cj4*x12697))+((sj4*x12702))+((x12692*x12701))+(((-1.0)*x12683*x12689)));
evalcond[3]=((((-1.0)*x12683*x12704))+((sj4*x12696))+((cj4*x12694))+((x12686*x12701))+((x12688*x12701))+(((-1.0)*x12681*x12699)));
evalcond[4]=((((-1.0)*x12703*x12704))+(((-1.0)*x12683*x12705))+(((-1.0)*x12683*x12694))+((cj4*x12696))+x12706+((sj1*sj2*x12681))+(((-1.0)*cj5*x12683*x12686)));
evalcond[5]=((((-1.0)*cj2*x12709))+(((-1.0)*cj5*x12683*x12690))+(((-1.0)*cj5*x12683*x12692))+((cj4*x12702))+(((-1.0)*x12683*x12697))+(((-1.0)*x12689*x12703))+((sj1*x12708)));
evalcond[6]=(((x12682*x12687))+((x12690*x12693))+(((-1.0)*px))+((x12692*x12693))+(((-0.069)*sj1*x12706))+(((0.37429)*x12700))+(((0.069)*x12682))+(((0.01)*x12697))+(((-1.0)*x12685*x12692))+(((-1.0)*x12685*x12690))+(((-1.0)*x12681*x12691)));
evalcond[7]=((((0.37429)*x12684))+(((-1.0)*py))+(((-1.0)*cj2*sj1*x12707))+x12707+(((-1.0)*x12685*x12686))+(((-1.0)*x12685*x12688))+(((0.01)*x12694))+((x12686*x12693))+((x12681*x12687))+((x12682*x12691))+((x12688*x12693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x12719=IKPowWithIntegerCheck(cj1,-1);
if(!x12719.valid){
continue;
}
IkReal x12710=x12719.value;
IkReal x12711=(cj4*cj5);
IkReal x12712=(cj6*r11);
IkReal x12713=(r10*sj6);
IkReal x12714=(cj1*sj5);
IkReal x12715=(cj2*sj1);
IkReal x12716=(cj6*r10*sj4);
IkReal x12717=(cj4*r12*sj5);
IkReal x12718=((1.0)*r11*sj4*sj6);
CheckValue<IkReal> x12720=IKPowWithIntegerCheck(sj2,-1);
if(!x12720.valid){
continue;
}
if( IKabs((x12710*(((((-1.0)*x12718))+((x12711*x12712))+((x12711*x12713))+x12716+x12717)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x12710*(x12720.value)*((((x12715*x12717))+((x12715*x12716))+(((-1.0)*x12715*x12718))+(((-1.0)*cj1*cj5*r12))+((x12711*x12713*x12715))+((x12713*x12714))+((x12712*x12714))+((x12711*x12712*x12715)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12710*(((((-1.0)*x12718))+((x12711*x12712))+((x12711*x12713))+x12716+x12717))))+IKsqr((x12710*(x12720.value)*((((x12715*x12717))+((x12715*x12716))+(((-1.0)*x12715*x12718))+(((-1.0)*cj1*cj5*r12))+((x12711*x12713*x12715))+((x12713*x12714))+((x12712*x12714))+((x12711*x12712*x12715))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x12710*(((((-1.0)*x12718))+((x12711*x12712))+((x12711*x12713))+x12716+x12717))), (x12710*(x12720.value)*((((x12715*x12717))+((x12715*x12716))+(((-1.0)*x12715*x12718))+(((-1.0)*cj1*cj5*r12))+((x12711*x12713*x12715))+((x12713*x12714))+((x12712*x12714))+((x12711*x12712*x12715))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12721=IKsin(j0);
IkReal x12722=IKcos(j0);
IkReal x12723=((1.0)*sj4);
IkReal x12724=(cj5*r12);
IkReal x12725=((0.37429)*sj5);
IkReal x12726=(r10*sj6);
IkReal x12727=((0.36442)*cj1);
IkReal x12728=(cj6*r11);
IkReal x12729=(r01*sj6);
IkReal x12730=(r00*sj6);
IkReal x12731=((0.069)*sj2);
IkReal x12732=(cj6*r01);
IkReal x12733=((0.01)*cj5);
IkReal x12734=(r12*sj5);
IkReal x12735=((1.0)*sj5);
IkReal x12736=(cj6*r10);
IkReal x12737=(r02*sj5);
IkReal x12738=((1.0)*sj1);
IkReal x12739=((1.0)*cj1);
IkReal x12740=(cj5*r02);
IkReal x12741=(cj4*cj5);
IkReal x12742=(cj6*r00);
IkReal x12743=((1.0)*cj4);
IkReal x12744=(r11*sj6);
IkReal x12745=(cj5*x12728);
IkReal x12746=(cj2*x12722);
IkReal x12747=((0.069)*x12721);
IkReal x12748=(sj2*x12722);
IkReal x12749=((1.0)*x12721);
evalcond[0]=((((-1.0)*x12728*x12735))+(((-1.0)*cj2*x12721*x12738))+x12724+x12748+(((-1.0)*x12726*x12735)));
evalcond[1]=((((-1.0)*sj2*x12749))+x12740+(((-1.0)*x12730*x12735))+(((-1.0)*x12738*x12746))+(((-1.0)*x12732*x12735)));
evalcond[2]=(((cj4*x12737))+((x12732*x12741))+((x12730*x12741))+(((-1.0)*x12723*x12729))+(((-1.0)*x12722*x12739))+((sj4*x12742)));
evalcond[3]=(((x12726*x12741))+((cj4*x12734))+((sj4*x12736))+((x12728*x12741))+(((-1.0)*x12723*x12744))+(((-1.0)*x12721*x12739)));
evalcond[4]=(((cj4*x12736))+(((-1.0)*x12723*x12734))+(((-1.0)*cj5*x12723*x12726))+(((-1.0)*x12723*x12745))+(((-1.0)*x12743*x12744))+x12746+((sj1*sj2*x12721)));
evalcond[5]=(((cj4*x12742))+(((-1.0)*x12729*x12743))+(((-1.0)*x12723*x12737))+((sj1*x12748))+(((-1.0)*cj5*x12723*x12732))+(((-1.0)*cj5*x12723*x12730))+(((-1.0)*cj2*x12749)));
evalcond[6]=(((x12722*x12727))+((x12732*x12733))+((x12730*x12733))+(((-1.0)*px))+(((-1.0)*x12725*x12732))+(((-1.0)*x12725*x12730))+(((0.01)*x12737))+(((0.069)*x12722))+(((-1.0)*x12721*x12731))+(((-0.069)*sj1*x12746))+(((0.37429)*x12740)));
evalcond[7]=(((x12721*x12727))+((x12722*x12731))+((x12728*x12733))+(((-1.0)*cj2*sj1*x12747))+(((-1.0)*py))+(((0.37429)*x12724))+x12747+(((-1.0)*x12725*x12726))+(((-1.0)*x12725*x12728))+(((0.01)*x12734))+((x12726*x12733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12750=(cj2*sj1);
IkReal x12751=(cj5*r02);
IkReal x12752=(cj6*sj5);
IkReal x12753=((1.0)*r01);
IkReal x12754=(cj5*r12);
IkReal x12755=((1.0)*r00);
IkReal x12756=(sj5*sj6);
IkReal x12757=(sj2*x12756);
CheckValue<IkReal> x12758=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x12758.valid){
continue;
}
CheckValue<IkReal> x12759 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12750*x12756))+((sj2*x12751))+(((-1.0)*sj2*x12752*x12753))+(((-1.0)*x12755*x12757))+(((-1.0)*r11*x12750*x12752))+((x12750*x12754)))),((((-1.0)*x12750*x12755*x12756))+((r11*sj2*x12752))+(((-1.0)*sj2*x12754))+(((-1.0)*x12750*x12752*x12753))+((r10*x12757))+((x12750*x12751))),IKFAST_ATAN2_MAGTHRESH);
if(!x12759.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12758.value)))+(x12759.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x12760=IKsin(j0);
IkReal x12761=IKcos(j0);
IkReal x12762=((1.0)*sj4);
IkReal x12763=(cj5*r12);
IkReal x12764=((0.37429)*sj5);
IkReal x12765=(r10*sj6);
IkReal x12766=((0.36442)*cj1);
IkReal x12767=(cj6*r11);
IkReal x12768=(r01*sj6);
IkReal x12769=(r00*sj6);
IkReal x12770=((0.069)*sj2);
IkReal x12771=(cj6*r01);
IkReal x12772=((0.01)*cj5);
IkReal x12773=(r12*sj5);
IkReal x12774=((1.0)*sj5);
IkReal x12775=(cj6*r10);
IkReal x12776=(r02*sj5);
IkReal x12777=((1.0)*sj1);
IkReal x12778=((1.0)*cj1);
IkReal x12779=(cj5*r02);
IkReal x12780=(cj4*cj5);
IkReal x12781=(cj6*r00);
IkReal x12782=((1.0)*cj4);
IkReal x12783=(r11*sj6);
IkReal x12784=(cj5*x12767);
IkReal x12785=(cj2*x12761);
IkReal x12786=((0.069)*x12760);
IkReal x12787=(sj2*x12761);
IkReal x12788=((1.0)*x12760);
evalcond[0]=((((-1.0)*x12767*x12774))+x12787+x12763+(((-1.0)*cj2*x12760*x12777))+(((-1.0)*x12765*x12774)));
evalcond[1]=((((-1.0)*x12771*x12774))+(((-1.0)*x12769*x12774))+x12779+(((-1.0)*x12777*x12785))+(((-1.0)*sj2*x12788)));
evalcond[2]=((((-1.0)*x12762*x12768))+((sj4*x12781))+((x12771*x12780))+(((-1.0)*x12761*x12778))+((x12769*x12780))+((cj4*x12776)));
evalcond[3]=(((sj4*x12775))+(((-1.0)*x12762*x12783))+(((-1.0)*x12760*x12778))+((x12767*x12780))+((cj4*x12773))+((x12765*x12780)));
evalcond[4]=((((-1.0)*cj5*x12762*x12765))+(((-1.0)*x12762*x12773))+(((-1.0)*x12782*x12783))+((sj1*sj2*x12760))+x12785+(((-1.0)*x12762*x12784))+((cj4*x12775)));
evalcond[5]=((((-1.0)*cj5*x12762*x12771))+((sj1*x12787))+(((-1.0)*cj5*x12762*x12769))+(((-1.0)*cj2*x12788))+(((-1.0)*x12762*x12776))+((cj4*x12781))+(((-1.0)*x12768*x12782)));
evalcond[6]=((((-1.0)*x12764*x12771))+(((0.37429)*x12779))+(((0.01)*x12776))+(((-0.069)*sj1*x12785))+(((-1.0)*px))+(((-1.0)*x12764*x12769))+(((0.069)*x12761))+((x12771*x12772))+(((-1.0)*x12760*x12770))+((x12769*x12772))+((x12761*x12766)));
evalcond[7]=(((x12761*x12770))+((x12765*x12772))+(((-1.0)*cj2*sj1*x12786))+((x12767*x12772))+(((0.01)*x12773))+(((-1.0)*py))+(((-1.0)*x12764*x12767))+(((-1.0)*x12764*x12765))+x12786+((x12760*x12766))+(((0.37429)*x12763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12789=(cj2*sj1);
IkReal x12790=(cj5*r02);
IkReal x12791=(cj6*sj5);
IkReal x12792=((1.0)*r01);
IkReal x12793=(cj5*r12);
IkReal x12794=((1.0)*r00);
IkReal x12795=(sj5*sj6);
IkReal x12796=(sj2*x12795);
CheckValue<IkReal> x12797=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*(cj1*cj1)*(cj2*cj2))))),-1);
if(!x12797.valid){
continue;
}
CheckValue<IkReal> x12798 = IKatan2WithCheck(IkReal(((((-1.0)*x12794*x12796))+(((-1.0)*r11*x12789*x12791))+(((-1.0)*r10*x12789*x12795))+((x12789*x12793))+(((-1.0)*sj2*x12791*x12792))+((sj2*x12790)))),((((-1.0)*x12789*x12794*x12795))+(((-1.0)*sj2*x12793))+((r10*x12796))+((x12789*x12790))+(((-1.0)*x12789*x12791*x12792))+((r11*sj2*x12791))),IKFAST_ATAN2_MAGTHRESH);
if(!x12798.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12797.value)))+(x12798.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x12799=IKsin(j0);
IkReal x12800=IKcos(j0);
IkReal x12801=((0.01)*cj5);
IkReal x12802=(cj6*r11);
IkReal x12803=(cj5*r12);
IkReal x12804=(r10*sj6);
IkReal x12805=((0.37429)*sj5);
IkReal x12806=((0.36442)*cj1);
IkReal x12807=((1.0)*sj5);
IkReal x12808=(r00*sj6);
IkReal x12809=(cj6*r01);
IkReal x12810=(cj2*sj1);
IkReal x12811=(cj5*r02);
IkReal x12812=((0.01)*sj5);
IkReal x12813=((0.069)*x12799);
IkReal x12814=((0.069)*x12800);
IkReal x12815=((1.0)*x12799);
evalcond[0]=(x12803+(((-1.0)*x12810*x12815))+(((-1.0)*x12804*x12807))+(((-1.0)*x12802*x12807))+((sj2*x12800)));
evalcond[1]=(x12811+(((-1.0)*x12800*x12810))+(((-1.0)*sj2*x12815))+(((-1.0)*x12807*x12809))+(((-1.0)*x12807*x12808)));
evalcond[2]=(((x12801*x12808))+((x12801*x12809))+x12814+((x12800*x12806))+((r02*x12812))+(((-1.0)*x12810*x12814))+(((-1.0)*sj2*x12813))+(((-1.0)*x12805*x12808))+(((-1.0)*x12805*x12809))+(((-1.0)*px))+(((0.37429)*x12811)));
evalcond[3]=(((sj2*x12814))+((x12801*x12804))+((x12801*x12802))+x12813+((x12799*x12806))+(((-1.0)*x12810*x12813))+((r12*x12812))+(((-1.0)*py))+(((-1.0)*x12804*x12805))+(((-1.0)*x12802*x12805))+(((0.37429)*x12803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12816=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x12816;
j4eval[1]=IKsign(x12816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12817=((1.0)*sj5);
IkReal x12818=((((-1.0)*r00*sj6*x12817))+(((-1.0)*cj6*r01*x12817))+((cj5*r02)));
j4eval[0]=x12818;
j4eval[1]=IKsign(x12818);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12819=(((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)));
j4eval[0]=x12819;
j4eval[1]=IKsign(x12819);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12820=(cj1*sj0);
IkReal x12821=(cj0*cj1);
IkReal x12822=(cj5*cj6);
IkReal x12823=((1.0)*sj6);
CheckValue<IkReal> x12824=IKPowWithIntegerCheck(IKsign((((r20*sj5*sj6))+((cj6*r21*sj5))+(((-1.0)*cj5*r22)))),-1);
if(!x12824.valid){
continue;
}
CheckValue<IkReal> x12825 = IKatan2WithCheck(IkReal((((cj5*r00*sj6*x12820))+(((-1.0)*r11*x12821*x12822))+(((-1.0)*cj5*r10*x12821*x12823))+((r01*x12820*x12822))+(((-1.0)*r12*sj5*x12821))+((r02*sj5*x12820)))),((((-1.0)*cj6*r00*x12820))+((r01*sj6*x12820))+((cj6*r10*x12821))+(((-1.0)*r11*x12821*x12823))),IKFAST_ATAN2_MAGTHRESH);
if(!x12825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12824.value)))+(x12825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12826=IKcos(j4);
IkReal x12827=IKsin(j4);
IkReal x12828=((1.0)*cj1);
IkReal x12829=(sj1*sj2);
IkReal x12830=(r10*sj6);
IkReal x12831=(r00*sj6);
IkReal x12832=((1.0)*sj6);
IkReal x12833=(r20*sj6);
IkReal x12834=(cj6*x12826);
IkReal x12835=(sj5*x12826);
IkReal x12836=(cj6*x12827);
IkReal x12837=(cj5*x12826);
IkReal x12838=(cj5*x12834);
IkReal x12839=((1.0)*sj5*x12827);
IkReal x12840=((1.0)*cj5*x12827);
evalcond[0]=(sj1+((r21*x12838))+((r22*x12835))+((x12833*x12837))+((r20*x12836))+(((-1.0)*r21*x12827*x12832)));
evalcond[1]=(((r02*x12835))+((r00*x12836))+((r01*x12838))+(((-1.0)*cj0*x12828))+((x12831*x12837))+(((-1.0)*r01*x12827*x12832)));
evalcond[2]=(((r10*x12836))+(((-1.0)*r11*x12827*x12832))+((r12*x12835))+((x12830*x12837))+((r11*x12838))+(((-1.0)*sj0*x12828)));
evalcond[3]=((((-1.0)*cj5*r20*x12827*x12832))+(((-1.0)*cj5*r21*x12836))+((cj1*sj2))+(((-1.0)*r22*x12839))+((r20*x12834))+(((-1.0)*r21*x12826*x12832)));
evalcond[4]=((((-1.0)*r11*x12826*x12832))+((r10*x12834))+(((-1.0)*x12830*x12840))+((sj0*x12829))+((cj0*cj2))+(((-1.0)*r12*x12839))+(((-1.0)*cj5*r11*x12836)));
evalcond[5]=((((-1.0)*x12831*x12840))+((cj0*x12829))+(((-1.0)*cj2*sj0))+(((-1.0)*cj5*r01*x12836))+(((-1.0)*r02*x12839))+((r00*x12834))+(((-1.0)*r01*x12826*x12832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12841=(sj1*sj6);
IkReal x12842=((1.0)*cj6);
IkReal x12843=(cj1*sj0);
IkReal x12844=(cj5*cj6);
IkReal x12845=(r20*x12843);
CheckValue<IkReal> x12846 = IKatan2WithCheck(IkReal((((r21*x12843*x12844))+((r12*sj1*sj5))+((r11*sj1*x12844))+((cj5*r10*x12841))+((r22*sj5*x12843))+((cj5*sj6*x12845)))),((((-1.0)*r10*sj1*x12842))+((r11*x12841))+(((-1.0)*x12842*x12845))+((r21*sj6*x12843))),IKFAST_ATAN2_MAGTHRESH);
if(!x12846.valid){
continue;
}
CheckValue<IkReal> x12847=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x12842))+(((-1.0)*r00*sj5*sj6))+((cj5*r02)))),-1);
if(!x12847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12846.value)+(((1.5707963267949)*(x12847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12848=IKcos(j4);
IkReal x12849=IKsin(j4);
IkReal x12850=((1.0)*cj1);
IkReal x12851=(sj1*sj2);
IkReal x12852=(r10*sj6);
IkReal x12853=(r00*sj6);
IkReal x12854=((1.0)*sj6);
IkReal x12855=(r20*sj6);
IkReal x12856=(cj6*x12848);
IkReal x12857=(sj5*x12848);
IkReal x12858=(cj6*x12849);
IkReal x12859=(cj5*x12848);
IkReal x12860=(cj5*x12856);
IkReal x12861=((1.0)*sj5*x12849);
IkReal x12862=((1.0)*cj5*x12849);
evalcond[0]=(((x12855*x12859))+sj1+((r21*x12860))+((r22*x12857))+(((-1.0)*r21*x12849*x12854))+((r20*x12858)));
evalcond[1]=(((x12853*x12859))+(((-1.0)*r01*x12849*x12854))+((r00*x12858))+((r02*x12857))+((r01*x12860))+(((-1.0)*cj0*x12850)));
evalcond[2]=(((x12852*x12859))+(((-1.0)*r11*x12849*x12854))+((r11*x12860))+((r10*x12858))+(((-1.0)*sj0*x12850))+((r12*x12857)));
evalcond[3]=((((-1.0)*cj5*r20*x12849*x12854))+((cj1*sj2))+(((-1.0)*r22*x12861))+(((-1.0)*cj5*r21*x12858))+(((-1.0)*r21*x12848*x12854))+((r20*x12856)));
evalcond[4]=((((-1.0)*cj5*r11*x12858))+((r10*x12856))+((cj0*cj2))+((sj0*x12851))+(((-1.0)*x12852*x12862))+(((-1.0)*r12*x12861))+(((-1.0)*r11*x12848*x12854)));
evalcond[5]=(((r00*x12856))+(((-1.0)*cj2*sj0))+((cj0*x12851))+(((-1.0)*r02*x12861))+(((-1.0)*x12853*x12862))+(((-1.0)*cj5*r01*x12858))+(((-1.0)*r01*x12848*x12854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12863=(cj0*cj1);
IkReal x12864=(cj5*cj6);
IkReal x12865=(cj5*sj6);
IkReal x12866=(r00*sj1);
IkReal x12867=((1.0)*cj6);
IkReal x12868=(r01*sj1);
CheckValue<IkReal> x12869 = IKatan2WithCheck(IkReal((((x12865*x12866))+((x12864*x12868))+((r22*sj5*x12863))+((r20*x12863*x12865))+((r21*x12863*x12864))+((r02*sj1*sj5)))),(((r21*sj6*x12863))+(((-1.0)*x12866*x12867))+(((-1.0)*r20*x12863*x12867))+((sj6*x12868))),IKFAST_ATAN2_MAGTHRESH);
if(!x12869.valid){
continue;
}
CheckValue<IkReal> x12870=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x12870.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12869.value)+(((1.5707963267949)*(x12870.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12871=IKcos(j4);
IkReal x12872=IKsin(j4);
IkReal x12873=((1.0)*cj1);
IkReal x12874=(sj1*sj2);
IkReal x12875=(r10*sj6);
IkReal x12876=(r00*sj6);
IkReal x12877=((1.0)*sj6);
IkReal x12878=(r20*sj6);
IkReal x12879=(cj6*x12871);
IkReal x12880=(sj5*x12871);
IkReal x12881=(cj6*x12872);
IkReal x12882=(cj5*x12871);
IkReal x12883=(cj5*x12879);
IkReal x12884=((1.0)*sj5*x12872);
IkReal x12885=((1.0)*cj5*x12872);
evalcond[0]=(sj1+((r20*x12881))+((r22*x12880))+(((-1.0)*r21*x12872*x12877))+((x12878*x12882))+((r21*x12883)));
evalcond[1]=(((r00*x12881))+((r01*x12883))+((r02*x12880))+(((-1.0)*r01*x12872*x12877))+(((-1.0)*cj0*x12873))+((x12876*x12882)));
evalcond[2]=(((x12875*x12882))+(((-1.0)*sj0*x12873))+(((-1.0)*r11*x12872*x12877))+((r12*x12880))+((r10*x12881))+((r11*x12883)));
evalcond[3]=((((-1.0)*r22*x12884))+((cj1*sj2))+(((-1.0)*r21*x12871*x12877))+((r20*x12879))+(((-1.0)*cj5*r20*x12872*x12877))+(((-1.0)*cj5*r21*x12881)));
evalcond[4]=((((-1.0)*cj5*r11*x12881))+(((-1.0)*x12875*x12885))+((r10*x12879))+(((-1.0)*r12*x12884))+((cj0*cj2))+((sj0*x12874))+(((-1.0)*r11*x12871*x12877)));
evalcond[5]=((((-1.0)*r02*x12884))+((cj0*x12874))+(((-1.0)*cj2*sj0))+((r00*x12879))+(((-1.0)*x12876*x12885))+(((-1.0)*cj5*r01*x12881))+(((-1.0)*r01*x12871*x12877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x12886=(cj5*r22);
IkReal x12887=(cj6*r21);
IkReal x12888=((1.0)*sj5);
IkReal x12889=((0.01)*cj5);
IkReal x12890=(r20*sj6);
IkReal x12891=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
evalcond[1]=(((x12887*x12889))+(((0.01)*r22*sj5))+(((0.37429)*x12886))+(((-1.0)*pz))+(((-1.0)*x12890*x12891))+((x12889*x12890))+(((-1.0)*x12887*x12891))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)));
evalcond[2]=(x12886+sj1+(((-1.0)*x12888*x12890))+(((-1.0)*x12887*x12888)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x12892=((1.0)*cj6*sj5);
IkReal x12893=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x12892))+(((-1.0)*r10*x12893)))))+(IKabs(((((-1.0)*r00*x12893))+(((-1.0)*r01*x12892))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x12894=cj5*cj5;
IkReal x12895=cj6*cj6;
IkReal x12896=r22*r22;
IkReal x12897=r21*r21;
IkReal x12898=r20*r20;
IkReal x12899=(cj6*r21);
IkReal x12900=(r20*sj6);
IkReal x12901=(cj1*cj2);
IkReal x12902=(r22*sj5);
IkReal x12903=(cj6*r20);
IkReal x12904=((2.0)*cj5);
IkReal x12905=(cj1*sj2);
IkReal x12906=((1.0)*x12897);
IkReal x12907=((1.0)*x12898);
IkReal x12908=((1.0)*r21*sj6);
IkReal x12909=((1.0)*cj5*x12905);
IkReal x12910=(x12894*x12895);
IkReal x12911=((((-1.0)*x12896))+(((-1.0)*x12894*x12907))+(((-1.0)*x12899*x12902*x12904))+(((2.0)*x12899*x12900))+(((-1.0)*x12906))+((x12894*x12896))+((x12895*x12897))+(((-1.0)*x12906*x12910))+(((-2.0)*x12894*x12899*x12900))+((x12898*x12910))+(((-1.0)*x12900*x12902*x12904))+(((-1.0)*x12895*x12907)));
j4eval[0]=x12911;
j4eval[1]=((IKabs((((x12903*x12905))+((cj5*x12899*x12901))+(((-1.0)*x12905*x12908))+((x12901*x12902))+((cj5*x12900*x12901)))))+(IKabs(((((-1.0)*x12899*x12909))+(((-1.0)*x12901*x12908))+(((-1.0)*x12900*x12909))+(((-1.0)*x12902*x12905))+((x12901*x12903))))));
j4eval[2]=IKsign(x12911);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=(cj1+(((-1.0)*cj1*cj2*sj1))+(((5.28144927536232)*(cj1*cj1))));
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x12912=(cj5*r22);
IkReal x12913=(cj6*r21);
IkReal x12914=((1.0)*sj5);
IkReal x12915=((0.01)*cj5);
IkReal x12916=(r20*sj6);
IkReal x12917=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+((x12915*x12916))+(((0.01)*r22*sj5))+(((-1.0)*x12916*x12917))+(((-1.0)*pz))+(((-1.0)*x12913*x12917))+(((0.37429)*x12912))+((x12913*x12915)));
evalcond[2]=((1.0)+x12912+(((-1.0)*x12914*x12916))+(((-1.0)*x12913*x12914)));
evalcond[3]=((((-1.0)*cj6*r01*x12914))+(((-1.0)*r00*sj6*x12914))+((cj5*r02)));
evalcond[4]=(((cj5*r12))+(((-1.0)*cj6*r11*x12914))+(((-1.0)*r10*sj6*x12914)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((9522.0)+(((-9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12918=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*r22*sj5))+(((-1.0)*cj5*cj6*x12918)))))+(IKabs(((((-1.0)*sj6*x12918))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x12919=((1.0)*cj5);
j4eval[0]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*r20*sj6*x12919))+(((-1.0)*cj6*r21*x12919))+(((-1.0)*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x12920=((1.0)*cj5);
CheckValue<IkReal> x12922 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj6*x12920))+(((-1.0)*r22*sj5))+(((-1.0)*cj6*r21*x12920)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x12922.valid){
continue;
}
IkReal x12921=x12922.value;
j4array[0]=((-1.0)*x12921);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x12921)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x12923=IKsin(j4);
IkReal x12924=IKcos(j4);
IkReal x12925=((1.0)*x12923);
evalcond[0]=(((cj6*r20*x12924))+(((-1.0)*r21*sj6*x12924))+(((-1.0)*cj5*cj6*r21*x12925))+(((-1.0)*cj5*r20*sj6*x12925))+(((-1.0)*r22*sj5*x12925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12926=(cj6*r10);
IkReal x12927=(sj2*sj4);
IkReal x12928=(r12*sj5);
IkReal x12929=(r01*sj6);
IkReal x12930=(cj2*r11);
IkReal x12931=(cj4*sj6);
IkReal x12932=((1.0)*cj6);
IkReal x12933=(cj4*r00);
IkReal x12934=(cj5*sj6);
IkReal x12935=(cj5*cj6);
IkReal x12936=(cj2*sj4);
IkReal x12937=(r02*sj5);
IkReal x12938=(cj4*sj2);
IkReal x12939=((1.0)*cj2*cj4);
if( IKabs((((r10*x12927*x12934))+((cj2*cj6*x12933))+(((-1.0)*cj5*r01*x12932*x12936))+((r11*x12927*x12935))+(((-1.0)*x12929*x12939))+(((-1.0)*x12936*x12937))+((x12927*x12928))+(((-1.0)*x12926*x12938))+((r11*sj2*x12931))+(((-1.0)*r00*x12934*x12936)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x12930*x12931))+(((-1.0)*x12926*x12939))+((r00*x12927*x12934))+((r01*x12927*x12935))+((sj4*x12930*x12935))+((x12928*x12936))+((x12927*x12937))+((x12929*x12938))+((r10*x12934*x12936))+(((-1.0)*sj2*x12932*x12933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x12927*x12934))+((cj2*cj6*x12933))+(((-1.0)*cj5*r01*x12932*x12936))+((r11*x12927*x12935))+(((-1.0)*x12929*x12939))+(((-1.0)*x12936*x12937))+((x12927*x12928))+(((-1.0)*x12926*x12938))+((r11*sj2*x12931))+(((-1.0)*r00*x12934*x12936))))+IKsqr((((x12930*x12931))+(((-1.0)*x12926*x12939))+((r00*x12927*x12934))+((r01*x12927*x12935))+((sj4*x12930*x12935))+((x12928*x12936))+((x12927*x12937))+((x12929*x12938))+((r10*x12934*x12936))+(((-1.0)*sj2*x12932*x12933))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x12927*x12934))+((cj2*cj6*x12933))+(((-1.0)*cj5*r01*x12932*x12936))+((r11*x12927*x12935))+(((-1.0)*x12929*x12939))+(((-1.0)*x12936*x12937))+((x12927*x12928))+(((-1.0)*x12926*x12938))+((r11*sj2*x12931))+(((-1.0)*r00*x12934*x12936))), (((x12930*x12931))+(((-1.0)*x12926*x12939))+((r00*x12927*x12934))+((r01*x12927*x12935))+((sj4*x12930*x12935))+((x12928*x12936))+((x12927*x12937))+((x12929*x12938))+((r10*x12934*x12936))+(((-1.0)*sj2*x12932*x12933))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12940=IKcos(j0);
IkReal x12941=IKsin(j0);
IkReal x12942=((1.0)*sj4);
IkReal x12943=((0.37429)*sj5);
IkReal x12944=(r10*sj6);
IkReal x12945=(cj6*r00);
IkReal x12946=((0.37429)*cj5);
IkReal x12947=(cj6*r01);
IkReal x12948=((0.01)*cj5);
IkReal x12949=((1.0)*cj4);
IkReal x12950=(r00*sj6);
IkReal x12951=(r02*sj5);
IkReal x12952=(r12*sj5);
IkReal x12953=(cj6*r10);
IkReal x12954=(r01*sj6);
IkReal x12955=(r11*sj6);
IkReal x12956=(sj2*x12940);
IkReal x12957=(cj5*cj6*r11);
IkReal x12958=((0.069)*x12941);
IkReal x12959=(cj2*x12940);
IkReal x12960=((0.069)*x12940);
IkReal x12961=(sj2*x12941);
IkReal x12962=((1.0)*cj2*x12941);
evalcond[0]=(x12961+x12959+(((-1.0)*cj5*x12942*x12944))+((cj4*x12953))+(((-1.0)*x12942*x12952))+(((-1.0)*x12942*x12957))+(((-1.0)*x12949*x12955)));
evalcond[1]=(x12956+(((-1.0)*cj5*x12942*x12947))+(((-1.0)*cj5*x12942*x12950))+(((-1.0)*x12962))+((cj4*x12945))+(((-1.0)*x12942*x12951))+(((-1.0)*x12949*x12954)));
evalcond[2]=(x12956+(((-1.0)*x12962))+(((-1.0)*cj5*x12944*x12949))+((sj4*x12955))+(((-1.0)*x12942*x12953))+(((-1.0)*x12949*x12952))+(((-1.0)*x12949*x12957)));
evalcond[3]=((((-1.0)*cj5*x12947*x12949))+(((-1.0)*x12961))+((sj4*x12954))+(((-1.0)*x12959))+(((-1.0)*x12942*x12945))+(((-1.0)*x12949*x12951))+(((-1.0)*cj5*x12949*x12950)));
evalcond[4]=((((-1.0)*x12943*x12950))+x12960+(((0.01)*x12951))+((x12947*x12948))+(((-1.0)*px))+((x12948*x12950))+(((-0.069)*x12959))+((r02*x12946))+(((-1.0)*x12943*x12947))+(((-1.0)*sj2*x12958)));
evalcond[5]=(x12958+(((0.01)*x12952))+(((-1.0)*cj6*r11*x12943))+((x12944*x12948))+((r12*x12946))+(((-1.0)*py))+(((-1.0)*cj2*x12958))+(((0.069)*x12956))+((cj6*r11*x12948))+(((-1.0)*x12943*x12944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x12963=((1.0)*cj5);
CheckValue<IkReal> x12965 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),((((-1.0)*cj6*r21*x12963))+(((-1.0)*r22*sj5))+(((-1.0)*r20*sj6*x12963))),IKFAST_ATAN2_MAGTHRESH);
if(!x12965.valid){
continue;
}
IkReal x12964=x12965.value;
j4array[0]=((-1.0)*x12964);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x12964)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x12966=IKsin(j4);
IkReal x12967=IKcos(j4);
IkReal x12968=((1.0)*cj6);
IkReal x12969=(cj5*x12967);
evalcond[0]=((((-1.0)*r20*x12966*x12968))+((r21*sj6*x12966))+(((-1.0)*r22*sj5*x12967))+(((-1.0)*r21*x12968*x12969))+(((-1.0)*r20*sj6*x12969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x12970=(cj6*r10);
IkReal x12971=(sj2*sj4);
IkReal x12972=(r12*sj5);
IkReal x12973=(r01*sj6);
IkReal x12974=(cj2*r11);
IkReal x12975=(cj4*sj6);
IkReal x12976=((1.0)*cj6);
IkReal x12977=(cj4*r00);
IkReal x12978=(cj5*sj6);
IkReal x12979=(cj5*cj6);
IkReal x12980=(cj2*sj4);
IkReal x12981=(r02*sj5);
IkReal x12982=(cj4*sj2);
IkReal x12983=((1.0)*cj2*cj4);
if( IKabs((((r10*x12971*x12978))+(((-1.0)*x12970*x12982))+((cj2*cj6*x12977))+(((-1.0)*x12980*x12981))+(((-1.0)*x12973*x12983))+(((-1.0)*r00*x12978*x12980))+((r11*sj2*x12975))+((r11*x12971*x12979))+(((-1.0)*cj5*r01*x12976*x12980))+((x12971*x12972)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x12973*x12982))+((sj4*x12974*x12979))+((r00*x12971*x12978))+((r01*x12971*x12979))+(((-1.0)*x12970*x12983))+((x12974*x12975))+((x12972*x12980))+(((-1.0)*sj2*x12976*x12977))+((x12971*x12981))+((r10*x12978*x12980)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x12971*x12978))+(((-1.0)*x12970*x12982))+((cj2*cj6*x12977))+(((-1.0)*x12980*x12981))+(((-1.0)*x12973*x12983))+(((-1.0)*r00*x12978*x12980))+((r11*sj2*x12975))+((r11*x12971*x12979))+(((-1.0)*cj5*r01*x12976*x12980))+((x12971*x12972))))+IKsqr((((x12973*x12982))+((sj4*x12974*x12979))+((r00*x12971*x12978))+((r01*x12971*x12979))+(((-1.0)*x12970*x12983))+((x12974*x12975))+((x12972*x12980))+(((-1.0)*sj2*x12976*x12977))+((x12971*x12981))+((r10*x12978*x12980))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x12971*x12978))+(((-1.0)*x12970*x12982))+((cj2*cj6*x12977))+(((-1.0)*x12980*x12981))+(((-1.0)*x12973*x12983))+(((-1.0)*r00*x12978*x12980))+((r11*sj2*x12975))+((r11*x12971*x12979))+(((-1.0)*cj5*r01*x12976*x12980))+((x12971*x12972))), (((x12973*x12982))+((sj4*x12974*x12979))+((r00*x12971*x12978))+((r01*x12971*x12979))+(((-1.0)*x12970*x12983))+((x12974*x12975))+((x12972*x12980))+(((-1.0)*sj2*x12976*x12977))+((x12971*x12981))+((r10*x12978*x12980))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x12984=IKcos(j0);
IkReal x12985=IKsin(j0);
IkReal x12986=((1.0)*sj4);
IkReal x12987=((0.37429)*sj5);
IkReal x12988=(r10*sj6);
IkReal x12989=(cj6*r00);
IkReal x12990=((0.37429)*cj5);
IkReal x12991=(cj6*r01);
IkReal x12992=((0.01)*cj5);
IkReal x12993=((1.0)*cj4);
IkReal x12994=(r00*sj6);
IkReal x12995=(r02*sj5);
IkReal x12996=(r12*sj5);
IkReal x12997=(cj6*r10);
IkReal x12998=(r01*sj6);
IkReal x12999=(r11*sj6);
IkReal x13000=(sj2*x12984);
IkReal x13001=(cj5*cj6*r11);
IkReal x13002=((0.069)*x12985);
IkReal x13003=(cj2*x12984);
IkReal x13004=((0.069)*x12984);
IkReal x13005=(sj2*x12985);
IkReal x13006=((1.0)*cj2*x12985);
evalcond[0]=((((-1.0)*cj5*x12986*x12988))+((cj4*x12997))+(((-1.0)*x12986*x13001))+x13005+x13003+(((-1.0)*x12993*x12999))+(((-1.0)*x12986*x12996)));
evalcond[1]=((((-1.0)*cj5*x12986*x12994))+(((-1.0)*cj5*x12986*x12991))+(((-1.0)*x13006))+((cj4*x12989))+x13000+(((-1.0)*x12993*x12998))+(((-1.0)*x12986*x12995)));
evalcond[2]=((((-1.0)*cj5*x12988*x12993))+((sj4*x12999))+(((-1.0)*x13006))+(((-1.0)*x12993*x13001))+x13000+(((-1.0)*x12993*x12996))+(((-1.0)*x12986*x12997)));
evalcond[3]=(((sj4*x12998))+(((-1.0)*cj5*x12993*x12994))+(((-1.0)*x13005))+(((-1.0)*x13003))+(((-1.0)*cj5*x12991*x12993))+(((-1.0)*x12993*x12995))+(((-1.0)*x12986*x12989)));
evalcond[4]=(((x12991*x12992))+(((-1.0)*sj2*x13002))+(((-1.0)*px))+(((-1.0)*x12987*x12994))+(((-1.0)*x12987*x12991))+x13004+(((-0.069)*x13003))+((r02*x12990))+((x12992*x12994))+(((0.01)*x12995)));
evalcond[5]=(((x12988*x12992))+(((-1.0)*cj2*x13002))+(((-1.0)*py))+(((-1.0)*x12987*x12988))+((r12*x12990))+x13002+(((0.069)*x13000))+((cj6*r11*x12992))+(((0.01)*x12996))+(((-1.0)*cj6*r11*x12987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13007=((690.0)*sj5);
IkReal x13008=(cj5*sj2);
IkReal x13009=((25826.01)*r02);
IkReal x13010=(cj6*r11);
IkReal x13011=((25826.01)*sj5);
IkReal x13012=(r00*sj6);
IkReal x13013=(r10*sj6);
IkReal x13014=((25826.01)*r12);
IkReal x13015=(cj6*r01);
IkReal x13016=((69000.0)*py);
IkReal x13017=((69000.0)*px);
IkReal x13018=((690.0)*cj5);
IkReal x13019=(cj2*cj5);
IkReal x13020=(cj2*x13018);
CheckValue<IkReal> x13021=IKPowWithIntegerCheck(IKsign(((9522.0)+(((-9522.0)*cj2)))),-1);
if(!x13021.valid){
continue;
}
CheckValue<IkReal> x13022 = IKatan2WithCheck(IkReal(((((-1.0)*x13013*x13018))+((cj2*r12*x13007))+(((-1.0)*cj2*x13011*x13013))+(((-1.0)*cj2*x13010*x13011))+(((-1.0)*r12*x13007))+(((-1.0)*sj2*x13017))+(((-1.0)*cj2*x13016))+((x13013*x13020))+((x13008*x13009))+(((-1.0)*cj5*x13014))+x13016+((r02*sj2*x13007))+(((-1.0)*x13010*x13018))+(((690.0)*x13008*x13015))+(((690.0)*x13008*x13012))+((x13014*x13019))+((x13010*x13011))+(((-1.0)*sj2*x13011*x13015))+(((-1.0)*sj2*x13011*x13012))+((x13011*x13013))+((x13010*x13020)))),((((-1.0)*x13012*x13018))+(((-1.0)*cj2*x13011*x13015))+(((-1.0)*cj2*x13011*x13012))+(((-1.0)*x13008*x13014))+(((-1.0)*cj2*x13017))+((x13009*x13019))+(((-1.0)*x13015*x13018))+((x13012*x13020))+((sj2*x13010*x13011))+((cj2*r02*x13007))+((x13015*x13020))+x13017+((sj2*x13011*x13013))+(((-1.0)*r02*x13007))+(((-1.0)*r12*sj2*x13007))+(((-1.0)*cj5*x13009))+(((-690.0)*x13008*x13013))+(((-690.0)*x13008*x13010))+((sj2*x13016))+((x13011*x13012))+((x13011*x13015))),IKFAST_ATAN2_MAGTHRESH);
if(!x13022.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13021.value)))+(x13022.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x13023=IKcos(j0);
IkReal x13024=IKsin(j0);
IkReal x13025=((0.01)*cj5);
IkReal x13026=(cj6*r01);
IkReal x13027=((0.37429)*sj5);
IkReal x13028=(cj6*r11);
IkReal x13029=(r00*sj6);
IkReal x13030=((0.01)*sj5);
IkReal x13031=((0.37429)*cj5);
IkReal x13032=(r10*sj6);
IkReal x13033=((0.069)*x13023);
IkReal x13034=((0.069)*x13024);
evalcond[0]=((((-1.0)*x13027*x13029))+(((-1.0)*px))+(((-1.0)*cj2*x13033))+x13033+((x13025*x13026))+((x13025*x13029))+((r02*x13030))+((r02*x13031))+(((-1.0)*x13026*x13027))+(((-1.0)*sj2*x13034)));
evalcond[1]=((((-1.0)*x13027*x13028))+((r12*x13030))+((r12*x13031))+((x13025*x13032))+((sj2*x13033))+(((-1.0)*py))+(((-1.0)*cj2*x13034))+(((-1.0)*x13027*x13032))+x13034+((x13025*x13028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13035=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13035;
j4eval[1]=IKsign(x13035);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13036=((1.0)*sj5);
IkReal x13037=(((cj5*r12))+(((-1.0)*cj6*r11*x13036))+(((-1.0)*r10*sj6*x13036)));
j4eval[0]=x13037;
j4eval[1]=IKsign(x13037);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13038=cj6*cj6;
IkReal x13039=cj5*cj5;
IkReal x13040=(cj5*sj5);
IkReal x13041=(cj6*r21);
IkReal x13042=((1.0)*r11);
IkReal x13043=(r10*r20);
IkReal x13044=(r10*sj6);
IkReal x13045=(r12*r22);
IkReal x13046=(r21*x13038);
IkReal x13047=(cj6*r20*sj6);
IkReal x13048=(r11*x13039);
IkReal x13049=((1.0)*x13039);
IkReal x13050=(((r11*r21))+((cj6*r11*r22*x13040))+(((-1.0)*x13045*x13049))+((x13047*x13048))+(((-1.0)*x13038*x13043*x13049))+(((-1.0)*x13041*x13044))+((x13039*x13043))+((x13038*x13043))+((x13046*x13048))+((x13039*x13041*x13044))+((r22*x13040*x13044))+x13045+((r12*r20*sj6*x13040))+(((-1.0)*x13042*x13047))+(((-1.0)*x13042*x13046))+((r12*x13040*x13041)));
j4eval[0]=x13050;
j4eval[1]=IKsign(x13050);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13051=cj6*cj6;
IkReal x13052=cj5*cj5;
IkReal x13053=(r22*sj5);
IkReal x13054=(cj0*sj2);
IkReal x13055=(r12*r22);
IkReal x13056=(cj5*sj6);
IkReal x13057=((1.0)*r11);
IkReal x13058=(cj6*r21);
IkReal x13059=(cj6*r20);
IkReal x13060=(r12*sj5);
IkReal x13061=((1.0)*sj6);
IkReal x13062=((1.0)*cj2*sj0);
IkReal x13063=((1.0)*x13052);
IkReal x13064=(r21*x13051);
IkReal x13065=(r10*x13052);
IkReal x13066=(r11*x13052);
IkReal x13067=(r10*r20*x13051);
CheckValue<IkReal> x13068 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x13054*x13061))+((x13054*x13059))+((cj2*r21*sj0*sj6))+(((-1.0)*x13059*x13062)))),((((-1.0)*r20*x13056*x13062))+((r20*x13054*x13056))+(((-1.0)*cj5*x13058*x13062))+((x13053*x13054))+((cj5*x13054*x13058))+(((-1.0)*x13053*x13062))),IKFAST_ATAN2_MAGTHRESH);
if(!x13068.valid){
continue;
}
CheckValue<IkReal> x13069=IKPowWithIntegerCheck(IKsign((((r20*x13065))+((cj5*x13058*x13060))+(((-1.0)*x13057*x13064))+((sj6*x13059*x13066))+((r11*r21))+((r10*x13053*x13056))+((r20*x13056*x13060))+((sj6*x13058*x13065))+(((-1.0)*x13063*x13067))+((cj5*cj6*r11*x13053))+(((-1.0)*x13055*x13063))+((x13064*x13066))+x13055+x13067+(((-1.0)*r10*x13058*x13061))+(((-1.0)*sj6*x13057*x13059)))),-1);
if(!x13069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13068.value)+(((1.5707963267949)*(x13069.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13070=IKsin(j4);
IkReal x13071=IKcos(j4);
IkReal x13072=(cj0*sj2);
IkReal x13073=(cj5*cj6);
IkReal x13074=(cj0*cj2);
IkReal x13075=(r11*sj6);
IkReal x13076=(cj6*r20);
IkReal x13077=(cj5*sj6);
IkReal x13078=(cj6*r10);
IkReal x13079=(cj6*r00);
IkReal x13080=((1.0)*sj0);
IkReal x13081=(cj2*x13080);
IkReal x13082=((1.0)*x13071);
IkReal x13083=((1.0)*x13070);
IkReal x13084=(sj6*x13070);
IkReal x13085=(sj5*x13083);
evalcond[0]=((((-1.0)*r21*x13073*x13083))+(((-1.0)*r21*sj6*x13082))+(((-1.0)*r22*x13085))+(((-1.0)*r20*x13077*x13083))+((x13071*x13076)));
evalcond[1]=((((-1.0)*r21*x13073*x13082))+(((-1.0)*x13076*x13083))+(((-1.0)*r22*sj5*x13082))+(((-1.0)*r20*x13077*x13082))+((r21*x13084)));
evalcond[2]=((((-1.0)*r10*x13077*x13083))+((sj0*sj2))+(((-1.0)*x13075*x13082))+x13074+(((-1.0)*r11*x13073*x13083))+((x13071*x13078))+(((-1.0)*r12*x13085)));
evalcond[3]=((((-1.0)*x13081))+(((-1.0)*r01*sj6*x13082))+(((-1.0)*r02*x13085))+(((-1.0)*r01*x13073*x13083))+(((-1.0)*r00*x13077*x13083))+x13072+((x13071*x13079)));
evalcond[4]=((((-1.0)*x13081))+(((-1.0)*r10*x13077*x13082))+(((-1.0)*r12*sj5*x13082))+x13072+((x13070*x13075))+(((-1.0)*r11*x13073*x13082))+(((-1.0)*x13078*x13083)));
evalcond[5]=((((-1.0)*r02*sj5*x13082))+(((-1.0)*r01*x13073*x13082))+(((-1.0)*r00*x13077*x13082))+(((-1.0)*x13074))+(((-1.0)*x13079*x13083))+((r01*x13084))+(((-1.0)*sj2*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13086=(cj0*sj2);
IkReal x13087=(cj6*r20);
IkReal x13088=(r22*sj5);
IkReal x13089=((1.0)*sj5);
IkReal x13090=(r21*sj6);
IkReal x13091=((1.0)*cj2*sj0);
IkReal x13092=(cj5*cj6*r21);
IkReal x13093=(cj5*r20*sj6);
CheckValue<IkReal> x13094=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x13089))+(((-1.0)*r10*sj6*x13089)))),-1);
if(!x13094.valid){
continue;
}
CheckValue<IkReal> x13095 = IKatan2WithCheck(IkReal((((cj2*sj0*x13090))+(((-1.0)*x13087*x13091))+((x13086*x13087))+(((-1.0)*x13086*x13090)))),(((x13086*x13088))+((x13086*x13092))+((x13086*x13093))+(((-1.0)*x13091*x13092))+(((-1.0)*x13091*x13093))+(((-1.0)*x13088*x13091))),IKFAST_ATAN2_MAGTHRESH);
if(!x13095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13094.value)))+(x13095.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13096=IKsin(j4);
IkReal x13097=IKcos(j4);
IkReal x13098=(cj0*sj2);
IkReal x13099=(cj5*cj6);
IkReal x13100=(cj0*cj2);
IkReal x13101=(r11*sj6);
IkReal x13102=(cj6*r20);
IkReal x13103=(cj5*sj6);
IkReal x13104=(cj6*r10);
IkReal x13105=(cj6*r00);
IkReal x13106=((1.0)*sj0);
IkReal x13107=(cj2*x13106);
IkReal x13108=((1.0)*x13097);
IkReal x13109=((1.0)*x13096);
IkReal x13110=(sj6*x13096);
IkReal x13111=(sj5*x13109);
evalcond[0]=((((-1.0)*r20*x13103*x13109))+((x13097*x13102))+(((-1.0)*r21*x13099*x13109))+(((-1.0)*r21*sj6*x13108))+(((-1.0)*r22*x13111)));
evalcond[1]=((((-1.0)*r20*x13103*x13108))+(((-1.0)*r21*x13099*x13108))+((r21*x13110))+(((-1.0)*x13102*x13109))+(((-1.0)*r22*sj5*x13108)));
evalcond[2]=((((-1.0)*r11*x13099*x13109))+(((-1.0)*r12*x13111))+(((-1.0)*r10*x13103*x13109))+((x13097*x13104))+(((-1.0)*x13101*x13108))+((sj0*sj2))+x13100);
evalcond[3]=(((x13097*x13105))+(((-1.0)*r00*x13103*x13109))+(((-1.0)*r02*x13111))+(((-1.0)*x13107))+x13098+(((-1.0)*r01*sj6*x13108))+(((-1.0)*r01*x13099*x13109)));
evalcond[4]=((((-1.0)*r11*x13099*x13108))+((x13096*x13101))+(((-1.0)*r10*x13103*x13108))+(((-1.0)*x13107))+(((-1.0)*x13104*x13109))+x13098+(((-1.0)*r12*sj5*x13108)));
evalcond[5]=((((-1.0)*r00*x13103*x13108))+(((-1.0)*sj2*x13106))+(((-1.0)*x13100))+(((-1.0)*x13105*x13109))+(((-1.0)*r02*sj5*x13108))+(((-1.0)*r01*x13099*x13108))+((r01*x13110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13112=(sj0*sj2);
IkReal x13113=(cj0*cj2);
IkReal x13114=(cj6*r20);
IkReal x13115=(r22*sj5);
IkReal x13116=((1.0)*r21*sj6);
IkReal x13117=(cj5*cj6*r21);
IkReal x13118=(cj5*r20*sj6);
CheckValue<IkReal> x13119 = IKatan2WithCheck(IkReal(((((-1.0)*x13112*x13116))+((x13113*x13114))+((x13112*x13114))+(((-1.0)*x13113*x13116)))),(((x13113*x13118))+((x13113*x13115))+((x13113*x13117))+((x13112*x13117))+((x13112*x13115))+((x13112*x13118))),IKFAST_ATAN2_MAGTHRESH);
if(!x13119.valid){
continue;
}
CheckValue<IkReal> x13120=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13119.value)+(((1.5707963267949)*(x13120.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13121=IKsin(j4);
IkReal x13122=IKcos(j4);
IkReal x13123=(cj0*sj2);
IkReal x13124=(cj5*cj6);
IkReal x13125=(cj0*cj2);
IkReal x13126=(r11*sj6);
IkReal x13127=(cj6*r20);
IkReal x13128=(cj5*sj6);
IkReal x13129=(cj6*r10);
IkReal x13130=(cj6*r00);
IkReal x13131=((1.0)*sj0);
IkReal x13132=(cj2*x13131);
IkReal x13133=((1.0)*x13122);
IkReal x13134=((1.0)*x13121);
IkReal x13135=(sj6*x13121);
IkReal x13136=(sj5*x13134);
evalcond[0]=((((-1.0)*r21*x13124*x13134))+((x13122*x13127))+(((-1.0)*r22*x13136))+(((-1.0)*r21*sj6*x13133))+(((-1.0)*r20*x13128*x13134)));
evalcond[1]=((((-1.0)*r21*x13124*x13133))+(((-1.0)*r22*sj5*x13133))+((r21*x13135))+(((-1.0)*x13127*x13134))+(((-1.0)*r20*x13128*x13133)));
evalcond[2]=((((-1.0)*r11*x13124*x13134))+(((-1.0)*r10*x13128*x13134))+((x13122*x13129))+((sj0*sj2))+x13125+(((-1.0)*r12*x13136))+(((-1.0)*x13126*x13133)));
evalcond[3]=((((-1.0)*r01*x13124*x13134))+((x13122*x13130))+(((-1.0)*r00*x13128*x13134))+(((-1.0)*r01*sj6*x13133))+(((-1.0)*x13132))+x13123+(((-1.0)*r02*x13136)));
evalcond[4]=((((-1.0)*r11*x13124*x13133))+(((-1.0)*r12*sj5*x13133))+(((-1.0)*x13129*x13134))+((x13121*x13126))+(((-1.0)*r10*x13128*x13133))+(((-1.0)*x13132))+x13123);
evalcond[5]=(((r01*x13135))+(((-1.0)*r01*x13124*x13133))+(((-1.0)*r02*sj5*x13133))+(((-1.0)*sj2*x13131))+(((-1.0)*r00*x13128*x13133))+(((-1.0)*x13130*x13134))+(((-1.0)*x13125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13137=(cj5*r22);
IkReal x13138=(cj6*r21);
IkReal x13139=((1.0)*sj5);
IkReal x13140=((0.01)*cj5);
IkReal x13141=(r20*sj6);
IkReal x13142=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.36442)+(((-1.0)*x13141*x13142))+(((-1.0)*x13138*x13142))+((x13140*x13141))+((x13138*x13140))+(((0.37429)*x13137))+(((0.01)*r22*sj5))+(((-1.0)*pz)));
evalcond[2]=((-1.0)+(((-1.0)*x13139*x13141))+(((-1.0)*x13138*x13139))+x13137);
evalcond[3]=((((-1.0)*r00*sj6*x13139))+(((-1.0)*cj6*r01*x13139))+((cj5*r02)));
evalcond[4]=(((cj5*r12))+(((-1.0)*r10*sj6*x13139))+(((-1.0)*cj6*r11*x13139)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((9522.0)+(((9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13143=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*r22*sj5))+(((-1.0)*cj5*cj6*x13143)))))+(IKabs(((((-1.0)*sj6*x13143))+((cj6*r20))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13144=((1.0)*cj5);
j4eval[0]=((IKabs(((((-1.0)*cj6*r20))+((r21*sj6)))))+(IKabs(((((-1.0)*cj6*r21*x13144))+(((-1.0)*r20*sj6*x13144))+(((-1.0)*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x13145=((1.0)*cj5);
CheckValue<IkReal> x13147 = IKatan2WithCheck(IkReal(((((-1.0)*cj6*r21*x13145))+(((-1.0)*r20*sj6*x13145))+(((-1.0)*r22*sj5)))),((((-1.0)*cj6*r20))+((r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x13147.valid){
continue;
}
IkReal x13146=x13147.value;
j4array[0]=((-1.0)*x13146);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x13146)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x13148=IKsin(j4);
IkReal x13149=IKcos(j4);
IkReal x13150=((1.0)*x13148);
evalcond[0]=((((-1.0)*r22*sj5*x13150))+(((-1.0)*r21*sj6*x13149))+((cj6*r20*x13149))+(((-1.0)*cj5*cj6*r21*x13150))+(((-1.0)*cj5*r20*sj6*x13150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13151=(cj5*cj6);
IkReal x13152=((1.0)*sj2);
IkReal x13153=(cj2*cj4);
IkReal x13154=(r12*sj5);
IkReal x13155=(cj4*sj2);
IkReal x13156=(r10*sj4);
IkReal x13157=(cj5*sj6);
IkReal x13158=(cj6*r10);
IkReal x13159=(r11*sj6);
IkReal x13160=(sj4*x13154);
IkReal x13161=(cj2*r11*sj4);
IkReal x13162=(r11*sj4*x13152);
IkReal x13163=(cj2*r10*x13157);
if( IKabs(((((-1.0)*cj4*x13152*x13159))+((cj2*cj6*x13156))+(((-1.0)*cj2*sj4*x13159))+((x13153*x13154))+((r10*x13153*x13157))+(((-1.0)*x13151*x13162))+(((-1.0)*x13152*x13156*x13157))+((x13155*x13158))+((r11*x13151*x13153))+(((-1.0)*x13152*x13160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x13151*x13161))+((cj6*sj2*x13156))+((cj2*x13156*x13157))+(((-1.0)*x13153*x13158))+((x13153*x13159))+((r10*x13155*x13157))+((cj2*x13160))+((x13154*x13155))+(((-1.0)*sj4*x13152*x13159))+((r11*x13151*x13155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x13152*x13159))+((cj2*cj6*x13156))+(((-1.0)*cj2*sj4*x13159))+((x13153*x13154))+((r10*x13153*x13157))+(((-1.0)*x13151*x13162))+(((-1.0)*x13152*x13156*x13157))+((x13155*x13158))+((r11*x13151*x13153))+(((-1.0)*x13152*x13160))))+IKsqr((((x13151*x13161))+((cj6*sj2*x13156))+((cj2*x13156*x13157))+(((-1.0)*x13153*x13158))+((x13153*x13159))+((r10*x13155*x13157))+((cj2*x13160))+((x13154*x13155))+(((-1.0)*sj4*x13152*x13159))+((r11*x13151*x13155))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*x13152*x13159))+((cj2*cj6*x13156))+(((-1.0)*cj2*sj4*x13159))+((x13153*x13154))+((r10*x13153*x13157))+(((-1.0)*x13151*x13162))+(((-1.0)*x13152*x13156*x13157))+((x13155*x13158))+((r11*x13151*x13153))+(((-1.0)*x13152*x13160))), (((x13151*x13161))+((cj6*sj2*x13156))+((cj2*x13156*x13157))+(((-1.0)*x13153*x13158))+((x13153*x13159))+((r10*x13155*x13157))+((cj2*x13160))+((x13154*x13155))+(((-1.0)*sj4*x13152*x13159))+((r11*x13151*x13155))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13164=IKcos(j0);
IkReal x13165=IKsin(j0);
IkReal x13166=((1.0)*sj4);
IkReal x13167=((0.37429)*sj5);
IkReal x13168=(r10*sj6);
IkReal x13169=(cj6*r00);
IkReal x13170=((0.37429)*cj5);
IkReal x13171=(cj6*r01);
IkReal x13172=((0.01)*cj5);
IkReal x13173=(r12*sj5);
IkReal x13174=(r00*sj6);
IkReal x13175=(r02*sj5);
IkReal x13176=((1.0)*cj4);
IkReal x13177=(cj6*r10);
IkReal x13178=(r01*sj6);
IkReal x13179=(r11*sj6);
IkReal x13180=(cj2*x13164);
IkReal x13181=(cj5*cj6*r11);
IkReal x13182=((0.069)*x13165);
IkReal x13183=(sj2*x13164);
IkReal x13184=(cj2*x13165);
IkReal x13185=((1.0)*sj2*x13165);
evalcond[0]=((((-1.0)*x13173*x13176))+(((-1.0)*x13176*x13181))+(((-1.0)*x13166*x13177))+(((-1.0)*cj5*x13168*x13176))+x13184+x13183+((sj4*x13179)));
evalcond[1]=((((-1.0)*x13185))+(((-1.0)*x13166*x13181))+(((-1.0)*x13166*x13173))+(((-1.0)*cj5*x13166*x13168))+x13180+((cj4*x13177))+(((-1.0)*x13176*x13179)));
evalcond[2]=((((-1.0)*x13185))+(((-1.0)*x13166*x13169))+(((-1.0)*x13175*x13176))+x13180+(((-1.0)*cj5*x13174*x13176))+((sj4*x13178))+(((-1.0)*cj5*x13171*x13176)));
evalcond[3]=((((-1.0)*x13183))+(((-1.0)*x13184))+(((-1.0)*x13166*x13175))+((cj4*x13169))+(((-1.0)*cj5*x13166*x13174))+(((-1.0)*cj5*x13166*x13171))+(((-1.0)*x13176*x13178)));
evalcond[4]=((((-1.0)*x13167*x13174))+(((-1.0)*x13167*x13171))+(((0.069)*x13180))+(((-1.0)*px))+((r02*x13170))+(((0.069)*x13164))+((x13171*x13172))+(((0.01)*x13175))+(((-1.0)*sj2*x13182))+((x13172*x13174)));
evalcond[5]=((((-1.0)*x13167*x13168))+(((0.069)*x13183))+(((-1.0)*py))+((r12*x13170))+(((-1.0)*cj6*r11*x13167))+x13182+(((0.01)*x13173))+((x13168*x13172))+((cj6*r11*x13172))+((cj2*x13182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x13186=((1.0)*cj5);
CheckValue<IkReal> x13188 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),((((-1.0)*r20*sj6*x13186))+(((-1.0)*r22*sj5))+(((-1.0)*cj6*r21*x13186))),IKFAST_ATAN2_MAGTHRESH);
if(!x13188.valid){
continue;
}
IkReal x13187=x13188.value;
j4array[0]=((-1.0)*x13187);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x13187)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x13189=IKsin(j4);
IkReal x13190=IKcos(j4);
IkReal x13191=((1.0)*cj6);
IkReal x13192=(cj5*x13190);
evalcond[0]=(((r21*sj6*x13189))+(((-1.0)*r22*sj5*x13190))+(((-1.0)*r21*x13191*x13192))+(((-1.0)*r20*sj6*x13192))+(((-1.0)*r20*x13189*x13191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13193=(cj5*cj6);
IkReal x13194=((1.0)*sj2);
IkReal x13195=(cj2*cj4);
IkReal x13196=(r12*sj5);
IkReal x13197=(cj4*sj2);
IkReal x13198=(r10*sj4);
IkReal x13199=(cj5*sj6);
IkReal x13200=(cj6*r10);
IkReal x13201=(r11*sj6);
IkReal x13202=(sj4*x13196);
IkReal x13203=(cj2*r11*sj4);
IkReal x13204=(r11*sj4*x13194);
IkReal x13205=(cj2*r10*x13199);
if( IKabs((((r10*x13195*x13199))+(((-1.0)*cj2*sj4*x13201))+(((-1.0)*cj4*x13194*x13201))+((cj2*cj6*x13198))+(((-1.0)*x13194*x13202))+((r11*x13193*x13195))+(((-1.0)*x13194*x13198*x13199))+((x13197*x13200))+((x13195*x13196))+(((-1.0)*x13193*x13204)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x13194*x13201))+((cj6*sj2*x13198))+((cj2*x13198*x13199))+((r11*x13193*x13197))+((x13195*x13201))+(((-1.0)*x13195*x13200))+((x13196*x13197))+((x13193*x13203))+((cj2*x13202))+((r10*x13197*x13199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x13195*x13199))+(((-1.0)*cj2*sj4*x13201))+(((-1.0)*cj4*x13194*x13201))+((cj2*cj6*x13198))+(((-1.0)*x13194*x13202))+((r11*x13193*x13195))+(((-1.0)*x13194*x13198*x13199))+((x13197*x13200))+((x13195*x13196))+(((-1.0)*x13193*x13204))))+IKsqr(((((-1.0)*sj4*x13194*x13201))+((cj6*sj2*x13198))+((cj2*x13198*x13199))+((r11*x13193*x13197))+((x13195*x13201))+(((-1.0)*x13195*x13200))+((x13196*x13197))+((x13193*x13203))+((cj2*x13202))+((r10*x13197*x13199))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r10*x13195*x13199))+(((-1.0)*cj2*sj4*x13201))+(((-1.0)*cj4*x13194*x13201))+((cj2*cj6*x13198))+(((-1.0)*x13194*x13202))+((r11*x13193*x13195))+(((-1.0)*x13194*x13198*x13199))+((x13197*x13200))+((x13195*x13196))+(((-1.0)*x13193*x13204))), ((((-1.0)*sj4*x13194*x13201))+((cj6*sj2*x13198))+((cj2*x13198*x13199))+((r11*x13193*x13197))+((x13195*x13201))+(((-1.0)*x13195*x13200))+((x13196*x13197))+((x13193*x13203))+((cj2*x13202))+((r10*x13197*x13199))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13206=IKcos(j0);
IkReal x13207=IKsin(j0);
IkReal x13208=((1.0)*sj4);
IkReal x13209=((0.37429)*sj5);
IkReal x13210=(r10*sj6);
IkReal x13211=(cj6*r00);
IkReal x13212=((0.37429)*cj5);
IkReal x13213=(cj6*r01);
IkReal x13214=((0.01)*cj5);
IkReal x13215=(r12*sj5);
IkReal x13216=(r00*sj6);
IkReal x13217=(r02*sj5);
IkReal x13218=((1.0)*cj4);
IkReal x13219=(cj6*r10);
IkReal x13220=(r01*sj6);
IkReal x13221=(r11*sj6);
IkReal x13222=(cj2*x13206);
IkReal x13223=(cj5*cj6*r11);
IkReal x13224=((0.069)*x13207);
IkReal x13225=(sj2*x13206);
IkReal x13226=(cj2*x13207);
IkReal x13227=((1.0)*sj2*x13207);
evalcond[0]=((((-1.0)*x13208*x13219))+(((-1.0)*cj5*x13210*x13218))+(((-1.0)*x13218*x13223))+((sj4*x13221))+(((-1.0)*x13215*x13218))+x13226+x13225);
evalcond[1]=(((cj4*x13219))+(((-1.0)*cj5*x13208*x13210))+(((-1.0)*x13208*x13215))+(((-1.0)*x13218*x13221))+(((-1.0)*x13208*x13223))+(((-1.0)*x13227))+x13222);
evalcond[2]=((((-1.0)*cj5*x13216*x13218))+(((-1.0)*x13208*x13211))+((sj4*x13220))+(((-1.0)*x13227))+x13222+(((-1.0)*cj5*x13213*x13218))+(((-1.0)*x13217*x13218)));
evalcond[3]=(((cj4*x13211))+(((-1.0)*x13226))+(((-1.0)*x13225))+(((-1.0)*cj5*x13208*x13213))+(((-1.0)*cj5*x13208*x13216))+(((-1.0)*x13208*x13217))+(((-1.0)*x13218*x13220)));
evalcond[4]=((((0.069)*x13206))+((x13213*x13214))+(((0.01)*x13217))+(((-1.0)*px))+(((0.069)*x13222))+(((-1.0)*sj2*x13224))+((r02*x13212))+(((-1.0)*x13209*x13213))+(((-1.0)*x13209*x13216))+((x13214*x13216)));
evalcond[5]=(((cj6*r11*x13214))+((x13210*x13214))+((cj2*x13224))+((r12*x13212))+(((-1.0)*cj6*r11*x13209))+(((0.01)*x13215))+(((-1.0)*py))+(((0.069)*x13225))+x13224+(((-1.0)*x13209*x13210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13228=((690.0)*sj5);
IkReal x13229=(cj5*sj2);
IkReal x13230=((25826.01)*r02);
IkReal x13231=(cj6*r11);
IkReal x13232=((25826.01)*sj5);
IkReal x13233=(r10*sj6);
IkReal x13234=((25826.01)*r12);
IkReal x13235=(cj6*r01);
IkReal x13236=((69000.0)*py);
IkReal x13237=((69000.0)*px);
IkReal x13238=((690.0)*cj5);
IkReal x13239=(cj2*cj5);
IkReal x13240=(r00*sj6);
IkReal x13241=(cj2*x13238);
IkReal x13242=((690.0)*x13240);
CheckValue<IkReal> x13243=IKPowWithIntegerCheck(IKsign(((9522.0)+(((9522.0)*cj2)))),-1);
if(!x13243.valid){
continue;
}
CheckValue<IkReal> x13244 = IKatan2WithCheck(IkReal((((x13229*x13230))+(((-1.0)*cj5*x13234))+(((-1.0)*sj2*x13232*x13240))+(((-1.0)*x13233*x13241))+(((-1.0)*r12*x13228))+(((-1.0)*sj2*x13232*x13235))+(((-1.0)*x13234*x13239))+(((-1.0)*x13233*x13238))+((x13232*x13233))+(((-1.0)*x13231*x13241))+(((690.0)*x13229*x13235))+((cj2*x13231*x13232))+(((-1.0)*x13231*x13238))+((r02*sj2*x13228))+x13236+((x13229*x13242))+((cj2*x13236))+((x13231*x13232))+(((-1.0)*cj2*r12*x13228))+(((-1.0)*sj2*x13237))+((cj2*x13232*x13233)))),((((-1.0)*x13235*x13241))+((sj2*x13232*x13233))+(((-690.0)*x13229*x13231))+(((-690.0)*x13229*x13233))+(((-1.0)*cj5*x13230))+(((-1.0)*x13229*x13234))+((sj2*x13236))+(((-1.0)*x13235*x13238))+((x13232*x13235))+(((-1.0)*r12*sj2*x13228))+(((-1.0)*r02*x13228))+((cj2*x13232*x13240))+((x13232*x13240))+(((-1.0)*cj2*r02*x13228))+x13237+(((-1.0)*x13238*x13240))+((cj2*x13237))+(((-1.0)*x13230*x13239))+(((-1.0)*x13240*x13241))+((sj2*x13231*x13232))+((cj2*x13232*x13235))),IKFAST_ATAN2_MAGTHRESH);
if(!x13244.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13243.value)))+(x13244.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x13245=IKcos(j0);
IkReal x13246=IKsin(j0);
IkReal x13247=((0.01)*cj5);
IkReal x13248=(cj6*r01);
IkReal x13249=((0.37429)*sj5);
IkReal x13250=(cj6*r11);
IkReal x13251=(r00*sj6);
IkReal x13252=((0.01)*sj5);
IkReal x13253=((0.37429)*cj5);
IkReal x13254=(r10*sj6);
IkReal x13255=((0.069)*x13245);
IkReal x13256=((0.069)*x13246);
evalcond[0]=(((cj2*x13255))+((r02*x13252))+((r02*x13253))+(((-1.0)*px))+(((-1.0)*x13249*x13251))+(((-1.0)*x13248*x13249))+x13255+(((-1.0)*sj2*x13256))+((x13247*x13251))+((x13247*x13248)));
evalcond[1]=(((cj2*x13256))+((r12*x13252))+((r12*x13253))+(((-1.0)*py))+(((-1.0)*x13249*x13254))+(((-1.0)*x13249*x13250))+x13256+((x13247*x13250))+((x13247*x13254))+((sj2*x13255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13257=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13257;
j4eval[1]=IKsign(x13257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13258=cj6*cj6;
IkReal x13259=cj5*cj5;
IkReal x13260=(cj5*sj5);
IkReal x13261=(cj6*r21);
IkReal x13262=((1.0)*r11);
IkReal x13263=(r10*r20);
IkReal x13264=(r10*sj6);
IkReal x13265=(r12*r22);
IkReal x13266=(r21*x13258);
IkReal x13267=(cj6*r20*sj6);
IkReal x13268=(r11*x13259);
IkReal x13269=((1.0)*x13259);
IkReal x13270=((((-1.0)*x13265*x13269))+((x13259*x13263))+((r11*r21))+((x13258*x13263))+(((-1.0)*x13261*x13264))+((r12*x13260*x13261))+(((-1.0)*x13258*x13263*x13269))+((x13266*x13268))+(((-1.0)*x13262*x13266))+(((-1.0)*x13262*x13267))+((r22*x13260*x13264))+((x13267*x13268))+((x13259*x13261*x13264))+((cj6*r11*r22*x13260))+x13265+((r12*r20*sj6*x13260)));
j4eval[0]=x13270;
j4eval[1]=IKsign(x13270);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13271=cj5*cj5;
IkReal x13272=cj6*cj6;
IkReal x13273=(r00*r20);
IkReal x13274=(r02*r22);
IkReal x13275=(cj5*sj5);
IkReal x13276=(cj6*r21);
IkReal x13277=(r00*sj6);
IkReal x13278=(r20*sj6);
IkReal x13279=(cj6*r01);
IkReal x13280=((1.0)*x13271);
IkReal x13281=(r01*r21*x13272);
IkReal x13282=(((r02*x13275*x13278))+((r02*x13275*x13276))+(((-1.0)*x13272*x13273*x13280))+((r22*x13275*x13277))+((r22*x13275*x13279))+((x13271*x13278*x13279))+((x13272*x13273))+((x13271*x13276*x13277))+(((-1.0)*x13278*x13279))+((x13271*x13273))+((r01*r21))+(((-1.0)*x13276*x13277))+(((-1.0)*x13281))+(((-1.0)*x13274*x13280))+x13274+((x13271*x13281)));
j4eval[0]=x13282;
j4eval[1]=IKsign(x13282);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13283=cj5*cj5;
IkReal x13284=cj6*cj6;
IkReal x13285=(cj6*r21);
IkReal x13286=(cj6*r20);
IkReal x13287=(cj0*cj2);
IkReal x13288=(r20*sj6);
IkReal x13289=((1.0)*sj6);
IkReal x13290=(sj0*sj2);
IkReal x13291=((1.0)*cj5);
IkReal x13292=(r02*r22);
IkReal x13293=(r22*sj5);
IkReal x13294=(r00*sj6);
IkReal x13295=(cj5*r02*sj5);
IkReal x13296=(r01*x13283);
IkReal x13297=(r21*x13284);
IkReal x13298=(r00*r20*x13283);
CheckValue<IkReal> x13299 = IKatan2WithCheck(IkReal(((((-1.0)*x13286*x13290))+((r21*sj6*x13290))+(((-1.0)*r21*x13287*x13289))+((x13286*x13287)))),(((x13287*x13293))+(((-1.0)*x13285*x13290*x13291))+(((-1.0)*x13288*x13290*x13291))+(((-1.0)*x13290*x13293))+((cj5*x13287*x13288))+((cj5*x13285*x13287))),IKFAST_ATAN2_MAGTHRESH);
if(!x13299.valid){
continue;
}
CheckValue<IkReal> x13300=IKPowWithIntegerCheck(IKsign((((r00*r20*x13284))+(((-1.0)*x13284*x13298))+((cj5*cj6*r01*x13293))+((x13283*x13285*x13294))+((sj6*x13286*x13296))+((x13285*x13295))+((r01*r21))+((x13296*x13297))+(((-1.0)*r00*x13285*x13289))+(((-1.0)*r01*x13297))+((cj5*x13293*x13294))+(((-1.0)*x13283*x13292))+((x13288*x13295))+x13298+x13292+(((-1.0)*r01*x13286*x13289)))),-1);
if(!x13300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13299.value)+(((1.5707963267949)*(x13300.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13301=IKsin(j4);
IkReal x13302=IKcos(j4);
IkReal x13303=(cj0*cj2);
IkReal x13304=(cj5*cj6);
IkReal x13305=(r11*sj6);
IkReal x13306=(cj6*r20);
IkReal x13307=(cj5*sj6);
IkReal x13308=(cj6*r10);
IkReal x13309=(r01*sj6);
IkReal x13310=(cj0*sj2);
IkReal x13311=(r21*sj6);
IkReal x13312=(cj6*r00);
IkReal x13313=((1.0)*sj0);
IkReal x13314=(sj2*x13313);
IkReal x13315=((1.0)*x13302);
IkReal x13316=((1.0)*x13301);
IkReal x13317=(sj5*x13316);
evalcond[0]=((((-1.0)*x13311*x13315))+(((-1.0)*r20*x13307*x13316))+((x13302*x13306))+(((-1.0)*r22*x13317))+(((-1.0)*r21*x13304*x13316)));
evalcond[1]=((((-1.0)*r20*x13307*x13315))+(((-1.0)*x13306*x13316))+((x13301*x13311))+(((-1.0)*r22*sj5*x13315))+(((-1.0)*r21*x13304*x13315)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r11*x13304*x13315))+(((-1.0)*x13308*x13316))+(((-1.0)*r10*x13307*x13315))+(((-1.0)*r12*sj5*x13315))+((x13301*x13305))+x13310);
evalcond[3]=((((-1.0)*r11*x13304*x13316))+(((-1.0)*r10*x13307*x13316))+((x13302*x13308))+(((-1.0)*x13305*x13315))+(((-1.0)*x13314))+(((-1.0)*r12*x13317))+x13303);
evalcond[4]=((((-1.0)*x13312*x13316))+(((-1.0)*r02*sj5*x13315))+((x13301*x13309))+(((-1.0)*r01*x13304*x13315))+(((-1.0)*r00*x13307*x13315))+(((-1.0)*x13314))+x13303);
evalcond[5]=((((-1.0)*x13309*x13315))+(((-1.0)*r02*x13317))+(((-1.0)*cj2*x13313))+((x13302*x13312))+(((-1.0)*r01*x13304*x13316))+(((-1.0)*r00*x13307*x13316))+(((-1.0)*x13310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13318=cj6*cj6;
IkReal x13319=cj5*cj5;
IkReal x13320=((1.0)*r11);
IkReal x13321=(r22*sj5);
IkReal x13322=(cj0*sj2);
IkReal x13323=(cj5*sj6);
IkReal x13324=(cj6*r20);
IkReal x13325=(cj2*sj0);
IkReal x13326=(r21*sj6);
IkReal x13327=(cj6*r10);
IkReal x13328=(r12*r22);
IkReal x13329=(r12*sj5);
IkReal x13330=(r21*x13318);
IkReal x13331=(r20*x13325);
IkReal x13332=(cj5*cj6*r21);
IkReal x13333=(r11*x13319);
IkReal x13334=(r10*r20*x13319);
CheckValue<IkReal> x13335 = IKatan2WithCheck(IkReal(((((-1.0)*x13325*x13326))+((x13322*x13324))+(((-1.0)*x13322*x13326))+((x13324*x13325)))),(((r20*x13322*x13323))+((x13321*x13322))+((x13321*x13325))+((x13325*x13332))+((x13322*x13332))+((x13323*x13331))),IKFAST_ATAN2_MAGTHRESH);
if(!x13335.valid){
continue;
}
CheckValue<IkReal> x13336=IKPowWithIntegerCheck(IKsign((((x13329*x13332))+(((-1.0)*x13320*x13330))+((r10*r20*x13318))+((x13319*x13326*x13327))+(((-1.0)*x13318*x13334))+((r11*r21))+(((-1.0)*x13326*x13327))+(((-1.0)*x13319*x13328))+((r20*x13323*x13329))+((sj6*x13324*x13333))+(((-1.0)*sj6*x13320*x13324))+((r10*x13321*x13323))+x13334+x13328+((x13330*x13333))+((cj5*cj6*r11*x13321)))),-1);
if(!x13336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13335.value)+(((1.5707963267949)*(x13336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13337=IKsin(j4);
IkReal x13338=IKcos(j4);
IkReal x13339=(cj0*cj2);
IkReal x13340=(cj5*cj6);
IkReal x13341=(r11*sj6);
IkReal x13342=(cj6*r20);
IkReal x13343=(cj5*sj6);
IkReal x13344=(cj6*r10);
IkReal x13345=(r01*sj6);
IkReal x13346=(cj0*sj2);
IkReal x13347=(r21*sj6);
IkReal x13348=(cj6*r00);
IkReal x13349=((1.0)*sj0);
IkReal x13350=(sj2*x13349);
IkReal x13351=((1.0)*x13338);
IkReal x13352=((1.0)*x13337);
IkReal x13353=(sj5*x13352);
evalcond[0]=((((-1.0)*r22*x13353))+(((-1.0)*r20*x13343*x13352))+(((-1.0)*r21*x13340*x13352))+((x13338*x13342))+(((-1.0)*x13347*x13351)));
evalcond[1]=((((-1.0)*r22*sj5*x13351))+(((-1.0)*r20*x13343*x13351))+(((-1.0)*x13342*x13352))+((x13337*x13347))+(((-1.0)*r21*x13340*x13351)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r11*x13340*x13351))+(((-1.0)*x13344*x13352))+((x13337*x13341))+(((-1.0)*r12*sj5*x13351))+(((-1.0)*r10*x13343*x13351))+x13346);
evalcond[3]=((((-1.0)*r12*x13353))+(((-1.0)*r11*x13340*x13352))+((x13338*x13344))+(((-1.0)*x13341*x13351))+(((-1.0)*r10*x13343*x13352))+(((-1.0)*x13350))+x13339);
evalcond[4]=((((-1.0)*r00*x13343*x13351))+((x13337*x13345))+(((-1.0)*r02*sj5*x13351))+(((-1.0)*x13350))+(((-1.0)*r01*x13340*x13351))+(((-1.0)*x13348*x13352))+x13339);
evalcond[5]=((((-1.0)*x13345*x13351))+(((-1.0)*r02*x13353))+(((-1.0)*r00*x13343*x13352))+(((-1.0)*cj2*x13349))+(((-1.0)*x13346))+((x13338*x13348))+(((-1.0)*r01*x13340*x13352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13354=(cj0*cj2);
IkReal x13355=(cj6*r20);
IkReal x13356=(r21*sj6);
IkReal x13357=(sj0*sj2);
IkReal x13358=(r22*sj5);
IkReal x13359=(cj5*r20*sj6);
IkReal x13360=(cj5*cj6*r21);
CheckValue<IkReal> x13361 = IKatan2WithCheck(IkReal(((((-1.0)*x13354*x13356))+(((-1.0)*x13355*x13357))+((x13356*x13357))+((x13354*x13355)))),((((-1.0)*x13357*x13358))+(((-1.0)*x13357*x13359))+((x13354*x13360))+(((-1.0)*x13357*x13360))+((x13354*x13359))+((x13354*x13358))),IKFAST_ATAN2_MAGTHRESH);
if(!x13361.valid){
continue;
}
CheckValue<IkReal> x13362=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13361.value)+(((1.5707963267949)*(x13362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13363=IKsin(j4);
IkReal x13364=IKcos(j4);
IkReal x13365=(cj0*cj2);
IkReal x13366=(cj5*cj6);
IkReal x13367=(r11*sj6);
IkReal x13368=(cj6*r20);
IkReal x13369=(cj5*sj6);
IkReal x13370=(cj6*r10);
IkReal x13371=(r01*sj6);
IkReal x13372=(cj0*sj2);
IkReal x13373=(r21*sj6);
IkReal x13374=(cj6*r00);
IkReal x13375=((1.0)*sj0);
IkReal x13376=(sj2*x13375);
IkReal x13377=((1.0)*x13364);
IkReal x13378=((1.0)*x13363);
IkReal x13379=(sj5*x13378);
evalcond[0]=((((-1.0)*x13373*x13377))+(((-1.0)*r22*x13379))+(((-1.0)*r20*x13369*x13378))+(((-1.0)*r21*x13366*x13378))+((x13364*x13368)));
evalcond[1]=((((-1.0)*r22*sj5*x13377))+(((-1.0)*x13368*x13378))+(((-1.0)*r20*x13369*x13377))+((x13363*x13373))+(((-1.0)*r21*x13366*x13377)));
evalcond[2]=((((-1.0)*x13370*x13378))+((cj2*sj0))+(((-1.0)*r12*sj5*x13377))+(((-1.0)*r11*x13366*x13377))+((x13363*x13367))+(((-1.0)*r10*x13369*x13377))+x13372);
evalcond[3]=((((-1.0)*r11*x13366*x13378))+(((-1.0)*x13367*x13377))+(((-1.0)*x13376))+(((-1.0)*r10*x13369*x13378))+((x13364*x13370))+x13365+(((-1.0)*r12*x13379)));
evalcond[4]=((((-1.0)*x13374*x13378))+((x13363*x13371))+(((-1.0)*r00*x13369*x13377))+(((-1.0)*x13376))+(((-1.0)*r01*x13366*x13377))+x13365+(((-1.0)*r02*sj5*x13377)));
evalcond[5]=((((-1.0)*r02*x13379))+(((-1.0)*r00*x13369*x13378))+(((-1.0)*cj2*x13375))+(((-1.0)*r01*x13366*x13378))+((x13364*x13374))+(((-1.0)*x13372))+(((-1.0)*x13371*x13377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13380=(cj1*r12);
IkReal x13381=(r00*sj6);
IkReal x13382=((69.0)*cj1);
IkReal x13383=(cj6*r01);
IkReal x13384=((1.0)*sj5);
IkReal x13385=(cj5*r02);
IkReal x13386=(cj6*r11);
IkReal x13387=(r10*sj6);
IkReal x13388=((69.0)*sj2*sj5);
IkReal x13389=((374.29)*cj1*sj5);
IkReal x13390=((10.0)*cj1*cj5);
CheckValue<IkReal> x13391=IKPowWithIntegerCheck(((((364.42)*(cj1*cj1)))+(((-1.0)*cj2*sj1*x13382))+x13382),-1);
if(!x13391.valid){
continue;
}
CheckValue<IkReal> x13392=IKPowWithIntegerCheck(cj1,-1);
if(!x13392.valid){
continue;
}
if( IKabs(((x13391.value)*(((((-374.29)*cj5*x13380))+(((-1.0)*x13386*x13390))+(((-69.0)*sj2*x13385))+(((1000.0)*cj1*py))+((x13387*x13389))+(((-1.0)*x13387*x13390))+((x13386*x13389))+((x13383*x13388))+((x13381*x13388))+(((-10.0)*sj5*x13380)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13392.value)*(((((-1.0)*x13383*x13384))+(((-1.0)*x13381*x13384))+x13385)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13391.value)*(((((-374.29)*cj5*x13380))+(((-1.0)*x13386*x13390))+(((-69.0)*sj2*x13385))+(((1000.0)*cj1*py))+((x13387*x13389))+(((-1.0)*x13387*x13390))+((x13386*x13389))+((x13383*x13388))+((x13381*x13388))+(((-10.0)*sj5*x13380))))))+IKsqr(((x13392.value)*(((((-1.0)*x13383*x13384))+(((-1.0)*x13381*x13384))+x13385))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x13391.value)*(((((-374.29)*cj5*x13380))+(((-1.0)*x13386*x13390))+(((-69.0)*sj2*x13385))+(((1000.0)*cj1*py))+((x13387*x13389))+(((-1.0)*x13387*x13390))+((x13386*x13389))+((x13383*x13388))+((x13381*x13388))+(((-10.0)*sj5*x13380))))), ((x13392.value)*(((((-1.0)*x13383*x13384))+(((-1.0)*x13381*x13384))+x13385))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x13393=IKcos(j0);
IkReal x13394=IKsin(j0);
IkReal x13395=((0.01)*cj5);
IkReal x13396=(cj6*r11);
IkReal x13397=(cj5*r12);
IkReal x13398=(r10*sj6);
IkReal x13399=((0.37429)*sj5);
IkReal x13400=(r00*sj6);
IkReal x13401=((1.0)*sj5);
IkReal x13402=(cj6*r01);
IkReal x13403=(cj5*r02);
IkReal x13404=(cj2*sj1);
IkReal x13405=((0.01)*sj5);
IkReal x13406=(cj1*x13394);
IkReal x13407=((0.069)*x13394);
IkReal x13408=((0.069)*x13393);
IkReal x13409=(cj1*x13393);
evalcond[0]=(x13403+(((-1.0)*x13401*x13402))+(((-1.0)*x13400*x13401))+(((-1.0)*x13409)));
evalcond[1]=((((-1.0)*x13396*x13401))+(((-1.0)*x13406))+(((-1.0)*x13398*x13401))+x13397);
evalcond[2]=(x13408+(((0.37429)*x13403))+(((-1.0)*sj2*x13407))+(((-1.0)*px))+((r02*x13405))+(((0.36442)*x13409))+(((-1.0)*x13399*x13400))+(((-1.0)*x13399*x13402))+((x13395*x13402))+((x13395*x13400))+(((-1.0)*x13404*x13408)));
evalcond[3]=(x13407+((sj2*x13408))+((r12*x13405))+(((0.37429)*x13397))+(((-1.0)*x13396*x13399))+(((-1.0)*py))+(((0.36442)*x13406))+((x13395*x13396))+((x13395*x13398))+(((-1.0)*x13404*x13407))+(((-1.0)*x13398*x13399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x13410=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x13410;
j4eval[1]=IKsign(x13410);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x13411=((1.0)*sj5);
IkReal x13412=((((-1.0)*r00*sj6*x13411))+(((-1.0)*cj6*r01*x13411))+((cj5*r02)));
j4eval[0]=x13412;
j4eval[1]=IKsign(x13412);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x13413=cj5*cj5;
IkReal x13414=cj6*cj6;
IkReal x13415=r22*r22;
IkReal x13416=r21*r21;
IkReal x13417=r20*r20;
IkReal x13418=(cj6*r21);
IkReal x13419=(r20*sj6);
IkReal x13420=(cj1*cj2);
IkReal x13421=(r22*sj5);
IkReal x13422=(cj6*r20);
IkReal x13423=((2.0)*cj5);
IkReal x13424=(cj1*sj2);
IkReal x13425=((1.0)*x13416);
IkReal x13426=((1.0)*x13417);
IkReal x13427=((1.0)*r21*sj6);
IkReal x13428=((1.0)*cj5*x13424);
IkReal x13429=(x13413*x13414);
IkReal x13430=((((-1.0)*x13415))+((x13417*x13429))+(((-1.0)*x13419*x13421*x13423))+(((-2.0)*x13413*x13418*x13419))+((x13414*x13416))+((x13413*x13415))+(((-1.0)*x13425))+(((-1.0)*x13414*x13426))+(((-1.0)*x13425*x13429))+(((-1.0)*x13413*x13426))+(((-1.0)*x13418*x13421*x13423))+(((2.0)*x13418*x13419)));
j4eval[0]=x13430;
j4eval[1]=((IKabs((((x13420*x13421))+(((-1.0)*x13424*x13427))+((cj5*x13418*x13420))+((x13422*x13424))+((cj5*x13419*x13420)))))+(IKabs(((((-1.0)*x13420*x13427))+(((-1.0)*x13421*x13424))+((x13420*x13422))+(((-1.0)*x13419*x13428))+(((-1.0)*x13418*x13428))))));
j4eval[2]=IKsign(x13430);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x13431=((0.069)*cj0);
IkReal x13432=((0.01)*cj5);
IkReal x13433=(cj6*r11);
IkReal x13434=(r10*sj6);
IkReal x13435=((0.37429)*sj5);
IkReal x13436=(r00*sj6);
IkReal x13437=(r20*sj6);
IkReal x13438=((0.069)*sj0);
IkReal x13439=((1.0)*sj5);
IkReal x13440=((0.01)*sj5);
IkReal x13441=(cj6*r01);
IkReal x13442=((0.37429)*cj5);
IkReal x13443=(cj6*r21);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+((r22*x13440))+((r22*x13442))+((x13432*x13443))+(((-1.0)*x13435*x13443))+((x13432*x13437))+(((-1.0)*pz))+(((-1.0)*x13435*x13437)));
evalcond[2]=(((x13432*x13441))+(((-1.0)*x13435*x13441))+x13431+(((-1.0)*cj2*x13431))+((r02*x13442))+((r02*x13440))+((x13432*x13436))+(((-1.0)*sj2*x13438))+(((-1.0)*px))+(((-1.0)*x13435*x13436)));
evalcond[3]=(x13438+(((-1.0)*cj2*x13438))+(((-1.0)*x13434*x13435))+((x13432*x13434))+((x13432*x13433))+(((-1.0)*py))+(((-1.0)*x13433*x13435))+((r12*x13440))+((r12*x13442))+((sj2*x13431)));
evalcond[4]=((1.0)+(((-1.0)*x13437*x13439))+((cj5*r22))+(((-1.0)*x13439*x13443)));
evalcond[5]=((((-1.0)*x13439*x13441))+(((-1.0)*x13436*x13439))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*x13434*x13439))+(((-1.0)*x13433*x13439)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13444=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13444;
j4eval[1]=IKsign(x13444);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13445=((1.0)*sj5);
IkReal x13446=(((cj5*r12))+(((-1.0)*r10*sj6*x13445))+(((-1.0)*cj6*r11*x13445)));
j4eval[0]=x13446;
j4eval[1]=IKsign(x13446);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x13447=cj6*cj6;
IkReal x13448=cj5*cj5;
IkReal x13449=(cj5*sj5);
IkReal x13450=(cj6*r21);
IkReal x13451=((1.0)*r11);
IkReal x13452=(r10*r20);
IkReal x13453=(r10*sj6);
IkReal x13454=(r12*r22);
IkReal x13455=(r21*x13447);
IkReal x13456=(cj6*r20*sj6);
IkReal x13457=(r11*x13448);
IkReal x13458=((1.0)*x13448);
IkReal x13459=(x13454+(((-1.0)*x13447*x13452*x13458))+((x13448*x13450*x13453))+(((-1.0)*x13450*x13453))+((r11*r21))+((cj6*r11*r22*x13449))+(((-1.0)*x13454*x13458))+((r12*x13449*x13450))+((r12*r20*sj6*x13449))+((x13455*x13457))+((x13456*x13457))+((x13447*x13452))+(((-1.0)*x13451*x13456))+(((-1.0)*x13451*x13455))+((x13448*x13452))+((r22*x13449*x13453)));
j4eval[0]=x13459;
j4eval[1]=IKsign(x13459);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13460=cj6*cj6;
IkReal x13461=cj5*cj5;
IkReal x13462=(r22*sj5);
IkReal x13463=(cj0*sj2);
IkReal x13464=(r12*r22);
IkReal x13465=(cj5*sj6);
IkReal x13466=((1.0)*r11);
IkReal x13467=(cj6*r21);
IkReal x13468=(cj6*r20);
IkReal x13469=(r12*sj5);
IkReal x13470=((1.0)*sj6);
IkReal x13471=((1.0)*cj2*sj0);
IkReal x13472=((1.0)*x13461);
IkReal x13473=(r21*x13460);
IkReal x13474=(r10*x13461);
IkReal x13475=(r11*x13461);
IkReal x13476=(r10*r20*x13460);
CheckValue<IkReal> x13477 = IKatan2WithCheck(IkReal((((cj2*r21*sj0*sj6))+((x13463*x13468))+(((-1.0)*x13468*x13471))+(((-1.0)*r21*x13463*x13470)))),((((-1.0)*x13462*x13471))+(((-1.0)*cj5*x13467*x13471))+(((-1.0)*r20*x13465*x13471))+((x13462*x13463))+((r20*x13463*x13465))+((cj5*x13463*x13467))),IKFAST_ATAN2_MAGTHRESH);
if(!x13477.valid){
continue;
}
CheckValue<IkReal> x13478=IKPowWithIntegerCheck(IKsign((x13464+x13476+((cj5*cj6*r11*x13462))+((cj5*x13467*x13469))+((sj6*x13467*x13474))+((r11*r21))+(((-1.0)*x13472*x13476))+((r20*x13465*x13469))+(((-1.0)*r10*x13467*x13470))+(((-1.0)*x13464*x13472))+(((-1.0)*x13466*x13473))+((x13473*x13475))+(((-1.0)*sj6*x13466*x13468))+((sj6*x13468*x13475))+((r10*x13462*x13465))+((r20*x13474)))),-1);
if(!x13478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13477.value)+(((1.5707963267949)*(x13478.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13479=IKsin(j4);
IkReal x13480=IKcos(j4);
IkReal x13481=(cj0*sj2);
IkReal x13482=(cj5*cj6);
IkReal x13483=(cj0*cj2);
IkReal x13484=(r11*sj6);
IkReal x13485=(cj6*r20);
IkReal x13486=(cj5*sj6);
IkReal x13487=(cj6*r10);
IkReal x13488=(cj6*r00);
IkReal x13489=((1.0)*sj0);
IkReal x13490=(cj2*x13489);
IkReal x13491=((1.0)*x13480);
IkReal x13492=((1.0)*x13479);
IkReal x13493=(sj6*x13479);
IkReal x13494=(sj5*x13492);
evalcond[0]=((((-1.0)*r21*sj6*x13491))+((x13480*x13485))+(((-1.0)*r22*x13494))+(((-1.0)*r20*x13486*x13492))+(((-1.0)*r21*x13482*x13492)));
evalcond[1]=((((-1.0)*x13485*x13492))+(((-1.0)*r20*x13486*x13491))+(((-1.0)*r22*sj5*x13491))+((r21*x13493))+(((-1.0)*r21*x13482*x13491)));
evalcond[2]=(x13483+(((-1.0)*r12*x13494))+((x13480*x13487))+((sj0*sj2))+(((-1.0)*x13484*x13491))+(((-1.0)*r11*x13482*x13492))+(((-1.0)*r10*x13486*x13492)));
evalcond[3]=(x13481+((x13480*x13488))+(((-1.0)*r01*sj6*x13491))+(((-1.0)*r00*x13486*x13492))+(((-1.0)*r02*x13494))+(((-1.0)*r01*x13482*x13492))+(((-1.0)*x13490)));
evalcond[4]=(x13481+((x13479*x13484))+(((-1.0)*r12*sj5*x13491))+(((-1.0)*r11*x13482*x13491))+(((-1.0)*x13487*x13492))+(((-1.0)*r10*x13486*x13491))+(((-1.0)*x13490)));
evalcond[5]=((((-1.0)*x13488*x13492))+(((-1.0)*x13483))+(((-1.0)*r00*x13486*x13491))+(((-1.0)*r01*x13482*x13491))+((r01*x13493))+(((-1.0)*r02*sj5*x13491))+(((-1.0)*sj2*x13489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13495=(cj0*sj2);
IkReal x13496=(cj6*r20);
IkReal x13497=(r22*sj5);
IkReal x13498=((1.0)*sj5);
IkReal x13499=(r21*sj6);
IkReal x13500=((1.0)*cj2*sj0);
IkReal x13501=(cj5*cj6*r21);
IkReal x13502=(cj5*r20*sj6);
CheckValue<IkReal> x13503 = IKatan2WithCheck(IkReal(((((-1.0)*x13495*x13499))+((cj2*sj0*x13499))+(((-1.0)*x13496*x13500))+((x13495*x13496)))),(((x13495*x13501))+((x13495*x13502))+(((-1.0)*x13500*x13502))+(((-1.0)*x13500*x13501))+(((-1.0)*x13497*x13500))+((x13495*x13497))),IKFAST_ATAN2_MAGTHRESH);
if(!x13503.valid){
continue;
}
CheckValue<IkReal> x13504=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x13498))+(((-1.0)*r10*sj6*x13498)))),-1);
if(!x13504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13503.value)+(((1.5707963267949)*(x13504.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13505=IKsin(j4);
IkReal x13506=IKcos(j4);
IkReal x13507=(cj0*sj2);
IkReal x13508=(cj5*cj6);
IkReal x13509=(cj0*cj2);
IkReal x13510=(r11*sj6);
IkReal x13511=(cj6*r20);
IkReal x13512=(cj5*sj6);
IkReal x13513=(cj6*r10);
IkReal x13514=(cj6*r00);
IkReal x13515=((1.0)*sj0);
IkReal x13516=(cj2*x13515);
IkReal x13517=((1.0)*x13506);
IkReal x13518=((1.0)*x13505);
IkReal x13519=(sj6*x13505);
IkReal x13520=(sj5*x13518);
evalcond[0]=((((-1.0)*r21*sj6*x13517))+(((-1.0)*r22*x13520))+(((-1.0)*r21*x13508*x13518))+(((-1.0)*r20*x13512*x13518))+((x13506*x13511)));
evalcond[1]=(((r21*x13519))+(((-1.0)*r21*x13508*x13517))+(((-1.0)*r20*x13512*x13517))+(((-1.0)*x13511*x13518))+(((-1.0)*r22*sj5*x13517)));
evalcond[2]=((((-1.0)*r12*x13520))+x13509+(((-1.0)*r11*x13508*x13518))+((sj0*sj2))+((x13506*x13513))+(((-1.0)*r10*x13512*x13518))+(((-1.0)*x13510*x13517)));
evalcond[3]=(x13507+((x13506*x13514))+(((-1.0)*r01*sj6*x13517))+(((-1.0)*r01*x13508*x13518))+(((-1.0)*x13516))+(((-1.0)*r00*x13512*x13518))+(((-1.0)*r02*x13520)));
evalcond[4]=(x13507+(((-1.0)*r11*x13508*x13517))+(((-1.0)*r10*x13512*x13517))+((x13505*x13510))+(((-1.0)*x13516))+(((-1.0)*r12*sj5*x13517))+(((-1.0)*x13513*x13518)));
evalcond[5]=((((-1.0)*sj2*x13515))+(((-1.0)*x13509))+(((-1.0)*r02*sj5*x13517))+(((-1.0)*r01*x13508*x13517))+(((-1.0)*x13514*x13518))+(((-1.0)*r00*x13512*x13517))+((r01*x13519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13521=(sj0*sj2);
IkReal x13522=(cj0*cj2);
IkReal x13523=(cj6*r20);
IkReal x13524=(r22*sj5);
IkReal x13525=((1.0)*r21*sj6);
IkReal x13526=(cj5*cj6*r21);
IkReal x13527=(cj5*r20*sj6);
CheckValue<IkReal> x13528 = IKatan2WithCheck(IkReal((((x13522*x13523))+((x13521*x13523))+(((-1.0)*x13521*x13525))+(((-1.0)*x13522*x13525)))),(((x13522*x13527))+((x13522*x13526))+((x13522*x13524))+((x13521*x13526))+((x13521*x13524))+((x13521*x13527))),IKFAST_ATAN2_MAGTHRESH);
if(!x13528.valid){
continue;
}
CheckValue<IkReal> x13529=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13529.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13528.value)+(((1.5707963267949)*(x13529.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13530=IKsin(j4);
IkReal x13531=IKcos(j4);
IkReal x13532=(cj0*sj2);
IkReal x13533=(cj5*cj6);
IkReal x13534=(cj0*cj2);
IkReal x13535=(r11*sj6);
IkReal x13536=(cj6*r20);
IkReal x13537=(cj5*sj6);
IkReal x13538=(cj6*r10);
IkReal x13539=(cj6*r00);
IkReal x13540=((1.0)*sj0);
IkReal x13541=(cj2*x13540);
IkReal x13542=((1.0)*x13531);
IkReal x13543=((1.0)*x13530);
IkReal x13544=(sj6*x13530);
IkReal x13545=(sj5*x13543);
evalcond[0]=(((x13531*x13536))+(((-1.0)*r21*sj6*x13542))+(((-1.0)*r20*x13537*x13543))+(((-1.0)*r22*x13545))+(((-1.0)*r21*x13533*x13543)));
evalcond[1]=((((-1.0)*x13536*x13543))+((r21*x13544))+(((-1.0)*r22*sj5*x13542))+(((-1.0)*r20*x13537*x13542))+(((-1.0)*r21*x13533*x13542)));
evalcond[2]=(x13534+((x13531*x13538))+(((-1.0)*r11*x13533*x13543))+(((-1.0)*r10*x13537*x13543))+((sj0*sj2))+(((-1.0)*r12*x13545))+(((-1.0)*x13535*x13542)));
evalcond[3]=(x13532+(((-1.0)*x13541))+(((-1.0)*r00*x13537*x13543))+(((-1.0)*r01*sj6*x13542))+((x13531*x13539))+(((-1.0)*r02*x13545))+(((-1.0)*r01*x13533*x13543)));
evalcond[4]=(x13532+(((-1.0)*x13541))+((x13530*x13535))+(((-1.0)*r11*x13533*x13542))+(((-1.0)*r12*sj5*x13542))+(((-1.0)*r10*x13537*x13542))+(((-1.0)*x13538*x13543)));
evalcond[5]=((((-1.0)*x13539*x13543))+(((-1.0)*r00*x13537*x13542))+((r01*x13544))+(((-1.0)*x13534))+(((-1.0)*sj2*x13540))+(((-1.0)*r01*x13533*x13542))+(((-1.0)*r02*sj5*x13542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13546=((0.069)*cj0);
IkReal x13547=((0.01)*cj5);
IkReal x13548=(cj6*r11);
IkReal x13549=(r10*sj6);
IkReal x13550=((0.37429)*sj5);
IkReal x13551=(r00*sj6);
IkReal x13552=(r20*sj6);
IkReal x13553=((0.069)*sj0);
IkReal x13554=((1.0)*sj5);
IkReal x13555=((0.01)*sj5);
IkReal x13556=(cj6*r01);
IkReal x13557=((0.37429)*cj5);
IkReal x13558=(cj6*r21);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.36442)+((r22*x13555))+((r22*x13557))+(((-1.0)*x13550*x13552))+(((-1.0)*x13550*x13558))+(((-1.0)*pz))+((x13547*x13552))+((x13547*x13558)));
evalcond[2]=(x13546+(((-1.0)*x13550*x13551))+(((-1.0)*x13550*x13556))+((cj2*x13546))+(((-1.0)*px))+((x13547*x13556))+((x13547*x13551))+(((-1.0)*sj2*x13553))+((r02*x13555))+((r02*x13557)));
evalcond[3]=(x13553+((r12*x13555))+((r12*x13557))+((cj2*x13553))+(((-1.0)*x13548*x13550))+((sj2*x13546))+(((-1.0)*py))+(((-1.0)*x13549*x13550))+((x13547*x13549))+((x13547*x13548)));
evalcond[4]=((-1.0)+((cj5*r22))+(((-1.0)*x13554*x13558))+(((-1.0)*x13552*x13554)));
evalcond[5]=((((-1.0)*x13551*x13554))+(((-1.0)*x13554*x13556))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*x13548*x13554))+(((-1.0)*x13549*x13554)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13559=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x13559;
j4eval[1]=IKsign(x13559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13560=cj6*cj6;
IkReal x13561=cj5*cj5;
IkReal x13562=(cj5*sj5);
IkReal x13563=(cj6*r21);
IkReal x13564=((1.0)*r11);
IkReal x13565=(r10*r20);
IkReal x13566=(r10*sj6);
IkReal x13567=(r12*r22);
IkReal x13568=(r21*x13560);
IkReal x13569=(cj6*r20*sj6);
IkReal x13570=(r11*x13561);
IkReal x13571=((1.0)*x13561);
IkReal x13572=(x13567+((cj6*r11*r22*x13562))+(((-1.0)*x13567*x13571))+((r11*r21))+((x13569*x13570))+((x13561*x13565))+(((-1.0)*x13563*x13566))+((x13568*x13570))+(((-1.0)*x13564*x13568))+(((-1.0)*x13564*x13569))+((r22*x13562*x13566))+(((-1.0)*x13560*x13565*x13571))+((r12*x13562*x13563))+((r12*r20*sj6*x13562))+((x13560*x13565))+((x13561*x13563*x13566)));
j4eval[0]=x13572;
j4eval[1]=IKsign(x13572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x13573=cj5*cj5;
IkReal x13574=cj6*cj6;
IkReal x13575=(r00*r20);
IkReal x13576=(r02*r22);
IkReal x13577=(cj5*sj5);
IkReal x13578=(cj6*r21);
IkReal x13579=(r00*sj6);
IkReal x13580=(r20*sj6);
IkReal x13581=(cj6*r01);
IkReal x13582=((1.0)*x13573);
IkReal x13583=(r01*r21*x13574);
IkReal x13584=(x13576+((r22*x13577*x13579))+(((-1.0)*x13580*x13581))+(((-1.0)*x13576*x13582))+((r01*r21))+((x13573*x13578*x13579))+(((-1.0)*x13583))+((x13573*x13580*x13581))+((x13573*x13575))+((x13573*x13583))+((r02*x13577*x13578))+((r22*x13577*x13581))+(((-1.0)*x13578*x13579))+((r02*x13577*x13580))+(((-1.0)*x13574*x13575*x13582))+((x13574*x13575)));
j4eval[0]=x13584;
j4eval[1]=IKsign(x13584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13585=cj5*cj5;
IkReal x13586=cj6*cj6;
IkReal x13587=(cj6*r21);
IkReal x13588=(cj6*r20);
IkReal x13589=(cj0*cj2);
IkReal x13590=(r20*sj6);
IkReal x13591=((1.0)*sj6);
IkReal x13592=(sj0*sj2);
IkReal x13593=((1.0)*cj5);
IkReal x13594=(r02*r22);
IkReal x13595=(r22*sj5);
IkReal x13596=(r00*sj6);
IkReal x13597=(cj5*r02*sj5);
IkReal x13598=(r01*x13585);
IkReal x13599=(r21*x13586);
IkReal x13600=(r00*r20*x13585);
CheckValue<IkReal> x13601=IKPowWithIntegerCheck(IKsign((((cj5*x13595*x13596))+x13594+x13600+((x13598*x13599))+((sj6*x13588*x13598))+((r00*r20*x13586))+((r01*r21))+((x13585*x13587*x13596))+((cj5*cj6*r01*x13595))+((x13587*x13597))+(((-1.0)*x13585*x13594))+(((-1.0)*x13586*x13600))+(((-1.0)*r01*x13599))+((x13590*x13597))+(((-1.0)*r01*x13588*x13591))+(((-1.0)*r00*x13587*x13591)))),-1);
if(!x13601.valid){
continue;
}
CheckValue<IkReal> x13602 = IKatan2WithCheck(IkReal(((((-1.0)*x13588*x13592))+((x13588*x13589))+(((-1.0)*r21*x13589*x13591))+((r21*sj6*x13592)))),((((-1.0)*x13590*x13592*x13593))+((x13589*x13595))+((cj5*x13587*x13589))+(((-1.0)*x13587*x13592*x13593))+((cj5*x13589*x13590))+(((-1.0)*x13592*x13595))),IKFAST_ATAN2_MAGTHRESH);
if(!x13602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13601.value)))+(x13602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13603=IKsin(j4);
IkReal x13604=IKcos(j4);
IkReal x13605=(cj0*cj2);
IkReal x13606=(cj5*cj6);
IkReal x13607=(r11*sj6);
IkReal x13608=(cj6*r20);
IkReal x13609=(cj5*sj6);
IkReal x13610=(cj6*r10);
IkReal x13611=(r01*sj6);
IkReal x13612=(cj0*sj2);
IkReal x13613=(r21*sj6);
IkReal x13614=(cj6*r00);
IkReal x13615=((1.0)*sj0);
IkReal x13616=(sj2*x13615);
IkReal x13617=((1.0)*x13604);
IkReal x13618=((1.0)*x13603);
IkReal x13619=(sj5*x13618);
evalcond[0]=((((-1.0)*r20*x13609*x13618))+(((-1.0)*r21*x13606*x13618))+((x13604*x13608))+(((-1.0)*x13613*x13617))+(((-1.0)*r22*x13619)));
evalcond[1]=((((-1.0)*x13608*x13618))+(((-1.0)*r20*x13609*x13617))+(((-1.0)*r21*x13606*x13617))+(((-1.0)*r22*sj5*x13617))+((x13603*x13613)));
evalcond[2]=(((cj2*sj0))+x13612+((x13603*x13607))+(((-1.0)*r12*sj5*x13617))+(((-1.0)*r10*x13609*x13617))+(((-1.0)*x13610*x13618))+(((-1.0)*r11*x13606*x13617)));
evalcond[3]=((((-1.0)*x13616))+x13605+(((-1.0)*r10*x13609*x13618))+(((-1.0)*x13607*x13617))+((x13604*x13610))+(((-1.0)*r11*x13606*x13618))+(((-1.0)*r12*x13619)));
evalcond[4]=((((-1.0)*r00*x13609*x13617))+(((-1.0)*x13616))+x13605+(((-1.0)*r01*x13606*x13617))+(((-1.0)*x13614*x13618))+((x13603*x13611))+(((-1.0)*r02*sj5*x13617)));
evalcond[5]=((((-1.0)*r00*x13609*x13618))+(((-1.0)*r01*x13606*x13618))+(((-1.0)*r02*x13619))+(((-1.0)*x13612))+(((-1.0)*x13611*x13617))+((x13604*x13614))+(((-1.0)*cj2*x13615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13620=cj6*cj6;
IkReal x13621=cj5*cj5;
IkReal x13622=((1.0)*r11);
IkReal x13623=(r22*sj5);
IkReal x13624=(cj0*sj2);
IkReal x13625=(cj5*sj6);
IkReal x13626=(cj6*r20);
IkReal x13627=(cj2*sj0);
IkReal x13628=(r21*sj6);
IkReal x13629=(cj6*r10);
IkReal x13630=(r12*r22);
IkReal x13631=(r12*sj5);
IkReal x13632=(r21*x13620);
IkReal x13633=(r20*x13627);
IkReal x13634=(cj5*cj6*r21);
IkReal x13635=(r11*x13621);
IkReal x13636=(r10*r20*x13621);
CheckValue<IkReal> x13637 = IKatan2WithCheck(IkReal((((x13626*x13627))+(((-1.0)*x13627*x13628))+(((-1.0)*x13624*x13628))+((x13624*x13626)))),(((x13624*x13634))+((x13623*x13624))+((x13623*x13627))+((x13625*x13633))+((r20*x13624*x13625))+((x13627*x13634))),IKFAST_ATAN2_MAGTHRESH);
if(!x13637.valid){
continue;
}
CheckValue<IkReal> x13638=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13628*x13629))+((x13632*x13635))+(((-1.0)*x13621*x13630))+((sj6*x13626*x13635))+x13636+x13630+((r10*x13623*x13625))+(((-1.0)*x13622*x13632))+(((-1.0)*sj6*x13622*x13626))+((x13621*x13628*x13629))+((r11*r21))+((cj5*cj6*r11*x13623))+(((-1.0)*x13620*x13636))+((r10*r20*x13620))+((x13631*x13634))+((r20*x13625*x13631)))),-1);
if(!x13638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13637.value)+(((1.5707963267949)*(x13638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13639=IKsin(j4);
IkReal x13640=IKcos(j4);
IkReal x13641=(cj0*cj2);
IkReal x13642=(cj5*cj6);
IkReal x13643=(r11*sj6);
IkReal x13644=(cj6*r20);
IkReal x13645=(cj5*sj6);
IkReal x13646=(cj6*r10);
IkReal x13647=(r01*sj6);
IkReal x13648=(cj0*sj2);
IkReal x13649=(r21*sj6);
IkReal x13650=(cj6*r00);
IkReal x13651=((1.0)*sj0);
IkReal x13652=(sj2*x13651);
IkReal x13653=((1.0)*x13640);
IkReal x13654=((1.0)*x13639);
IkReal x13655=(sj5*x13654);
evalcond[0]=((((-1.0)*r20*x13645*x13654))+(((-1.0)*r22*x13655))+(((-1.0)*r21*x13642*x13654))+(((-1.0)*x13649*x13653))+((x13640*x13644)));
evalcond[1]=((((-1.0)*r20*x13645*x13653))+((x13639*x13649))+(((-1.0)*x13644*x13654))+(((-1.0)*r21*x13642*x13653))+(((-1.0)*r22*sj5*x13653)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r12*sj5*x13653))+x13648+((x13639*x13643))+(((-1.0)*r11*x13642*x13653))+(((-1.0)*r10*x13645*x13653))+(((-1.0)*x13646*x13654)));
evalcond[3]=(x13641+(((-1.0)*r11*x13642*x13654))+(((-1.0)*r12*x13655))+(((-1.0)*r10*x13645*x13654))+((x13640*x13646))+(((-1.0)*x13652))+(((-1.0)*x13643*x13653)));
evalcond[4]=((((-1.0)*r02*sj5*x13653))+x13641+((x13639*x13647))+(((-1.0)*r01*x13642*x13653))+(((-1.0)*r00*x13645*x13653))+(((-1.0)*x13650*x13654))+(((-1.0)*x13652)));
evalcond[5]=((((-1.0)*r02*x13655))+(((-1.0)*cj2*x13651))+((x13640*x13650))+(((-1.0)*r01*x13642*x13654))+(((-1.0)*r00*x13645*x13654))+(((-1.0)*x13648))+(((-1.0)*x13647*x13653)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13656=(cj0*cj2);
IkReal x13657=(cj6*r20);
IkReal x13658=(r21*sj6);
IkReal x13659=(sj0*sj2);
IkReal x13660=(r22*sj5);
IkReal x13661=(cj5*r20*sj6);
IkReal x13662=(cj5*cj6*r21);
CheckValue<IkReal> x13663=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x13663.valid){
continue;
}
CheckValue<IkReal> x13664 = IKatan2WithCheck(IkReal((((x13656*x13657))+(((-1.0)*x13657*x13659))+((x13658*x13659))+(((-1.0)*x13656*x13658)))),(((x13656*x13660))+((x13656*x13662))+((x13656*x13661))+(((-1.0)*x13659*x13661))+(((-1.0)*x13659*x13662))+(((-1.0)*x13659*x13660))),IKFAST_ATAN2_MAGTHRESH);
if(!x13664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13663.value)))+(x13664.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13665=IKsin(j4);
IkReal x13666=IKcos(j4);
IkReal x13667=(cj0*cj2);
IkReal x13668=(cj5*cj6);
IkReal x13669=(r11*sj6);
IkReal x13670=(cj6*r20);
IkReal x13671=(cj5*sj6);
IkReal x13672=(cj6*r10);
IkReal x13673=(r01*sj6);
IkReal x13674=(cj0*sj2);
IkReal x13675=(r21*sj6);
IkReal x13676=(cj6*r00);
IkReal x13677=((1.0)*sj0);
IkReal x13678=(sj2*x13677);
IkReal x13679=((1.0)*x13666);
IkReal x13680=((1.0)*x13665);
IkReal x13681=(sj5*x13680);
evalcond[0]=((((-1.0)*r22*x13681))+(((-1.0)*r21*x13668*x13680))+(((-1.0)*x13675*x13679))+((x13666*x13670))+(((-1.0)*r20*x13671*x13680)));
evalcond[1]=((((-1.0)*r21*x13668*x13679))+(((-1.0)*r22*sj5*x13679))+(((-1.0)*r20*x13671*x13679))+((x13665*x13675))+(((-1.0)*x13670*x13680)));
evalcond[2]=(((cj2*sj0))+x13674+(((-1.0)*x13672*x13680))+(((-1.0)*r11*x13668*x13679))+(((-1.0)*r10*x13671*x13679))+(((-1.0)*r12*sj5*x13679))+((x13665*x13669)));
evalcond[3]=((((-1.0)*x13669*x13679))+x13667+(((-1.0)*x13678))+(((-1.0)*r12*x13681))+((x13666*x13672))+(((-1.0)*r11*x13668*x13680))+(((-1.0)*r10*x13671*x13680)));
evalcond[4]=(x13667+(((-1.0)*x13676*x13680))+(((-1.0)*x13678))+(((-1.0)*r02*sj5*x13679))+(((-1.0)*r01*x13668*x13679))+((x13665*x13673))+(((-1.0)*r00*x13671*x13679)));
evalcond[5]=((((-1.0)*r00*x13671*x13680))+(((-1.0)*x13673*x13679))+((x13666*x13676))+(((-1.0)*x13674))+(((-1.0)*r02*x13681))+(((-1.0)*cj2*x13677))+(((-1.0)*r01*x13668*x13680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13682=cj5*cj5;
IkReal x13683=cj6*cj6;
IkReal x13684=r22*r22;
IkReal x13685=r21*r21;
IkReal x13686=r20*r20;
IkReal x13687=(cj6*r21);
IkReal x13688=(r20*sj6);
IkReal x13689=(cj1*cj5);
IkReal x13690=((1.0)*sj2);
IkReal x13691=(cj1*cj2);
IkReal x13692=(cj6*r20);
IkReal x13693=(r22*sj5);
IkReal x13694=(r21*sj6);
IkReal x13695=((2.0)*cj5);
IkReal x13696=((1.0)*x13685);
IkReal x13697=((1.0)*x13686);
IkReal x13698=(x13682*x13683);
CheckValue<IkReal> x13699 = IKatan2WithCheck(IkReal(((((-1.0)*x13687*x13689*x13690))+(((-1.0)*cj1*x13690*x13693))+(((-1.0)*x13688*x13689*x13690))+((x13691*x13692))+(((-1.0)*x13691*x13694)))),(((cj1*sj2*x13692))+(((-1.0)*cj1*x13690*x13694))+((cj2*x13687*x13689))+((x13691*x13693))+((cj2*x13688*x13689))),IKFAST_ATAN2_MAGTHRESH);
if(!x13699.valid){
continue;
}
CheckValue<IkReal> x13700=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13687*x13693*x13695))+(((-1.0)*x13696))+((x13682*x13684))+(((-1.0)*x13683*x13697))+(((-1.0)*x13684))+(((-2.0)*x13682*x13687*x13688))+((x13683*x13685))+(((-1.0)*x13696*x13698))+(((-1.0)*x13688*x13693*x13695))+((x13686*x13698))+(((2.0)*x13687*x13688))+(((-1.0)*x13682*x13697)))),-1);
if(!x13700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13699.value)+(((1.5707963267949)*(x13700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13701=IKsin(j4);
IkReal x13702=IKcos(j4);
IkReal x13703=(cj5*cj6);
IkReal x13704=(cj0*sj1);
IkReal x13705=(r11*sj6);
IkReal x13706=(cj6*r20);
IkReal x13707=(cj5*sj6);
IkReal x13708=(cj6*r10);
IkReal x13709=((1.0)*cj2);
IkReal x13710=(r21*sj6);
IkReal x13711=(cj6*r00);
IkReal x13712=(sj0*sj1);
IkReal x13713=(r01*sj6);
IkReal x13714=((1.0)*x13702);
IkReal x13715=((1.0)*x13701);
IkReal x13716=(sj5*x13715);
evalcond[0]=(((x13702*x13706))+(((-1.0)*r22*x13716))+((cj1*sj2))+(((-1.0)*r21*x13703*x13715))+(((-1.0)*r20*x13707*x13715))+(((-1.0)*x13710*x13714)));
evalcond[1]=((((-1.0)*cj1*x13709))+(((-1.0)*r22*sj5*x13714))+(((-1.0)*r21*x13703*x13714))+(((-1.0)*x13706*x13715))+((x13701*x13710))+(((-1.0)*r20*x13707*x13714)));
evalcond[2]=(((x13702*x13708))+((sj2*x13712))+(((-1.0)*r12*x13716))+((cj0*cj2))+(((-1.0)*r10*x13707*x13715))+(((-1.0)*r11*x13703*x13715))+(((-1.0)*x13705*x13714)));
evalcond[3]=(((x13702*x13711))+(((-1.0)*x13713*x13714))+(((-1.0)*sj0*x13709))+(((-1.0)*r00*x13707*x13715))+(((-1.0)*r01*x13703*x13715))+((sj2*x13704))+(((-1.0)*r02*x13716)));
evalcond[4]=((((-1.0)*x13709*x13712))+(((-1.0)*r10*x13707*x13714))+(((-1.0)*r11*x13703*x13714))+(((-1.0)*r12*sj5*x13714))+(((-1.0)*x13708*x13715))+((cj0*sj2))+((x13701*x13705)));
evalcond[5]=((((-1.0)*r00*x13707*x13714))+(((-1.0)*r01*x13703*x13714))+(((-1.0)*sj0*sj2))+(((-1.0)*x13704*x13709))+(((-1.0)*r02*sj5*x13714))+((x13701*x13713))+(((-1.0)*x13711*x13715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13717=(cj6*r21);
IkReal x13718=(r20*sj6);
IkReal x13719=(cj1*sj2);
IkReal x13720=((1.0)*cj6);
IkReal x13721=((1.0)*sj5);
IkReal x13722=(cj0*cj2);
IkReal x13723=(r21*sj6);
IkReal x13724=(sj0*sj1*sj2);
IkReal x13725=((1.0)*cj5*x13722);
IkReal x13726=((1.0)*cj5*x13724);
CheckValue<IkReal> x13727 = IKatan2WithCheck(IkReal((((cj6*r10*x13719))+((x13722*x13723))+((x13723*x13724))+(((-1.0)*r20*x13720*x13722))+(((-1.0)*r20*x13720*x13724))+(((-1.0)*r11*sj6*x13719)))),(((cj5*cj6*r11*x13719))+((cj5*r10*sj6*x13719))+(((-1.0)*x13718*x13726))+(((-1.0)*x13718*x13725))+((r12*sj5*x13719))+(((-1.0)*r22*x13721*x13722))+(((-1.0)*r22*x13721*x13724))+(((-1.0)*x13717*x13726))+(((-1.0)*x13717*x13725))),IKFAST_ATAN2_MAGTHRESH);
if(!x13727.valid){
continue;
}
CheckValue<IkReal> x13728=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x13720))+(((-1.0)*r00*sj6*x13721))+((cj5*r02)))),-1);
if(!x13728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13727.value)+(((1.5707963267949)*(x13728.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13729=IKsin(j4);
IkReal x13730=IKcos(j4);
IkReal x13731=(cj5*cj6);
IkReal x13732=(cj0*sj1);
IkReal x13733=(r11*sj6);
IkReal x13734=(cj6*r20);
IkReal x13735=(cj5*sj6);
IkReal x13736=(cj6*r10);
IkReal x13737=((1.0)*cj2);
IkReal x13738=(r21*sj6);
IkReal x13739=(cj6*r00);
IkReal x13740=(sj0*sj1);
IkReal x13741=(r01*sj6);
IkReal x13742=((1.0)*x13730);
IkReal x13743=((1.0)*x13729);
IkReal x13744=(sj5*x13743);
evalcond[0]=((((-1.0)*r22*x13744))+((x13730*x13734))+(((-1.0)*r21*x13731*x13743))+((cj1*sj2))+(((-1.0)*r20*x13735*x13743))+(((-1.0)*x13738*x13742)));
evalcond[1]=((((-1.0)*r22*sj5*x13742))+(((-1.0)*r21*x13731*x13742))+((x13729*x13738))+(((-1.0)*x13734*x13743))+(((-1.0)*r20*x13735*x13742))+(((-1.0)*cj1*x13737)));
evalcond[2]=((((-1.0)*r12*x13744))+(((-1.0)*x13733*x13742))+((x13730*x13736))+(((-1.0)*r10*x13735*x13743))+(((-1.0)*r11*x13731*x13743))+((cj0*cj2))+((sj2*x13740)));
evalcond[3]=((((-1.0)*r02*x13744))+(((-1.0)*r00*x13735*x13743))+((x13730*x13739))+((sj2*x13732))+(((-1.0)*r01*x13731*x13743))+(((-1.0)*x13741*x13742))+(((-1.0)*sj0*x13737)));
evalcond[4]=((((-1.0)*r12*sj5*x13742))+(((-1.0)*r10*x13735*x13742))+(((-1.0)*r11*x13731*x13742))+(((-1.0)*x13737*x13740))+((x13729*x13733))+(((-1.0)*x13736*x13743))+((cj0*sj2)));
evalcond[5]=((((-1.0)*x13739*x13743))+(((-1.0)*r00*x13735*x13742))+((x13729*x13741))+(((-1.0)*r02*sj5*x13742))+(((-1.0)*r01*x13731*x13742))+(((-1.0)*sj0*sj2))+(((-1.0)*x13732*x13737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13745=(cj6*r20);
IkReal x13746=(cj2*sj0);
IkReal x13747=((1.0)*sj2);
IkReal x13748=(cj0*sj1);
IkReal x13749=(cj1*r01);
IkReal x13750=(r22*sj5);
IkReal x13751=(cj5*cj6);
IkReal x13752=(cj1*sj2);
IkReal x13753=(r21*sj6);
IkReal x13754=(cj5*r20*sj6);
CheckValue<IkReal> x13755=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x13755.valid){
continue;
}
CheckValue<IkReal> x13756 = IKatan2WithCheck(IkReal((((cj6*r00*x13752))+(((-1.0)*sj6*x13747*x13749))+(((-1.0)*x13746*x13753))+((x13745*x13746))+(((-1.0)*x13745*x13747*x13748))+((sj2*x13748*x13753)))),((((-1.0)*r21*x13747*x13748*x13751))+(((-1.0)*x13747*x13748*x13754))+(((-1.0)*x13747*x13748*x13750))+((r02*sj5*x13752))+((r21*x13746*x13751))+((sj2*x13749*x13751))+((x13746*x13750))+((x13746*x13754))+((cj5*r00*sj6*x13752))),IKFAST_ATAN2_MAGTHRESH);
if(!x13756.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13755.value)))+(x13756.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13757=IKsin(j4);
IkReal x13758=IKcos(j4);
IkReal x13759=(cj5*cj6);
IkReal x13760=(cj0*sj1);
IkReal x13761=(r11*sj6);
IkReal x13762=(cj6*r20);
IkReal x13763=(cj5*sj6);
IkReal x13764=(cj6*r10);
IkReal x13765=((1.0)*cj2);
IkReal x13766=(r21*sj6);
IkReal x13767=(cj6*r00);
IkReal x13768=(sj0*sj1);
IkReal x13769=(r01*sj6);
IkReal x13770=((1.0)*x13758);
IkReal x13771=((1.0)*x13757);
IkReal x13772=(sj5*x13771);
evalcond[0]=((((-1.0)*r22*x13772))+((cj1*sj2))+(((-1.0)*r20*x13763*x13771))+(((-1.0)*x13766*x13770))+(((-1.0)*r21*x13759*x13771))+((x13758*x13762)));
evalcond[1]=((((-1.0)*r22*sj5*x13770))+(((-1.0)*cj1*x13765))+((x13757*x13766))+(((-1.0)*r20*x13763*x13770))+(((-1.0)*r21*x13759*x13770))+(((-1.0)*x13762*x13771)));
evalcond[2]=(((sj2*x13768))+((cj0*cj2))+(((-1.0)*r11*x13759*x13771))+(((-1.0)*r12*x13772))+(((-1.0)*r10*x13763*x13771))+((x13758*x13764))+(((-1.0)*x13761*x13770)));
evalcond[3]=((((-1.0)*r01*x13759*x13771))+((sj2*x13760))+(((-1.0)*x13769*x13770))+(((-1.0)*r02*x13772))+(((-1.0)*sj0*x13765))+((x13758*x13767))+(((-1.0)*r00*x13763*x13771)));
evalcond[4]=(((x13757*x13761))+(((-1.0)*r11*x13759*x13770))+(((-1.0)*x13764*x13771))+(((-1.0)*r12*sj5*x13770))+(((-1.0)*x13765*x13768))+(((-1.0)*r10*x13763*x13770))+((cj0*sj2)));
evalcond[5]=(((x13757*x13769))+(((-1.0)*r01*x13759*x13770))+(((-1.0)*x13767*x13771))+(((-1.0)*sj0*sj2))+(((-1.0)*r00*x13763*x13770))+(((-1.0)*x13760*x13765))+(((-1.0)*r02*sj5*x13770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13773=cj5*cj5;
IkReal x13774=cj6*cj6;
IkReal x13775=r22*r22;
IkReal x13776=r21*r21;
IkReal x13777=r20*r20;
IkReal x13778=(cj6*r21);
IkReal x13779=(r20*sj6);
IkReal x13780=(cj1*cj5);
IkReal x13781=((1.0)*sj2);
IkReal x13782=(cj1*cj2);
IkReal x13783=(cj6*r20);
IkReal x13784=(r22*sj5);
IkReal x13785=(r21*sj6);
IkReal x13786=((2.0)*cj5);
IkReal x13787=((1.0)*x13776);
IkReal x13788=((1.0)*x13777);
IkReal x13789=(x13773*x13774);
CheckValue<IkReal> x13790=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13775))+((x13774*x13776))+((x13777*x13789))+(((-1.0)*x13773*x13788))+(((-1.0)*x13774*x13788))+(((-1.0)*x13787*x13789))+(((-1.0)*x13779*x13784*x13786))+(((-1.0)*x13778*x13784*x13786))+(((-1.0)*x13787))+(((-2.0)*x13773*x13778*x13779))+(((2.0)*x13778*x13779))+((x13773*x13775)))),-1);
if(!x13790.valid){
continue;
}
CheckValue<IkReal> x13791 = IKatan2WithCheck(IkReal(((((-1.0)*x13778*x13780*x13781))+(((-1.0)*x13782*x13785))+((x13782*x13783))+(((-1.0)*cj1*x13781*x13784))+(((-1.0)*x13779*x13780*x13781)))),(((cj1*sj2*x13783))+((cj2*x13778*x13780))+((cj2*x13779*x13780))+((x13782*x13784))+(((-1.0)*cj1*x13781*x13785))),IKFAST_ATAN2_MAGTHRESH);
if(!x13791.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13790.value)))+(x13791.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x13792=IKsin(j4);
IkReal x13793=IKcos(j4);
IkReal x13794=((1.0)*r21);
IkReal x13795=(r22*sj5);
IkReal x13796=(cj5*cj6);
IkReal x13797=(cj6*r20);
IkReal x13798=(cj5*r20);
IkReal x13799=(sj6*x13793);
IkReal x13800=((1.0)*x13792);
evalcond[0]=(((cj1*sj2))+(((-1.0)*x13792*x13794*x13796))+(((-1.0)*sj6*x13798*x13800))+(((-1.0)*x13794*x13799))+(((-1.0)*x13795*x13800))+((x13793*x13797)));
evalcond[1]=((((-1.0)*x13793*x13795))+(((-1.0)*x13797*x13800))+(((-1.0)*x13793*x13794*x13796))+((r21*sj6*x13792))+(((-1.0)*x13798*x13799))+(((-1.0)*cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x13801=((1.0)*cj6*sj5);
IkReal x13802=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r01*x13801))+(((-1.0)*r00*x13802))+((cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*r10*x13802))+(((-1.0)*r11*x13801))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj1;
j0eval[1]=cj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
j0eval[0]=cj1;
j0eval[1]=sj1;
j0eval[2]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x13803=((1.0)*cj4);
IkReal x13804=((1.0)*cj6);
IkReal x13805=(cj5*r21);
IkReal x13806=(r22*sj5);
IkReal x13807=(r21*sj5);
IkReal x13808=(r21*sj6);
IkReal x13809=((1.0)*sj4);
IkReal x13810=(cj5*r22);
IkReal x13811=(cj5*r20*sj6);
IkReal x13812=((1.0)*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x13806*x13809))+((cj4*cj6*r20))+(((-1.0)*sj4*x13804*x13805))+(((-1.0)*x13809*x13811))+(((-1.0)*x13803*x13808)));
evalcond[2]=((-0.36442)+(((0.37429)*x13810))+(((-0.37429)*r20*sj5*sj6))+(((-0.37429)*cj6*x13807))+(((-1.0)*pz))+(((0.01)*cj6*x13805))+(((0.01)*x13811))+(((0.01)*x13806)));
evalcond[3]=((1.0)+(((-1.0)*r20*x13812))+x13810+(((-1.0)*x13804*x13807)));
evalcond[4]=((((-1.0)*cj6*x13803*x13805))+((sj4*x13808))+(((-1.0)*r20*sj4*x13804))+(((-1.0)*x13803*x13811))+(((-1.0)*x13803*x13806)));
evalcond[5]=((((-1.0)*r01*sj5*x13804))+(((-1.0)*r00*x13812))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*r10*x13812))+(((-1.0)*r11*sj5*x13804)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13813=(cj6*r10);
IkReal x13814=(sj2*sj4);
IkReal x13815=(r12*sj5);
IkReal x13816=(r01*sj6);
IkReal x13817=(cj2*r11);
IkReal x13818=(cj4*sj6);
IkReal x13819=((1.0)*cj6);
IkReal x13820=(cj4*r00);
IkReal x13821=(cj5*sj6);
IkReal x13822=(cj5*cj6);
IkReal x13823=(cj2*sj4);
IkReal x13824=(r02*sj5);
IkReal x13825=(cj4*sj2);
IkReal x13826=((1.0)*cj2*cj4);
if( IKabs((((r11*sj2*x13818))+(((-1.0)*r00*x13821*x13823))+(((-1.0)*x13813*x13825))+(((-1.0)*x13823*x13824))+((x13814*x13815))+(((-1.0)*cj5*r01*x13819*x13823))+((r10*x13814*x13821))+((cj2*cj6*x13820))+((r11*x13814*x13822))+(((-1.0)*x13816*x13826)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x13817*x13818))+((x13815*x13823))+((x13816*x13825))+((x13814*x13824))+(((-1.0)*sj2*x13819*x13820))+((r10*x13821*x13823))+(((-1.0)*x13813*x13826))+((sj4*x13817*x13822))+((r00*x13814*x13821))+((r01*x13814*x13822)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj2*x13818))+(((-1.0)*r00*x13821*x13823))+(((-1.0)*x13813*x13825))+(((-1.0)*x13823*x13824))+((x13814*x13815))+(((-1.0)*cj5*r01*x13819*x13823))+((r10*x13814*x13821))+((cj2*cj6*x13820))+((r11*x13814*x13822))+(((-1.0)*x13816*x13826))))+IKsqr((((x13817*x13818))+((x13815*x13823))+((x13816*x13825))+((x13814*x13824))+(((-1.0)*sj2*x13819*x13820))+((r10*x13821*x13823))+(((-1.0)*x13813*x13826))+((sj4*x13817*x13822))+((r00*x13814*x13821))+((r01*x13814*x13822))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*sj2*x13818))+(((-1.0)*r00*x13821*x13823))+(((-1.0)*x13813*x13825))+(((-1.0)*x13823*x13824))+((x13814*x13815))+(((-1.0)*cj5*r01*x13819*x13823))+((r10*x13814*x13821))+((cj2*cj6*x13820))+((r11*x13814*x13822))+(((-1.0)*x13816*x13826))), (((x13817*x13818))+((x13815*x13823))+((x13816*x13825))+((x13814*x13824))+(((-1.0)*sj2*x13819*x13820))+((r10*x13821*x13823))+(((-1.0)*x13813*x13826))+((sj4*x13817*x13822))+((r00*x13814*x13821))+((r01*x13814*x13822))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13827=IKcos(j0);
IkReal x13828=IKsin(j0);
IkReal x13829=((1.0)*sj4);
IkReal x13830=((0.37429)*sj5);
IkReal x13831=(r10*sj6);
IkReal x13832=(cj6*r00);
IkReal x13833=((0.37429)*cj5);
IkReal x13834=(cj6*r01);
IkReal x13835=((0.01)*cj5);
IkReal x13836=((1.0)*cj4);
IkReal x13837=(r00*sj6);
IkReal x13838=(r02*sj5);
IkReal x13839=(r12*sj5);
IkReal x13840=(cj6*r10);
IkReal x13841=(r01*sj6);
IkReal x13842=(r11*sj6);
IkReal x13843=(sj2*x13827);
IkReal x13844=(cj5*cj6*r11);
IkReal x13845=((0.069)*x13828);
IkReal x13846=(cj2*x13827);
IkReal x13847=((0.069)*x13827);
IkReal x13848=(sj2*x13828);
IkReal x13849=((1.0)*cj2*x13828);
evalcond[0]=(x13846+x13848+(((-1.0)*x13829*x13844))+(((-1.0)*x13829*x13839))+(((-1.0)*cj5*x13829*x13831))+((cj4*x13840))+(((-1.0)*x13836*x13842)));
evalcond[1]=((((-1.0)*x13849))+x13843+(((-1.0)*x13829*x13838))+(((-1.0)*cj5*x13829*x13837))+(((-1.0)*cj5*x13829*x13834))+((cj4*x13832))+(((-1.0)*x13836*x13841)));
evalcond[2]=((((-1.0)*x13849))+(((-1.0)*cj5*x13831*x13836))+((sj4*x13842))+x13843+(((-1.0)*x13829*x13840))+(((-1.0)*x13836*x13844))+(((-1.0)*x13836*x13839)));
evalcond[3]=(((sj4*x13841))+(((-1.0)*cj5*x13836*x13837))+(((-1.0)*x13829*x13832))+(((-1.0)*cj5*x13834*x13836))+(((-1.0)*x13836*x13838))+(((-1.0)*x13848))+(((-1.0)*x13846)));
evalcond[4]=((((-1.0)*x13830*x13834))+(((-1.0)*x13830*x13837))+((x13834*x13835))+x13847+(((-0.069)*x13846))+(((-1.0)*sj2*x13845))+(((0.01)*x13838))+(((-1.0)*px))+((r02*x13833))+((x13835*x13837)));
evalcond[5]=(((cj6*r11*x13835))+(((-1.0)*x13830*x13831))+(((-1.0)*cj6*r11*x13830))+x13845+((r12*x13833))+(((0.01)*x13839))+(((-1.0)*py))+((x13831*x13835))+(((-1.0)*cj2*x13845))+(((0.069)*x13843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13850=((1.0)*cj4);
IkReal x13851=((1.0)*cj6);
IkReal x13852=(cj5*r21);
IkReal x13853=(r22*sj5);
IkReal x13854=(r21*sj5);
IkReal x13855=(r21*sj6);
IkReal x13856=((1.0)*sj4);
IkReal x13857=(cj5*r22);
IkReal x13858=(cj5*r20*sj6);
IkReal x13859=((1.0)*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((cj4*cj6*r20))+(((-1.0)*x13856*x13858))+(((-1.0)*x13850*x13855))+(((-1.0)*sj4*x13851*x13852))+(((-1.0)*x13853*x13856)));
evalcond[2]=((0.36442)+(((0.37429)*x13857))+(((-0.37429)*r20*sj5*sj6))+(((0.01)*x13858))+(((0.01)*x13853))+(((-1.0)*pz))+(((-0.37429)*cj6*x13854))+(((0.01)*cj6*x13852)));
evalcond[3]=((-1.0)+x13857+(((-1.0)*x13851*x13854))+(((-1.0)*r20*x13859)));
evalcond[4]=((((-1.0)*r20*sj4*x13851))+(((-1.0)*x13850*x13853))+(((-1.0)*x13850*x13858))+(((-1.0)*cj6*x13850*x13852))+((sj4*x13855)));
evalcond[5]=((((-1.0)*r01*sj5*x13851))+(((-1.0)*r00*x13859))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*r10*x13859))+(((-1.0)*r11*sj5*x13851)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13860=(cj5*cj6);
IkReal x13861=((1.0)*sj2);
IkReal x13862=(cj2*cj4);
IkReal x13863=(r12*sj5);
IkReal x13864=(cj4*sj2);
IkReal x13865=(r10*sj4);
IkReal x13866=(cj5*sj6);
IkReal x13867=(cj6*r10);
IkReal x13868=(r11*sj6);
IkReal x13869=(sj4*x13863);
IkReal x13870=(cj2*r11*sj4);
IkReal x13871=(r11*sj4*x13861);
IkReal x13872=(cj2*r10*x13866);
if( IKabs((((r11*x13860*x13862))+(((-1.0)*x13861*x13865*x13866))+(((-1.0)*cj4*x13861*x13868))+((x13862*x13863))+(((-1.0)*x13861*x13869))+((r10*x13862*x13866))+(((-1.0)*x13860*x13871))+((cj2*cj6*x13865))+((x13864*x13867))+(((-1.0)*cj2*sj4*x13868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*x13860*x13864))+((cj6*sj2*x13865))+((r10*x13864*x13866))+((cj2*x13865*x13866))+(((-1.0)*x13862*x13867))+((x13862*x13868))+((x13860*x13870))+((x13863*x13864))+(((-1.0)*sj4*x13861*x13868))+((cj2*x13869)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x13860*x13862))+(((-1.0)*x13861*x13865*x13866))+(((-1.0)*cj4*x13861*x13868))+((x13862*x13863))+(((-1.0)*x13861*x13869))+((r10*x13862*x13866))+(((-1.0)*x13860*x13871))+((cj2*cj6*x13865))+((x13864*x13867))+(((-1.0)*cj2*sj4*x13868))))+IKsqr((((r11*x13860*x13864))+((cj6*sj2*x13865))+((r10*x13864*x13866))+((cj2*x13865*x13866))+(((-1.0)*x13862*x13867))+((x13862*x13868))+((x13860*x13870))+((x13863*x13864))+(((-1.0)*sj4*x13861*x13868))+((cj2*x13869))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x13860*x13862))+(((-1.0)*x13861*x13865*x13866))+(((-1.0)*cj4*x13861*x13868))+((x13862*x13863))+(((-1.0)*x13861*x13869))+((r10*x13862*x13866))+(((-1.0)*x13860*x13871))+((cj2*cj6*x13865))+((x13864*x13867))+(((-1.0)*cj2*sj4*x13868))), (((r11*x13860*x13864))+((cj6*sj2*x13865))+((r10*x13864*x13866))+((cj2*x13865*x13866))+(((-1.0)*x13862*x13867))+((x13862*x13868))+((x13860*x13870))+((x13863*x13864))+(((-1.0)*sj4*x13861*x13868))+((cj2*x13869))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13873=IKcos(j0);
IkReal x13874=IKsin(j0);
IkReal x13875=((1.0)*sj4);
IkReal x13876=((0.37429)*sj5);
IkReal x13877=(r10*sj6);
IkReal x13878=(cj6*r00);
IkReal x13879=((0.37429)*cj5);
IkReal x13880=(cj6*r01);
IkReal x13881=((0.01)*cj5);
IkReal x13882=(r12*sj5);
IkReal x13883=(r00*sj6);
IkReal x13884=(r02*sj5);
IkReal x13885=((1.0)*cj4);
IkReal x13886=(cj6*r10);
IkReal x13887=(r01*sj6);
IkReal x13888=(r11*sj6);
IkReal x13889=(cj2*x13873);
IkReal x13890=(cj5*cj6*r11);
IkReal x13891=((0.069)*x13874);
IkReal x13892=(sj2*x13873);
IkReal x13893=(cj2*x13874);
IkReal x13894=((1.0)*sj2*x13874);
evalcond[0]=((((-1.0)*cj5*x13877*x13885))+x13892+x13893+(((-1.0)*x13882*x13885))+(((-1.0)*x13885*x13890))+((sj4*x13888))+(((-1.0)*x13875*x13886)));
evalcond[1]=((((-1.0)*x13875*x13890))+(((-1.0)*x13885*x13888))+x13889+(((-1.0)*cj5*x13875*x13877))+(((-1.0)*x13894))+((cj4*x13886))+(((-1.0)*x13875*x13882)));
evalcond[2]=(x13889+(((-1.0)*cj5*x13880*x13885))+(((-1.0)*x13884*x13885))+((sj4*x13887))+(((-1.0)*x13894))+(((-1.0)*x13875*x13878))+(((-1.0)*cj5*x13883*x13885)));
evalcond[3]=((((-1.0)*x13885*x13887))+((cj4*x13878))+(((-1.0)*x13892))+(((-1.0)*x13893))+(((-1.0)*cj5*x13875*x13883))+(((-1.0)*cj5*x13875*x13880))+(((-1.0)*x13875*x13884)));
evalcond[4]=((((0.069)*x13889))+((x13881*x13883))+(((-1.0)*sj2*x13891))+(((0.01)*x13884))+((x13880*x13881))+(((-1.0)*px))+(((-1.0)*x13876*x13880))+(((-1.0)*x13876*x13883))+((r02*x13879))+(((0.069)*x13873)));
evalcond[5]=((((0.069)*x13892))+(((0.01)*x13882))+(((-1.0)*cj6*r11*x13876))+x13891+((cj2*x13891))+((cj6*r11*x13881))+(((-1.0)*py))+((r12*x13879))+((x13877*x13881))+(((-1.0)*x13876*x13877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13895=((1.0)*cj4);
IkReal x13896=(r22*sj5);
IkReal x13897=(r21*sj6);
IkReal x13898=((1.0)*sj4);
IkReal x13899=(cj6*r20);
IkReal x13900=(cj5*r22);
IkReal x13901=(cj5*r20*sj6);
IkReal x13902=((1.0)*cj6*r21);
IkReal x13903=(cj5*cj6*r21);
IkReal x13904=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(sj2+(((-1.0)*x13898*x13903))+(((-1.0)*x13898*x13901))+(((-1.0)*x13896*x13898))+((cj4*x13899))+(((-1.0)*x13895*x13897)));
evalcond[2]=((((0.01)*x13901))+(((0.01)*x13903))+(((-0.37429)*cj6*r21*sj5))+(((0.01)*x13896))+(((-0.37429)*x13904))+(((-0.069)*cj2))+(((-1.0)*pz))+(((0.37429)*x13900)));
evalcond[3]=((((-1.0)*sj5*x13902))+x13900+(((-1.0)*x13904)));
evalcond[4]=((((-1.0)*x13898*x13899))+((sj4*x13897))+(((-1.0)*x13895*x13896))+(((-1.0)*cj2))+(((-1.0)*x13895*x13901))+(((-1.0)*x13895*x13903)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13905=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x13905))+(((-1.0)*cj6*r11*x13905)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x13905))+(((-1.0)*cj6*r01*x13905))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x13905))+(((-1.0)*cj6*r11*x13905))))+IKsqr(((((-1.0)*r00*sj6*x13905))+(((-1.0)*cj6*r01*x13905))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x13905))+(((-1.0)*cj6*r11*x13905))), ((((-1.0)*r00*sj6*x13905))+(((-1.0)*cj6*r01*x13905))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13906=IKcos(j0);
IkReal x13907=IKsin(j0);
IkReal x13908=((1.0)*cj5);
IkReal x13909=(cj6*sj4);
IkReal x13910=(cj4*sj6);
IkReal x13911=(cj5*r12);
IkReal x13912=((0.37429)*sj5);
IkReal x13913=(r10*sj6);
IkReal x13914=((1.0)*r00);
IkReal x13915=((0.069)*sj2);
IkReal x13916=(cj6*r01);
IkReal x13917=((0.01)*cj5);
IkReal x13918=(r00*sj6);
IkReal x13919=((1.0)*sj5);
IkReal x13920=(cj6*r11);
IkReal x13921=(cj4*cj6);
IkReal x13922=(cj5*r02);
IkReal x13923=((0.01)*sj5);
IkReal x13924=(sj4*sj6);
IkReal x13925=((1.0)*x13907);
evalcond[0]=((((-1.0)*x13916*x13919))+x13922+(((-1.0)*x13906))+(((-1.0)*sj5*sj6*x13914)));
evalcond[1]=((((-1.0)*x13919*x13920))+x13911+(((-1.0)*x13913*x13919))+(((-1.0)*x13925)));
evalcond[2]=((((-1.0)*sj4*x13908*x13913))+((r10*x13921))+(((-1.0)*r11*x13908*x13909))+(((-1.0)*r12*sj4*x13919))+((cj2*x13906))+(((-1.0)*r11*x13910)));
evalcond[3]=((((-1.0)*cj4*x13908*x13920))+(((-1.0)*r10*x13909))+(((-1.0)*r10*x13908*x13910))+(((-1.0)*cj4*r12*x13919))+((sj2*x13906))+((r11*x13924)));
evalcond[4]=((((-1.0)*sj4*x13908*x13918))+((r00*x13921))+(((-1.0)*r02*sj4*x13919))+(((-1.0)*cj2*x13925))+(((-1.0)*r01*x13910))+(((-1.0)*r01*x13908*x13909)));
evalcond[5]=((((-1.0)*sj2*x13925))+(((-1.0)*x13909*x13914))+(((-1.0)*r00*x13908*x13910))+(((-1.0)*cj4*r02*x13919))+((r01*x13924))+(((-1.0)*cj4*x13908*x13916)));
evalcond[6]=((((0.37429)*x13922))+(((-1.0)*x13907*x13915))+(((-1.0)*x13912*x13918))+(((-1.0)*x13912*x13916))+(((-1.0)*px))+(((0.43342)*x13906))+((r02*x13923))+((x13917*x13918))+((x13916*x13917)));
evalcond[7]=(((x13906*x13915))+(((-1.0)*x13912*x13920))+(((-1.0)*x13912*x13913))+((x13913*x13917))+(((-1.0)*py))+(((0.37429)*x13911))+((x13917*x13920))+(((0.43342)*x13907))+((r12*x13923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13926=((1.0)*cj4);
IkReal x13927=(r22*sj5);
IkReal x13928=(r21*sj6);
IkReal x13929=((1.0)*sj4);
IkReal x13930=(cj6*r20);
IkReal x13931=(cj5*r22);
IkReal x13932=(cj5*r20*sj6);
IkReal x13933=((1.0)*cj6*r21);
IkReal x13934=(cj5*cj6*r21);
IkReal x13935=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+(((-1.0)*x13927*x13929))+(((-1.0)*x13926*x13928))+(((-1.0)*x13929*x13934))+(((-1.0)*x13929*x13932))+((cj4*x13930)));
evalcond[2]=((((0.37429)*x13931))+(((-0.37429)*cj6*r21*sj5))+(((0.069)*cj2))+(((-1.0)*pz))+(((-0.37429)*x13935))+(((0.01)*x13932))+(((0.01)*x13934))+(((0.01)*x13927)));
evalcond[3]=((((-1.0)*sj5*x13933))+x13931+(((-1.0)*x13935)));
evalcond[4]=((((-1.0)*x13926*x13934))+(((-1.0)*x13926*x13932))+cj2+(((-1.0)*x13926*x13927))+(((-1.0)*x13929*x13930))+((sj4*x13928)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13936=(cj6*sj5);
IkReal x13937=(sj5*sj6);
IkReal x13938=((1.0)*cj5);
if( IKabs((((r11*x13936))+(((-1.0)*r12*x13938))+((r10*x13937)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x13937))+((r01*x13936))+(((-1.0)*r02*x13938)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x13936))+(((-1.0)*r12*x13938))+((r10*x13937))))+IKsqr((((r00*x13937))+((r01*x13936))+(((-1.0)*r02*x13938))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x13936))+(((-1.0)*r12*x13938))+((r10*x13937))), (((r00*x13937))+((r01*x13936))+(((-1.0)*r02*x13938))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x13939=IKcos(j0);
IkReal x13940=IKsin(j0);
IkReal x13941=((1.0)*cj5);
IkReal x13942=(cj6*sj4);
IkReal x13943=(cj4*sj6);
IkReal x13944=(cj5*r12);
IkReal x13945=((0.37429)*sj5);
IkReal x13946=(r10*sj6);
IkReal x13947=((1.0)*r00);
IkReal x13948=((0.069)*sj2);
IkReal x13949=(cj6*r01);
IkReal x13950=((0.01)*cj5);
IkReal x13951=(r00*sj6);
IkReal x13952=((1.0)*sj5);
IkReal x13953=(cj6*r11);
IkReal x13954=((0.01)*sj5);
IkReal x13955=(cj4*cj6);
IkReal x13956=(cj5*r02);
IkReal x13957=(sj4*sj6);
IkReal x13958=((1.0)*x13940);
evalcond[0]=((((-1.0)*x13949*x13952))+x13939+x13956+(((-1.0)*sj5*sj6*x13947)));
evalcond[1]=((((-1.0)*x13946*x13952))+(((-1.0)*x13952*x13953))+x13940+x13944);
evalcond[2]=((((-1.0)*r12*sj4*x13952))+(((-1.0)*r11*x13941*x13942))+((cj2*x13939))+(((-1.0)*r11*x13943))+(((-1.0)*sj4*x13941*x13946))+((r10*x13955)));
evalcond[3]=(((r11*x13957))+((sj2*x13939))+(((-1.0)*r10*x13942))+(((-1.0)*cj4*x13941*x13953))+(((-1.0)*r10*x13941*x13943))+(((-1.0)*cj4*r12*x13952)));
evalcond[4]=((((-1.0)*cj2*x13958))+((r00*x13955))+(((-1.0)*r01*x13941*x13942))+(((-1.0)*r01*x13943))+(((-1.0)*sj4*x13941*x13951))+(((-1.0)*r02*sj4*x13952)));
evalcond[5]=((((-1.0)*cj4*r02*x13952))+((r01*x13957))+(((-1.0)*cj4*x13941*x13949))+(((-1.0)*x13942*x13947))+(((-1.0)*r00*x13941*x13943))+(((-1.0)*sj2*x13958)));
evalcond[6]=((((-1.0)*x13940*x13948))+(((-1.0)*x13945*x13951))+(((-1.0)*x13945*x13949))+((r02*x13954))+(((-1.0)*px))+((x13950*x13951))+(((-0.29542)*x13939))+(((0.37429)*x13956))+((x13949*x13950)));
evalcond[7]=((((-1.0)*x13945*x13953))+((r12*x13954))+(((-0.29542)*x13940))+(((-1.0)*x13945*x13946))+(((0.37429)*x13944))+(((-1.0)*py))+((x13950*x13953))+((x13946*x13950))+((x13939*x13948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13959=((1.0)*cj4);
IkReal x13960=(r22*sj5);
IkReal x13961=(r21*sj6);
IkReal x13962=((1.0)*sj4);
IkReal x13963=(cj6*r20);
IkReal x13964=(cj5*r22);
IkReal x13965=(cj5*r20*sj6);
IkReal x13966=((1.0)*cj6*r21);
IkReal x13967=(cj5*cj6*r21);
IkReal x13968=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((cj4*x13963))+(((-1.0)*x13960*x13962))+(((-1.0)*x13959*x13961))+(((-1.0)*x13962*x13965))+(((-1.0)*x13962*x13967)));
evalcond[2]=((((0.01)*x13967))+(((0.01)*x13965))+(((0.01)*x13960))+(((-0.37429)*cj6*r21*sj5))+(((-0.069)*cj1))+(((0.37429)*x13964))+(((-0.37429)*x13968))+(((-1.0)*pz))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+x13964+(((-1.0)*sj5*x13966))+(((-1.0)*x13968)));
evalcond[4]=((((-1.0)*x13959*x13965))+(((-1.0)*x13959*x13967))+(((-1.0)*x13959*x13960))+(((-1.0)*x13962*x13963))+(((-1.0)*cj1))+((sj4*x13961)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
IkReal x13969=((1.0)*cj6*sj5);
IkReal x13970=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs(((((-1.0)*r00*x13970))+(((-1.0)*r01*x13969))+((cj5*r02)))))+(IKabs((((cj5*r12))+(((-1.0)*r10*x13970))+(((-1.0)*r11*x13969))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
bool bgotonextstatement = true;
do
{
IkReal x13971=((0.01)*cj5);
IkReal x13972=(r20*sj6);
IkReal x13973=(cj5*r21);
IkReal x13974=(sj4*sj6);
IkReal x13975=(r22*sj5);
IkReal x13976=((1.0)*cj6);
IkReal x13977=(cj4*cj5);
IkReal x13978=(r21*sj5);
IkReal x13979=((1.0)*cj4);
IkReal x13980=((1.0)*sj4);
IkReal x13981=(cj5*r22);
IkReal x13982=(sj4*x13976);
IkReal x13983=((1.0)*sj6*x13977);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(((cj4*cj6*r20))+(((-1.0)*x13975*x13980))+(((-1.0)*cj5*x13972*x13980))+(((-1.0)*x13973*x13982))+(((-1.0)*r21*sj6*x13979)));
evalcond[2]=((-0.069)+(((0.01)*x13975))+(((0.37429)*x13981))+(((-0.37429)*cj6*x13978))+(((-1.0)*pz))+((x13971*x13972))+((cj6*r21*x13971))+(((-0.37429)*sj5*x13972)));
evalcond[3]=(x13981+(((-1.0)*sj5*x13972))+(((-1.0)*x13976*x13978)));
evalcond[4]=((-1.0)+(((-1.0)*r20*x13982))+(((-1.0)*x13975*x13979))+(((-1.0)*x13972*x13977))+(((-1.0)*cj4*x13973*x13976))+((r21*x13974)));
evalcond[5]=((((-1.0)*r12*sj5*x13979))+(((-1.0)*r11*x13976*x13977))+((r11*x13974))+(((-1.0)*r10*x13983))+(((-1.0)*r10*x13982)));
evalcond[6]=((((-1.0)*r01*x13976*x13977))+(((-1.0)*r02*sj5*x13979))+(((-1.0)*r00*x13982))+(((-1.0)*r00*x13983))+((r01*x13974)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x13984=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*cj6*r11*x13984))+(((-1.0)*r10*sj6*x13984)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*sj6*x13984))+(((-1.0)*cj6*r01*x13984))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*cj6*r11*x13984))+(((-1.0)*r10*sj6*x13984))))+IKsqr(((((-1.0)*r00*sj6*x13984))+(((-1.0)*cj6*r01*x13984))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*cj6*r11*x13984))+(((-1.0)*r10*sj6*x13984))), ((((-1.0)*r00*sj6*x13984))+(((-1.0)*cj6*r01*x13984))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x13985=IKcos(j0);
IkReal x13986=IKsin(j0);
IkReal x13987=((1.0)*sj4);
IkReal x13988=(cj5*r12);
IkReal x13989=(r10*sj6);
IkReal x13990=((0.37429)*sj5);
IkReal x13991=(cj6*r01);
IkReal x13992=((0.01)*cj5);
IkReal x13993=(r12*sj5);
IkReal x13994=(r00*sj6);
IkReal x13995=((1.0)*sj5);
IkReal x13996=(r02*sj5);
IkReal x13997=(cj6*r11);
IkReal x13998=(cj4*cj6);
IkReal x13999=(cj5*r02);
IkReal x14000=((1.0)*x13986);
IkReal x14001=(cj5*x13997);
IkReal x14002=((1.0)*cj4*sj6);
evalcond[0]=(x13999+(((-1.0)*x13994*x13995))+(((-1.0)*x13991*x13995))+(((-1.0)*x13985)));
evalcond[1]=(x13988+(((-1.0)*x13989*x13995))+(((-1.0)*x13995*x13997))+(((-1.0)*x14000)));
evalcond[2]=((((-1.0)*cj5*x13987*x13989))+(((-1.0)*x13987*x14001))+x13985+((r10*x13998))+(((-1.0)*x13987*x13993))+(((-1.0)*r11*x14002)));
evalcond[3]=((((-1.0)*cj5*x13987*x13991))+(((-1.0)*cj5*x13987*x13994))+(((-1.0)*x13987*x13996))+(((-1.0)*r01*x14002))+(((-1.0)*x14000))+((r00*x13998)));
evalcond[4]=((((0.43342)*x13985))+((x13992*x13994))+(((0.01)*x13996))+(((-1.0)*px))+(((-1.0)*x13990*x13991))+(((-1.0)*x13990*x13994))+(((0.37429)*x13999))+((x13991*x13992)));
evalcond[5]=((((0.43342)*x13986))+(((0.37429)*x13988))+((x13992*x13997))+(((0.01)*x13993))+(((-1.0)*py))+(((-1.0)*x13989*x13990))+(((-1.0)*x13990*x13997))+((x13989*x13992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14003=((0.01)*cj5);
IkReal x14004=(r20*sj6);
IkReal x14005=(cj5*r21);
IkReal x14006=(sj4*sj6);
IkReal x14007=(r22*sj5);
IkReal x14008=((1.0)*cj6);
IkReal x14009=(cj4*cj5);
IkReal x14010=(r21*sj5);
IkReal x14011=((1.0)*cj4);
IkReal x14012=((1.0)*sj4);
IkReal x14013=(cj5*r22);
IkReal x14014=(sj4*x14008);
IkReal x14015=((1.0)*sj6*x14009);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x14005*x14014))+((cj4*cj6*r20))+(((-1.0)*cj5*x14004*x14012))+(((-1.0)*x14007*x14012))+(((-1.0)*r21*sj6*x14011)));
evalcond[2]=((0.069)+((x14003*x14004))+((cj6*r21*x14003))+(((-1.0)*pz))+(((0.37429)*x14013))+(((-0.37429)*cj6*x14010))+(((0.01)*x14007))+(((-0.37429)*sj5*x14004)));
evalcond[3]=((((-1.0)*x14008*x14010))+(((-1.0)*sj5*x14004))+x14013);
evalcond[4]=((1.0)+((r21*x14006))+(((-1.0)*x14004*x14009))+(((-1.0)*x14007*x14011))+(((-1.0)*cj4*x14005*x14008))+(((-1.0)*r20*x14014)));
evalcond[5]=(((r11*x14006))+(((-1.0)*r11*x14008*x14009))+(((-1.0)*r12*sj5*x14011))+(((-1.0)*r10*x14014))+(((-1.0)*r10*x14015)));
evalcond[6]=((((-1.0)*r01*x14008*x14009))+((r01*x14006))+(((-1.0)*r00*x14015))+(((-1.0)*r00*x14014))+(((-1.0)*r02*sj5*x14011)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14016=(cj6*sj5);
IkReal x14017=(sj5*sj6);
IkReal x14018=((1.0)*cj5);
if( IKabs((((r11*x14016))+(((-1.0)*r12*x14018))+((r10*x14017)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r02*x14018))+((r00*x14017))+((r01*x14016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x14016))+(((-1.0)*r12*x14018))+((r10*x14017))))+IKsqr(((((-1.0)*r02*x14018))+((r00*x14017))+((r01*x14016))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r11*x14016))+(((-1.0)*r12*x14018))+((r10*x14017))), ((((-1.0)*r02*x14018))+((r00*x14017))+((r01*x14016))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14019=IKcos(j0);
IkReal x14020=IKsin(j0);
IkReal x14021=((1.0)*sj4);
IkReal x14022=(cj5*r12);
IkReal x14023=(r10*sj6);
IkReal x14024=((0.37429)*sj5);
IkReal x14025=(cj6*r01);
IkReal x14026=((0.01)*cj5);
IkReal x14027=(r12*sj5);
IkReal x14028=(r00*sj6);
IkReal x14029=((1.0)*sj5);
IkReal x14030=(r02*sj5);
IkReal x14031=(cj6*r11);
IkReal x14032=(cj4*cj6);
IkReal x14033=(cj5*r02);
IkReal x14034=(cj5*x14031);
IkReal x14035=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x14028*x14029))+(((-1.0)*x14025*x14029))+x14019+x14033);
evalcond[1]=((((-1.0)*x14029*x14031))+(((-1.0)*x14023*x14029))+x14020+x14022);
evalcond[2]=(((r10*x14032))+(((-1.0)*r11*x14035))+(((-1.0)*cj5*x14021*x14023))+(((-1.0)*x14021*x14027))+(((-1.0)*x14021*x14034))+x14019);
evalcond[3]=(((r00*x14032))+(((-1.0)*x14020))+(((-1.0)*r01*x14035))+(((-1.0)*cj5*x14021*x14028))+(((-1.0)*cj5*x14021*x14025))+(((-1.0)*x14021*x14030)));
evalcond[4]=(((x14026*x14028))+((x14025*x14026))+(((0.37429)*x14033))+(((-0.29542)*x14019))+(((0.01)*x14030))+(((-1.0)*px))+(((-1.0)*x14024*x14028))+(((-1.0)*x14024*x14025)));
evalcond[5]=(((x14026*x14031))+((x14023*x14026))+(((0.37429)*x14022))+(((0.01)*x14027))+(((-1.0)*py))+(((-1.0)*x14024*x14031))+(((-1.0)*x14023*x14024))+(((-0.29542)*x14020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14036=(r21*sj4);
IkReal x14037=(cj5*sj6);
IkReal x14038=((1.0)*cj4);
IkReal x14039=(cj5*cj6);
IkReal x14040=(cj5*r12);
IkReal x14041=((1.0)*sj5);
IkReal x14042=(cj6*r11);
IkReal x14043=((0.01)*sj5);
IkReal x14044=(cj5*r02);
IkReal x14045=(cj6*r21);
IkReal x14046=((0.37429)*sj5);
IkReal x14047=(cj6*r01);
IkReal x14048=(cj6*r20);
IkReal x14049=((1.0)*sj4);
IkReal x14050=(cj5*r22);
IkReal x14051=(sj6*x14046);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=(((cj4*x14048))+(((-1.0)*r20*x14037*x14049))+(((-1.0)*r21*sj6*x14038))+(((-1.0)*x14036*x14039))+(((-1.0)*r22*sj4*x14041)));
evalcond[2]=((-0.36442)+(((-1.0)*x14045*x14046))+((r22*x14043))+(((0.01)*r20*x14037))+(((-1.0)*r20*x14051))+(((0.01)*r21*x14039))+(((-1.0)*pz))+(((0.37429)*x14050)));
evalcond[3]=((((0.37429)*x14044))+(((-1.0)*px))+(((-1.0)*r00*x14051))+(((0.01)*r00*x14037))+(((0.01)*r01*x14039))+(((-1.0)*x14046*x14047))+((r02*x14043)));
evalcond[4]=((((-1.0)*x14042*x14046))+(((0.01)*r10*x14037))+(((0.37429)*x14040))+(((-1.0)*r10*x14051))+(((0.01)*r11*x14039))+(((-1.0)*py))+((r12*x14043)));
evalcond[5]=((1.0)+(((-1.0)*r20*sj6*x14041))+(((-1.0)*x14041*x14045))+x14050);
evalcond[6]=((((-1.0)*r22*sj5*x14038))+(((-1.0)*x14048*x14049))+(((-1.0)*r20*x14037*x14038))+((sj6*x14036))+(((-1.0)*r21*x14038*x14039)));
evalcond[7]=((((-1.0)*x14041*x14047))+(((-1.0)*r00*sj6*x14041))+x14044);
evalcond[8]=((((-1.0)*r10*sj6*x14041))+(((-1.0)*x14041*x14042))+x14040);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14052=(cj4*sj6);
IkReal x14053=((1.0)*r01);
IkReal x14054=(cj5*sj4);
IkReal x14055=(sj4*sj5);
IkReal x14056=(cj4*cj6);
if( IKabs(((((-1.0)*r00*sj6*x14054))+((r00*x14056))+(((-1.0)*cj6*x14053*x14054))+(((-1.0)*x14052*x14053))+(((-1.0)*r02*x14055)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x14056))+((r11*x14052))+((cj6*r11*x14054))+((r12*x14055))+((r10*sj6*x14054)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj6*x14054))+((r00*x14056))+(((-1.0)*cj6*x14053*x14054))+(((-1.0)*x14052*x14053))+(((-1.0)*r02*x14055))))+IKsqr(((((-1.0)*r10*x14056))+((r11*x14052))+((cj6*r11*x14054))+((r12*x14055))+((r10*sj6*x14054))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*sj6*x14054))+((r00*x14056))+(((-1.0)*cj6*x14053*x14054))+(((-1.0)*x14052*x14053))+(((-1.0)*r02*x14055))), ((((-1.0)*r10*x14056))+((r11*x14052))+((cj6*r11*x14054))+((r12*x14055))+((r10*sj6*x14054))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x14057=IKcos(j0);
IkReal x14058=(cj5*r11);
IkReal x14059=(cj5*r01);
IkReal x14060=(cj4*cj6);
IkReal x14061=((1.0)*cj4);
IkReal x14062=(r01*sj6);
IkReal x14063=(r11*sj6);
IkReal x14064=((1.0)*(IKsin(j0)));
IkReal x14065=((1.0)*cj6*sj4);
IkReal x14066=((1.0)*sj4*sj5);
IkReal x14067=(cj5*r00*sj6);
IkReal x14068=((1.0)*cj5*r10*sj6);
evalcond[0]=((((-1.0)*x14058*x14065))+(((-1.0)*x14061*x14063))+(((-1.0)*r12*x14066))+((r10*x14060))+x14057+(((-1.0)*sj4*x14068)));
evalcond[1]=((((-1.0)*x14059*x14065))+(((-1.0)*x14061*x14062))+((r00*x14060))+(((-1.0)*sj4*x14067))+(((-1.0)*x14064))+(((-1.0)*r02*x14066)));
evalcond[2]=((((-1.0)*r12*sj5*x14061))+(((-1.0)*x14058*x14060))+(((-1.0)*cj5*r10*sj6*x14061))+(((-1.0)*x14064))+(((-1.0)*r10*x14065))+((sj4*x14063)));
evalcond[3]=((((-1.0)*x14057))+(((-1.0)*r00*x14065))+(((-1.0)*x14061*x14067))+(((-1.0)*x14059*x14060))+((sj4*x14062))+(((-1.0)*r02*sj5*x14061)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14069=((1.0)*cj4);
IkReal x14070=((1.0)*cj6);
IkReal x14071=(cj5*r21);
IkReal x14072=(r22*sj5);
IkReal x14073=(r21*sj5);
IkReal x14074=(r21*sj6);
IkReal x14075=((1.0)*sj4);
IkReal x14076=(cj5*r22);
IkReal x14077=(cj5*r20*sj6);
IkReal x14078=((1.0)*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x14072*x14075))+((cj4*cj6*r20))+(((-1.0)*x14075*x14077))+(((-1.0)*x14069*x14074))+(((-1.0)*sj4*x14070*x14071)));
evalcond[2]=((0.36442)+(((-0.37429)*r20*sj5*sj6))+(((-0.37429)*cj6*x14073))+(((0.37429)*x14076))+(((-1.0)*pz))+(((0.01)*x14072))+(((0.01)*x14077))+(((0.01)*cj6*x14071)));
evalcond[3]=((-1.0)+(((-1.0)*r20*x14078))+(((-1.0)*x14070*x14073))+x14076);
evalcond[4]=(((sj4*x14074))+(((-1.0)*x14069*x14072))+(((-1.0)*x14069*x14077))+(((-1.0)*r20*sj4*x14070))+(((-1.0)*cj6*x14069*x14071)));
evalcond[5]=((((-1.0)*r00*x14078))+(((-1.0)*r01*sj5*x14070))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*r11*sj5*x14070))+(((-1.0)*r10*x14078)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14079=(r11*sj6);
IkReal x14080=(cj6*r10);
IkReal x14081=(r12*sj5);
IkReal x14082=(cj5*cj6*r11);
IkReal x14083=(cj5*r10*sj6);
if( IKabs((((cj4*x14083))+((cj4*x14082))+((cj4*x14081))+((sj4*x14080))+(((-1.0)*sj4*x14079)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*x14080))+((sj4*x14083))+((sj4*x14082))+((sj4*x14081))+((cj4*x14079)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*x14083))+((cj4*x14082))+((cj4*x14081))+((sj4*x14080))+(((-1.0)*sj4*x14079))))+IKsqr(((((-1.0)*cj4*x14080))+((sj4*x14083))+((sj4*x14082))+((sj4*x14081))+((cj4*x14079))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj4*x14083))+((cj4*x14082))+((cj4*x14081))+((sj4*x14080))+(((-1.0)*sj4*x14079))), ((((-1.0)*cj4*x14080))+((sj4*x14083))+((sj4*x14082))+((sj4*x14081))+((cj4*x14079))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14084=IKcos(j0);
IkReal x14085=IKsin(j0);
IkReal x14086=((1.0)*sj4);
IkReal x14087=(r10*sj6);
IkReal x14088=((0.37429)*sj5);
IkReal x14089=(cj6*r00);
IkReal x14090=((0.01)*cj5);
IkReal x14091=((1.0)*cj4);
IkReal x14092=(r00*sj6);
IkReal x14093=(r02*sj5);
IkReal x14094=(sj4*sj6);
IkReal x14095=(r12*sj5);
IkReal x14096=((0.37429)*cj5);
IkReal x14097=(cj6*r10);
IkReal x14098=(cj5*cj6*r11);
IkReal x14099=(cj5*cj6*r01);
evalcond[0]=(((cj4*x14097))+(((-1.0)*x14086*x14095))+(((-1.0)*x14086*x14098))+(((-1.0)*cj5*x14086*x14087))+(((-1.0)*r11*sj6*x14091))+x14084);
evalcond[1]=((((-1.0)*x14086*x14097))+(((-1.0)*x14091*x14098))+(((-1.0)*x14091*x14095))+(((-1.0)*cj5*x14087*x14091))+((r11*x14094))+x14085);
evalcond[2]=((((-1.0)*x14091*x14099))+(((-1.0)*x14091*x14093))+(((-1.0)*x14086*x14089))+(((-1.0)*cj5*x14091*x14092))+x14084+((r01*x14094)));
evalcond[3]=(((cj4*x14089))+(((-1.0)*x14086*x14093))+(((-1.0)*x14086*x14099))+(((-1.0)*x14085))+(((-1.0)*r01*sj6*x14091))+(((-1.0)*cj5*x14086*x14092)));
evalcond[4]=(((cj6*r01*x14090))+(((0.138)*x14084))+(((-1.0)*px))+((r02*x14096))+(((0.01)*x14093))+(((-1.0)*x14088*x14092))+((x14090*x14092))+(((-1.0)*cj6*r01*x14088)));
evalcond[5]=((((-1.0)*cj6*r11*x14088))+(((0.138)*x14085))+((cj6*r11*x14090))+(((-1.0)*x14087*x14088))+((x14087*x14090))+(((-1.0)*py))+((r12*x14096))+(((0.01)*x14095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14100=((1.0)*cj6);
IkReal x14101=((1.0)*sj5);
IkReal x14102=(cj4*cj5);
CheckValue<IkReal> x14103=IKPowWithIntegerCheck(sj1,-1);
if(!x14103.valid){
continue;
}
CheckValue<IkReal> x14104=IKPowWithIntegerCheck(cj1,-1);
if(!x14104.valid){
continue;
}
if( IKabs(((x14103.value)*(((((-1.0)*r11*x14100*x14102))+(((-1.0)*cj4*r12*x14101))+(((-1.0)*r10*sj4*x14100))+((r11*sj4*sj6))+(((-1.0)*r10*sj6*x14102)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14104.value)*(((((-1.0)*r01*sj5*x14100))+(((-1.0)*r00*sj6*x14101))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14103.value)*(((((-1.0)*r11*x14100*x14102))+(((-1.0)*cj4*r12*x14101))+(((-1.0)*r10*sj4*x14100))+((r11*sj4*sj6))+(((-1.0)*r10*sj6*x14102))))))+IKsqr(((x14104.value)*(((((-1.0)*r01*sj5*x14100))+(((-1.0)*r00*sj6*x14101))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14103.value)*(((((-1.0)*r11*x14100*x14102))+(((-1.0)*cj4*r12*x14101))+(((-1.0)*r10*sj4*x14100))+((r11*sj4*sj6))+(((-1.0)*r10*sj6*x14102))))), ((x14104.value)*(((((-1.0)*r01*sj5*x14100))+(((-1.0)*r00*sj6*x14101))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14105=IKcos(j0);
IkReal x14106=IKsin(j0);
IkReal x14107=((1.0)*cj5);
IkReal x14108=(cj6*sj4);
IkReal x14109=(r00*sj6);
IkReal x14110=(cj5*r12);
IkReal x14111=((0.37429)*sj5);
IkReal x14112=(r10*sj6);
IkReal x14113=((0.36442)*cj1);
IkReal x14114=(cj6*r01);
IkReal x14115=((0.01)*cj5);
IkReal x14116=((1.0)*sj5);
IkReal x14117=(cj6*r11);
IkReal x14118=(cj4*cj6);
IkReal x14119=(cj5*r02);
IkReal x14120=(r01*sj6);
IkReal x14121=((1.0)*cj4);
IkReal x14122=((0.01)*sj5);
IkReal x14123=(r11*sj6);
IkReal x14124=((0.069)*x14106);
IkReal x14125=((1.0)*x14106);
IkReal x14126=((1.0)*x14105);
IkReal x14127=((0.069)*x14105);
evalcond[0]=((((-1.0)*x14114*x14116))+(((-1.0)*cj1*x14126))+x14119+(((-1.0)*x14109*x14116)));
evalcond[1]=((((-1.0)*cj1*x14125))+(((-1.0)*x14116*x14117))+x14110+(((-1.0)*x14112*x14116)));
evalcond[2]=((((-1.0)*x14121*x14123))+((r10*x14118))+x14105+(((-1.0)*r11*x14107*x14108))+(((-1.0)*r12*sj4*x14116))+(((-1.0)*sj4*x14107*x14112)));
evalcond[3]=((((-1.0)*sj4*x14107*x14109))+((r00*x14118))+(((-1.0)*x14125))+(((-1.0)*x14120*x14121))+(((-1.0)*r01*x14107*x14108))+(((-1.0)*r02*sj4*x14116)));
evalcond[4]=((((-1.0)*cj4*x14107*x14112))+(((-1.0)*cj4*x14107*x14117))+(((-1.0)*r10*x14108))+((sj4*x14123))+(((-1.0)*cj4*r12*x14116))+(((-1.0)*sj1*x14125)));
evalcond[5]=((((-1.0)*cj4*x14107*x14114))+(((-1.0)*cj4*r02*x14116))+((sj4*x14120))+(((-1.0)*sj1*x14126))+(((-1.0)*r00*x14108))+(((-1.0)*cj4*x14107*x14109)));
evalcond[6]=(((x14114*x14115))+((x14109*x14115))+(((-1.0)*sj1*x14127))+(((-1.0)*px))+((x14105*x14113))+(((0.37429)*x14119))+(((-1.0)*x14111*x14114))+x14127+(((-1.0)*x14109*x14111))+((r02*x14122)));
evalcond[7]=(((r12*x14122))+((x14112*x14115))+((x14115*x14117))+(((-1.0)*sj1*x14124))+(((-1.0)*py))+(((0.37429)*x14110))+(((-1.0)*x14111*x14112))+(((-1.0)*x14111*x14117))+x14124+((x14106*x14113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14128=(cj5*sj4);
IkReal x14129=(cj6*r11);
IkReal x14130=((1.0)*r10);
CheckValue<IkReal> x14131=IKPowWithIntegerCheck(cj1,-1);
if(!x14131.valid){
continue;
}
if( IKabs(((x14131.value)*((((cj5*r12))+(((-1.0)*sj5*x14129))+(((-1.0)*sj5*sj6*x14130)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*cj6*x14130))+((x14128*x14129))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x14128)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14131.value)*((((cj5*r12))+(((-1.0)*sj5*x14129))+(((-1.0)*sj5*sj6*x14130))))))+IKsqr(((((-1.0)*cj4*cj6*x14130))+((x14128*x14129))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x14128))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14131.value)*((((cj5*r12))+(((-1.0)*sj5*x14129))+(((-1.0)*sj5*sj6*x14130))))), ((((-1.0)*cj4*cj6*x14130))+((x14128*x14129))+((cj4*r11*sj6))+((r12*sj4*sj5))+((r10*sj6*x14128))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14132=IKcos(j0);
IkReal x14133=IKsin(j0);
IkReal x14134=((1.0)*cj5);
IkReal x14135=(cj6*sj4);
IkReal x14136=(r00*sj6);
IkReal x14137=(cj5*r12);
IkReal x14138=((0.37429)*sj5);
IkReal x14139=(r10*sj6);
IkReal x14140=((0.36442)*cj1);
IkReal x14141=(cj6*r01);
IkReal x14142=((0.01)*cj5);
IkReal x14143=((1.0)*sj5);
IkReal x14144=(cj6*r11);
IkReal x14145=(cj4*cj6);
IkReal x14146=(cj5*r02);
IkReal x14147=(r01*sj6);
IkReal x14148=((1.0)*cj4);
IkReal x14149=((0.01)*sj5);
IkReal x14150=(r11*sj6);
IkReal x14151=((0.069)*x14133);
IkReal x14152=((1.0)*x14133);
IkReal x14153=((1.0)*x14132);
IkReal x14154=((0.069)*x14132);
evalcond[0]=((((-1.0)*cj1*x14153))+x14146+(((-1.0)*x14141*x14143))+(((-1.0)*x14136*x14143)));
evalcond[1]=((((-1.0)*x14139*x14143))+(((-1.0)*cj1*x14152))+(((-1.0)*x14143*x14144))+x14137);
evalcond[2]=(((r10*x14145))+(((-1.0)*r12*sj4*x14143))+(((-1.0)*sj4*x14134*x14139))+(((-1.0)*x14148*x14150))+x14132+(((-1.0)*r11*x14134*x14135)));
evalcond[3]=((((-1.0)*sj4*x14134*x14136))+(((-1.0)*r02*sj4*x14143))+(((-1.0)*x14147*x14148))+((r00*x14145))+(((-1.0)*r01*x14134*x14135))+(((-1.0)*x14152)));
evalcond[4]=((((-1.0)*cj4*r12*x14143))+(((-1.0)*cj4*x14134*x14139))+((sj4*x14150))+(((-1.0)*cj4*x14134*x14144))+(((-1.0)*sj1*x14152))+(((-1.0)*r10*x14135)));
evalcond[5]=((((-1.0)*cj4*x14134*x14136))+(((-1.0)*r00*x14135))+(((-1.0)*cj4*x14134*x14141))+(((-1.0)*sj1*x14153))+((sj4*x14147))+(((-1.0)*cj4*r02*x14143)));
evalcond[6]=(((r02*x14149))+((x14136*x14142))+(((-1.0)*px))+(((-1.0)*x14138*x14141))+(((-1.0)*x14136*x14138))+((x14141*x14142))+x14154+(((-1.0)*sj1*x14154))+(((0.37429)*x14146))+((x14132*x14140)));
evalcond[7]=((((-1.0)*x14138*x14139))+(((-1.0)*py))+(((-1.0)*x14138*x14144))+((r12*x14149))+((x14133*x14140))+((x14142*x14144))+((x14139*x14142))+x14151+(((-1.0)*sj1*x14151))+(((0.37429)*x14137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14155=((1.0)*cj6*sj5);
IkReal x14156=((1.0)*sj5*sj6);
CheckValue<IkReal> x14157=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14157.valid){
continue;
}
CheckValue<IkReal> x14158 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x14155))+(((-1.0)*r10*x14156)))),((((-1.0)*r01*x14155))+(((-1.0)*r00*x14156))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x14158.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14157.value)))+(x14158.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14159=IKcos(j0);
IkReal x14160=IKsin(j0);
IkReal x14161=((1.0)*cj5);
IkReal x14162=(cj6*sj4);
IkReal x14163=(r00*sj6);
IkReal x14164=(cj5*r12);
IkReal x14165=((0.37429)*sj5);
IkReal x14166=(r10*sj6);
IkReal x14167=((0.36442)*cj1);
IkReal x14168=(cj6*r01);
IkReal x14169=((0.01)*cj5);
IkReal x14170=((1.0)*sj5);
IkReal x14171=(cj6*r11);
IkReal x14172=(cj4*cj6);
IkReal x14173=(cj5*r02);
IkReal x14174=(r01*sj6);
IkReal x14175=((1.0)*cj4);
IkReal x14176=((0.01)*sj5);
IkReal x14177=(r11*sj6);
IkReal x14178=((0.069)*x14160);
IkReal x14179=((1.0)*x14160);
IkReal x14180=((1.0)*x14159);
IkReal x14181=((0.069)*x14159);
evalcond[0]=((((-1.0)*x14168*x14170))+(((-1.0)*cj1*x14180))+(((-1.0)*x14163*x14170))+x14173);
evalcond[1]=((((-1.0)*x14166*x14170))+(((-1.0)*cj1*x14179))+x14164+(((-1.0)*x14170*x14171)));
evalcond[2]=((((-1.0)*r11*x14161*x14162))+(((-1.0)*x14175*x14177))+(((-1.0)*r12*sj4*x14170))+((r10*x14172))+x14159+(((-1.0)*sj4*x14161*x14166)));
evalcond[3]=((((-1.0)*x14179))+((r00*x14172))+(((-1.0)*r02*sj4*x14170))+(((-1.0)*x14174*x14175))+(((-1.0)*r01*x14161*x14162))+(((-1.0)*sj4*x14161*x14163)));
evalcond[4]=((((-1.0)*r10*x14162))+((sj4*x14177))+(((-1.0)*sj1*x14179))+(((-1.0)*cj4*x14161*x14166))+(((-1.0)*cj4*r12*x14170))+(((-1.0)*cj4*x14161*x14171)));
evalcond[5]=(((sj4*x14174))+(((-1.0)*r00*x14162))+(((-1.0)*cj4*x14161*x14163))+(((-1.0)*cj4*x14161*x14168))+(((-1.0)*sj1*x14180))+(((-1.0)*cj4*r02*x14170)));
evalcond[6]=(((x14159*x14167))+(((-1.0)*x14163*x14165))+(((0.37429)*x14173))+((x14168*x14169))+(((-1.0)*x14165*x14168))+(((-1.0)*px))+((r02*x14176))+(((-1.0)*sj1*x14181))+x14181+((x14163*x14169)));
evalcond[7]=(((x14160*x14167))+((r12*x14176))+(((-1.0)*sj1*x14178))+(((-1.0)*x14165*x14166))+((x14166*x14169))+(((-1.0)*py))+x14178+((x14169*x14171))+(((0.37429)*x14164))+(((-1.0)*x14165*x14171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14182=((1.0)*cj4);
IkReal x14183=(r22*sj5);
IkReal x14184=(r21*sj6);
IkReal x14185=((1.0)*sj4);
IkReal x14186=(cj6*r20);
IkReal x14187=(cj5*r22);
IkReal x14188=(cj5*r20*sj6);
IkReal x14189=((1.0)*cj6*r21);
IkReal x14190=(cj5*cj6*r21);
IkReal x14191=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x14182*x14184))+(((-1.0)*x14185*x14188))+(((-1.0)*x14185*x14190))+((cj4*x14186))+(((-1.0)*x14183*x14185)));
evalcond[2]=((((-0.37429)*cj6*r21*sj5))+(((-0.37429)*x14191))+(((0.069)*cj1))+(((-1.0)*pz))+(((0.01)*x14190))+(((0.01)*x14183))+(((0.01)*x14188))+(((0.37429)*x14187))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*x14191))+sj1+(((-1.0)*sj5*x14189))+x14187);
evalcond[4]=(cj1+(((-1.0)*x14182*x14183))+(((-1.0)*x14182*x14188))+(((-1.0)*x14185*x14186))+(((-1.0)*x14182*x14190))+((sj4*x14184)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x14192=((1.0)*cj6*sj5);
IkReal x14193=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x14192))+(((-1.0)*r10*x14193)))))+(IKabs(((((-1.0)*r01*x14192))+(((-1.0)*r00*x14193))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14194=(cj4*cj5);
IkReal x14195=((1.0)*sj5);
CheckValue<IkReal> x14196=IKPowWithIntegerCheck(sj1,-1);
if(!x14196.valid){
continue;
}
CheckValue<IkReal> x14197=IKPowWithIntegerCheck(cj1,-1);
if(!x14197.valid){
continue;
}
if( IKabs(((x14196.value)*((((cj6*r10*sj4))+((r10*sj6*x14194))+((cj6*r11*x14194))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14197.value)*(((((-1.0)*cj6*r01*x14195))+(((-1.0)*r00*sj6*x14195))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14196.value)*((((cj6*r10*sj4))+((r10*sj6*x14194))+((cj6*r11*x14194))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))))+IKsqr(((x14197.value)*(((((-1.0)*cj6*r01*x14195))+(((-1.0)*r00*sj6*x14195))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14196.value)*((((cj6*r10*sj4))+((r10*sj6*x14194))+((cj6*r11*x14194))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))), ((x14197.value)*(((((-1.0)*cj6*r01*x14195))+(((-1.0)*r00*sj6*x14195))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14198=IKsin(j0);
IkReal x14199=IKcos(j0);
IkReal x14200=((1.0)*cj5);
IkReal x14201=(cj6*sj4);
IkReal x14202=(r00*sj6);
IkReal x14203=(cj5*r12);
IkReal x14204=((0.37429)*sj5);
IkReal x14205=(r10*sj6);
IkReal x14206=((0.36442)*cj1);
IkReal x14207=(cj6*r01);
IkReal x14208=((0.01)*cj5);
IkReal x14209=((1.0)*sj5);
IkReal x14210=(cj6*r11);
IkReal x14211=(cj4*cj6);
IkReal x14212=(cj5*r02);
IkReal x14213=(r01*sj6);
IkReal x14214=((1.0)*cj4);
IkReal x14215=((0.01)*sj5);
IkReal x14216=(r11*sj6);
IkReal x14217=(sj1*x14198);
IkReal x14218=((1.0)*x14199);
IkReal x14219=((0.069)*x14199);
evalcond[0]=((((-1.0)*cj1*x14218))+(((-1.0)*x14207*x14209))+(((-1.0)*x14202*x14209))+x14212);
evalcond[1]=((((-1.0)*cj1*x14198))+(((-1.0)*x14205*x14209))+(((-1.0)*x14209*x14210))+x14203);
evalcond[2]=((((-1.0)*r02*sj4*x14209))+(((-1.0)*r01*x14200*x14201))+(((-1.0)*x14213*x14214))+(((-1.0)*sj4*x14200*x14202))+((r00*x14211))+x14198);
evalcond[3]=((((-1.0)*r12*sj4*x14209))+(((-1.0)*r11*x14200*x14201))+(((-1.0)*sj4*x14200*x14205))+((r10*x14211))+(((-1.0)*x14214*x14216))+(((-1.0)*x14218)));
evalcond[4]=((((-1.0)*r10*x14201))+(((-1.0)*cj4*x14200*x14210))+((sj4*x14216))+(((-1.0)*cj4*x14200*x14205))+x14217+(((-1.0)*cj4*r12*x14209)));
evalcond[5]=(((sj4*x14213))+((sj1*x14199))+(((-1.0)*r00*x14201))+(((-1.0)*cj4*r02*x14209))+(((-1.0)*cj4*x14200*x14207))+(((-1.0)*cj4*x14200*x14202)));
evalcond[6]=(((x14207*x14208))+(((-1.0)*x14204*x14207))+((sj1*x14219))+((x14199*x14206))+(((-1.0)*px))+((x14202*x14208))+(((-1.0)*x14202*x14204))+((r02*x14215))+(((0.37429)*x14212))+x14219);
evalcond[7]=(((r12*x14215))+((x14205*x14208))+(((-1.0)*x14204*x14210))+(((0.37429)*x14203))+(((-1.0)*x14204*x14205))+(((-1.0)*py))+((x14198*x14206))+(((0.069)*x14217))+(((0.069)*x14198))+((x14208*x14210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14220=((1.0)*r00);
IkReal x14221=(cj6*r01);
IkReal x14222=(cj5*sj4);
CheckValue<IkReal> x14223=IKPowWithIntegerCheck(cj1,-1);
if(!x14223.valid){
continue;
}
if( IKabs((((r00*sj6*x14222))+(((-1.0)*cj4*cj6*x14220))+((x14221*x14222))+((cj4*r01*sj6))+((r02*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14223.value)*(((((-1.0)*sj5*sj6*x14220))+(((-1.0)*sj5*x14221))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj6*x14222))+(((-1.0)*cj4*cj6*x14220))+((x14221*x14222))+((cj4*r01*sj6))+((r02*sj4*sj5))))+IKsqr(((x14223.value)*(((((-1.0)*sj5*sj6*x14220))+(((-1.0)*sj5*x14221))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj6*x14222))+(((-1.0)*cj4*cj6*x14220))+((x14221*x14222))+((cj4*r01*sj6))+((r02*sj4*sj5))), ((x14223.value)*(((((-1.0)*sj5*sj6*x14220))+(((-1.0)*sj5*x14221))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14224=IKsin(j0);
IkReal x14225=IKcos(j0);
IkReal x14226=((1.0)*cj5);
IkReal x14227=(cj6*sj4);
IkReal x14228=(r00*sj6);
IkReal x14229=(cj5*r12);
IkReal x14230=((0.37429)*sj5);
IkReal x14231=(r10*sj6);
IkReal x14232=((0.36442)*cj1);
IkReal x14233=(cj6*r01);
IkReal x14234=((0.01)*cj5);
IkReal x14235=((1.0)*sj5);
IkReal x14236=(cj6*r11);
IkReal x14237=(cj4*cj6);
IkReal x14238=(cj5*r02);
IkReal x14239=(r01*sj6);
IkReal x14240=((1.0)*cj4);
IkReal x14241=((0.01)*sj5);
IkReal x14242=(r11*sj6);
IkReal x14243=(sj1*x14224);
IkReal x14244=((1.0)*x14225);
IkReal x14245=((0.069)*x14225);
evalcond[0]=((((-1.0)*x14233*x14235))+(((-1.0)*x14228*x14235))+(((-1.0)*cj1*x14244))+x14238);
evalcond[1]=((((-1.0)*cj1*x14224))+(((-1.0)*x14231*x14235))+(((-1.0)*x14235*x14236))+x14229);
evalcond[2]=((((-1.0)*r02*sj4*x14235))+(((-1.0)*x14239*x14240))+(((-1.0)*sj4*x14226*x14228))+((r00*x14237))+(((-1.0)*r01*x14226*x14227))+x14224);
evalcond[3]=((((-1.0)*r11*x14226*x14227))+(((-1.0)*sj4*x14226*x14231))+(((-1.0)*x14244))+((r10*x14237))+(((-1.0)*r12*sj4*x14235))+(((-1.0)*x14240*x14242)));
evalcond[4]=((((-1.0)*r10*x14227))+(((-1.0)*cj4*x14226*x14236))+(((-1.0)*cj4*x14226*x14231))+((sj4*x14242))+(((-1.0)*cj4*r12*x14235))+x14243);
evalcond[5]=(((sj1*x14225))+((sj4*x14239))+(((-1.0)*r00*x14227))+(((-1.0)*cj4*x14226*x14233))+(((-1.0)*cj4*x14226*x14228))+(((-1.0)*cj4*r02*x14235)));
evalcond[6]=((((-1.0)*x14228*x14230))+(((0.37429)*x14238))+((x14228*x14234))+((x14225*x14232))+((r02*x14241))+(((-1.0)*px))+((sj1*x14245))+((x14233*x14234))+x14245+(((-1.0)*x14230*x14233)));
evalcond[7]=(((x14231*x14234))+(((0.37429)*x14229))+(((0.069)*x14243))+((x14224*x14232))+(((0.069)*x14224))+((r12*x14241))+(((-1.0)*py))+((x14234*x14236))+(((-1.0)*x14230*x14231))+(((-1.0)*x14230*x14236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14246=((1.0)*cj6*sj5);
IkReal x14247=((1.0)*sj5*sj6);
CheckValue<IkReal> x14248=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14248.valid){
continue;
}
CheckValue<IkReal> x14249 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*x14247))+(((-1.0)*r11*x14246)))),((((-1.0)*r01*x14246))+(((-1.0)*r00*x14247))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x14249.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14248.value)))+(x14249.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14250=IKsin(j0);
IkReal x14251=IKcos(j0);
IkReal x14252=((1.0)*cj5);
IkReal x14253=(cj6*sj4);
IkReal x14254=(r00*sj6);
IkReal x14255=(cj5*r12);
IkReal x14256=((0.37429)*sj5);
IkReal x14257=(r10*sj6);
IkReal x14258=((0.36442)*cj1);
IkReal x14259=(cj6*r01);
IkReal x14260=((0.01)*cj5);
IkReal x14261=((1.0)*sj5);
IkReal x14262=(cj6*r11);
IkReal x14263=(cj4*cj6);
IkReal x14264=(cj5*r02);
IkReal x14265=(r01*sj6);
IkReal x14266=((1.0)*cj4);
IkReal x14267=((0.01)*sj5);
IkReal x14268=(r11*sj6);
IkReal x14269=(sj1*x14250);
IkReal x14270=((1.0)*x14251);
IkReal x14271=((0.069)*x14251);
evalcond[0]=((((-1.0)*x14254*x14261))+(((-1.0)*cj1*x14270))+(((-1.0)*x14259*x14261))+x14264);
evalcond[1]=((((-1.0)*x14257*x14261))+(((-1.0)*x14261*x14262))+(((-1.0)*cj1*x14250))+x14255);
evalcond[2]=((((-1.0)*r01*x14252*x14253))+((r00*x14263))+(((-1.0)*x14265*x14266))+(((-1.0)*r02*sj4*x14261))+(((-1.0)*sj4*x14252*x14254))+x14250);
evalcond[3]=((((-1.0)*x14270))+(((-1.0)*r12*sj4*x14261))+(((-1.0)*sj4*x14252*x14257))+((r10*x14263))+(((-1.0)*x14266*x14268))+(((-1.0)*r11*x14252*x14253)));
evalcond[4]=((((-1.0)*cj4*x14252*x14262))+(((-1.0)*cj4*r12*x14261))+((sj4*x14268))+(((-1.0)*r10*x14253))+(((-1.0)*cj4*x14252*x14257))+x14269);
evalcond[5]=(((sj4*x14265))+(((-1.0)*r00*x14253))+(((-1.0)*cj4*r02*x14261))+((sj1*x14251))+(((-1.0)*cj4*x14252*x14259))+(((-1.0)*cj4*x14252*x14254)));
evalcond[6]=((((-1.0)*x14254*x14256))+((r02*x14267))+(((0.37429)*x14264))+(((-1.0)*px))+((x14251*x14258))+((x14259*x14260))+((x14254*x14260))+((sj1*x14271))+(((-1.0)*x14256*x14259))+x14271);
evalcond[7]=((((0.069)*x14269))+(((0.069)*x14250))+(((-1.0)*py))+((x14257*x14260))+((r12*x14267))+((x14250*x14258))+(((0.37429)*x14255))+((x14260*x14262))+(((-1.0)*x14256*x14257))+(((-1.0)*x14256*x14262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14272=(cj4*cj5);
IkReal x14273=(cj5*r22);
IkReal x14274=(r22*sj5);
IkReal x14275=(cj6*r21);
IkReal x14276=((0.37429)*sj5);
IkReal x14277=((1.0)*sj4);
IkReal x14278=(r21*sj6);
IkReal x14279=((1.0)*cj4);
IkReal x14280=((0.01)*cj5);
IkReal x14281=(cj6*r20);
IkReal x14282=(r20*sj6);
IkReal x14283=((1.0)*x14275);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x14274*x14277))+cj1+(((-1.0)*cj5*x14275*x14277))+(((-1.0)*x14278*x14279))+((cj4*x14281))+(((-1.0)*cj5*x14277*x14282)));
evalcond[2]=((((-1.0)*x14275*x14276))+(((0.37429)*x14273))+(((-1.0)*pz))+(((-1.0)*x14276*x14282))+((x14280*x14282))+((x14275*x14280))+(((0.01)*x14274))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*sj5*x14282))+sj1+(((-1.0)*sj5*x14283))+x14273);
evalcond[4]=((((-1.0)*x14274*x14279))+(((-1.0)*x14272*x14282))+((sj4*x14278))+(((-1.0)*x14272*x14283))+(((-1.0)*x14277*x14281)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x14284=((1.0)*cj6*sj5);
IkReal x14285=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r10*x14285))+(((-1.0)*r11*x14284)))))+(IKabs(((((-1.0)*r01*x14284))+(((-1.0)*r00*x14285))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14286=(cj5*sj4);
IkReal x14287=((1.0)*cj6);
CheckValue<IkReal> x14288=IKPowWithIntegerCheck(sj1,-1);
if(!x14288.valid){
continue;
}
CheckValue<IkReal> x14289=IKPowWithIntegerCheck(cj1,-1);
if(!x14289.valid){
continue;
}
if( IKabs(((x14288.value)*(((((-1.0)*cj4*r10*x14287))+((r10*sj6*x14286))+((cj4*r11*sj6))+((cj6*r11*x14286))+((r12*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14289.value)*(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x14287))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14288.value)*(((((-1.0)*cj4*r10*x14287))+((r10*sj6*x14286))+((cj4*r11*sj6))+((cj6*r11*x14286))+((r12*sj4*sj5))))))+IKsqr(((x14289.value)*(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x14287))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14288.value)*(((((-1.0)*cj4*r10*x14287))+((r10*sj6*x14286))+((cj4*r11*sj6))+((cj6*r11*x14286))+((r12*sj4*sj5))))), ((x14289.value)*(((((-1.0)*r00*sj5*sj6))+(((-1.0)*r01*sj5*x14287))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14290=IKcos(j0);
IkReal x14291=IKsin(j0);
IkReal x14292=((1.0)*cj5);
IkReal x14293=(cj6*sj4);
IkReal x14294=(r00*sj6);
IkReal x14295=(cj5*r12);
IkReal x14296=((0.37429)*sj5);
IkReal x14297=(r10*sj6);
IkReal x14298=((0.36442)*cj1);
IkReal x14299=(cj6*r01);
IkReal x14300=((0.01)*cj5);
IkReal x14301=((1.0)*sj5);
IkReal x14302=(cj6*r11);
IkReal x14303=(sj4*sj6);
IkReal x14304=(cj4*cj6);
IkReal x14305=(cj5*r02);
IkReal x14306=((0.01)*sj5);
IkReal x14307=((0.069)*x14291);
IkReal x14308=((0.069)*x14290);
IkReal x14309=((1.0)*x14291);
IkReal x14310=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x14294*x14301))+(((-1.0)*x14299*x14301))+(((-1.0)*cj1*x14290))+x14305);
evalcond[1]=((((-1.0)*cj1*x14309))+(((-1.0)*x14297*x14301))+(((-1.0)*x14301*x14302))+x14295);
evalcond[2]=(((r11*x14303))+(((-1.0)*r10*x14293))+(((-1.0)*cj4*r12*x14301))+(((-1.0)*cj4*x14292*x14297))+(((-1.0)*cj4*x14292*x14302))+x14290);
evalcond[3]=((((-1.0)*sj4*x14292*x14297))+((sj1*x14291))+(((-1.0)*r12*sj4*x14301))+(((-1.0)*r11*x14310))+((r10*x14304))+(((-1.0)*r11*x14292*x14293)));
evalcond[4]=((((-1.0)*r01*x14310))+((r00*x14304))+(((-1.0)*sj4*x14292*x14294))+((sj1*x14290))+(((-1.0)*r01*x14292*x14293))+(((-1.0)*r02*sj4*x14301)));
evalcond[5]=((((-1.0)*r00*x14293))+(((-1.0)*cj4*r02*x14301))+((r01*x14303))+(((-1.0)*cj4*x14292*x14299))+(((-1.0)*cj4*x14292*x14294))+(((-1.0)*x14309)));
evalcond[6]=(((r02*x14306))+((x14299*x14300))+((x14290*x14298))+(((0.37429)*x14305))+(((-1.0)*px))+(((-1.0)*x14296*x14299))+x14308+(((-1.0)*x14294*x14296))+((x14294*x14300))+(((-1.0)*x14307)));
evalcond[7]=(((x14297*x14300))+((x14291*x14298))+(((-1.0)*x14296*x14302))+((r12*x14306))+(((-1.0)*py))+((x14300*x14302))+(((-1.0)*x14296*x14297))+x14307+x14308+(((0.37429)*x14295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14311=(cj4*cj5);
IkReal x14312=(cj6*r11);
IkReal x14313=(r10*sj6);
IkReal x14314=((1.0)*sj5);
CheckValue<IkReal> x14315=IKPowWithIntegerCheck(cj1,-1);
if(!x14315.valid){
continue;
}
if( IKabs(((x14315.value)*((((cj5*r12))+(((-1.0)*x14312*x14314))+(((-1.0)*x14313*x14314)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj4))+((x14311*x14313))+((x14311*x14312))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14315.value)*((((cj5*r12))+(((-1.0)*x14312*x14314))+(((-1.0)*x14313*x14314))))))+IKsqr((((cj6*r10*sj4))+((x14311*x14313))+((x14311*x14312))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14315.value)*((((cj5*r12))+(((-1.0)*x14312*x14314))+(((-1.0)*x14313*x14314))))), (((cj6*r10*sj4))+((x14311*x14313))+((x14311*x14312))+(((-1.0)*r11*sj4*sj6))+((cj4*r12*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14316=IKcos(j0);
IkReal x14317=IKsin(j0);
IkReal x14318=((1.0)*cj5);
IkReal x14319=(cj6*sj4);
IkReal x14320=(r00*sj6);
IkReal x14321=(cj5*r12);
IkReal x14322=((0.37429)*sj5);
IkReal x14323=(r10*sj6);
IkReal x14324=((0.36442)*cj1);
IkReal x14325=(cj6*r01);
IkReal x14326=((0.01)*cj5);
IkReal x14327=((1.0)*sj5);
IkReal x14328=(cj6*r11);
IkReal x14329=(sj4*sj6);
IkReal x14330=(cj4*cj6);
IkReal x14331=(cj5*r02);
IkReal x14332=((0.01)*sj5);
IkReal x14333=((0.069)*x14317);
IkReal x14334=((0.069)*x14316);
IkReal x14335=((1.0)*x14317);
IkReal x14336=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x14325*x14327))+(((-1.0)*cj1*x14316))+(((-1.0)*x14320*x14327))+x14331);
evalcond[1]=((((-1.0)*cj1*x14335))+(((-1.0)*x14327*x14328))+(((-1.0)*x14323*x14327))+x14321);
evalcond[2]=((((-1.0)*r10*x14319))+(((-1.0)*cj4*r12*x14327))+((r11*x14329))+x14316+(((-1.0)*cj4*x14318*x14323))+(((-1.0)*cj4*x14318*x14328)));
evalcond[3]=((((-1.0)*r11*x14318*x14319))+(((-1.0)*r11*x14336))+((sj1*x14317))+((r10*x14330))+(((-1.0)*sj4*x14318*x14323))+(((-1.0)*r12*sj4*x14327)));
evalcond[4]=(((r00*x14330))+((sj1*x14316))+(((-1.0)*r01*x14336))+(((-1.0)*sj4*x14318*x14320))+(((-1.0)*r01*x14318*x14319))+(((-1.0)*r02*sj4*x14327)));
evalcond[5]=((((-1.0)*x14335))+(((-1.0)*cj4*r02*x14327))+((r01*x14329))+(((-1.0)*r00*x14319))+(((-1.0)*cj4*x14318*x14320))+(((-1.0)*cj4*x14318*x14325)));
evalcond[6]=((((-1.0)*x14333))+((r02*x14332))+((x14320*x14326))+(((-1.0)*px))+(((0.37429)*x14331))+(((-1.0)*x14320*x14322))+(((-1.0)*x14322*x14325))+((x14316*x14324))+x14334+((x14325*x14326)));
evalcond[7]=(((r12*x14332))+(((-1.0)*py))+((x14317*x14324))+(((-1.0)*x14322*x14323))+(((-1.0)*x14322*x14328))+((x14326*x14328))+x14334+x14333+(((0.37429)*x14321))+((x14323*x14326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14337=((1.0)*cj6*sj5);
IkReal x14338=((1.0)*sj5*sj6);
CheckValue<IkReal> x14339=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14339.valid){
continue;
}
CheckValue<IkReal> x14340 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r11*x14337))+(((-1.0)*r10*x14338)))),((((-1.0)*r00*x14338))+(((-1.0)*r01*x14337))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x14340.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14339.value)))+(x14340.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14341=IKcos(j0);
IkReal x14342=IKsin(j0);
IkReal x14343=((1.0)*cj5);
IkReal x14344=(cj6*sj4);
IkReal x14345=(r00*sj6);
IkReal x14346=(cj5*r12);
IkReal x14347=((0.37429)*sj5);
IkReal x14348=(r10*sj6);
IkReal x14349=((0.36442)*cj1);
IkReal x14350=(cj6*r01);
IkReal x14351=((0.01)*cj5);
IkReal x14352=((1.0)*sj5);
IkReal x14353=(cj6*r11);
IkReal x14354=(sj4*sj6);
IkReal x14355=(cj4*cj6);
IkReal x14356=(cj5*r02);
IkReal x14357=((0.01)*sj5);
IkReal x14358=((0.069)*x14342);
IkReal x14359=((0.069)*x14341);
IkReal x14360=((1.0)*x14342);
IkReal x14361=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x14345*x14352))+(((-1.0)*cj1*x14341))+(((-1.0)*x14350*x14352))+x14356);
evalcond[1]=((((-1.0)*x14348*x14352))+(((-1.0)*cj1*x14360))+(((-1.0)*x14352*x14353))+x14346);
evalcond[2]=(((r11*x14354))+(((-1.0)*cj4*x14343*x14353))+(((-1.0)*cj4*r12*x14352))+x14341+(((-1.0)*cj4*x14343*x14348))+(((-1.0)*r10*x14344)));
evalcond[3]=(((sj1*x14342))+(((-1.0)*r11*x14343*x14344))+((r10*x14355))+(((-1.0)*r12*sj4*x14352))+(((-1.0)*sj4*x14343*x14348))+(((-1.0)*r11*x14361)));
evalcond[4]=((((-1.0)*r01*x14361))+(((-1.0)*r02*sj4*x14352))+((sj1*x14341))+((r00*x14355))+(((-1.0)*sj4*x14343*x14345))+(((-1.0)*r01*x14343*x14344)));
evalcond[5]=((((-1.0)*cj4*r02*x14352))+(((-1.0)*r00*x14344))+(((-1.0)*cj4*x14343*x14350))+((r01*x14354))+(((-1.0)*x14360))+(((-1.0)*cj4*x14343*x14345)));
evalcond[6]=((((-1.0)*x14358))+((r02*x14357))+(((-1.0)*x14347*x14350))+((x14341*x14349))+((x14345*x14351))+(((-1.0)*px))+(((0.37429)*x14356))+((x14350*x14351))+x14359+(((-1.0)*x14345*x14347)));
evalcond[7]=((((-1.0)*x14347*x14353))+((r12*x14357))+(((0.37429)*x14346))+((x14348*x14351))+((x14351*x14353))+((x14342*x14349))+(((-1.0)*py))+(((-1.0)*x14347*x14348))+x14358+x14359);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14362=((1.0)*cj4);
IkReal x14363=(r22*sj5);
IkReal x14364=(r21*sj6);
IkReal x14365=((1.0)*sj4);
IkReal x14366=(cj6*r20);
IkReal x14367=(cj5*r22);
IkReal x14368=(cj5*r20*sj6);
IkReal x14369=((1.0)*cj6*r21);
IkReal x14370=(cj5*cj6*r21);
IkReal x14371=(r20*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x14362*x14364))+((cj4*x14366))+(((-1.0)*x14365*x14368))+(((-1.0)*cj1))+(((-1.0)*x14363*x14365))+(((-1.0)*x14365*x14370)));
evalcond[2]=((((-0.37429)*x14371))+(((-0.37429)*cj6*r21*sj5))+(((-1.0)*pz))+(((0.01)*x14370))+(((0.37429)*x14367))+(((0.01)*x14368))+(((0.01)*x14363))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*sj5*x14369))+(((-1.0)*x14371))+x14367);
evalcond[4]=((((-1.0)*x14362*x14363))+(((-1.0)*x14362*x14368))+(((-1.0)*x14365*x14366))+(((-1.0)*x14362*x14370))+((sj4*x14364)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x14372=((1.0)*cj6*sj5);
IkReal x14373=((1.0)*sj5*sj6);
j0eval[0]=cj1;
j0eval[1]=IKsign(cj1);
j0eval[2]=((IKabs((((cj5*r12))+(((-1.0)*r11*x14372))+(((-1.0)*r10*x14373)))))+(IKabs(((((-1.0)*r01*x14372))+(((-1.0)*r00*x14373))+((cj5*r02))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14374=((1.0)*cj6);
IkReal x14375=(cj5*sj4);
IkReal x14376=((1.0)*sj6);
CheckValue<IkReal> x14377=IKPowWithIntegerCheck(sj1,-1);
if(!x14377.valid){
continue;
}
CheckValue<IkReal> x14378=IKPowWithIntegerCheck(cj1,-1);
if(!x14378.valid){
continue;
}
if( IKabs(((x14377.value)*(((((-1.0)*cj4*r11*x14376))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*r10*x14375*x14376))+((cj4*cj6*r10))+(((-1.0)*r11*x14374*x14375)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14378.value)*(((((-1.0)*r01*sj5*x14374))+(((-1.0)*r00*sj5*x14376))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14377.value)*(((((-1.0)*cj4*r11*x14376))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*r10*x14375*x14376))+((cj4*cj6*r10))+(((-1.0)*r11*x14374*x14375))))))+IKsqr(((x14378.value)*(((((-1.0)*r01*sj5*x14374))+(((-1.0)*r00*sj5*x14376))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x14377.value)*(((((-1.0)*cj4*r11*x14376))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*r10*x14375*x14376))+((cj4*cj6*r10))+(((-1.0)*r11*x14374*x14375))))), ((x14378.value)*(((((-1.0)*r01*sj5*x14374))+(((-1.0)*r00*sj5*x14376))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14379=IKsin(j0);
IkReal x14380=IKcos(j0);
IkReal x14381=(cj5*r11);
IkReal x14382=(sj5*sj6);
IkReal x14383=((1.0)*r00);
IkReal x14384=(cj5*r12);
IkReal x14385=((0.36442)*cj1);
IkReal x14386=(cj5*r01);
IkReal x14387=((1.0)*cj6);
IkReal x14388=(r11*sj5);
IkReal x14389=((1.0)*cj4);
IkReal x14390=((0.01)*cj6);
IkReal x14391=(cj4*cj6);
IkReal x14392=(cj5*r02);
IkReal x14393=(r12*sj5);
IkReal x14394=(cj5*sj6);
IkReal x14395=(r01*sj6);
IkReal x14396=(r02*sj5);
IkReal x14397=(r11*sj6);
IkReal x14398=((0.069)*x14379);
IkReal x14399=((0.069)*x14380);
IkReal x14400=(sj4*x14387);
IkReal x14401=(cj6*r01*sj5);
IkReal x14402=(r10*x14394);
IkReal x14403=((1.0)*sj4*sj5);
IkReal x14404=((1.0)*x14380);
IkReal x14405=((1.0)*x14379);
evalcond[0]=((((-1.0)*cj1*x14404))+(((-1.0)*r01*sj5*x14387))+(((-1.0)*x14382*x14383))+x14392);
evalcond[1]=((((-1.0)*cj1*x14405))+(((-1.0)*r10*x14382))+x14384+(((-1.0)*x14387*x14388)));
evalcond[2]=((((-1.0)*cj4*x14386*x14387))+(((-1.0)*cj6*sj4*x14383))+(((-1.0)*cj4*x14383*x14394))+((sj4*x14395))+(((-1.0)*x14389*x14396))+x14379);
evalcond[3]=((((-1.0)*x14404))+((sj4*x14397))+(((-1.0)*cj4*x14381*x14387))+(((-1.0)*r10*x14400))+(((-1.0)*x14389*x14393))+(((-1.0)*x14389*x14402)));
evalcond[4]=((((-1.0)*sj4*x14393))+(((-1.0)*x14381*x14400))+(((-1.0)*sj4*x14402))+((r10*x14391))+(((-1.0)*x14389*x14397))+(((-1.0)*sj1*x14405)));
evalcond[5]=((((-1.0)*sj4*x14396))+((r00*x14391))+(((-1.0)*x14386*x14400))+(((-1.0)*x14389*x14395))+(((-1.0)*sj4*x14383*x14394))+(((-1.0)*sj1*x14404)));
evalcond[6]=((((0.37429)*x14392))+((x14386*x14390))+(((0.01)*x14396))+(((-0.37429)*r00*x14382))+((x14380*x14385))+(((-1.0)*px))+(((0.01)*r00*x14394))+(((-0.37429)*x14401))+x14398+x14399);
evalcond[7]=((((-0.37429)*cj6*x14388))+(((0.01)*x14402))+((x14379*x14385))+(((0.37429)*x14384))+(((0.01)*x14393))+(((-1.0)*py))+x14398+((x14381*x14390))+(((-0.37429)*r10*x14382))+(((-1.0)*x14399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14406=((1.0)*sj6);
IkReal x14407=(cj4*cj5);
IkReal x14408=(cj6*r01);
CheckValue<IkReal> x14409=IKPowWithIntegerCheck(cj1,-1);
if(!x14409.valid){
continue;
}
if( IKabs((((r00*sj6*x14407))+((cj6*r00*sj4))+((cj4*r02*sj5))+((x14407*x14408))+(((-1.0)*r01*sj4*x14406)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14409.value)*(((((-1.0)*sj5*x14408))+(((-1.0)*r00*sj5*x14406))+((cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj6*x14407))+((cj6*r00*sj4))+((cj4*r02*sj5))+((x14407*x14408))+(((-1.0)*r01*sj4*x14406))))+IKsqr(((x14409.value)*(((((-1.0)*sj5*x14408))+(((-1.0)*r00*sj5*x14406))+((cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*sj6*x14407))+((cj6*r00*sj4))+((cj4*r02*sj5))+((x14407*x14408))+(((-1.0)*r01*sj4*x14406))), ((x14409.value)*(((((-1.0)*sj5*x14408))+(((-1.0)*r00*sj5*x14406))+((cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14410=IKsin(j0);
IkReal x14411=IKcos(j0);
IkReal x14412=(cj5*r11);
IkReal x14413=(sj5*sj6);
IkReal x14414=((1.0)*r00);
IkReal x14415=(cj5*r12);
IkReal x14416=((0.36442)*cj1);
IkReal x14417=(cj5*r01);
IkReal x14418=((1.0)*cj6);
IkReal x14419=(r11*sj5);
IkReal x14420=((1.0)*cj4);
IkReal x14421=((0.01)*cj6);
IkReal x14422=(cj4*cj6);
IkReal x14423=(cj5*r02);
IkReal x14424=(r12*sj5);
IkReal x14425=(cj5*sj6);
IkReal x14426=(r01*sj6);
IkReal x14427=(r02*sj5);
IkReal x14428=(r11*sj6);
IkReal x14429=((0.069)*x14410);
IkReal x14430=((0.069)*x14411);
IkReal x14431=(sj4*x14418);
IkReal x14432=(cj6*r01*sj5);
IkReal x14433=(r10*x14425);
IkReal x14434=((1.0)*sj4*sj5);
IkReal x14435=((1.0)*x14411);
IkReal x14436=((1.0)*x14410);
evalcond[0]=((((-1.0)*r01*sj5*x14418))+(((-1.0)*x14413*x14414))+(((-1.0)*cj1*x14435))+x14423);
evalcond[1]=((((-1.0)*x14418*x14419))+(((-1.0)*cj1*x14436))+x14415+(((-1.0)*r10*x14413)));
evalcond[2]=(((sj4*x14426))+(((-1.0)*x14420*x14427))+(((-1.0)*cj6*sj4*x14414))+(((-1.0)*cj4*x14414*x14425))+x14410+(((-1.0)*cj4*x14417*x14418)));
evalcond[3]=((((-1.0)*x14435))+((sj4*x14428))+(((-1.0)*cj4*x14412*x14418))+(((-1.0)*r10*x14431))+(((-1.0)*x14420*x14433))+(((-1.0)*x14420*x14424)));
evalcond[4]=((((-1.0)*sj4*x14424))+(((-1.0)*x14412*x14431))+(((-1.0)*x14420*x14428))+(((-1.0)*sj1*x14436))+((r10*x14422))+(((-1.0)*sj4*x14433)));
evalcond[5]=((((-1.0)*sj4*x14427))+(((-1.0)*sj4*x14414*x14425))+(((-1.0)*x14420*x14426))+(((-1.0)*sj1*x14435))+(((-1.0)*x14417*x14431))+((r00*x14422)));
evalcond[6]=((((-0.37429)*x14432))+(((0.01)*r00*x14425))+(((0.01)*x14427))+(((0.37429)*x14423))+(((-1.0)*px))+x14430+x14429+((x14417*x14421))+((x14411*x14416))+(((-0.37429)*r00*x14413)));
evalcond[7]=((((-1.0)*x14430))+(((0.01)*x14433))+(((0.01)*x14424))+(((-1.0)*py))+x14429+((x14412*x14421))+(((-0.37429)*cj6*x14419))+(((0.37429)*x14415))+(((-0.37429)*r10*x14413))+((x14410*x14416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14437=((1.0)*cj6*sj5);
IkReal x14438=((1.0)*sj5*sj6);
CheckValue<IkReal> x14439=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14439.valid){
continue;
}
CheckValue<IkReal> x14440 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*x14438))+(((-1.0)*r11*x14437)))),((((-1.0)*r00*x14438))+(((-1.0)*r01*x14437))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x14440.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14439.value)))+(x14440.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14441=IKsin(j0);
IkReal x14442=IKcos(j0);
IkReal x14443=(cj5*r11);
IkReal x14444=(sj5*sj6);
IkReal x14445=((1.0)*r00);
IkReal x14446=(cj5*r12);
IkReal x14447=((0.36442)*cj1);
IkReal x14448=(cj5*r01);
IkReal x14449=((1.0)*cj6);
IkReal x14450=(r11*sj5);
IkReal x14451=((1.0)*cj4);
IkReal x14452=((0.01)*cj6);
IkReal x14453=(cj4*cj6);
IkReal x14454=(cj5*r02);
IkReal x14455=(r12*sj5);
IkReal x14456=(cj5*sj6);
IkReal x14457=(r01*sj6);
IkReal x14458=(r02*sj5);
IkReal x14459=(r11*sj6);
IkReal x14460=((0.069)*x14441);
IkReal x14461=((0.069)*x14442);
IkReal x14462=(sj4*x14449);
IkReal x14463=(cj6*r01*sj5);
IkReal x14464=(r10*x14456);
IkReal x14465=((1.0)*sj4*sj5);
IkReal x14466=((1.0)*x14442);
IkReal x14467=((1.0)*x14441);
evalcond[0]=((((-1.0)*cj1*x14466))+x14454+(((-1.0)*x14444*x14445))+(((-1.0)*r01*sj5*x14449)));
evalcond[1]=((((-1.0)*r10*x14444))+(((-1.0)*x14449*x14450))+(((-1.0)*cj1*x14467))+x14446);
evalcond[2]=((((-1.0)*cj4*x14448*x14449))+((sj4*x14457))+x14441+(((-1.0)*x14451*x14458))+(((-1.0)*cj6*sj4*x14445))+(((-1.0)*cj4*x14445*x14456)));
evalcond[3]=(((sj4*x14459))+(((-1.0)*cj4*x14443*x14449))+(((-1.0)*r10*x14462))+(((-1.0)*x14451*x14464))+(((-1.0)*x14451*x14455))+(((-1.0)*x14466)));
evalcond[4]=((((-1.0)*sj4*x14455))+(((-1.0)*sj4*x14464))+((r10*x14453))+(((-1.0)*x14443*x14462))+(((-1.0)*x14451*x14459))+(((-1.0)*sj1*x14467)));
evalcond[5]=((((-1.0)*x14448*x14462))+(((-1.0)*sj4*x14458))+((r00*x14453))+(((-1.0)*x14451*x14457))+(((-1.0)*sj4*x14445*x14456))+(((-1.0)*sj1*x14466)));
evalcond[6]=((((0.01)*x14458))+((x14442*x14447))+(((-0.37429)*x14463))+(((-1.0)*px))+(((0.37429)*x14454))+x14460+x14461+(((-0.37429)*r00*x14444))+((x14448*x14452))+(((0.01)*r00*x14456)));
evalcond[7]=((((-0.37429)*r10*x14444))+(((0.01)*x14455))+((x14441*x14447))+(((0.37429)*x14446))+(((-1.0)*py))+x14460+(((-1.0)*x14461))+(((-0.37429)*cj6*x14450))+((x14443*x14452))+(((0.01)*x14464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x14474=IKPowWithIntegerCheck(cj1,-1);
if(!x14474.valid){
continue;
}
IkReal x14468=x14474.value;
IkReal x14469=(cj5*r02);
IkReal x14470=(cj1*sj6);
IkReal x14471=(cj1*sj4);
IkReal x14472=(cj6*r01*sj5);
IkReal x14473=(r00*sj5*sj6);
CheckValue<IkReal> x14475=IKPowWithIntegerCheck(sj1,-1);
if(!x14475.valid){
continue;
}
CheckValue<IkReal> x14476=IKPowWithIntegerCheck(sj2,-1);
if(!x14476.valid){
continue;
}
if( IKabs((x14468*(x14475.value)*(x14476.value)*((((cj2*x14473))+((cj2*x14472))+((r12*sj5*x14471))+(((-1.0)*cj2*x14469))+((cj4*r11*x14470))+((cj5*cj6*r11*x14471))+(((-1.0)*cj1*cj4*cj6*r10))+((cj5*r10*sj4*x14470)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x14468*(((((-1.0)*x14473))+(((-1.0)*x14472))+x14469)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14468*(x14475.value)*(x14476.value)*((((cj2*x14473))+((cj2*x14472))+((r12*sj5*x14471))+(((-1.0)*cj2*x14469))+((cj4*r11*x14470))+((cj5*cj6*r11*x14471))+(((-1.0)*cj1*cj4*cj6*r10))+((cj5*r10*sj4*x14470))))))+IKsqr((x14468*(((((-1.0)*x14473))+(((-1.0)*x14472))+x14469))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x14468*(x14475.value)*(x14476.value)*((((cj2*x14473))+((cj2*x14472))+((r12*sj5*x14471))+(((-1.0)*cj2*x14469))+((cj4*r11*x14470))+((cj5*cj6*r11*x14471))+(((-1.0)*cj1*cj4*cj6*r10))+((cj5*r10*sj4*x14470))))), (x14468*(((((-1.0)*x14473))+(((-1.0)*x14472))+x14469))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14477=IKsin(j0);
IkReal x14478=IKcos(j0);
IkReal x14479=((1.0)*cj5);
IkReal x14480=(cj6*sj4);
IkReal x14481=(r00*sj6);
IkReal x14482=(cj5*r12);
IkReal x14483=((0.37429)*sj5);
IkReal x14484=(r10*sj6);
IkReal x14485=(cj2*sj1);
IkReal x14486=((0.36442)*cj1);
IkReal x14487=(cj6*r01);
IkReal x14488=((0.01)*cj5);
IkReal x14489=((1.0)*sj5);
IkReal x14490=(cj6*r11);
IkReal x14491=(sj4*sj6);
IkReal x14492=((0.01)*sj5);
IkReal x14493=(cj4*cj6);
IkReal x14494=(cj5*r02);
IkReal x14495=((0.069)*x14477);
IkReal x14496=((1.0)*x14478);
IkReal x14497=(sj2*x14478);
IkReal x14498=((0.069)*x14478);
IkReal x14499=((1.0)*x14477);
IkReal x14500=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*x14481*x14489))+(((-1.0)*x14487*x14489))+x14494+(((-1.0)*cj1*x14496)));
evalcond[1]=((((-1.0)*x14484*x14489))+x14482+(((-1.0)*cj1*x14499))+(((-1.0)*x14489*x14490)));
evalcond[2]=(((cj2*x14478))+(((-1.0)*r11*x14479*x14480))+((r10*x14493))+(((-1.0)*r12*sj4*x14489))+(((-1.0)*r11*x14500))+(((-1.0)*sj4*x14479*x14484))+((sj1*sj2*x14477)));
evalcond[3]=(((sj1*x14497))+(((-1.0)*sj4*x14479*x14481))+((r00*x14493))+(((-1.0)*r01*x14500))+(((-1.0)*cj2*x14499))+(((-1.0)*r01*x14479*x14480))+(((-1.0)*r02*sj4*x14489)));
evalcond[4]=((((-1.0)*x14485*x14499))+(((-1.0)*cj4*r12*x14489))+((r11*x14491))+(((-1.0)*cj4*x14479*x14490))+x14497+(((-1.0)*cj4*x14479*x14484))+(((-1.0)*r10*x14480)));
evalcond[5]=((((-1.0)*x14485*x14496))+(((-1.0)*r00*x14480))+((r01*x14491))+(((-1.0)*cj4*r02*x14489))+(((-1.0)*cj4*x14479*x14487))+(((-1.0)*cj4*x14479*x14481))+(((-1.0)*sj2*x14499)));
evalcond[6]=((((-1.0)*x14485*x14498))+(((-1.0)*x14481*x14483))+((x14487*x14488))+(((-1.0)*x14483*x14487))+((r02*x14492))+(((-1.0)*px))+x14498+((x14481*x14488))+(((0.37429)*x14494))+((x14478*x14486))+(((-1.0)*sj2*x14495)));
evalcond[7]=((((-1.0)*x14485*x14495))+(((0.069)*x14497))+((r12*x14492))+(((-1.0)*x14483*x14484))+((x14484*x14488))+((x14488*x14490))+(((-1.0)*py))+(((-1.0)*x14483*x14490))+x14495+((x14477*x14486))+(((0.37429)*x14482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x14509=IKPowWithIntegerCheck(cj1,-1);
if(!x14509.valid){
continue;
}
IkReal x14501=x14509.value;
IkReal x14502=(cj6*r11);
IkReal x14503=(cj1*sj6);
IkReal x14504=(cj5*r12);
IkReal x14505=(cj5*sj4);
IkReal x14506=(r10*sj6);
IkReal x14507=((1.0)*sj5);
IkReal x14508=(sj1*sj2*sj5);
CheckValue<IkReal> x14510=IKPowWithIntegerCheck(cj2,-1);
if(!x14510.valid){
continue;
}
if( IKabs((x14501*(((((-1.0)*x14502*x14507))+(((-1.0)*x14506*x14507))+x14504)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x14501*(x14510.value)*((((cj1*r12*sj4*sj5))+((x14506*x14508))+((r10*x14503*x14505))+(((-1.0)*cj1*cj4*cj6*r10))+((cj4*r11*x14503))+((cj1*x14502*x14505))+(((-1.0)*sj1*sj2*x14504))+((x14502*x14508)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x14501*(((((-1.0)*x14502*x14507))+(((-1.0)*x14506*x14507))+x14504))))+IKsqr((x14501*(x14510.value)*((((cj1*r12*sj4*sj5))+((x14506*x14508))+((r10*x14503*x14505))+(((-1.0)*cj1*cj4*cj6*r10))+((cj4*r11*x14503))+((cj1*x14502*x14505))+(((-1.0)*sj1*sj2*x14504))+((x14502*x14508))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x14501*(((((-1.0)*x14502*x14507))+(((-1.0)*x14506*x14507))+x14504))), (x14501*(x14510.value)*((((cj1*r12*sj4*sj5))+((x14506*x14508))+((r10*x14503*x14505))+(((-1.0)*cj1*cj4*cj6*r10))+((cj4*r11*x14503))+((cj1*x14502*x14505))+(((-1.0)*sj1*sj2*x14504))+((x14502*x14508))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14511=IKsin(j0);
IkReal x14512=IKcos(j0);
IkReal x14513=((1.0)*cj5);
IkReal x14514=(cj6*sj4);
IkReal x14515=(r00*sj6);
IkReal x14516=(cj5*r12);
IkReal x14517=((0.37429)*sj5);
IkReal x14518=(r10*sj6);
IkReal x14519=(cj2*sj1);
IkReal x14520=((0.36442)*cj1);
IkReal x14521=(cj6*r01);
IkReal x14522=((0.01)*cj5);
IkReal x14523=((1.0)*sj5);
IkReal x14524=(cj6*r11);
IkReal x14525=(sj4*sj6);
IkReal x14526=((0.01)*sj5);
IkReal x14527=(cj4*cj6);
IkReal x14528=(cj5*r02);
IkReal x14529=((0.069)*x14511);
IkReal x14530=((1.0)*x14512);
IkReal x14531=(sj2*x14512);
IkReal x14532=((0.069)*x14512);
IkReal x14533=((1.0)*x14511);
IkReal x14534=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*cj1*x14530))+(((-1.0)*x14521*x14523))+x14528+(((-1.0)*x14515*x14523)));
evalcond[1]=((((-1.0)*x14523*x14524))+(((-1.0)*x14518*x14523))+(((-1.0)*cj1*x14533))+x14516);
evalcond[2]=((((-1.0)*r11*x14513*x14514))+(((-1.0)*r11*x14534))+((sj1*sj2*x14511))+((cj2*x14512))+(((-1.0)*sj4*x14513*x14518))+(((-1.0)*r12*sj4*x14523))+((r10*x14527)));
evalcond[3]=((((-1.0)*r01*x14534))+((sj1*x14531))+((r00*x14527))+(((-1.0)*r01*x14513*x14514))+(((-1.0)*r02*sj4*x14523))+(((-1.0)*sj4*x14513*x14515))+(((-1.0)*cj2*x14533)));
evalcond[4]=((((-1.0)*r10*x14514))+(((-1.0)*cj4*x14513*x14518))+(((-1.0)*cj4*r12*x14523))+((r11*x14525))+(((-1.0)*cj4*x14513*x14524))+x14531+(((-1.0)*x14519*x14533)));
evalcond[5]=((((-1.0)*r00*x14514))+(((-1.0)*cj4*r02*x14523))+((r01*x14525))+(((-1.0)*sj2*x14533))+(((-1.0)*cj4*x14513*x14515))+(((-1.0)*cj4*x14513*x14521))+(((-1.0)*x14519*x14530)));
evalcond[6]=((((-1.0)*x14515*x14517))+(((-1.0)*x14517*x14521))+((x14512*x14520))+((x14521*x14522))+((x14515*x14522))+(((-1.0)*px))+(((0.37429)*x14528))+x14532+(((-1.0)*x14519*x14532))+((r02*x14526))+(((-1.0)*sj2*x14529)));
evalcond[7]=((((-1.0)*x14517*x14518))+(((-1.0)*x14517*x14524))+(((-1.0)*x14519*x14529))+((x14522*x14524))+((x14518*x14522))+((r12*x14526))+(((-1.0)*py))+x14529+((x14511*x14520))+(((0.37429)*x14516))+(((0.069)*x14531)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14535=((1.0)*cj6*sj5);
IkReal x14536=((1.0)*sj5*sj6);
CheckValue<IkReal> x14537=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14537.valid){
continue;
}
CheckValue<IkReal> x14538 = IKatan2WithCheck(IkReal((((cj5*r12))+(((-1.0)*r10*x14536))+(((-1.0)*r11*x14535)))),((((-1.0)*r00*x14536))+(((-1.0)*r01*x14535))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x14538.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14537.value)))+(x14538.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x14539=IKsin(j0);
IkReal x14540=IKcos(j0);
IkReal x14541=((1.0)*cj5);
IkReal x14542=(cj6*sj4);
IkReal x14543=(r00*sj6);
IkReal x14544=(cj5*r12);
IkReal x14545=((0.37429)*sj5);
IkReal x14546=(r10*sj6);
IkReal x14547=(cj2*sj1);
IkReal x14548=((0.36442)*cj1);
IkReal x14549=(cj6*r01);
IkReal x14550=((0.01)*cj5);
IkReal x14551=((1.0)*sj5);
IkReal x14552=(cj6*r11);
IkReal x14553=(sj4*sj6);
IkReal x14554=((0.01)*sj5);
IkReal x14555=(cj4*cj6);
IkReal x14556=(cj5*r02);
IkReal x14557=((0.069)*x14539);
IkReal x14558=((1.0)*x14540);
IkReal x14559=(sj2*x14540);
IkReal x14560=((0.069)*x14540);
IkReal x14561=((1.0)*x14539);
IkReal x14562=((1.0)*cj4*sj6);
evalcond[0]=((((-1.0)*cj1*x14558))+x14556+(((-1.0)*x14549*x14551))+(((-1.0)*x14543*x14551)));
evalcond[1]=((((-1.0)*x14546*x14551))+(((-1.0)*cj1*x14561))+x14544+(((-1.0)*x14551*x14552)));
evalcond[2]=(((cj2*x14540))+((sj1*sj2*x14539))+(((-1.0)*r12*sj4*x14551))+(((-1.0)*r11*x14562))+(((-1.0)*sj4*x14541*x14546))+((r10*x14555))+(((-1.0)*r11*x14541*x14542)));
evalcond[3]=((((-1.0)*cj2*x14561))+(((-1.0)*r02*sj4*x14551))+(((-1.0)*sj4*x14541*x14543))+(((-1.0)*r01*x14562))+((sj1*x14559))+((r00*x14555))+(((-1.0)*r01*x14541*x14542)));
evalcond[4]=((((-1.0)*cj4*x14541*x14546))+(((-1.0)*x14547*x14561))+x14559+(((-1.0)*cj4*x14541*x14552))+(((-1.0)*r10*x14542))+((r11*x14553))+(((-1.0)*cj4*r12*x14551)));
evalcond[5]=((((-1.0)*cj4*x14541*x14543))+(((-1.0)*cj4*x14541*x14549))+(((-1.0)*r00*x14542))+(((-1.0)*cj4*r02*x14551))+(((-1.0)*sj2*x14561))+((r01*x14553))+(((-1.0)*x14547*x14558)));
evalcond[6]=((((-1.0)*x14547*x14560))+((x14543*x14550))+(((-1.0)*x14545*x14549))+(((0.37429)*x14556))+(((-1.0)*x14543*x14545))+((r02*x14554))+(((-1.0)*px))+x14560+((x14549*x14550))+((x14540*x14548))+(((-1.0)*sj2*x14557)));
evalcond[7]=((((0.37429)*x14544))+(((-1.0)*x14545*x14552))+((x14539*x14548))+(((0.069)*x14559))+(((-1.0)*x14545*x14546))+(((-1.0)*py))+x14557+((r12*x14554))+((x14550*x14552))+(((-1.0)*x14547*x14557))+((x14546*x14550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14563=((1.0)*cj6*sj5);
IkReal x14564=((1.0)*sj5*sj6);
CheckValue<IkReal> x14565=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x14565.valid){
continue;
}
CheckValue<IkReal> x14566 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x14564))+((cj5*r12))+(((-1.0)*r11*x14563)))),((((-1.0)*r00*x14564))+(((-1.0)*r01*x14563))+((cj5*r02))),IKFAST_ATAN2_MAGTHRESH);
if(!x14566.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14565.value)))+(x14566.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x14567=IKcos(j0);
IkReal x14568=IKsin(j0);
IkReal x14569=((0.01)*cj5);
IkReal x14570=(cj6*r11);
IkReal x14571=(cj5*r12);
IkReal x14572=(r10*sj6);
IkReal x14573=((0.37429)*sj5);
IkReal x14574=(r00*sj6);
IkReal x14575=((1.0)*sj5);
IkReal x14576=(cj6*r01);
IkReal x14577=(cj5*r02);
IkReal x14578=(cj2*sj1);
IkReal x14579=((0.01)*sj5);
IkReal x14580=(cj1*x14568);
IkReal x14581=((0.069)*x14568);
IkReal x14582=((0.069)*x14567);
IkReal x14583=(cj1*x14567);
evalcond[0]=((((-1.0)*x14583))+(((-1.0)*x14574*x14575))+x14577+(((-1.0)*x14575*x14576)));
evalcond[1]=((((-1.0)*x14570*x14575))+(((-1.0)*x14580))+(((-1.0)*x14572*x14575))+x14571);
evalcond[2]=((((-1.0)*sj2*x14581))+(((0.36442)*x14583))+(((-1.0)*x14578*x14582))+(((-1.0)*x14573*x14574))+(((-1.0)*x14573*x14576))+(((0.37429)*x14577))+((r02*x14579))+(((-1.0)*px))+x14582+((x14569*x14576))+((x14569*x14574)));
evalcond[3]=((((-1.0)*x14570*x14573))+(((0.36442)*x14580))+(((-1.0)*x14578*x14581))+(((0.37429)*x14571))+(((-1.0)*x14572*x14573))+(((-1.0)*py))+x14581+((x14569*x14572))+((x14569*x14570))+((r12*x14579))+((sj2*x14582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x14584=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x14584;
j4eval[1]=IKsign(x14584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x14585=((1.0)*sj5);
IkReal x14586=((((-1.0)*r00*sj6*x14585))+((cj5*r02))+(((-1.0)*cj6*r01*x14585)));
j4eval[0]=x14586;
j4eval[1]=IKsign(x14586);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x14587=cj5*cj5;
IkReal x14588=cj6*cj6;
IkReal x14589=r22*r22;
IkReal x14590=r21*r21;
IkReal x14591=r20*r20;
IkReal x14592=(cj6*r21);
IkReal x14593=(r20*sj6);
IkReal x14594=(cj1*cj2);
IkReal x14595=(r22*sj5);
IkReal x14596=(cj6*r20);
IkReal x14597=((2.0)*cj5);
IkReal x14598=(cj1*sj2);
IkReal x14599=((1.0)*x14590);
IkReal x14600=((1.0)*x14591);
IkReal x14601=((1.0)*r21*sj6);
IkReal x14602=((1.0)*cj5*x14598);
IkReal x14603=(x14587*x14588);
IkReal x14604=((((-2.0)*x14587*x14592*x14593))+(((-1.0)*x14599*x14603))+(((-1.0)*x14593*x14595*x14597))+(((-1.0)*x14599))+((x14587*x14589))+(((-1.0)*x14589))+(((-1.0)*x14592*x14595*x14597))+(((-1.0)*x14587*x14600))+(((2.0)*x14592*x14593))+(((-1.0)*x14588*x14600))+((x14588*x14590))+((x14591*x14603)));
j4eval[0]=x14604;
j4eval[1]=((IKabs(((((-1.0)*x14595*x14598))+(((-1.0)*x14594*x14601))+(((-1.0)*x14593*x14602))+(((-1.0)*x14592*x14602))+((x14594*x14596)))))+(IKabs((((cj5*x14593*x14594))+(((-1.0)*x14598*x14601))+((cj5*x14592*x14594))+((x14596*x14598))+((x14594*x14595))))));
j4eval[2]=IKsign(x14604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x14605=((0.069)*cj0);
IkReal x14606=((0.01)*cj5);
IkReal x14607=(cj6*r11);
IkReal x14608=(r10*sj6);
IkReal x14609=((0.37429)*sj5);
IkReal x14610=(r00*sj6);
IkReal x14611=(r20*sj6);
IkReal x14612=((0.069)*sj0);
IkReal x14613=((1.0)*sj5);
IkReal x14614=((0.01)*sj5);
IkReal x14615=(cj6*r01);
IkReal x14616=((0.37429)*cj5);
IkReal x14617=(cj6*r21);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+((x14606*x14617))+((x14606*x14611))+(((-1.0)*pz))+((r22*x14616))+((r22*x14614))+(((-1.0)*x14609*x14611))+(((-1.0)*x14609*x14617)));
evalcond[2]=(((r02*x14616))+((r02*x14614))+(((-1.0)*sj2*x14612))+(((-1.0)*cj2*x14605))+((x14606*x14615))+((x14606*x14610))+(((-1.0)*px))+x14605+(((-1.0)*x14609*x14610))+(((-1.0)*x14609*x14615)));
evalcond[3]=((((-1.0)*x14608*x14609))+(((-1.0)*cj2*x14612))+((x14606*x14608))+((x14606*x14607))+(((-1.0)*py))+(((-1.0)*x14607*x14609))+x14612+((sj2*x14605))+((r12*x14616))+((r12*x14614)));
evalcond[4]=((1.0)+((cj5*r22))+(((-1.0)*x14613*x14617))+(((-1.0)*x14611*x14613)));
evalcond[5]=((((-1.0)*x14613*x14615))+(((-1.0)*x14610*x14613))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*x14607*x14613))+(((-1.0)*x14608*x14613)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14618=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x14618;
j4eval[1]=IKsign(x14618);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14619=((1.0)*sj5);
IkReal x14620=(((cj5*r12))+(((-1.0)*r10*sj6*x14619))+(((-1.0)*cj6*r11*x14619)));
j4eval[0]=x14620;
j4eval[1]=IKsign(x14620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14621=cj6*cj6;
IkReal x14622=cj5*cj5;
IkReal x14623=(cj5*sj5);
IkReal x14624=(cj6*r21);
IkReal x14625=((1.0)*r11);
IkReal x14626=(r10*r20);
IkReal x14627=(r10*sj6);
IkReal x14628=(r12*r22);
IkReal x14629=(r21*x14621);
IkReal x14630=(cj6*r20*sj6);
IkReal x14631=(r11*x14622);
IkReal x14632=((1.0)*x14622);
IkReal x14633=((((-1.0)*x14624*x14627))+((x14622*x14626))+(((-1.0)*x14621*x14626*x14632))+((x14629*x14631))+((r11*r21))+(((-1.0)*x14628*x14632))+((r12*r20*sj6*x14623))+((cj6*r11*r22*x14623))+((x14630*x14631))+((r22*x14623*x14627))+((x14622*x14624*x14627))+x14628+(((-1.0)*x14625*x14630))+(((-1.0)*x14625*x14629))+((r12*x14623*x14624))+((x14621*x14626)));
j4eval[0]=x14633;
j4eval[1]=IKsign(x14633);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14634=cj6*cj6;
IkReal x14635=cj5*cj5;
IkReal x14636=(r22*sj5);
IkReal x14637=(cj0*sj2);
IkReal x14638=(r12*r22);
IkReal x14639=(cj5*sj6);
IkReal x14640=((1.0)*r11);
IkReal x14641=(cj6*r21);
IkReal x14642=(cj6*r20);
IkReal x14643=(r12*sj5);
IkReal x14644=((1.0)*sj6);
IkReal x14645=((1.0)*cj2*sj0);
IkReal x14646=((1.0)*x14635);
IkReal x14647=(r21*x14634);
IkReal x14648=(r10*x14635);
IkReal x14649=(r11*x14635);
IkReal x14650=(r10*r20*x14634);
CheckValue<IkReal> x14651 = IKatan2WithCheck(IkReal(((((-1.0)*x14642*x14645))+((cj2*r21*sj0*sj6))+((x14637*x14642))+(((-1.0)*r21*x14637*x14644)))),((((-1.0)*x14636*x14645))+((cj5*x14637*x14641))+((r20*x14637*x14639))+(((-1.0)*r20*x14639*x14645))+(((-1.0)*cj5*x14641*x14645))+((x14636*x14637))),IKFAST_ATAN2_MAGTHRESH);
if(!x14651.valid){
continue;
}
CheckValue<IkReal> x14652=IKPowWithIntegerCheck(IKsign((((r20*x14639*x14643))+(((-1.0)*sj6*x14640*x14642))+((r10*x14636*x14639))+(((-1.0)*r10*x14641*x14644))+((r11*r21))+((cj5*cj6*r11*x14636))+((sj6*x14641*x14648))+((sj6*x14642*x14649))+(((-1.0)*x14640*x14647))+x14650+x14638+((r20*x14648))+((cj5*x14641*x14643))+(((-1.0)*x14638*x14646))+((x14647*x14649))+(((-1.0)*x14646*x14650)))),-1);
if(!x14652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14651.value)+(((1.5707963267949)*(x14652.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14653=IKsin(j4);
IkReal x14654=IKcos(j4);
IkReal x14655=(cj0*sj2);
IkReal x14656=(cj5*cj6);
IkReal x14657=(cj0*cj2);
IkReal x14658=(r11*sj6);
IkReal x14659=(cj6*r20);
IkReal x14660=(cj5*sj6);
IkReal x14661=(cj6*r10);
IkReal x14662=(cj6*r00);
IkReal x14663=((1.0)*sj0);
IkReal x14664=(cj2*x14663);
IkReal x14665=((1.0)*x14654);
IkReal x14666=((1.0)*x14653);
IkReal x14667=(sj6*x14653);
IkReal x14668=(sj5*x14666);
evalcond[0]=(((x14654*x14659))+(((-1.0)*r21*x14656*x14666))+(((-1.0)*r20*x14660*x14666))+(((-1.0)*r22*x14668))+(((-1.0)*r21*sj6*x14665)));
evalcond[1]=((((-1.0)*r21*x14656*x14665))+(((-1.0)*r20*x14660*x14665))+(((-1.0)*x14659*x14666))+((r21*x14667))+(((-1.0)*r22*sj5*x14665)));
evalcond[2]=((((-1.0)*r12*x14668))+(((-1.0)*x14658*x14665))+(((-1.0)*r10*x14660*x14666))+((sj0*sj2))+(((-1.0)*r11*x14656*x14666))+x14657+((x14654*x14661)));
evalcond[3]=((((-1.0)*r00*x14660*x14666))+(((-1.0)*r01*x14656*x14666))+(((-1.0)*r01*sj6*x14665))+x14655+((x14654*x14662))+(((-1.0)*r02*x14668))+(((-1.0)*x14664)));
evalcond[4]=((((-1.0)*r12*sj5*x14665))+(((-1.0)*x14661*x14666))+(((-1.0)*r10*x14660*x14665))+(((-1.0)*r11*x14656*x14665))+x14655+((x14653*x14658))+(((-1.0)*x14664)));
evalcond[5]=((((-1.0)*sj2*x14663))+(((-1.0)*r00*x14660*x14665))+(((-1.0)*x14657))+(((-1.0)*r01*x14656*x14665))+((r01*x14667))+(((-1.0)*r02*sj5*x14665))+(((-1.0)*x14662*x14666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14669=(cj0*sj2);
IkReal x14670=(cj6*r20);
IkReal x14671=(r22*sj5);
IkReal x14672=((1.0)*sj5);
IkReal x14673=(r21*sj6);
IkReal x14674=((1.0)*cj2*sj0);
IkReal x14675=(cj5*cj6*r21);
IkReal x14676=(cj5*r20*sj6);
CheckValue<IkReal> x14677 = IKatan2WithCheck(IkReal((((cj2*sj0*x14673))+(((-1.0)*x14670*x14674))+((x14669*x14670))+(((-1.0)*x14669*x14673)))),((((-1.0)*x14671*x14674))+(((-1.0)*x14674*x14676))+(((-1.0)*x14674*x14675))+((x14669*x14675))+((x14669*x14671))+((x14669*x14676))),IKFAST_ATAN2_MAGTHRESH);
if(!x14677.valid){
continue;
}
CheckValue<IkReal> x14678=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x14672))+(((-1.0)*cj6*r11*x14672)))),-1);
if(!x14678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14677.value)+(((1.5707963267949)*(x14678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14679=IKsin(j4);
IkReal x14680=IKcos(j4);
IkReal x14681=(cj0*sj2);
IkReal x14682=(cj5*cj6);
IkReal x14683=(cj0*cj2);
IkReal x14684=(r11*sj6);
IkReal x14685=(cj6*r20);
IkReal x14686=(cj5*sj6);
IkReal x14687=(cj6*r10);
IkReal x14688=(cj6*r00);
IkReal x14689=((1.0)*sj0);
IkReal x14690=(cj2*x14689);
IkReal x14691=((1.0)*x14680);
IkReal x14692=((1.0)*x14679);
IkReal x14693=(sj6*x14679);
IkReal x14694=(sj5*x14692);
evalcond[0]=(((x14680*x14685))+(((-1.0)*r21*sj6*x14691))+(((-1.0)*r20*x14686*x14692))+(((-1.0)*r21*x14682*x14692))+(((-1.0)*r22*x14694)));
evalcond[1]=((((-1.0)*r20*x14686*x14691))+(((-1.0)*r21*x14682*x14691))+(((-1.0)*x14685*x14692))+(((-1.0)*r22*sj5*x14691))+((r21*x14693)));
evalcond[2]=((((-1.0)*x14684*x14691))+((x14680*x14687))+(((-1.0)*r10*x14686*x14692))+(((-1.0)*r11*x14682*x14692))+((sj0*sj2))+x14683+(((-1.0)*r12*x14694)));
evalcond[3]=(((x14680*x14688))+(((-1.0)*r02*x14694))+(((-1.0)*x14690))+(((-1.0)*r00*x14686*x14692))+x14681+(((-1.0)*r01*x14682*x14692))+(((-1.0)*r01*sj6*x14691)));
evalcond[4]=(((x14679*x14684))+(((-1.0)*r10*x14686*x14691))+(((-1.0)*r11*x14682*x14691))+(((-1.0)*r12*sj5*x14691))+(((-1.0)*x14690))+x14681+(((-1.0)*x14687*x14692)));
evalcond[5]=(((r01*x14693))+(((-1.0)*r02*sj5*x14691))+(((-1.0)*r00*x14686*x14691))+(((-1.0)*sj2*x14689))+(((-1.0)*r01*x14682*x14691))+(((-1.0)*x14688*x14692))+(((-1.0)*x14683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14695=(sj0*sj2);
IkReal x14696=(cj0*cj2);
IkReal x14697=(cj6*r20);
IkReal x14698=(r22*sj5);
IkReal x14699=((1.0)*r21*sj6);
IkReal x14700=(cj5*cj6*r21);
IkReal x14701=(cj5*r20*sj6);
CheckValue<IkReal> x14702 = IKatan2WithCheck(IkReal(((((-1.0)*x14696*x14699))+(((-1.0)*x14695*x14699))+((x14696*x14697))+((x14695*x14697)))),(((x14696*x14698))+((x14695*x14698))+((x14696*x14700))+((x14696*x14701))+((x14695*x14701))+((x14695*x14700))),IKFAST_ATAN2_MAGTHRESH);
if(!x14702.valid){
continue;
}
CheckValue<IkReal> x14703=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x14703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14702.value)+(((1.5707963267949)*(x14703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14704=IKsin(j4);
IkReal x14705=IKcos(j4);
IkReal x14706=(cj0*sj2);
IkReal x14707=(cj5*cj6);
IkReal x14708=(cj0*cj2);
IkReal x14709=(r11*sj6);
IkReal x14710=(cj6*r20);
IkReal x14711=(cj5*sj6);
IkReal x14712=(cj6*r10);
IkReal x14713=(cj6*r00);
IkReal x14714=((1.0)*sj0);
IkReal x14715=(cj2*x14714);
IkReal x14716=((1.0)*x14705);
IkReal x14717=((1.0)*x14704);
IkReal x14718=(sj6*x14704);
IkReal x14719=(sj5*x14717);
evalcond[0]=((((-1.0)*r20*x14711*x14717))+(((-1.0)*r21*x14707*x14717))+(((-1.0)*r22*x14719))+((x14705*x14710))+(((-1.0)*r21*sj6*x14716)));
evalcond[1]=((((-1.0)*r20*x14711*x14716))+((r21*x14718))+(((-1.0)*r21*x14707*x14716))+(((-1.0)*r22*sj5*x14716))+(((-1.0)*x14710*x14717)));
evalcond[2]=(((sj0*sj2))+(((-1.0)*r11*x14707*x14717))+(((-1.0)*x14709*x14716))+x14708+(((-1.0)*r10*x14711*x14717))+((x14705*x14712))+(((-1.0)*r12*x14719)));
evalcond[3]=((((-1.0)*r01*x14707*x14717))+(((-1.0)*r02*x14719))+(((-1.0)*r01*sj6*x14716))+(((-1.0)*x14715))+x14706+((x14705*x14713))+(((-1.0)*r00*x14711*x14717)));
evalcond[4]=((((-1.0)*r12*sj5*x14716))+((x14704*x14709))+(((-1.0)*r11*x14707*x14716))+(((-1.0)*x14715))+x14706+(((-1.0)*r10*x14711*x14716))+(((-1.0)*x14712*x14717)));
evalcond[5]=((((-1.0)*r02*sj5*x14716))+(((-1.0)*x14708))+(((-1.0)*r01*x14707*x14716))+((r01*x14718))+(((-1.0)*r00*x14711*x14716))+(((-1.0)*x14713*x14717))+(((-1.0)*sj2*x14714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14720=((0.069)*cj0);
IkReal x14721=((0.01)*cj5);
IkReal x14722=(cj6*r11);
IkReal x14723=(r10*sj6);
IkReal x14724=((0.37429)*sj5);
IkReal x14725=(r00*sj6);
IkReal x14726=(r20*sj6);
IkReal x14727=((0.069)*sj0);
IkReal x14728=((1.0)*sj5);
IkReal x14729=((0.01)*sj5);
IkReal x14730=(cj6*r01);
IkReal x14731=((0.37429)*cj5);
IkReal x14732=(cj6*r21);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.36442)+((x14721*x14732))+((r22*x14729))+((x14721*x14726))+(((-1.0)*pz))+((r22*x14731))+(((-1.0)*x14724*x14732))+(((-1.0)*x14724*x14726)));
evalcond[2]=((((-1.0)*sj2*x14727))+((r02*x14731))+((r02*x14729))+((x14721*x14730))+((x14721*x14725))+(((-1.0)*px))+x14720+((cj2*x14720))+(((-1.0)*x14724*x14730))+(((-1.0)*x14724*x14725)));
evalcond[3]=((((-1.0)*x14723*x14724))+(((-1.0)*x14722*x14724))+((sj2*x14720))+((x14721*x14723))+((x14721*x14722))+(((-1.0)*py))+x14727+((cj2*x14727))+((r12*x14731))+((r12*x14729)));
evalcond[4]=((-1.0)+((cj5*r22))+(((-1.0)*x14728*x14732))+(((-1.0)*x14726*x14728)));
evalcond[5]=((((-1.0)*x14728*x14730))+(((-1.0)*x14725*x14728))+((cj5*r02)));
evalcond[6]=(((cj5*r12))+(((-1.0)*x14723*x14728))+(((-1.0)*x14722*x14728)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14733=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x14733;
j4eval[1]=IKsign(x14733);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14734=cj6*cj6;
IkReal x14735=cj5*cj5;
IkReal x14736=(cj5*sj5);
IkReal x14737=(cj6*r21);
IkReal x14738=((1.0)*r11);
IkReal x14739=(r10*r20);
IkReal x14740=(r10*sj6);
IkReal x14741=(r12*r22);
IkReal x14742=(r21*x14734);
IkReal x14743=(cj6*r20*sj6);
IkReal x14744=(r11*x14735);
IkReal x14745=((1.0)*x14735);
IkReal x14746=(((r11*r21))+((r12*r20*sj6*x14736))+((x14735*x14737*x14740))+((x14743*x14744))+(((-1.0)*x14738*x14742))+(((-1.0)*x14738*x14743))+((x14742*x14744))+((x14735*x14739))+((x14734*x14739))+(((-1.0)*x14737*x14740))+(((-1.0)*x14734*x14739*x14745))+(((-1.0)*x14741*x14745))+x14741+((r22*x14736*x14740))+((cj6*r11*r22*x14736))+((r12*x14736*x14737)));
j4eval[0]=x14746;
j4eval[1]=IKsign(x14746);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=1.0;
j3=0;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x14747=cj5*cj5;
IkReal x14748=cj6*cj6;
IkReal x14749=(r00*r20);
IkReal x14750=(r02*r22);
IkReal x14751=(cj5*sj5);
IkReal x14752=(cj6*r21);
IkReal x14753=(r00*sj6);
IkReal x14754=(r20*sj6);
IkReal x14755=(cj6*r01);
IkReal x14756=((1.0)*x14747);
IkReal x14757=(r01*r21*x14748);
IkReal x14758=(((x14747*x14749))+((x14748*x14749))+((x14747*x14754*x14755))+((r01*r21))+(((-1.0)*x14752*x14753))+((x14747*x14757))+((r22*x14751*x14753))+((r22*x14751*x14755))+(((-1.0)*x14750*x14756))+x14750+(((-1.0)*x14754*x14755))+(((-1.0)*x14748*x14749*x14756))+((x14747*x14752*x14753))+((r02*x14751*x14754))+((r02*x14751*x14752))+(((-1.0)*x14757)));
j4eval[0]=x14758;
j4eval[1]=IKsign(x14758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14759=cj5*cj5;
IkReal x14760=cj6*cj6;
IkReal x14761=(cj6*r21);
IkReal x14762=(cj6*r20);
IkReal x14763=(cj0*cj2);
IkReal x14764=(r20*sj6);
IkReal x14765=((1.0)*sj6);
IkReal x14766=(sj0*sj2);
IkReal x14767=((1.0)*cj5);
IkReal x14768=(r02*r22);
IkReal x14769=(r22*sj5);
IkReal x14770=(r00*sj6);
IkReal x14771=(cj5*r02*sj5);
IkReal x14772=(r01*x14759);
IkReal x14773=(r21*x14760);
IkReal x14774=(r00*r20*x14759);
CheckValue<IkReal> x14775 = IKatan2WithCheck(IkReal(((((-1.0)*x14762*x14766))+((r21*sj6*x14766))+((x14762*x14763))+(((-1.0)*r21*x14763*x14765)))),(((cj5*x14763*x14764))+(((-1.0)*x14766*x14769))+(((-1.0)*x14761*x14766*x14767))+(((-1.0)*x14764*x14766*x14767))+((x14763*x14769))+((cj5*x14761*x14763))),IKFAST_ATAN2_MAGTHRESH);
if(!x14775.valid){
continue;
}
CheckValue<IkReal> x14776=IKPowWithIntegerCheck(IKsign((((r00*r20*x14760))+((sj6*x14762*x14772))+((x14759*x14761*x14770))+((cj5*cj6*r01*x14769))+((r01*r21))+(((-1.0)*r01*x14762*x14765))+(((-1.0)*r00*x14761*x14765))+(((-1.0)*r01*x14773))+((cj5*x14769*x14770))+((x14761*x14771))+((x14772*x14773))+x14768+x14774+((x14764*x14771))+(((-1.0)*x14759*x14768))+(((-1.0)*x14760*x14774)))),-1);
if(!x14776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14775.value)+(((1.5707963267949)*(x14776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14777=IKsin(j4);
IkReal x14778=IKcos(j4);
IkReal x14779=(cj0*cj2);
IkReal x14780=(cj5*cj6);
IkReal x14781=(r11*sj6);
IkReal x14782=(cj6*r20);
IkReal x14783=(cj5*sj6);
IkReal x14784=(cj6*r10);
IkReal x14785=(r01*sj6);
IkReal x14786=(cj0*sj2);
IkReal x14787=(r21*sj6);
IkReal x14788=(cj6*r00);
IkReal x14789=((1.0)*sj0);
IkReal x14790=(sj2*x14789);
IkReal x14791=((1.0)*x14778);
IkReal x14792=((1.0)*x14777);
IkReal x14793=(sj5*x14792);
evalcond[0]=((((-1.0)*r20*x14783*x14792))+((x14778*x14782))+(((-1.0)*x14787*x14791))+(((-1.0)*r21*x14780*x14792))+(((-1.0)*r22*x14793)));
evalcond[1]=((((-1.0)*r20*x14783*x14791))+(((-1.0)*x14782*x14792))+(((-1.0)*r21*x14780*x14791))+((x14777*x14787))+(((-1.0)*r22*sj5*x14791)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r12*sj5*x14791))+(((-1.0)*r11*x14780*x14791))+(((-1.0)*r10*x14783*x14791))+(((-1.0)*x14784*x14792))+x14786+((x14777*x14781)));
evalcond[3]=((((-1.0)*r11*x14780*x14792))+((x14778*x14784))+(((-1.0)*r12*x14793))+(((-1.0)*r10*x14783*x14792))+(((-1.0)*x14781*x14791))+x14779+(((-1.0)*x14790)));
evalcond[4]=((((-1.0)*x14788*x14792))+(((-1.0)*r02*sj5*x14791))+(((-1.0)*r01*x14780*x14791))+x14779+(((-1.0)*r00*x14783*x14791))+((x14777*x14785))+(((-1.0)*x14790)));
evalcond[5]=((((-1.0)*r02*x14793))+(((-1.0)*x14786))+((x14778*x14788))+(((-1.0)*cj2*x14789))+(((-1.0)*r01*x14780*x14792))+(((-1.0)*r00*x14783*x14792))+(((-1.0)*x14785*x14791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14794=cj6*cj6;
IkReal x14795=cj5*cj5;
IkReal x14796=((1.0)*r11);
IkReal x14797=(r22*sj5);
IkReal x14798=(cj0*sj2);
IkReal x14799=(cj5*sj6);
IkReal x14800=(cj6*r20);
IkReal x14801=(cj2*sj0);
IkReal x14802=(r21*sj6);
IkReal x14803=(cj6*r10);
IkReal x14804=(r12*r22);
IkReal x14805=(r12*sj5);
IkReal x14806=(r21*x14794);
IkReal x14807=(r20*x14801);
IkReal x14808=(cj5*cj6*r21);
IkReal x14809=(r11*x14795);
IkReal x14810=(r10*r20*x14795);
CheckValue<IkReal> x14811=IKPowWithIntegerCheck(IKsign((((r10*x14797*x14799))+((r20*x14799*x14805))+((r11*r21))+(((-1.0)*x14796*x14806))+x14810+x14804+((r10*r20*x14794))+((x14795*x14802*x14803))+(((-1.0)*x14795*x14804))+(((-1.0)*x14802*x14803))+((x14806*x14809))+(((-1.0)*x14794*x14810))+(((-1.0)*sj6*x14796*x14800))+((sj6*x14800*x14809))+((x14805*x14808))+((cj5*cj6*r11*x14797)))),-1);
if(!x14811.valid){
continue;
}
CheckValue<IkReal> x14812 = IKatan2WithCheck(IkReal(((((-1.0)*x14801*x14802))+((x14800*x14801))+((x14798*x14800))+(((-1.0)*x14798*x14802)))),(((r20*x14798*x14799))+((x14797*x14798))+((x14797*x14801))+((x14799*x14807))+((x14798*x14808))+((x14801*x14808))),IKFAST_ATAN2_MAGTHRESH);
if(!x14812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14811.value)))+(x14812.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14813=IKsin(j4);
IkReal x14814=IKcos(j4);
IkReal x14815=(cj0*cj2);
IkReal x14816=(cj5*cj6);
IkReal x14817=(r11*sj6);
IkReal x14818=(cj6*r20);
IkReal x14819=(cj5*sj6);
IkReal x14820=(cj6*r10);
IkReal x14821=(r01*sj6);
IkReal x14822=(cj0*sj2);
IkReal x14823=(r21*sj6);
IkReal x14824=(cj6*r00);
IkReal x14825=((1.0)*sj0);
IkReal x14826=(sj2*x14825);
IkReal x14827=((1.0)*x14814);
IkReal x14828=((1.0)*x14813);
IkReal x14829=(sj5*x14828);
evalcond[0]=((((-1.0)*x14823*x14827))+(((-1.0)*r22*x14829))+(((-1.0)*r20*x14819*x14828))+((x14814*x14818))+(((-1.0)*r21*x14816*x14828)));
evalcond[1]=((((-1.0)*x14818*x14828))+((x14813*x14823))+(((-1.0)*r22*sj5*x14827))+(((-1.0)*r20*x14819*x14827))+(((-1.0)*r21*x14816*x14827)));
evalcond[2]=((((-1.0)*x14820*x14828))+((cj2*sj0))+(((-1.0)*r11*x14816*x14827))+x14822+(((-1.0)*r10*x14819*x14827))+((x14813*x14817))+(((-1.0)*r12*sj5*x14827)));
evalcond[3]=(((x14814*x14820))+(((-1.0)*r11*x14816*x14828))+x14815+(((-1.0)*x14817*x14827))+(((-1.0)*r10*x14819*x14828))+(((-1.0)*x14826))+(((-1.0)*r12*x14829)));
evalcond[4]=((((-1.0)*r00*x14819*x14827))+x14815+(((-1.0)*x14824*x14828))+(((-1.0)*r02*sj5*x14827))+(((-1.0)*r01*x14816*x14827))+(((-1.0)*x14826))+((x14813*x14821)));
evalcond[5]=(((x14814*x14824))+(((-1.0)*r00*x14819*x14828))+(((-1.0)*x14821*x14827))+(((-1.0)*r01*x14816*x14828))+(((-1.0)*cj2*x14825))+(((-1.0)*x14822))+(((-1.0)*r02*x14829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14830=(cj0*cj2);
IkReal x14831=(cj6*r20);
IkReal x14832=(r21*sj6);
IkReal x14833=(sj0*sj2);
IkReal x14834=(r22*sj5);
IkReal x14835=(cj5*r20*sj6);
IkReal x14836=(cj5*cj6*r21);
CheckValue<IkReal> x14837 = IKatan2WithCheck(IkReal((((x14832*x14833))+((x14830*x14831))+(((-1.0)*x14831*x14833))+(((-1.0)*x14830*x14832)))),(((x14830*x14836))+((x14830*x14835))+((x14830*x14834))+(((-1.0)*x14833*x14836))+(((-1.0)*x14833*x14835))+(((-1.0)*x14833*x14834))),IKFAST_ATAN2_MAGTHRESH);
if(!x14837.valid){
continue;
}
CheckValue<IkReal> x14838=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x14838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14837.value)+(((1.5707963267949)*(x14838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14839=IKsin(j4);
IkReal x14840=IKcos(j4);
IkReal x14841=(cj0*cj2);
IkReal x14842=(cj5*cj6);
IkReal x14843=(r11*sj6);
IkReal x14844=(cj6*r20);
IkReal x14845=(cj5*sj6);
IkReal x14846=(cj6*r10);
IkReal x14847=(r01*sj6);
IkReal x14848=(cj0*sj2);
IkReal x14849=(r21*sj6);
IkReal x14850=(cj6*r00);
IkReal x14851=((1.0)*sj0);
IkReal x14852=(sj2*x14851);
IkReal x14853=((1.0)*x14840);
IkReal x14854=((1.0)*x14839);
IkReal x14855=(sj5*x14854);
evalcond[0]=(((x14840*x14844))+(((-1.0)*x14849*x14853))+(((-1.0)*r20*x14845*x14854))+(((-1.0)*r21*x14842*x14854))+(((-1.0)*r22*x14855)));
evalcond[1]=((((-1.0)*r20*x14845*x14853))+(((-1.0)*x14844*x14854))+((x14839*x14849))+(((-1.0)*r22*sj5*x14853))+(((-1.0)*r21*x14842*x14853)));
evalcond[2]=(((cj2*sj0))+(((-1.0)*r12*sj5*x14853))+x14848+(((-1.0)*x14846*x14854))+(((-1.0)*r10*x14845*x14853))+((x14839*x14843))+(((-1.0)*r11*x14842*x14853)));
evalcond[3]=(((x14840*x14846))+x14841+(((-1.0)*r10*x14845*x14854))+(((-1.0)*x14852))+(((-1.0)*x14843*x14853))+(((-1.0)*r12*x14855))+(((-1.0)*r11*x14842*x14854)));
evalcond[4]=((((-1.0)*r02*sj5*x14853))+(((-1.0)*r00*x14845*x14853))+x14841+(((-1.0)*r01*x14842*x14853))+(((-1.0)*x14852))+((x14839*x14847))+(((-1.0)*x14850*x14854)));
evalcond[5]=((((-1.0)*x14848))+((x14840*x14850))+(((-1.0)*x14847*x14853))+(((-1.0)*cj2*x14851))+(((-1.0)*r00*x14845*x14854))+(((-1.0)*r02*x14855))+(((-1.0)*r01*x14842*x14854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14856=cj5*cj5;
IkReal x14857=cj6*cj6;
IkReal x14858=r22*r22;
IkReal x14859=r21*r21;
IkReal x14860=r20*r20;
IkReal x14861=(cj6*r21);
IkReal x14862=(r20*sj6);
IkReal x14863=(cj1*cj5);
IkReal x14864=((1.0)*sj2);
IkReal x14865=(cj1*cj2);
IkReal x14866=(cj6*r20);
IkReal x14867=(r22*sj5);
IkReal x14868=(r21*sj6);
IkReal x14869=((2.0)*cj5);
IkReal x14870=((1.0)*x14859);
IkReal x14871=((1.0)*x14860);
IkReal x14872=(x14856*x14857);
CheckValue<IkReal> x14873=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14861*x14867*x14869))+(((-1.0)*x14857*x14871))+((x14856*x14858))+((x14857*x14859))+(((-1.0)*x14862*x14867*x14869))+(((-1.0)*x14870*x14872))+(((2.0)*x14861*x14862))+(((-1.0)*x14870))+(((-2.0)*x14856*x14861*x14862))+(((-1.0)*x14856*x14871))+((x14860*x14872))+(((-1.0)*x14858)))),-1);
if(!x14873.valid){
continue;
}
CheckValue<IkReal> x14874 = IKatan2WithCheck(IkReal(((((-1.0)*x14862*x14863*x14864))+(((-1.0)*cj1*x14864*x14867))+(((-1.0)*x14865*x14868))+((x14865*x14866))+(((-1.0)*x14861*x14863*x14864)))),(((cj2*x14861*x14863))+((cj2*x14862*x14863))+(((-1.0)*cj1*x14864*x14868))+((x14865*x14867))+((cj1*sj2*x14866))),IKFAST_ATAN2_MAGTHRESH);
if(!x14874.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14873.value)))+(x14874.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14875=IKsin(j4);
IkReal x14876=IKcos(j4);
IkReal x14877=(cj5*cj6);
IkReal x14878=(cj0*sj1);
IkReal x14879=(r11*sj6);
IkReal x14880=(cj6*r20);
IkReal x14881=(cj5*sj6);
IkReal x14882=(cj6*r10);
IkReal x14883=((1.0)*cj2);
IkReal x14884=(r21*sj6);
IkReal x14885=(cj6*r00);
IkReal x14886=(sj0*sj1);
IkReal x14887=(r01*sj6);
IkReal x14888=((1.0)*x14876);
IkReal x14889=((1.0)*x14875);
IkReal x14890=(sj5*x14889);
evalcond[0]=((((-1.0)*r22*x14890))+((cj1*sj2))+(((-1.0)*x14884*x14888))+(((-1.0)*r20*x14881*x14889))+((x14876*x14880))+(((-1.0)*r21*x14877*x14889)));
evalcond[1]=(((x14875*x14884))+(((-1.0)*r20*x14881*x14888))+(((-1.0)*cj1*x14883))+(((-1.0)*x14880*x14889))+(((-1.0)*r21*x14877*x14888))+(((-1.0)*r22*sj5*x14888)));
evalcond[2]=((((-1.0)*x14879*x14888))+((cj0*cj2))+((x14876*x14882))+((sj2*x14886))+(((-1.0)*r10*x14881*x14889))+(((-1.0)*r12*x14890))+(((-1.0)*r11*x14877*x14889)));
evalcond[3]=((((-1.0)*r01*x14877*x14889))+(((-1.0)*x14887*x14888))+(((-1.0)*r00*x14881*x14889))+((x14876*x14885))+(((-1.0)*sj0*x14883))+((sj2*x14878))+(((-1.0)*r02*x14890)));
evalcond[4]=(((x14875*x14879))+(((-1.0)*x14882*x14889))+(((-1.0)*r12*sj5*x14888))+(((-1.0)*r10*x14881*x14888))+(((-1.0)*r11*x14877*x14888))+(((-1.0)*x14883*x14886))+((cj0*sj2)));
evalcond[5]=((((-1.0)*x14878*x14883))+(((-1.0)*r01*x14877*x14888))+((x14875*x14887))+(((-1.0)*x14885*x14889))+(((-1.0)*r00*x14881*x14888))+(((-1.0)*sj0*sj2))+(((-1.0)*r02*sj5*x14888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14891=(cj6*r21);
IkReal x14892=(r20*sj6);
IkReal x14893=(cj1*sj2);
IkReal x14894=((1.0)*cj6);
IkReal x14895=((1.0)*sj5);
IkReal x14896=(cj0*cj2);
IkReal x14897=(r21*sj6);
IkReal x14898=(sj0*sj1*sj2);
IkReal x14899=((1.0)*cj5*x14896);
IkReal x14900=((1.0)*cj5*x14898);
CheckValue<IkReal> x14901 = IKatan2WithCheck(IkReal(((((-1.0)*r11*sj6*x14893))+(((-1.0)*r20*x14894*x14896))+(((-1.0)*r20*x14894*x14898))+((x14896*x14897))+((x14897*x14898))+((cj6*r10*x14893)))),((((-1.0)*r22*x14895*x14896))+(((-1.0)*r22*x14895*x14898))+(((-1.0)*x14892*x14900))+((r12*sj5*x14893))+(((-1.0)*x14891*x14899))+((cj5*cj6*r11*x14893))+((cj5*r10*sj6*x14893))+(((-1.0)*x14891*x14900))+(((-1.0)*x14892*x14899))),IKFAST_ATAN2_MAGTHRESH);
if(!x14901.valid){
continue;
}
CheckValue<IkReal> x14902=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x14894))+(((-1.0)*r00*sj6*x14895))+((cj5*r02)))),-1);
if(!x14902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14901.value)+(((1.5707963267949)*(x14902.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14903=IKsin(j4);
IkReal x14904=IKcos(j4);
IkReal x14905=(cj5*cj6);
IkReal x14906=(cj0*sj1);
IkReal x14907=(r11*sj6);
IkReal x14908=(cj6*r20);
IkReal x14909=(cj5*sj6);
IkReal x14910=(cj6*r10);
IkReal x14911=((1.0)*cj2);
IkReal x14912=(r21*sj6);
IkReal x14913=(cj6*r00);
IkReal x14914=(sj0*sj1);
IkReal x14915=(r01*sj6);
IkReal x14916=((1.0)*x14904);
IkReal x14917=((1.0)*x14903);
IkReal x14918=(sj5*x14917);
evalcond[0]=((((-1.0)*r22*x14918))+(((-1.0)*r20*x14909*x14917))+(((-1.0)*r21*x14905*x14917))+((cj1*sj2))+((x14904*x14908))+(((-1.0)*x14912*x14916)));
evalcond[1]=((((-1.0)*r20*x14909*x14916))+(((-1.0)*r21*x14905*x14916))+(((-1.0)*cj1*x14911))+((x14903*x14912))+(((-1.0)*r22*sj5*x14916))+(((-1.0)*x14908*x14917)));
evalcond[2]=((((-1.0)*x14907*x14916))+(((-1.0)*r12*x14918))+((sj2*x14914))+((cj0*cj2))+(((-1.0)*r11*x14905*x14917))+((x14904*x14910))+(((-1.0)*r10*x14909*x14917)));
evalcond[3]=((((-1.0)*r02*x14918))+(((-1.0)*r00*x14909*x14917))+((sj2*x14906))+(((-1.0)*sj0*x14911))+(((-1.0)*x14915*x14916))+((x14904*x14913))+(((-1.0)*r01*x14905*x14917)));
evalcond[4]=((((-1.0)*x14911*x14914))+(((-1.0)*x14910*x14917))+(((-1.0)*r12*sj5*x14916))+(((-1.0)*r11*x14905*x14916))+((x14903*x14907))+(((-1.0)*r10*x14909*x14916))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r00*x14909*x14916))+(((-1.0)*r02*sj5*x14916))+(((-1.0)*x14906*x14911))+((x14903*x14915))+(((-1.0)*sj0*sj2))+(((-1.0)*x14913*x14917))+(((-1.0)*r01*x14905*x14916)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14919=(cj6*r20);
IkReal x14920=(cj2*sj0);
IkReal x14921=((1.0)*sj2);
IkReal x14922=(cj0*sj1);
IkReal x14923=(cj1*r01);
IkReal x14924=(r22*sj5);
IkReal x14925=(cj5*cj6);
IkReal x14926=(cj1*sj2);
IkReal x14927=(r21*sj6);
IkReal x14928=(cj5*r20*sj6);
CheckValue<IkReal> x14929=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x14929.valid){
continue;
}
CheckValue<IkReal> x14930 = IKatan2WithCheck(IkReal(((((-1.0)*x14920*x14927))+((cj6*r00*x14926))+(((-1.0)*sj6*x14921*x14923))+((sj2*x14922*x14927))+((x14919*x14920))+(((-1.0)*x14919*x14921*x14922)))),(((x14920*x14924))+((x14920*x14928))+((r02*sj5*x14926))+(((-1.0)*x14921*x14922*x14928))+(((-1.0)*x14921*x14922*x14924))+((sj2*x14923*x14925))+((r21*x14920*x14925))+((cj5*r00*sj6*x14926))+(((-1.0)*r21*x14921*x14922*x14925))),IKFAST_ATAN2_MAGTHRESH);
if(!x14930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14929.value)))+(x14930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14931=IKsin(j4);
IkReal x14932=IKcos(j4);
IkReal x14933=(cj5*cj6);
IkReal x14934=(cj0*sj1);
IkReal x14935=(r11*sj6);
IkReal x14936=(cj6*r20);
IkReal x14937=(cj5*sj6);
IkReal x14938=(cj6*r10);
IkReal x14939=((1.0)*cj2);
IkReal x14940=(r21*sj6);
IkReal x14941=(cj6*r00);
IkReal x14942=(sj0*sj1);
IkReal x14943=(r01*sj6);
IkReal x14944=((1.0)*x14932);
IkReal x14945=((1.0)*x14931);
IkReal x14946=(sj5*x14945);
evalcond[0]=((((-1.0)*x14940*x14944))+((cj1*sj2))+(((-1.0)*r20*x14937*x14945))+((x14932*x14936))+(((-1.0)*r21*x14933*x14945))+(((-1.0)*r22*x14946)));
evalcond[1]=((((-1.0)*r20*x14937*x14944))+(((-1.0)*x14936*x14945))+(((-1.0)*r22*sj5*x14944))+(((-1.0)*cj1*x14939))+(((-1.0)*r21*x14933*x14944))+((x14931*x14940)));
evalcond[2]=((((-1.0)*r11*x14933*x14945))+((x14932*x14938))+((cj0*cj2))+(((-1.0)*r10*x14937*x14945))+(((-1.0)*r12*x14946))+((sj2*x14942))+(((-1.0)*x14935*x14944)));
evalcond[3]=((((-1.0)*sj0*x14939))+(((-1.0)*r01*x14933*x14945))+(((-1.0)*x14943*x14944))+((x14932*x14941))+(((-1.0)*r00*x14937*x14945))+(((-1.0)*r02*x14946))+((sj2*x14934)));
evalcond[4]=((((-1.0)*r11*x14933*x14944))+((x14931*x14935))+(((-1.0)*x14939*x14942))+(((-1.0)*r10*x14937*x14944))+(((-1.0)*x14938*x14945))+(((-1.0)*r12*sj5*x14944))+((cj0*sj2)));
evalcond[5]=((((-1.0)*r02*sj5*x14944))+(((-1.0)*r01*x14933*x14944))+(((-1.0)*x14941*x14945))+(((-1.0)*x14934*x14939))+(((-1.0)*r00*x14937*x14944))+(((-1.0)*sj0*sj2))+((x14931*x14943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14947=(r20*sj6);
IkReal x14948=((0.01)*cj5);
IkReal x14949=(cj5*r22);
IkReal x14950=(cj6*r21);
IkReal x14951=((0.37429)*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
evalcond[1]=(((x14947*x14948))+((x14948*x14950))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x14950*x14951))+(((0.37429)*x14949))+(((-1.0)*x14947*x14951))+(((-0.069)*cj1*cj2))+(((-0.36442)*sj1)));
evalcond[2]=(sj1+(((-1.0)*x14949))+((sj5*x14950))+((sj5*x14947)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14952=(cj6*sj5);
IkReal x14953=(sj5*sj6);
IkReal x14954=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r01*x14952))+((r00*x14953))+(((-1.0)*r02*x14954)))))+(IKabs((((r10*x14953))+(((-1.0)*r12*x14954))+((r11*x14952))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x14955=cj5*cj5;
IkReal x14956=cj6*cj6;
IkReal x14957=r22*r22;
IkReal x14958=r21*r21;
IkReal x14959=r20*r20;
IkReal x14960=((1.0)*cj5);
IkReal x14961=(cj6*r21);
IkReal x14962=(r20*sj6);
IkReal x14963=(cj1*cj2);
IkReal x14964=(cj1*sj2);
IkReal x14965=(r22*sj5);
IkReal x14966=(cj6*r20);
IkReal x14967=((2.0)*cj5);
IkReal x14968=(sj6*x14963);
IkReal x14969=((1.0)*x14958);
IkReal x14970=(x14956*x14959);
IkReal x14971=((((2.0)*x14961*x14962))+(((-1.0)*x14970))+(((-1.0)*x14961*x14965*x14967))+((x14955*x14970))+(((-1.0)*x14969))+(((-2.0)*x14955*x14961*x14962))+(((-1.0)*x14957))+(((-1.0)*x14955*x14956*x14969))+(((-1.0)*x14962*x14965*x14967))+((x14956*x14958))+(((-1.0)*x14955*x14959))+((x14955*x14957)));
j4eval[0]=x14971;
j4eval[1]=IKsign(x14971);
j4eval[2]=((IKabs(((((-1.0)*x14963*x14966))+(((-1.0)*x14960*x14961*x14964))+(((-1.0)*x14960*x14962*x14964))+(((-1.0)*x14964*x14965))+((r21*x14968)))))+(IKabs(((((-1.0)*r21*sj6*x14964))+((x14964*x14966))+(((-1.0)*x14963*x14965))+(((-1.0)*x14960*x14961*x14963))+(((-1.0)*x14960*x14962*x14963))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=(cj1+(((-1.0)*cj1*cj2*sj1))+(((5.28144927536232)*(cj1*cj1))));
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
IkReal x14972=(cj6*sj5);
IkReal x14973=(sj5*sj6);
IkReal x14974=((0.01)*cj5);
IkReal x14975=(cj5*r22);
IkReal x14976=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+(((-0.37429)*r20*x14973))+(((-0.37429)*r21*x14972))+((r20*sj6*x14974))+(((0.37429)*x14975))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((cj6*r21*x14974)));
evalcond[2]=((1.0)+(((-1.0)*x14975))+((r20*x14973))+((r21*x14972)));
evalcond[3]=(((r01*x14972))+((r00*x14973))+(((-1.0)*r02*x14976)));
evalcond[4]=((((-1.0)*r12*x14976))+((r11*x14972))+((r10*x14973)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j0eval[0]=((1.0)+(((-1.0)*cj2)));
j0eval[1]=IKsign(((9522.0)+(((-9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
j4eval[0]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x14977=((1.0)*r21);
j4eval[0]=((IKabs((((cj6*r20))+(((-1.0)*sj6*x14977)))))+(IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*cj5*cj6*x14977))+(((-1.0)*r22*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x14978=((1.0)*cj5);
CheckValue<IkReal> x14980 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),((((-1.0)*r20*sj6*x14978))+(((-1.0)*r22*sj5))+(((-1.0)*cj6*r21*x14978))),IKFAST_ATAN2_MAGTHRESH);
if(!x14980.valid){
continue;
}
IkReal x14979=x14980.value;
j4array[0]=((-1.0)*x14979);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x14979)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x14981=IKcos(j4);
IkReal x14982=IKsin(j4);
IkReal x14983=(cj5*x14981);
evalcond[0]=(((cj6*r20*x14982))+((r20*sj6*x14983))+((r22*sj5*x14981))+(((-1.0)*r21*sj6*x14982))+((cj6*r21*x14983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x14984=(cj2*cj4);
IkReal x14985=(r02*sj5);
IkReal x14986=(cj4*sj2);
IkReal x14987=(r12*sj5);
IkReal x14988=((1.0)*r01);
IkReal x14989=(cj5*cj6*r11);
IkReal x14990=(cj5*r00*sj6);
IkReal x14991=(cj5*r10*sj6);
IkReal x14992=(cj6*r00*sj4);
IkReal x14993=(sj2*sj4*sj6);
IkReal x14994=(cj6*r10*sj4);
IkReal x14995=(cj2*sj4*sj6);
IkReal x14996=(cj5*cj6*r01);
if( IKabs((((x14984*x14991))+((x14984*x14989))+((x14984*x14987))+((x14986*x14996))+((x14986*x14990))+((sj2*x14992))+(((-1.0)*x14988*x14993))+((cj2*x14994))+(((-1.0)*r11*x14995))+((x14985*x14986)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x14984*x14990))+((x14984*x14996))+((x14984*x14985))+(((-1.0)*x14988*x14995))+(((-1.0)*x14986*x14991))+((cj2*x14992))+(((-1.0)*sj2*x14994))+((r11*x14993))+(((-1.0)*x14986*x14987))+(((-1.0)*x14986*x14989)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x14984*x14991))+((x14984*x14989))+((x14984*x14987))+((x14986*x14996))+((x14986*x14990))+((sj2*x14992))+(((-1.0)*x14988*x14993))+((cj2*x14994))+(((-1.0)*r11*x14995))+((x14985*x14986))))+IKsqr((((x14984*x14990))+((x14984*x14996))+((x14984*x14985))+(((-1.0)*x14988*x14995))+(((-1.0)*x14986*x14991))+((cj2*x14992))+(((-1.0)*sj2*x14994))+((r11*x14993))+(((-1.0)*x14986*x14987))+(((-1.0)*x14986*x14989))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x14984*x14991))+((x14984*x14989))+((x14984*x14987))+((x14986*x14996))+((x14986*x14990))+((sj2*x14992))+(((-1.0)*x14988*x14993))+((cj2*x14994))+(((-1.0)*r11*x14995))+((x14985*x14986))), (((x14984*x14990))+((x14984*x14996))+((x14984*x14985))+(((-1.0)*x14988*x14995))+(((-1.0)*x14986*x14991))+((cj2*x14992))+(((-1.0)*sj2*x14994))+((r11*x14993))+(((-1.0)*x14986*x14987))+(((-1.0)*x14986*x14989))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x14997=IKcos(j0);
IkReal x14998=IKsin(j0);
IkReal x14999=((1.0)*sj4);
IkReal x15000=(cj6*sj4);
IkReal x15001=((0.37429)*sj5);
IkReal x15002=(r10*sj6);
IkReal x15003=(r01*sj6);
IkReal x15004=((0.37429)*cj5);
IkReal x15005=((0.069)*sj2);
IkReal x15006=(cj6*r01);
IkReal x15007=((0.01)*cj5);
IkReal x15008=(r12*sj5);
IkReal x15009=(r00*sj6);
IkReal x15010=(r02*sj5);
IkReal x15011=(cj4*cj6);
IkReal x15012=(cj4*cj5);
IkReal x15013=((1.0)*cj4);
IkReal x15014=(r11*sj6);
IkReal x15015=(sj2*x14997);
IkReal x15016=(cj5*cj6*r11);
IkReal x15017=(cj2*x14997);
IkReal x15018=((0.069)*x14998);
IkReal x15019=(sj2*x14998);
IkReal x15020=((1.0)*cj2*x14998);
evalcond[0]=(((cj4*x15008))+x15015+((cj5*r11*x15011))+((r10*x15000))+(((-1.0)*x15020))+(((-1.0)*x14999*x15014))+((x15002*x15012)));
evalcond[1]=(((x15009*x15012))+(((-1.0)*x15019))+(((-1.0)*x15017))+((r00*x15000))+(((-1.0)*x14999*x15003))+((x15006*x15012))+((cj4*x15010)));
evalcond[2]=((((-1.0)*cj5*x14999*x15002))+((r10*x15011))+(((-1.0)*x15013*x15014))+x15017+x15019+(((-1.0)*x14999*x15008))+(((-1.0)*x14999*x15016)));
evalcond[3]=((((-1.0)*cj5*x14999*x15006))+(((-1.0)*cj5*x14999*x15009))+x15015+(((-1.0)*x15020))+((r00*x15011))+(((-1.0)*x14999*x15010))+(((-1.0)*x15003*x15013)));
evalcond[4]=((((-0.069)*x15017))+((x15006*x15007))+((x15007*x15009))+(((-1.0)*x15001*x15006))+(((-1.0)*x15001*x15009))+(((-1.0)*px))+(((-1.0)*x14998*x15005))+((r02*x15004))+(((0.069)*x14997))+(((0.01)*x15010)));
evalcond[5]=((((-1.0)*cj2*x15018))+((cj6*r11*x15007))+x15018+((r12*x15004))+(((0.01)*x15008))+(((-1.0)*x15001*x15002))+((x15002*x15007))+(((-1.0)*py))+(((-1.0)*cj6*r11*x15001))+((x14997*x15005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15022 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),(((cj6*r20))+(((-1.0)*r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x15022.valid){
continue;
}
IkReal x15021=x15022.value;
j4array[0]=((-1.0)*x15021);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x15021)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x15023=IKsin(j4);
IkReal x15024=IKcos(j4);
IkReal x15025=((1.0)*x15023);
evalcond[0]=((((-1.0)*cj5*r20*sj6*x15025))+(((-1.0)*r22*sj5*x15025))+(((-1.0)*r21*sj6*x15024))+(((-1.0)*cj5*cj6*r21*x15025))+((cj6*r20*x15024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15026=(cj2*cj4);
IkReal x15027=(r02*sj5);
IkReal x15028=(cj4*sj2);
IkReal x15029=(r12*sj5);
IkReal x15030=((1.0)*r01);
IkReal x15031=(cj5*cj6*r11);
IkReal x15032=(cj5*r00*sj6);
IkReal x15033=(cj5*r10*sj6);
IkReal x15034=(cj6*r00*sj4);
IkReal x15035=(sj2*sj4*sj6);
IkReal x15036=(cj6*r10*sj4);
IkReal x15037=(cj2*sj4*sj6);
IkReal x15038=(cj5*cj6*r01);
if( IKabs((((x15026*x15029))+((x15026*x15031))+((x15026*x15033))+((sj2*x15034))+((x15028*x15032))+((x15028*x15038))+(((-1.0)*r11*x15037))+((cj2*x15036))+(((-1.0)*x15030*x15035))+((x15027*x15028)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x15026*x15027))+((x15026*x15032))+((x15026*x15038))+(((-1.0)*x15028*x15029))+((r11*x15035))+(((-1.0)*x15028*x15031))+(((-1.0)*x15028*x15033))+((cj2*x15034))+(((-1.0)*x15030*x15037))+(((-1.0)*sj2*x15036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x15026*x15029))+((x15026*x15031))+((x15026*x15033))+((sj2*x15034))+((x15028*x15032))+((x15028*x15038))+(((-1.0)*r11*x15037))+((cj2*x15036))+(((-1.0)*x15030*x15035))+((x15027*x15028))))+IKsqr((((x15026*x15027))+((x15026*x15032))+((x15026*x15038))+(((-1.0)*x15028*x15029))+((r11*x15035))+(((-1.0)*x15028*x15031))+(((-1.0)*x15028*x15033))+((cj2*x15034))+(((-1.0)*x15030*x15037))+(((-1.0)*sj2*x15036))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x15026*x15029))+((x15026*x15031))+((x15026*x15033))+((sj2*x15034))+((x15028*x15032))+((x15028*x15038))+(((-1.0)*r11*x15037))+((cj2*x15036))+(((-1.0)*x15030*x15035))+((x15027*x15028))), (((x15026*x15027))+((x15026*x15032))+((x15026*x15038))+(((-1.0)*x15028*x15029))+((r11*x15035))+(((-1.0)*x15028*x15031))+(((-1.0)*x15028*x15033))+((cj2*x15034))+(((-1.0)*x15030*x15037))+(((-1.0)*sj2*x15036))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x15039=IKcos(j0);
IkReal x15040=IKsin(j0);
IkReal x15041=((1.0)*sj4);
IkReal x15042=(cj6*sj4);
IkReal x15043=((0.37429)*sj5);
IkReal x15044=(r10*sj6);
IkReal x15045=(r01*sj6);
IkReal x15046=((0.37429)*cj5);
IkReal x15047=((0.069)*sj2);
IkReal x15048=(cj6*r01);
IkReal x15049=((0.01)*cj5);
IkReal x15050=(r12*sj5);
IkReal x15051=(r00*sj6);
IkReal x15052=(r02*sj5);
IkReal x15053=(cj4*cj6);
IkReal x15054=(cj4*cj5);
IkReal x15055=((1.0)*cj4);
IkReal x15056=(r11*sj6);
IkReal x15057=(sj2*x15039);
IkReal x15058=(cj5*cj6*r11);
IkReal x15059=(cj2*x15039);
IkReal x15060=((0.069)*x15040);
IkReal x15061=(sj2*x15040);
IkReal x15062=((1.0)*cj2*x15040);
evalcond[0]=(((cj4*x15050))+x15057+(((-1.0)*x15041*x15056))+((cj5*r11*x15053))+((r10*x15042))+((x15044*x15054))+(((-1.0)*x15062)));
evalcond[1]=((((-1.0)*x15041*x15045))+(((-1.0)*x15059))+((cj4*x15052))+((r00*x15042))+(((-1.0)*x15061))+((x15051*x15054))+((x15048*x15054)));
evalcond[2]=((((-1.0)*x15055*x15056))+((r10*x15053))+x15059+x15061+(((-1.0)*x15041*x15050))+(((-1.0)*x15041*x15058))+(((-1.0)*cj5*x15041*x15044)));
evalcond[3]=((((-1.0)*cj5*x15041*x15051))+x15057+(((-1.0)*x15041*x15052))+(((-1.0)*x15062))+(((-1.0)*x15045*x15055))+(((-1.0)*cj5*x15041*x15048))+((r00*x15053)));
evalcond[4]=(((r02*x15046))+((x15049*x15051))+(((-1.0)*x15043*x15048))+(((-1.0)*x15040*x15047))+((x15048*x15049))+(((-1.0)*px))+(((-0.069)*x15059))+(((-1.0)*x15043*x15051))+(((0.069)*x15039))+(((0.01)*x15052)));
evalcond[5]=((((-1.0)*x15043*x15044))+(((-1.0)*cj6*r11*x15043))+((x15039*x15047))+((x15044*x15049))+((r12*x15046))+x15060+(((-1.0)*py))+((cj6*r11*x15049))+(((-1.0)*cj2*x15060))+(((0.01)*x15050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15063=((690.0)*sj5);
IkReal x15064=(cj5*sj2);
IkReal x15065=((25826.01)*r02);
IkReal x15066=(cj6*r11);
IkReal x15067=((25826.01)*sj5);
IkReal x15068=(r00*sj6);
IkReal x15069=(r10*sj6);
IkReal x15070=((25826.01)*r12);
IkReal x15071=(cj6*r01);
IkReal x15072=((69000.0)*py);
IkReal x15073=((69000.0)*px);
IkReal x15074=((690.0)*cj5);
IkReal x15075=(cj2*cj5);
IkReal x15076=(cj2*x15074);
CheckValue<IkReal> x15077=IKPowWithIntegerCheck(IKsign(((9522.0)+(((-9522.0)*cj2)))),-1);
if(!x15077.valid){
continue;
}
CheckValue<IkReal> x15078 = IKatan2WithCheck(IkReal(((((-1.0)*x15066*x15074))+(((690.0)*x15064*x15068))+((x15070*x15075))+((x15066*x15067))+((cj2*r12*x15063))+(((-1.0)*x15069*x15074))+(((690.0)*x15064*x15071))+((x15067*x15069))+(((-1.0)*sj2*x15073))+(((-1.0)*cj5*x15070))+x15072+((x15069*x15076))+((x15064*x15065))+((x15066*x15076))+(((-1.0)*sj2*x15067*x15068))+((r02*sj2*x15063))+(((-1.0)*r12*x15063))+(((-1.0)*cj2*x15066*x15067))+(((-1.0)*sj2*x15067*x15071))+(((-1.0)*cj2*x15067*x15069))+(((-1.0)*cj2*x15072)))),((((-690.0)*x15064*x15069))+(((-690.0)*x15064*x15066))+(((-1.0)*cj2*x15067*x15071))+((x15071*x15076))+((x15065*x15075))+((x15067*x15068))+(((-1.0)*r12*sj2*x15063))+x15073+((x15068*x15076))+(((-1.0)*r02*x15063))+(((-1.0)*x15071*x15074))+(((-1.0)*x15068*x15074))+(((-1.0)*cj5*x15065))+((sj2*x15072))+(((-1.0)*x15064*x15070))+((x15067*x15071))+((cj2*r02*x15063))+((sj2*x15066*x15067))+(((-1.0)*cj2*x15067*x15068))+(((-1.0)*cj2*x15073))+((sj2*x15067*x15069))),IKFAST_ATAN2_MAGTHRESH);
if(!x15078.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15077.value)))+(x15078.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x15079=IKcos(j0);
IkReal x15080=IKsin(j0);
IkReal x15081=((0.01)*cj5);
IkReal x15082=(cj6*r01);
IkReal x15083=((0.37429)*sj5);
IkReal x15084=(cj6*r11);
IkReal x15085=(r00*sj6);
IkReal x15086=((0.01)*sj5);
IkReal x15087=((0.37429)*cj5);
IkReal x15088=(r10*sj6);
IkReal x15089=((0.069)*x15079);
IkReal x15090=((0.069)*x15080);
evalcond[0]=(((x15081*x15082))+((x15081*x15085))+((r02*x15087))+((r02*x15086))+x15089+(((-1.0)*x15083*x15085))+(((-1.0)*px))+(((-1.0)*cj2*x15089))+(((-1.0)*x15082*x15083))+(((-1.0)*sj2*x15090)));
evalcond[1]=(((x15081*x15088))+((x15081*x15084))+((r12*x15087))+((r12*x15086))+x15090+(((-1.0)*x15083*x15088))+(((-1.0)*x15083*x15084))+(((-1.0)*py))+((sj2*x15089))+(((-1.0)*cj2*x15090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15091=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15091;
j4eval[1]=IKsign(x15091);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15092=((1.0)*sj5);
IkReal x15093=(((cj5*r12))+(((-1.0)*r10*sj6*x15092))+(((-1.0)*cj6*r11*x15092)));
j4eval[0]=x15093;
j4eval[1]=IKsign(x15093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15094=cj6*cj6;
IkReal x15095=cj5*cj5;
IkReal x15096=(cj5*sj5);
IkReal x15097=(cj6*r21);
IkReal x15098=((1.0)*r11);
IkReal x15099=(r10*r20);
IkReal x15100=(r10*sj6);
IkReal x15101=(r12*r22);
IkReal x15102=(r21*x15094);
IkReal x15103=(cj6*r20*sj6);
IkReal x15104=(r11*x15095);
IkReal x15105=((1.0)*x15095);
IkReal x15106=(((cj6*r11*r22*x15096))+((r11*r21))+((x15095*x15097*x15100))+((r12*r20*sj6*x15096))+(((-1.0)*x15098*x15103))+(((-1.0)*x15098*x15102))+((r22*x15096*x15100))+((x15103*x15104))+((x15102*x15104))+(((-1.0)*x15097*x15100))+(((-1.0)*x15101*x15105))+x15101+((r12*x15096*x15097))+(((-1.0)*x15094*x15099*x15105))+((x15095*x15099))+((x15094*x15099)));
j4eval[0]=x15106;
j4eval[1]=IKsign(x15106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15107=cj6*cj6;
IkReal x15108=cj5*cj5;
IkReal x15109=((1.0)*r11);
IkReal x15110=(cj6*r20);
IkReal x15111=(cj0*cj2);
IkReal x15112=(cj5*r20);
IkReal x15113=(r12*r22);
IkReal x15114=(cj6*r21);
IkReal x15115=(sj0*sj2);
IkReal x15116=(r22*sj5);
IkReal x15117=(r12*sj5);
IkReal x15118=(r10*sj6);
IkReal x15119=(r21*x15107);
IkReal x15120=(sj6*x15115);
IkReal x15121=((1.0)*x15108);
IkReal x15122=(r10*x15108);
IkReal x15123=(r11*x15108);
IkReal x15124=(r10*r20*x15107);
CheckValue<IkReal> x15125=IKPowWithIntegerCheck(IKsign((((r20*x15122))+((x15108*x15114*x15118))+((cj5*cj6*r11*x15116))+((r11*r21))+(((-1.0)*x15121*x15124))+((cj5*x15114*x15117))+(((-1.0)*x15113*x15121))+x15124+x15113+(((-1.0)*x15114*x15118))+((sj6*x15112*x15117))+(((-1.0)*sj6*x15109*x15110))+((cj5*x15116*x15118))+((x15119*x15123))+(((-1.0)*x15109*x15119))+((sj6*x15110*x15123)))),-1);
if(!x15125.valid){
continue;
}
CheckValue<IkReal> x15126 = IKatan2WithCheck(IkReal((((cj5*x15114*x15115))+((x15112*x15120))+((x15111*x15116))+((cj5*x15111*x15114))+((sj6*x15111*x15112))+((x15115*x15116)))),(((r21*x15120))+((r21*sj6*x15111))+(((-1.0)*x15110*x15111))+(((-1.0)*x15110*x15115))),IKFAST_ATAN2_MAGTHRESH);
if(!x15126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15125.value)))+(x15126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15127=IKcos(j4);
IkReal x15128=IKsin(j4);
IkReal x15129=(cj0*sj2);
IkReal x15130=(cj0*cj2);
IkReal x15131=(cj5*sj6);
IkReal x15132=(cj5*r01);
IkReal x15133=(cj5*r21);
IkReal x15134=((1.0)*sj0);
IkReal x15135=(cj2*x15134);
IkReal x15136=(cj5*cj6*r11);
IkReal x15137=((1.0)*x15128);
IkReal x15138=(cj6*x15127);
IkReal x15139=(sj5*x15127);
IkReal x15140=(cj6*x15128);
IkReal x15141=(sj5*x15137);
IkReal x15142=((1.0)*sj6*x15127);
evalcond[0]=(((x15133*x15138))+((r20*x15127*x15131))+((r20*x15140))+((r22*x15139))+(((-1.0)*r21*sj6*x15137)));
evalcond[1]=(((r20*x15138))+(((-1.0)*r20*x15131*x15137))+(((-1.0)*r21*x15142))+(((-1.0)*cj6*x15133*x15137))+(((-1.0)*r22*x15141)));
evalcond[2]=(((r10*x15140))+(((-1.0)*r11*sj6*x15137))+((x15127*x15136))+(((-1.0)*x15135))+x15129+((r10*x15127*x15131))+((r12*x15139)));
evalcond[3]=(((r00*x15127*x15131))+((x15132*x15138))+(((-1.0)*x15130))+((r00*x15140))+(((-1.0)*sj2*x15134))+(((-1.0)*r01*sj6*x15137))+((r02*x15139)));
evalcond[4]=((((-1.0)*r10*x15131*x15137))+(((-1.0)*x15136*x15137))+((sj0*sj2))+x15130+((r10*x15138))+(((-1.0)*r11*x15142))+(((-1.0)*r12*x15141)));
evalcond[5]=((((-1.0)*r01*x15142))+(((-1.0)*x15135))+((r00*x15138))+(((-1.0)*r00*x15131*x15137))+(((-1.0)*cj6*x15132*x15137))+(((-1.0)*r02*x15141))+x15129);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15143=((1.0)*r21);
IkReal x15144=(sj0*sj2);
IkReal x15145=(cj0*cj2);
IkReal x15146=((1.0)*sj5);
IkReal x15147=(cj6*x15145);
IkReal x15148=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x15149 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15145*x15146))+(((-1.0)*x15144*x15148))+(((-1.0)*x15145*x15148))+(((-1.0)*cj5*x15143*x15147))+(((-1.0)*cj5*cj6*x15143*x15144))+(((-1.0)*r22*x15144*x15146)))),(((cj6*r20*x15144))+((r20*x15147))+(((-1.0)*sj6*x15143*x15145))+(((-1.0)*sj6*x15143*x15144))),IKFAST_ATAN2_MAGTHRESH);
if(!x15149.valid){
continue;
}
CheckValue<IkReal> x15150=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x15146))+(((-1.0)*r10*sj6*x15146)))),-1);
if(!x15150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15149.value)+(((1.5707963267949)*(x15150.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15151=IKcos(j4);
IkReal x15152=IKsin(j4);
IkReal x15153=(cj0*sj2);
IkReal x15154=(cj0*cj2);
IkReal x15155=(cj5*sj6);
IkReal x15156=(cj5*r01);
IkReal x15157=(cj5*r21);
IkReal x15158=((1.0)*sj0);
IkReal x15159=(cj2*x15158);
IkReal x15160=(cj5*cj6*r11);
IkReal x15161=((1.0)*x15152);
IkReal x15162=(cj6*x15151);
IkReal x15163=(sj5*x15151);
IkReal x15164=(cj6*x15152);
IkReal x15165=(sj5*x15161);
IkReal x15166=((1.0)*sj6*x15151);
evalcond[0]=(((r20*x15164))+((x15157*x15162))+(((-1.0)*r21*sj6*x15161))+((r20*x15151*x15155))+((r22*x15163)));
evalcond[1]=(((r20*x15162))+(((-1.0)*r21*x15166))+(((-1.0)*r22*x15165))+(((-1.0)*r20*x15155*x15161))+(((-1.0)*cj6*x15157*x15161)));
evalcond[2]=(((r10*x15151*x15155))+(((-1.0)*x15159))+((r10*x15164))+((r12*x15163))+(((-1.0)*r11*sj6*x15161))+x15153+((x15151*x15160)));
evalcond[3]=(((r02*x15163))+(((-1.0)*r01*sj6*x15161))+((r00*x15151*x15155))+((x15156*x15162))+(((-1.0)*x15154))+(((-1.0)*sj2*x15158))+((r00*x15164)));
evalcond[4]=((((-1.0)*x15160*x15161))+((r10*x15162))+((sj0*sj2))+x15154+(((-1.0)*r11*x15166))+(((-1.0)*r12*x15165))+(((-1.0)*r10*x15155*x15161)));
evalcond[5]=((((-1.0)*cj6*x15156*x15161))+(((-1.0)*r01*x15166))+(((-1.0)*x15159))+x15153+(((-1.0)*r02*x15165))+(((-1.0)*r00*x15155*x15161))+((r00*x15162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15167=(r22*sj5);
IkReal x15168=(cj6*r20);
IkReal x15169=(cj0*sj2);
IkReal x15170=(r21*sj6);
IkReal x15171=((1.0)*cj2*sj0);
IkReal x15172=(cj5*cj6*r21);
IkReal x15173=(cj5*r20*sj6);
CheckValue<IkReal> x15174 = IKatan2WithCheck(IkReal((((x15169*x15172))+((x15169*x15173))+(((-1.0)*x15171*x15173))+(((-1.0)*x15171*x15172))+((x15167*x15169))+(((-1.0)*x15167*x15171)))),(((cj2*sj0*x15168))+(((-1.0)*x15170*x15171))+((x15169*x15170))+(((-1.0)*x15168*x15169))),IKFAST_ATAN2_MAGTHRESH);
if(!x15174.valid){
continue;
}
CheckValue<IkReal> x15175=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15174.value)+(((1.5707963267949)*(x15175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15176=IKcos(j4);
IkReal x15177=IKsin(j4);
IkReal x15178=(cj0*sj2);
IkReal x15179=(cj0*cj2);
IkReal x15180=(cj5*sj6);
IkReal x15181=(cj5*r01);
IkReal x15182=(cj5*r21);
IkReal x15183=((1.0)*sj0);
IkReal x15184=(cj2*x15183);
IkReal x15185=(cj5*cj6*r11);
IkReal x15186=((1.0)*x15177);
IkReal x15187=(cj6*x15176);
IkReal x15188=(sj5*x15176);
IkReal x15189=(cj6*x15177);
IkReal x15190=(sj5*x15186);
IkReal x15191=((1.0)*sj6*x15176);
evalcond[0]=(((r20*x15189))+((r20*x15176*x15180))+((x15182*x15187))+((r22*x15188))+(((-1.0)*r21*sj6*x15186)));
evalcond[1]=((((-1.0)*cj6*x15182*x15186))+((r20*x15187))+(((-1.0)*r20*x15180*x15186))+(((-1.0)*r22*x15190))+(((-1.0)*r21*x15191)));
evalcond[2]=((((-1.0)*x15184))+((r12*x15188))+x15178+((x15176*x15185))+((r10*x15176*x15180))+(((-1.0)*r11*sj6*x15186))+((r10*x15189)));
evalcond[3]=(((r02*x15188))+(((-1.0)*sj2*x15183))+((x15181*x15187))+(((-1.0)*r01*sj6*x15186))+(((-1.0)*x15179))+((r00*x15189))+((r00*x15176*x15180)));
evalcond[4]=((((-1.0)*x15185*x15186))+(((-1.0)*r11*x15191))+(((-1.0)*r12*x15190))+((sj0*sj2))+x15179+((r10*x15187))+(((-1.0)*r10*x15180*x15186)));
evalcond[5]=((((-1.0)*cj6*x15181*x15186))+(((-1.0)*r00*x15180*x15186))+(((-1.0)*x15184))+x15178+((r00*x15187))+(((-1.0)*r02*x15190))+(((-1.0)*r01*x15191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15192=(cj6*sj5);
IkReal x15193=(sj5*sj6);
IkReal x15194=((0.01)*cj5);
IkReal x15195=(cj5*r22);
IkReal x15196=((1.0)*cj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.36442)+((cj6*r21*x15194))+(((0.37429)*x15195))+(((-0.37429)*r20*x15193))+(((-0.37429)*r21*x15192))+((r20*sj6*x15194))+(((0.01)*r22*sj5))+(((-1.0)*pz)));
evalcond[2]=((-1.0)+((r21*x15192))+(((-1.0)*x15195))+((r20*x15193)));
evalcond[3]=(((r00*x15193))+(((-1.0)*r02*x15196))+((r01*x15192)));
evalcond[4]=(((r11*x15192))+(((-1.0)*r12*x15196))+((r10*x15193)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j0eval[0]=((1.0)+cj2);
j0eval[1]=IKsign(((9522.0)+(((9522.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
j4eval[0]=((IKabs((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))))+(IKabs((((cj6*r20))+(((-1.0)*r21*sj6))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15197=((1.0)*r21);
j4eval[0]=((IKabs(((((-1.0)*sj6*x15197))+((cj6*r20)))))+(IKabs(((((-1.0)*cj5*r20*sj6))+(((-1.0)*r22*sj5))+(((-1.0)*cj5*cj6*x15197))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x15198=((1.0)*cj5);
CheckValue<IkReal> x15200 = IKatan2WithCheck(IkReal((((cj6*r20))+(((-1.0)*r21*sj6)))),((((-1.0)*r20*sj6*x15198))+(((-1.0)*r22*sj5))+(((-1.0)*cj6*r21*x15198))),IKFAST_ATAN2_MAGTHRESH);
if(!x15200.valid){
continue;
}
IkReal x15199=x15200.value;
j4array[0]=((-1.0)*x15199);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x15199)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x15201=IKcos(j4);
IkReal x15202=IKsin(j4);
IkReal x15203=(cj5*x15201);
evalcond[0]=(((r22*sj5*x15201))+((cj6*r20*x15202))+((r20*sj6*x15203))+(((-1.0)*r21*sj6*x15202))+((cj6*r21*x15203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15204=(r02*sj5);
IkReal x15205=(cj5*sj6);
IkReal x15206=(r00*sj2);
IkReal x15207=(cj6*sj4);
IkReal x15208=((1.0)*cj2);
IkReal x15209=(r12*sj5);
IkReal x15210=(cj4*sj2);
IkReal x15211=(cj4*x15208);
IkReal x15212=(cj5*cj6*r11);
IkReal x15213=((1.0)*x15210);
IkReal x15214=(cj5*cj6*r01);
IkReal x15215=(sj2*sj4*sj6);
IkReal x15216=(cj2*sj4*sj6);
if( IKabs(((((-1.0)*r01*x15215))+((cj4*x15205*x15206))+((x15204*x15210))+((r11*x15216))+((x15210*x15214))+((x15206*x15207))+(((-1.0)*r10*x15207*x15208))+(((-1.0)*r10*x15205*x15211))+(((-1.0)*x15211*x15212))+(((-1.0)*x15209*x15211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x15205*x15211))+((r11*x15215))+(((-1.0)*r10*sj2*x15207))+((r01*x15216))+(((-1.0)*x15212*x15213))+(((-1.0)*x15204*x15211))+(((-1.0)*r10*x15205*x15213))+(((-1.0)*x15211*x15214))+(((-1.0)*r00*x15207*x15208))+(((-1.0)*x15209*x15213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x15215))+((cj4*x15205*x15206))+((x15204*x15210))+((r11*x15216))+((x15210*x15214))+((x15206*x15207))+(((-1.0)*r10*x15207*x15208))+(((-1.0)*r10*x15205*x15211))+(((-1.0)*x15211*x15212))+(((-1.0)*x15209*x15211))))+IKsqr(((((-1.0)*r00*x15205*x15211))+((r11*x15215))+(((-1.0)*r10*sj2*x15207))+((r01*x15216))+(((-1.0)*x15212*x15213))+(((-1.0)*x15204*x15211))+(((-1.0)*r10*x15205*x15213))+(((-1.0)*x15211*x15214))+(((-1.0)*r00*x15207*x15208))+(((-1.0)*x15209*x15213))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r01*x15215))+((cj4*x15205*x15206))+((x15204*x15210))+((r11*x15216))+((x15210*x15214))+((x15206*x15207))+(((-1.0)*r10*x15207*x15208))+(((-1.0)*r10*x15205*x15211))+(((-1.0)*x15211*x15212))+(((-1.0)*x15209*x15211))), ((((-1.0)*r00*x15205*x15211))+((r11*x15215))+(((-1.0)*r10*sj2*x15207))+((r01*x15216))+(((-1.0)*x15212*x15213))+(((-1.0)*x15204*x15211))+(((-1.0)*r10*x15205*x15213))+(((-1.0)*x15211*x15214))+(((-1.0)*r00*x15207*x15208))+(((-1.0)*x15209*x15213))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x15217=IKcos(j0);
IkReal x15218=IKsin(j0);
IkReal x15219=((1.0)*sj4);
IkReal x15220=(cj6*sj4);
IkReal x15221=((0.37429)*sj5);
IkReal x15222=(r10*sj6);
IkReal x15223=((0.069)*sj2);
IkReal x15224=(r01*sj6);
IkReal x15225=((0.37429)*cj5);
IkReal x15226=(cj6*r01);
IkReal x15227=((0.01)*cj5);
IkReal x15228=(r12*sj5);
IkReal x15229=(r00*sj6);
IkReal x15230=(r02*sj5);
IkReal x15231=(cj4*cj6);
IkReal x15232=(cj4*cj5);
IkReal x15233=((1.0)*cj4);
IkReal x15234=(r11*sj6);
IkReal x15235=(cj2*x15217);
IkReal x15236=(cj5*cj6*r11);
IkReal x15237=((0.069)*x15218);
IkReal x15238=(sj2*x15217);
IkReal x15239=(cj2*x15218);
IkReal x15240=((1.0)*sj2*x15218);
evalcond[0]=(x15238+x15239+((r10*x15220))+((cj5*r11*x15231))+((x15222*x15232))+(((-1.0)*x15219*x15234))+((cj4*x15228)));
evalcond[1]=(((r00*x15220))+(((-1.0)*x15240))+((x15229*x15232))+x15235+((x15226*x15232))+(((-1.0)*x15219*x15224))+((cj4*x15230)));
evalcond[2]=((((-1.0)*x15233*x15234))+(((-1.0)*x15240))+(((-1.0)*cj5*x15219*x15222))+x15235+((r10*x15231))+(((-1.0)*x15219*x15228))+(((-1.0)*x15219*x15236)));
evalcond[3]=((((-1.0)*x15238))+(((-1.0)*x15239))+((r00*x15231))+(((-1.0)*x15224*x15233))+(((-1.0)*cj5*x15219*x15229))+(((-1.0)*cj5*x15219*x15226))+(((-1.0)*x15219*x15230)));
evalcond[4]=((((-1.0)*x15221*x15226))+(((-1.0)*x15221*x15229))+(((-1.0)*x15218*x15223))+(((0.069)*x15217))+(((-1.0)*px))+((r02*x15225))+((x15226*x15227))+((x15227*x15229))+(((0.069)*x15235))+(((0.01)*x15230)));
evalcond[5]=(((r12*x15225))+((x15222*x15227))+((cj2*x15237))+(((-1.0)*x15221*x15222))+x15237+(((-1.0)*cj6*r11*x15221))+(((0.01)*x15228))+(((-1.0)*py))+((cj6*r11*x15227))+((x15217*x15223)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15242 = IKatan2WithCheck(IkReal((((cj5*r20*sj6))+((r22*sj5))+((cj5*cj6*r21)))),(((cj6*r20))+(((-1.0)*r21*sj6))),IKFAST_ATAN2_MAGTHRESH);
if(!x15242.valid){
continue;
}
IkReal x15241=x15242.value;
j4array[0]=((-1.0)*x15241);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x15241)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x15243=IKsin(j4);
IkReal x15244=IKcos(j4);
IkReal x15245=((1.0)*x15243);
evalcond[0]=((((-1.0)*cj5*r20*sj6*x15245))+(((-1.0)*r22*sj5*x15245))+(((-1.0)*r21*sj6*x15244))+((cj6*r20*x15244))+(((-1.0)*cj5*cj6*r21*x15245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15246=(r02*sj5);
IkReal x15247=(cj5*sj6);
IkReal x15248=(r00*sj2);
IkReal x15249=(cj6*sj4);
IkReal x15250=((1.0)*cj2);
IkReal x15251=(r12*sj5);
IkReal x15252=(cj4*sj2);
IkReal x15253=(cj4*x15250);
IkReal x15254=(cj5*cj6*r11);
IkReal x15255=((1.0)*x15252);
IkReal x15256=(cj5*cj6*r01);
IkReal x15257=(sj2*sj4*sj6);
IkReal x15258=(cj2*sj4*sj6);
if( IKabs((((x15246*x15252))+((cj4*x15247*x15248))+((x15248*x15249))+(((-1.0)*x15251*x15253))+((r11*x15258))+(((-1.0)*r01*x15257))+(((-1.0)*x15253*x15254))+((x15252*x15256))+(((-1.0)*r10*x15249*x15250))+(((-1.0)*r10*x15247*x15253)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*sj2*x15249))+(((-1.0)*r00*x15247*x15253))+((r01*x15258))+(((-1.0)*x15251*x15255))+(((-1.0)*r00*x15249*x15250))+(((-1.0)*x15246*x15253))+((r11*x15257))+(((-1.0)*x15253*x15256))+(((-1.0)*x15254*x15255))+(((-1.0)*r10*x15247*x15255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x15246*x15252))+((cj4*x15247*x15248))+((x15248*x15249))+(((-1.0)*x15251*x15253))+((r11*x15258))+(((-1.0)*r01*x15257))+(((-1.0)*x15253*x15254))+((x15252*x15256))+(((-1.0)*r10*x15249*x15250))+(((-1.0)*r10*x15247*x15253))))+IKsqr(((((-1.0)*r10*sj2*x15249))+(((-1.0)*r00*x15247*x15253))+((r01*x15258))+(((-1.0)*x15251*x15255))+(((-1.0)*r00*x15249*x15250))+(((-1.0)*x15246*x15253))+((r11*x15257))+(((-1.0)*x15253*x15256))+(((-1.0)*x15254*x15255))+(((-1.0)*r10*x15247*x15255))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x15246*x15252))+((cj4*x15247*x15248))+((x15248*x15249))+(((-1.0)*x15251*x15253))+((r11*x15258))+(((-1.0)*r01*x15257))+(((-1.0)*x15253*x15254))+((x15252*x15256))+(((-1.0)*r10*x15249*x15250))+(((-1.0)*r10*x15247*x15253))), ((((-1.0)*r10*sj2*x15249))+(((-1.0)*r00*x15247*x15253))+((r01*x15258))+(((-1.0)*x15251*x15255))+(((-1.0)*r00*x15249*x15250))+(((-1.0)*x15246*x15253))+((r11*x15257))+(((-1.0)*x15253*x15256))+(((-1.0)*x15254*x15255))+(((-1.0)*r10*x15247*x15255))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x15259=IKcos(j0);
IkReal x15260=IKsin(j0);
IkReal x15261=((1.0)*sj4);
IkReal x15262=(cj6*sj4);
IkReal x15263=((0.37429)*sj5);
IkReal x15264=(r10*sj6);
IkReal x15265=((0.069)*sj2);
IkReal x15266=(r01*sj6);
IkReal x15267=((0.37429)*cj5);
IkReal x15268=(cj6*r01);
IkReal x15269=((0.01)*cj5);
IkReal x15270=(r12*sj5);
IkReal x15271=(r00*sj6);
IkReal x15272=(r02*sj5);
IkReal x15273=(cj4*cj6);
IkReal x15274=(cj4*cj5);
IkReal x15275=((1.0)*cj4);
IkReal x15276=(r11*sj6);
IkReal x15277=(cj2*x15259);
IkReal x15278=(cj5*cj6*r11);
IkReal x15279=((0.069)*x15260);
IkReal x15280=(sj2*x15259);
IkReal x15281=(cj2*x15260);
IkReal x15282=((1.0)*sj2*x15260);
evalcond[0]=(((cj5*r11*x15273))+((cj4*x15270))+(((-1.0)*x15261*x15276))+((x15264*x15274))+x15281+x15280+((r10*x15262)));
evalcond[1]=(((cj4*x15272))+((x15271*x15274))+x15277+((x15268*x15274))+(((-1.0)*x15261*x15266))+((r00*x15262))+(((-1.0)*x15282)));
evalcond[2]=((((-1.0)*x15261*x15278))+(((-1.0)*x15261*x15270))+(((-1.0)*x15275*x15276))+x15277+((r10*x15273))+(((-1.0)*cj5*x15261*x15264))+(((-1.0)*x15282)));
evalcond[3]=((((-1.0)*x15261*x15272))+(((-1.0)*cj5*x15261*x15268))+(((-1.0)*x15266*x15275))+(((-1.0)*cj5*x15261*x15271))+(((-1.0)*x15280))+(((-1.0)*x15281))+((r00*x15273)));
evalcond[4]=((((-1.0)*x15263*x15271))+(((-1.0)*x15263*x15268))+(((0.01)*x15272))+(((-1.0)*x15260*x15265))+((x15269*x15271))+(((-1.0)*px))+(((0.069)*x15259))+((x15268*x15269))+((r02*x15267))+(((0.069)*x15277)));
evalcond[5]=(((x15264*x15269))+((r12*x15267))+((x15259*x15265))+(((-1.0)*cj6*r11*x15263))+((cj6*r11*x15269))+x15279+(((-1.0)*x15263*x15264))+(((0.01)*x15270))+(((-1.0)*py))+((cj2*x15279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15283=((690.0)*sj5);
IkReal x15284=(cj5*sj2);
IkReal x15285=((25826.01)*r02);
IkReal x15286=(cj6*r11);
IkReal x15287=((25826.01)*sj5);
IkReal x15288=(r10*sj6);
IkReal x15289=((25826.01)*r12);
IkReal x15290=(cj6*r01);
IkReal x15291=((69000.0)*py);
IkReal x15292=((69000.0)*px);
IkReal x15293=((690.0)*cj5);
IkReal x15294=(cj2*cj5);
IkReal x15295=(r00*sj6);
IkReal x15296=(cj2*x15293);
IkReal x15297=((690.0)*x15295);
CheckValue<IkReal> x15298=IKPowWithIntegerCheck(IKsign(((9522.0)+(((9522.0)*cj2)))),-1);
if(!x15298.valid){
continue;
}
CheckValue<IkReal> x15299 = IKatan2WithCheck(IkReal((((r02*sj2*x15283))+(((-1.0)*x15286*x15296))+(((-1.0)*x15286*x15293))+(((-1.0)*sj2*x15292))+((x15286*x15287))+((cj2*x15287*x15288))+(((-1.0)*r12*x15283))+((x15287*x15288))+(((690.0)*x15284*x15290))+(((-1.0)*sj2*x15287*x15295))+(((-1.0)*sj2*x15287*x15290))+((cj2*x15286*x15287))+x15291+((x15284*x15285))+(((-1.0)*x15288*x15296))+(((-1.0)*x15288*x15293))+(((-1.0)*x15289*x15294))+(((-1.0)*cj5*x15289))+((cj2*x15291))+((x15284*x15297))+(((-1.0)*cj2*r12*x15283)))),((((-1.0)*x15285*x15294))+((sj2*x15286*x15287))+((sj2*x15291))+(((-1.0)*x15290*x15296))+(((-1.0)*x15290*x15293))+(((-1.0)*r12*sj2*x15283))+x15292+(((-1.0)*r02*x15283))+(((-1.0)*x15284*x15289))+((x15287*x15295))+((x15287*x15290))+(((-1.0)*x15293*x15295))+((cj2*x15287*x15295))+((cj2*x15287*x15290))+((sj2*x15287*x15288))+(((-1.0)*cj5*x15285))+((cj2*x15292))+(((-690.0)*x15284*x15288))+(((-690.0)*x15284*x15286))+(((-1.0)*cj2*r02*x15283))+(((-1.0)*x15295*x15296))),IKFAST_ATAN2_MAGTHRESH);
if(!x15299.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15298.value)))+(x15299.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x15300=IKcos(j0);
IkReal x15301=IKsin(j0);
IkReal x15302=((0.01)*cj5);
IkReal x15303=(cj6*r01);
IkReal x15304=((0.37429)*sj5);
IkReal x15305=(cj6*r11);
IkReal x15306=(r00*sj6);
IkReal x15307=((0.01)*sj5);
IkReal x15308=((0.37429)*cj5);
IkReal x15309=(r10*sj6);
IkReal x15310=((0.069)*x15300);
IkReal x15311=((0.069)*x15301);
evalcond[0]=((((-1.0)*x15303*x15304))+((r02*x15308))+((r02*x15307))+((x15302*x15306))+((x15302*x15303))+x15310+(((-1.0)*px))+(((-1.0)*sj2*x15311))+(((-1.0)*x15304*x15306))+((cj2*x15310)));
evalcond[1]=(((x15302*x15309))+((x15302*x15305))+x15311+(((-1.0)*py))+(((-1.0)*x15304*x15305))+(((-1.0)*x15304*x15309))+((cj2*x15311))+((r12*x15308))+((r12*x15307))+((sj2*x15310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15312=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15312;
j4eval[1]=IKsign(x15312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15313=((1.0)*sj5);
IkReal x15314=(((cj5*r12))+(((-1.0)*cj6*r11*x15313))+(((-1.0)*r10*sj6*x15313)));
j4eval[0]=x15314;
j4eval[1]=IKsign(x15314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15315=cj6*cj6;
IkReal x15316=cj5*cj5;
IkReal x15317=(cj5*sj5);
IkReal x15318=(cj6*r21);
IkReal x15319=((1.0)*r11);
IkReal x15320=(r10*r20);
IkReal x15321=(r10*sj6);
IkReal x15322=(r12*r22);
IkReal x15323=(r21*x15315);
IkReal x15324=(cj6*r20*sj6);
IkReal x15325=(r11*x15316);
IkReal x15326=((1.0)*x15316);
IkReal x15327=(((x15323*x15325))+((x15315*x15320))+(((-1.0)*x15322*x15326))+((x15316*x15318*x15321))+((r11*r21))+(((-1.0)*x15319*x15323))+(((-1.0)*x15319*x15324))+(((-1.0)*x15318*x15321))+x15322+((x15324*x15325))+((r22*x15317*x15321))+((cj6*r11*r22*x15317))+(((-1.0)*x15315*x15320*x15326))+((r12*x15317*x15318))+((r12*r20*sj6*x15317))+((x15316*x15320)));
j4eval[0]=x15327;
j4eval[1]=IKsign(x15327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15328=cj6*cj6;
IkReal x15329=cj5*cj5;
IkReal x15330=((1.0)*r11);
IkReal x15331=((1.0)*r20);
IkReal x15332=(cj0*cj2);
IkReal x15333=(r12*r22);
IkReal x15334=(cj6*sj6);
IkReal x15335=((1.0)*r21);
IkReal x15336=(r22*sj5);
IkReal x15337=(sj0*sj2);
IkReal x15338=(r12*sj5);
IkReal x15339=(cj5*sj6);
IkReal x15340=(r21*x15328);
IkReal x15341=(cj5*x15337);
IkReal x15342=(r10*x15329);
IkReal x15343=(r11*x15329);
IkReal x15344=(cj5*cj6*r21);
CheckValue<IkReal> x15345 = IKatan2WithCheck(IkReal(((((-1.0)*x15336*x15337))+(((-1.0)*cj6*x15335*x15341))+((x15332*x15336))+((x15332*x15344))+((r20*x15332*x15339))+(((-1.0)*x15331*x15337*x15339)))),((((-1.0)*cj6*x15331*x15332))+((cj6*r20*x15337))+((r21*sj6*x15332))+(((-1.0)*sj6*x15335*x15337))),IKFAST_ATAN2_MAGTHRESH);
if(!x15345.valid){
continue;
}
CheckValue<IkReal> x15346=IKPowWithIntegerCheck(IKsign((((r20*x15338*x15339))+((r11*r21))+((x15338*x15344))+(((-1.0)*x15328*x15331*x15342))+x15333+(((-1.0)*r20*x15330*x15334))+((r21*x15334*x15342))+((r20*x15334*x15343))+((r20*x15342))+(((-1.0)*x15330*x15340))+(((-1.0)*r10*x15334*x15335))+((x15340*x15343))+((r10*r20*x15328))+((cj5*cj6*r11*x15336))+((r10*x15336*x15339))+(((-1.0)*x15329*x15333)))),-1);
if(!x15346.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15345.value)+(((1.5707963267949)*(x15346.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15347=IKcos(j4);
IkReal x15348=IKsin(j4);
IkReal x15349=(cj0*cj2);
IkReal x15350=(cj5*sj6);
IkReal x15351=(cj5*r01);
IkReal x15352=(cj0*sj2);
IkReal x15353=(cj5*r21);
IkReal x15354=((1.0)*sj0);
IkReal x15355=(sj2*x15354);
IkReal x15356=(cj5*cj6*r11);
IkReal x15357=((1.0)*x15348);
IkReal x15358=(cj6*x15347);
IkReal x15359=(sj5*x15347);
IkReal x15360=(cj6*x15348);
IkReal x15361=(sj5*x15357);
IkReal x15362=((1.0)*sj6*x15347);
evalcond[0]=((((-1.0)*r21*sj6*x15357))+((x15353*x15358))+((r22*x15359))+((r20*x15347*x15350))+((r20*x15360)));
evalcond[1]=((((-1.0)*r20*x15350*x15357))+(((-1.0)*r22*x15361))+((r20*x15358))+(((-1.0)*cj6*x15353*x15357))+(((-1.0)*r21*x15362)));
evalcond[2]=(((cj2*sj0))+((r10*x15347*x15350))+((x15347*x15356))+((r10*x15360))+((r12*x15359))+x15352+(((-1.0)*r11*sj6*x15357)));
evalcond[3]=((((-1.0)*x15355))+((r00*x15347*x15350))+x15349+((r02*x15359))+((x15351*x15358))+(((-1.0)*r01*sj6*x15357))+((r00*x15360)));
evalcond[4]=((((-1.0)*r10*x15350*x15357))+((r10*x15358))+(((-1.0)*x15355))+(((-1.0)*r12*x15361))+(((-1.0)*r11*x15362))+x15349+(((-1.0)*x15356*x15357)));
evalcond[5]=((((-1.0)*r02*x15361))+(((-1.0)*cj6*x15351*x15357))+(((-1.0)*r00*x15350*x15357))+(((-1.0)*cj2*x15354))+(((-1.0)*x15352))+(((-1.0)*r01*x15362))+((r00*x15358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15363=(r21*sj6);
IkReal x15364=(sj0*sj2);
IkReal x15365=((1.0)*cj6);
IkReal x15366=(cj5*sj6);
IkReal x15367=(cj0*cj2);
IkReal x15368=(cj5*r21);
IkReal x15369=((1.0)*sj5);
IkReal x15370=(r20*x15367);
CheckValue<IkReal> x15371=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x15369))+(((-1.0)*r11*sj5*x15365)))),-1);
if(!x15371.valid){
continue;
}
CheckValue<IkReal> x15372 = IKatan2WithCheck(IkReal((((r22*sj5*x15367))+((cj6*x15367*x15368))+((x15366*x15370))+(((-1.0)*r22*x15364*x15369))+(((-1.0)*r20*x15364*x15366))+(((-1.0)*x15364*x15365*x15368)))),(((cj6*r20*x15364))+(((-1.0)*x15363*x15364))+((x15363*x15367))+(((-1.0)*x15365*x15370))),IKFAST_ATAN2_MAGTHRESH);
if(!x15372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15371.value)))+(x15372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15373=IKcos(j4);
IkReal x15374=IKsin(j4);
IkReal x15375=(cj0*cj2);
IkReal x15376=(cj5*sj6);
IkReal x15377=(cj5*r01);
IkReal x15378=(cj0*sj2);
IkReal x15379=(cj5*r21);
IkReal x15380=((1.0)*sj0);
IkReal x15381=(sj2*x15380);
IkReal x15382=(cj5*cj6*r11);
IkReal x15383=((1.0)*x15374);
IkReal x15384=(cj6*x15373);
IkReal x15385=(sj5*x15373);
IkReal x15386=(cj6*x15374);
IkReal x15387=(sj5*x15383);
IkReal x15388=((1.0)*sj6*x15373);
evalcond[0]=(((r22*x15385))+((r20*x15373*x15376))+((x15379*x15384))+(((-1.0)*r21*sj6*x15383))+((r20*x15386)));
evalcond[1]=((((-1.0)*r21*x15388))+(((-1.0)*r20*x15376*x15383))+(((-1.0)*r22*x15387))+(((-1.0)*cj6*x15379*x15383))+((r20*x15384)));
evalcond[2]=(((cj2*sj0))+((x15373*x15382))+((r12*x15385))+((r10*x15386))+((r10*x15373*x15376))+x15378+(((-1.0)*r11*sj6*x15383)));
evalcond[3]=(((x15377*x15384))+x15375+((r02*x15385))+(((-1.0)*x15381))+((r00*x15373*x15376))+(((-1.0)*r01*sj6*x15383))+((r00*x15386)));
evalcond[4]=(((r10*x15384))+(((-1.0)*x15382*x15383))+x15375+(((-1.0)*r12*x15387))+(((-1.0)*x15381))+(((-1.0)*r11*x15388))+(((-1.0)*r10*x15376*x15383)));
evalcond[5]=((((-1.0)*x15378))+(((-1.0)*r02*x15387))+(((-1.0)*cj6*x15377*x15383))+(((-1.0)*r00*x15376*x15383))+(((-1.0)*r01*x15388))+(((-1.0)*cj2*x15380))+((r00*x15384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15389=(cj5*r21);
IkReal x15390=(cj0*sj2);
IkReal x15391=(r22*sj5);
IkReal x15392=((1.0)*r20);
IkReal x15393=(cj5*r20);
IkReal x15394=(cj2*cj6*sj0);
IkReal x15395=(cj2*sj0*sj6);
CheckValue<IkReal> x15396 = IKatan2WithCheck(IkReal((((cj6*x15389*x15390))+((sj6*x15390*x15393))+((x15393*x15395))+((x15390*x15391))+((cj2*sj0*x15391))+((x15389*x15394)))),(((r21*x15395))+(((-1.0)*x15392*x15394))+((r21*sj6*x15390))+(((-1.0)*cj6*x15390*x15392))),IKFAST_ATAN2_MAGTHRESH);
if(!x15396.valid){
continue;
}
CheckValue<IkReal> x15397=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15397.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15396.value)+(((1.5707963267949)*(x15397.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15398=IKcos(j4);
IkReal x15399=IKsin(j4);
IkReal x15400=(cj0*cj2);
IkReal x15401=(cj5*sj6);
IkReal x15402=(cj5*r01);
IkReal x15403=(cj0*sj2);
IkReal x15404=(cj5*r21);
IkReal x15405=((1.0)*sj0);
IkReal x15406=(sj2*x15405);
IkReal x15407=(cj5*cj6*r11);
IkReal x15408=((1.0)*x15399);
IkReal x15409=(cj6*x15398);
IkReal x15410=(sj5*x15398);
IkReal x15411=(cj6*x15399);
IkReal x15412=(sj5*x15408);
IkReal x15413=((1.0)*sj6*x15398);
evalcond[0]=((((-1.0)*r21*sj6*x15408))+((r20*x15411))+((x15404*x15409))+((r22*x15410))+((r20*x15398*x15401)));
evalcond[1]=((((-1.0)*r21*x15413))+(((-1.0)*r20*x15401*x15408))+(((-1.0)*r22*x15412))+((r20*x15409))+(((-1.0)*cj6*x15404*x15408)));
evalcond[2]=(((cj2*sj0))+((r12*x15410))+(((-1.0)*r11*sj6*x15408))+((x15398*x15407))+x15403+((r10*x15411))+((r10*x15398*x15401)));
evalcond[3]=((((-1.0)*x15406))+(((-1.0)*r01*sj6*x15408))+((r00*x15411))+((r02*x15410))+((x15402*x15409))+x15400+((r00*x15398*x15401)));
evalcond[4]=((((-1.0)*x15407*x15408))+(((-1.0)*x15406))+(((-1.0)*r11*x15413))+(((-1.0)*r10*x15401*x15408))+(((-1.0)*r12*x15412))+x15400+((r10*x15409)));
evalcond[5]=((((-1.0)*r00*x15401*x15408))+(((-1.0)*x15403))+(((-1.0)*r01*x15413))+(((-1.0)*cj2*x15405))+(((-1.0)*cj6*x15402*x15408))+((r00*x15409))+(((-1.0)*r02*x15412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15414=(cj1*r12);
IkReal x15415=(cj5*r02);
IkReal x15416=((69.0)*sj2);
IkReal x15417=((69.0)*cj1);
IkReal x15418=(cj6*r11);
IkReal x15419=(r10*sj6);
IkReal x15420=(cj6*r01*sj5);
IkReal x15421=(r00*sj5*sj6);
IkReal x15422=((374.29)*cj1*sj5);
IkReal x15423=((10.0)*cj1*cj5);
CheckValue<IkReal> x15424=IKPowWithIntegerCheck(((((364.42)*(cj1*cj1)))+x15417+(((-1.0)*cj2*sj1*x15417))),-1);
if(!x15424.valid){
continue;
}
CheckValue<IkReal> x15425=IKPowWithIntegerCheck(cj1,-1);
if(!x15425.valid){
continue;
}
if( IKabs(((x15424.value)*(((((-1.0)*x15419*x15423))+(((-1.0)*x15416*x15420))+(((-1.0)*x15416*x15421))+(((-374.29)*cj5*x15414))+(((1000.0)*cj1*py))+((x15418*x15422))+((x15419*x15422))+(((-1.0)*x15418*x15423))+((x15415*x15416))+(((-10.0)*sj5*x15414)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15425.value)*(((((-1.0)*x15415))+x15421+x15420)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15424.value)*(((((-1.0)*x15419*x15423))+(((-1.0)*x15416*x15420))+(((-1.0)*x15416*x15421))+(((-374.29)*cj5*x15414))+(((1000.0)*cj1*py))+((x15418*x15422))+((x15419*x15422))+(((-1.0)*x15418*x15423))+((x15415*x15416))+(((-10.0)*sj5*x15414))))))+IKsqr(((x15425.value)*(((((-1.0)*x15415))+x15421+x15420))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x15424.value)*(((((-1.0)*x15419*x15423))+(((-1.0)*x15416*x15420))+(((-1.0)*x15416*x15421))+(((-374.29)*cj5*x15414))+(((1000.0)*cj1*py))+((x15418*x15422))+((x15419*x15422))+(((-1.0)*x15418*x15423))+((x15415*x15416))+(((-10.0)*sj5*x15414))))), ((x15425.value)*(((((-1.0)*x15415))+x15421+x15420))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x15426=IKcos(j0);
IkReal x15427=IKsin(j0);
IkReal x15428=((0.01)*cj5);
IkReal x15429=(cj6*r11);
IkReal x15430=(r10*sj6);
IkReal x15431=((0.37429)*sj5);
IkReal x15432=(cj5*r12);
IkReal x15433=((1.0)*cj1);
IkReal x15434=((0.36442)*cj1);
IkReal x15435=(r00*sj6);
IkReal x15436=(cj6*r01);
IkReal x15437=(cj5*r02);
IkReal x15438=(cj2*sj1);
IkReal x15439=((0.01)*sj5);
IkReal x15440=((0.069)*x15427);
IkReal x15441=((0.069)*x15426);
evalcond[0]=(((sj5*x15436))+((sj5*x15435))+(((-1.0)*x15426*x15433))+(((-1.0)*x15437)));
evalcond[1]=(((sj5*x15430))+((sj5*x15429))+(((-1.0)*x15427*x15433))+(((-1.0)*x15432)));
evalcond[2]=((((-1.0)*x15431*x15435))+(((-1.0)*x15431*x15436))+(((-1.0)*x15438*x15441))+((r02*x15439))+(((0.37429)*x15437))+(((-1.0)*px))+((x15428*x15435))+((x15428*x15436))+x15441+((x15426*x15434))+(((-1.0)*sj2*x15440)));
evalcond[3]=((((-1.0)*x15429*x15431))+((sj2*x15441))+(((-1.0)*x15438*x15440))+(((0.37429)*x15432))+((r12*x15439))+(((-1.0)*py))+((x15428*x15430))+x15440+((x15428*x15429))+((x15427*x15434))+(((-1.0)*x15430*x15431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15442=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15442;
j4eval[1]=IKsign(x15442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15443=((1.0)*sj5);
IkReal x15444=(((cj5*r12))+(((-1.0)*r10*sj6*x15443))+(((-1.0)*cj6*r11*x15443)));
j4eval[0]=x15444;
j4eval[1]=IKsign(x15444);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15445=cj5*cj5;
IkReal x15446=cj6*cj6;
IkReal x15447=r22*r22;
IkReal x15448=r21*r21;
IkReal x15449=r20*r20;
IkReal x15450=((1.0)*cj5);
IkReal x15451=(cj6*r21);
IkReal x15452=(r20*sj6);
IkReal x15453=(cj1*cj2);
IkReal x15454=(cj1*sj2);
IkReal x15455=(r22*sj5);
IkReal x15456=(cj6*r20);
IkReal x15457=((2.0)*cj5);
IkReal x15458=(sj6*x15453);
IkReal x15459=((1.0)*x15448);
IkReal x15460=(x15446*x15449);
IkReal x15461=(((x15445*x15460))+(((-1.0)*x15452*x15455*x15457))+(((-1.0)*x15460))+(((-1.0)*x15445*x15449))+(((2.0)*x15451*x15452))+(((-1.0)*x15451*x15455*x15457))+(((-1.0)*x15459))+((x15446*x15448))+((x15445*x15447))+(((-1.0)*x15445*x15446*x15459))+(((-2.0)*x15445*x15451*x15452))+(((-1.0)*x15447)));
j4eval[0]=x15461;
j4eval[1]=IKsign(x15461);
j4eval[2]=((IKabs(((((-1.0)*x15453*x15455))+(((-1.0)*r21*sj6*x15454))+((x15454*x15456))+(((-1.0)*x15450*x15452*x15453))+(((-1.0)*x15450*x15451*x15453)))))+(IKabs(((((-1.0)*x15453*x15456))+((r21*x15458))+(((-1.0)*x15450*x15452*x15454))+(((-1.0)*x15454*x15455))+(((-1.0)*x15450*x15451*x15454))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x15462=((0.069)*cj0);
IkReal x15463=((0.01)*cj5);
IkReal x15464=(cj6*r11);
IkReal x15465=(r20*sj6);
IkReal x15466=((0.069)*sj0);
IkReal x15467=((0.01)*sj5);
IkReal x15468=((1.0)*cj5);
IkReal x15469=(cj6*r01);
IkReal x15470=((0.37429)*cj5);
IkReal x15471=((0.37429)*sj5);
IkReal x15472=(cj6*r21);
IkReal x15473=(r10*sj5*sj6);
IkReal x15474=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+((r22*x15467))+((r22*x15470))+((x15463*x15472))+((x15463*x15465))+(((-1.0)*pz))+(((-1.0)*x15471*x15472))+(((-1.0)*x15465*x15471)));
evalcond[2]=(((r00*sj6*x15463))+((r02*x15470))+((r02*x15467))+(((-1.0)*sj2*x15466))+(((-1.0)*cj2*x15462))+((x15463*x15469))+(((-1.0)*px))+x15462+(((-1.0)*x15469*x15471))+(((-1.0)*r00*sj6*x15471)));
evalcond[3]=((((-1.0)*cj2*x15466))+(((-1.0)*r10*sj6*x15471))+((x15463*x15464))+((r10*sj6*x15463))+(((-1.0)*py))+((r12*x15470))+x15466+((r12*x15467))+(((-1.0)*x15464*x15471))+((sj2*x15462)));
evalcond[4]=((1.0)+(((-1.0)*r22*x15468))+((sj5*x15472))+((sj5*x15465)));
evalcond[5]=(x15474+((sj5*x15469))+(((-1.0)*r02*x15468)));
evalcond[6]=(x15473+((sj5*x15464))+(((-1.0)*r12*x15468)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15475=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15475;
j4eval[1]=IKsign(x15475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15476=((1.0)*sj5);
IkReal x15477=(((cj5*r12))+(((-1.0)*r10*sj6*x15476))+(((-1.0)*cj6*r11*x15476)));
j4eval[0]=x15477;
j4eval[1]=IKsign(x15477);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x15478=cj6*cj6;
IkReal x15479=cj5*cj5;
IkReal x15480=(cj5*sj5);
IkReal x15481=(cj6*r21);
IkReal x15482=((1.0)*r11);
IkReal x15483=(r10*r20);
IkReal x15484=(r10*sj6);
IkReal x15485=(r12*r22);
IkReal x15486=(r21*x15478);
IkReal x15487=(cj6*r20*sj6);
IkReal x15488=(r11*x15479);
IkReal x15489=((1.0)*x15479);
IkReal x15490=(((r12*r20*sj6*x15480))+((x15486*x15488))+((cj6*r11*r22*x15480))+((r11*r21))+((x15479*x15481*x15484))+(((-1.0)*x15481*x15484))+(((-1.0)*x15478*x15483*x15489))+((r22*x15480*x15484))+((r12*x15480*x15481))+((x15479*x15483))+(((-1.0)*x15485*x15489))+x15485+(((-1.0)*x15482*x15487))+(((-1.0)*x15482*x15486))+((x15487*x15488))+((x15478*x15483)));
j4eval[0]=x15490;
j4eval[1]=IKsign(x15490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15491=cj6*cj6;
IkReal x15492=cj5*cj5;
IkReal x15493=((1.0)*r11);
IkReal x15494=(cj6*r20);
IkReal x15495=(cj0*cj2);
IkReal x15496=(cj5*r20);
IkReal x15497=(r12*r22);
IkReal x15498=(cj6*r21);
IkReal x15499=(sj0*sj2);
IkReal x15500=(r22*sj5);
IkReal x15501=(r12*sj5);
IkReal x15502=(r10*sj6);
IkReal x15503=(r21*x15491);
IkReal x15504=(sj6*x15499);
IkReal x15505=((1.0)*x15492);
IkReal x15506=(r10*x15492);
IkReal x15507=(r11*x15492);
IkReal x15508=(r10*r20*x15491);
CheckValue<IkReal> x15509 = IKatan2WithCheck(IkReal((((sj6*x15495*x15496))+((cj5*x15495*x15498))+((x15499*x15500))+((x15495*x15500))+((cj5*x15498*x15499))+((x15496*x15504)))),((((-1.0)*x15494*x15495))+(((-1.0)*x15494*x15499))+((r21*x15504))+((r21*sj6*x15495))),IKFAST_ATAN2_MAGTHRESH);
if(!x15509.valid){
continue;
}
CheckValue<IkReal> x15510=IKPowWithIntegerCheck(IKsign((((cj5*x15498*x15501))+(((-1.0)*x15497*x15505))+(((-1.0)*sj6*x15493*x15494))+((r11*r21))+((cj5*cj6*r11*x15500))+((x15503*x15507))+((sj6*x15496*x15501))+(((-1.0)*x15493*x15503))+(((-1.0)*x15505*x15508))+((cj5*x15500*x15502))+x15497+x15508+((sj6*x15494*x15507))+((r20*x15506))+((x15492*x15498*x15502))+(((-1.0)*x15498*x15502)))),-1);
if(!x15510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15509.value)+(((1.5707963267949)*(x15510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15511=IKcos(j4);
IkReal x15512=IKsin(j4);
IkReal x15513=(cj0*sj2);
IkReal x15514=(cj0*cj2);
IkReal x15515=(cj5*sj6);
IkReal x15516=(cj5*r01);
IkReal x15517=(cj5*r21);
IkReal x15518=((1.0)*sj0);
IkReal x15519=(cj2*x15518);
IkReal x15520=(cj5*cj6*r11);
IkReal x15521=((1.0)*x15512);
IkReal x15522=(cj6*x15511);
IkReal x15523=(sj5*x15511);
IkReal x15524=(cj6*x15512);
IkReal x15525=(sj5*x15521);
IkReal x15526=((1.0)*sj6*x15511);
evalcond[0]=(((r20*x15511*x15515))+((r20*x15524))+(((-1.0)*r21*sj6*x15521))+((x15517*x15522))+((r22*x15523)));
evalcond[1]=((((-1.0)*r21*x15526))+((r20*x15522))+(((-1.0)*r22*x15525))+(((-1.0)*r20*x15515*x15521))+(((-1.0)*cj6*x15517*x15521)));
evalcond[2]=(((r10*x15524))+((r10*x15511*x15515))+((x15511*x15520))+(((-1.0)*r11*sj6*x15521))+((r12*x15523))+(((-1.0)*x15519))+x15513);
evalcond[3]=((((-1.0)*r01*sj6*x15521))+((r02*x15523))+((x15516*x15522))+((r00*x15511*x15515))+((r00*x15524))+(((-1.0)*sj2*x15518))+(((-1.0)*x15514)));
evalcond[4]=((((-1.0)*r11*x15526))+((r10*x15522))+(((-1.0)*x15520*x15521))+(((-1.0)*r12*x15525))+(((-1.0)*r10*x15515*x15521))+((sj0*sj2))+x15514);
evalcond[5]=((((-1.0)*r00*x15515*x15521))+((r00*x15522))+(((-1.0)*r01*x15526))+(((-1.0)*r02*x15525))+(((-1.0)*x15519))+x15513+(((-1.0)*cj6*x15516*x15521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15527=((1.0)*r21);
IkReal x15528=(sj0*sj2);
IkReal x15529=(cj0*cj2);
IkReal x15530=((1.0)*sj5);
IkReal x15531=(cj6*x15529);
IkReal x15532=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x15533 = IKatan2WithCheck(IkReal(((((-1.0)*x15528*x15532))+(((-1.0)*x15529*x15532))+(((-1.0)*cj5*x15527*x15531))+(((-1.0)*r22*x15529*x15530))+(((-1.0)*cj5*cj6*x15527*x15528))+(((-1.0)*r22*x15528*x15530)))),((((-1.0)*sj6*x15527*x15528))+(((-1.0)*sj6*x15527*x15529))+((r20*x15531))+((cj6*r20*x15528))),IKFAST_ATAN2_MAGTHRESH);
if(!x15533.valid){
continue;
}
CheckValue<IkReal> x15534=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x15530))+(((-1.0)*cj6*r11*x15530)))),-1);
if(!x15534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15533.value)+(((1.5707963267949)*(x15534.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15535=IKcos(j4);
IkReal x15536=IKsin(j4);
IkReal x15537=(cj0*sj2);
IkReal x15538=(cj0*cj2);
IkReal x15539=(cj5*sj6);
IkReal x15540=(cj5*r01);
IkReal x15541=(cj5*r21);
IkReal x15542=((1.0)*sj0);
IkReal x15543=(cj2*x15542);
IkReal x15544=(cj5*cj6*r11);
IkReal x15545=((1.0)*x15536);
IkReal x15546=(cj6*x15535);
IkReal x15547=(sj5*x15535);
IkReal x15548=(cj6*x15536);
IkReal x15549=(sj5*x15545);
IkReal x15550=((1.0)*sj6*x15535);
evalcond[0]=(((x15541*x15546))+((r20*x15548))+((r20*x15535*x15539))+(((-1.0)*r21*sj6*x15545))+((r22*x15547)));
evalcond[1]=(((r20*x15546))+(((-1.0)*r22*x15549))+(((-1.0)*cj6*x15541*x15545))+(((-1.0)*r20*x15539*x15545))+(((-1.0)*r21*x15550)));
evalcond[2]=(((r10*x15548))+(((-1.0)*x15543))+(((-1.0)*r11*sj6*x15545))+((r10*x15535*x15539))+x15537+((r12*x15547))+((x15535*x15544)));
evalcond[3]=(((r02*x15547))+(((-1.0)*r01*sj6*x15545))+((r00*x15535*x15539))+(((-1.0)*x15538))+((x15540*x15546))+((r00*x15548))+(((-1.0)*sj2*x15542)));
evalcond[4]=((((-1.0)*r10*x15539*x15545))+((r10*x15546))+(((-1.0)*x15544*x15545))+((sj0*sj2))+(((-1.0)*r11*x15550))+x15538+(((-1.0)*r12*x15549)));
evalcond[5]=((((-1.0)*r00*x15539*x15545))+(((-1.0)*r01*x15550))+(((-1.0)*x15543))+(((-1.0)*cj6*x15540*x15545))+((r00*x15546))+x15537+(((-1.0)*r02*x15549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15551=(r22*sj5);
IkReal x15552=(cj6*r20);
IkReal x15553=(cj0*sj2);
IkReal x15554=(r21*sj6);
IkReal x15555=((1.0)*cj2*sj0);
IkReal x15556=(cj5*cj6*r21);
IkReal x15557=(cj5*r20*sj6);
CheckValue<IkReal> x15558 = IKatan2WithCheck(IkReal(((((-1.0)*x15551*x15555))+((x15551*x15553))+(((-1.0)*x15555*x15556))+(((-1.0)*x15555*x15557))+((x15553*x15557))+((x15553*x15556)))),(((cj2*sj0*x15552))+(((-1.0)*x15552*x15553))+(((-1.0)*x15554*x15555))+((x15553*x15554))),IKFAST_ATAN2_MAGTHRESH);
if(!x15558.valid){
continue;
}
CheckValue<IkReal> x15559=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15558.value)+(((1.5707963267949)*(x15559.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15560=IKcos(j4);
IkReal x15561=IKsin(j4);
IkReal x15562=(cj0*sj2);
IkReal x15563=(cj0*cj2);
IkReal x15564=(cj5*sj6);
IkReal x15565=(cj5*r01);
IkReal x15566=(cj5*r21);
IkReal x15567=((1.0)*sj0);
IkReal x15568=(cj2*x15567);
IkReal x15569=(cj5*cj6*r11);
IkReal x15570=((1.0)*x15561);
IkReal x15571=(cj6*x15560);
IkReal x15572=(sj5*x15560);
IkReal x15573=(cj6*x15561);
IkReal x15574=(sj5*x15570);
IkReal x15575=((1.0)*sj6*x15560);
evalcond[0]=(((x15566*x15571))+((r22*x15572))+((r20*x15573))+((r20*x15560*x15564))+(((-1.0)*r21*sj6*x15570)));
evalcond[1]=((((-1.0)*cj6*x15566*x15570))+(((-1.0)*r22*x15574))+(((-1.0)*r21*x15575))+(((-1.0)*r20*x15564*x15570))+((r20*x15571)));
evalcond[2]=(((r10*x15573))+((x15560*x15569))+((r12*x15572))+(((-1.0)*r11*sj6*x15570))+x15562+(((-1.0)*x15568))+((r10*x15560*x15564)));
evalcond[3]=((((-1.0)*sj2*x15567))+((r02*x15572))+((x15565*x15571))+(((-1.0)*r01*sj6*x15570))+((r00*x15573))+((r00*x15560*x15564))+(((-1.0)*x15563)));
evalcond[4]=(((r10*x15571))+(((-1.0)*r12*x15574))+(((-1.0)*x15569*x15570))+(((-1.0)*r11*x15575))+((sj0*sj2))+(((-1.0)*r10*x15564*x15570))+x15563);
evalcond[5]=((((-1.0)*r02*x15574))+(((-1.0)*r01*x15575))+(((-1.0)*cj6*x15565*x15570))+((r00*x15571))+x15562+(((-1.0)*x15568))+(((-1.0)*r00*x15564*x15570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15576=((0.069)*cj0);
IkReal x15577=((0.01)*cj5);
IkReal x15578=(cj6*r11);
IkReal x15579=(r20*sj6);
IkReal x15580=((0.069)*sj0);
IkReal x15581=((0.01)*sj5);
IkReal x15582=((1.0)*cj5);
IkReal x15583=(cj6*r01);
IkReal x15584=((0.37429)*cj5);
IkReal x15585=((0.37429)*sj5);
IkReal x15586=(cj6*r21);
IkReal x15587=(r10*sj5*sj6);
IkReal x15588=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.36442)+((r22*x15581))+((r22*x15584))+(((-1.0)*x15585*x15586))+(((-1.0)*pz))+(((-1.0)*x15579*x15585))+((x15577*x15586))+((x15577*x15579)));
evalcond[2]=(((cj2*x15576))+(((-1.0)*sj2*x15580))+(((-1.0)*r00*sj6*x15585))+(((-1.0)*px))+((x15577*x15583))+((r00*sj6*x15577))+x15576+((r02*x15584))+((r02*x15581))+(((-1.0)*x15583*x15585)));
evalcond[3]=(((r12*x15581))+((r12*x15584))+(((-1.0)*py))+((sj2*x15576))+((r10*sj6*x15577))+(((-1.0)*x15578*x15585))+((cj2*x15580))+x15580+((x15577*x15578))+(((-1.0)*r10*sj6*x15585)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x15582))+((sj5*x15579))+((sj5*x15586)));
evalcond[5]=((((-1.0)*r02*x15582))+((sj5*x15583))+x15588);
evalcond[6]=(((sj5*x15578))+(((-1.0)*r12*x15582))+x15587);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15589=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x15589;
j4eval[1]=IKsign(x15589);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15590=((1.0)*sj5);
IkReal x15591=(((cj5*r12))+(((-1.0)*cj6*r11*x15590))+(((-1.0)*r10*sj6*x15590)));
j4eval[0]=x15591;
j4eval[1]=IKsign(x15591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x15592=cj6*cj6;
IkReal x15593=cj5*cj5;
IkReal x15594=(cj5*sj5);
IkReal x15595=(cj6*r21);
IkReal x15596=((1.0)*r11);
IkReal x15597=(r10*r20);
IkReal x15598=(r10*sj6);
IkReal x15599=(r12*r22);
IkReal x15600=(r21*x15592);
IkReal x15601=(cj6*r20*sj6);
IkReal x15602=(r11*x15593);
IkReal x15603=((1.0)*x15593);
IkReal x15604=(((cj6*r11*r22*x15594))+(((-1.0)*x15595*x15598))+((r22*x15594*x15598))+(((-1.0)*x15592*x15597*x15603))+((r11*r21))+((r12*r20*sj6*x15594))+((r12*x15594*x15595))+(((-1.0)*x15596*x15600))+(((-1.0)*x15596*x15601))+((x15593*x15595*x15598))+(((-1.0)*x15599*x15603))+((x15592*x15597))+((x15593*x15597))+x15599+((x15601*x15602))+((x15600*x15602)));
j4eval[0]=x15604;
j4eval[1]=IKsign(x15604);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15605=cj6*cj6;
IkReal x15606=cj5*cj5;
IkReal x15607=((1.0)*r11);
IkReal x15608=((1.0)*r20);
IkReal x15609=(cj0*cj2);
IkReal x15610=(r12*r22);
IkReal x15611=(cj6*sj6);
IkReal x15612=((1.0)*r21);
IkReal x15613=(r22*sj5);
IkReal x15614=(sj0*sj2);
IkReal x15615=(r12*sj5);
IkReal x15616=(cj5*sj6);
IkReal x15617=(r21*x15605);
IkReal x15618=(cj5*x15614);
IkReal x15619=(r10*x15606);
IkReal x15620=(r11*x15606);
IkReal x15621=(cj5*cj6*r21);
CheckValue<IkReal> x15622 = IKatan2WithCheck(IkReal(((((-1.0)*x15608*x15614*x15616))+((x15609*x15621))+((r20*x15609*x15616))+((x15609*x15613))+(((-1.0)*cj6*x15612*x15618))+(((-1.0)*x15613*x15614)))),((((-1.0)*cj6*x15608*x15609))+(((-1.0)*sj6*x15612*x15614))+((cj6*r20*x15614))+((r21*sj6*x15609))),IKFAST_ATAN2_MAGTHRESH);
if(!x15622.valid){
continue;
}
CheckValue<IkReal> x15623=IKPowWithIntegerCheck(IKsign((((r11*r21))+((r10*x15613*x15616))+((cj5*cj6*r11*x15613))+((x15615*x15621))+(((-1.0)*x15607*x15617))+(((-1.0)*x15606*x15610))+x15610+((r10*r20*x15605))+(((-1.0)*x15605*x15608*x15619))+((r20*x15611*x15620))+((r21*x15611*x15619))+((r20*x15619))+(((-1.0)*r20*x15607*x15611))+((x15617*x15620))+(((-1.0)*r10*x15611*x15612))+((r20*x15615*x15616)))),-1);
if(!x15623.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15622.value)+(((1.5707963267949)*(x15623.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15624=IKcos(j4);
IkReal x15625=IKsin(j4);
IkReal x15626=(cj0*cj2);
IkReal x15627=(cj5*sj6);
IkReal x15628=(cj5*r01);
IkReal x15629=(cj0*sj2);
IkReal x15630=(cj5*r21);
IkReal x15631=((1.0)*sj0);
IkReal x15632=(sj2*x15631);
IkReal x15633=(cj5*cj6*r11);
IkReal x15634=((1.0)*x15625);
IkReal x15635=(cj6*x15624);
IkReal x15636=(sj5*x15624);
IkReal x15637=(cj6*x15625);
IkReal x15638=(sj5*x15634);
IkReal x15639=((1.0)*sj6*x15624);
evalcond[0]=(((r20*x15637))+((r20*x15624*x15627))+(((-1.0)*r21*sj6*x15634))+((r22*x15636))+((x15630*x15635)));
evalcond[1]=((((-1.0)*r21*x15639))+((r20*x15635))+(((-1.0)*cj6*x15630*x15634))+(((-1.0)*r22*x15638))+(((-1.0)*r20*x15627*x15634)));
evalcond[2]=(((cj2*sj0))+((x15624*x15633))+((r10*x15624*x15627))+x15629+((r12*x15636))+(((-1.0)*r11*sj6*x15634))+((r10*x15637)));
evalcond[3]=(((r02*x15636))+((r00*x15637))+x15626+((r00*x15624*x15627))+(((-1.0)*x15632))+(((-1.0)*r01*sj6*x15634))+((x15628*x15635)));
evalcond[4]=((((-1.0)*x15633*x15634))+(((-1.0)*r12*x15638))+(((-1.0)*r11*x15639))+x15626+(((-1.0)*r10*x15627*x15634))+(((-1.0)*x15632))+((r10*x15635)));
evalcond[5]=(((r00*x15635))+(((-1.0)*r00*x15627*x15634))+(((-1.0)*r01*x15639))+(((-1.0)*cj6*x15628*x15634))+(((-1.0)*x15629))+(((-1.0)*r02*x15638))+(((-1.0)*cj2*x15631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15640=(r21*sj6);
IkReal x15641=(sj0*sj2);
IkReal x15642=((1.0)*cj6);
IkReal x15643=(cj5*sj6);
IkReal x15644=(cj0*cj2);
IkReal x15645=(cj5*r21);
IkReal x15646=((1.0)*sj5);
IkReal x15647=(r20*x15644);
CheckValue<IkReal> x15648=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x15646))+(((-1.0)*r11*sj5*x15642)))),-1);
if(!x15648.valid){
continue;
}
CheckValue<IkReal> x15649 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15641*x15646))+((cj6*x15644*x15645))+((r22*sj5*x15644))+(((-1.0)*r20*x15641*x15643))+(((-1.0)*x15641*x15642*x15645))+((x15643*x15647)))),(((cj6*r20*x15641))+((x15640*x15644))+(((-1.0)*x15640*x15641))+(((-1.0)*x15642*x15647))),IKFAST_ATAN2_MAGTHRESH);
if(!x15649.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15648.value)))+(x15649.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15650=IKcos(j4);
IkReal x15651=IKsin(j4);
IkReal x15652=(cj0*cj2);
IkReal x15653=(cj5*sj6);
IkReal x15654=(cj5*r01);
IkReal x15655=(cj0*sj2);
IkReal x15656=(cj5*r21);
IkReal x15657=((1.0)*sj0);
IkReal x15658=(sj2*x15657);
IkReal x15659=(cj5*cj6*r11);
IkReal x15660=((1.0)*x15651);
IkReal x15661=(cj6*x15650);
IkReal x15662=(sj5*x15650);
IkReal x15663=(cj6*x15651);
IkReal x15664=(sj5*x15660);
IkReal x15665=((1.0)*sj6*x15650);
evalcond[0]=(((r20*x15663))+((r22*x15662))+(((-1.0)*r21*sj6*x15660))+((r20*x15650*x15653))+((x15656*x15661)));
evalcond[1]=((((-1.0)*r21*x15665))+((r20*x15661))+(((-1.0)*r20*x15653*x15660))+(((-1.0)*cj6*x15656*x15660))+(((-1.0)*r22*x15664)));
evalcond[2]=(((cj2*sj0))+((r10*x15663))+((r12*x15662))+((r10*x15650*x15653))+x15655+((x15650*x15659))+(((-1.0)*r11*sj6*x15660)));
evalcond[3]=(((r02*x15662))+((x15654*x15661))+((r00*x15663))+x15652+(((-1.0)*x15658))+((r00*x15650*x15653))+(((-1.0)*r01*sj6*x15660)));
evalcond[4]=(((r10*x15661))+x15652+(((-1.0)*x15658))+(((-1.0)*r12*x15664))+(((-1.0)*r11*x15665))+(((-1.0)*x15659*x15660))+(((-1.0)*r10*x15653*x15660)));
evalcond[5]=((((-1.0)*cj6*x15654*x15660))+((r00*x15661))+(((-1.0)*cj2*x15657))+(((-1.0)*x15655))+(((-1.0)*r01*x15665))+(((-1.0)*r00*x15653*x15660))+(((-1.0)*r02*x15664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15666=(cj5*r21);
IkReal x15667=(cj0*sj2);
IkReal x15668=(r22*sj5);
IkReal x15669=((1.0)*r20);
IkReal x15670=(cj5*r20);
IkReal x15671=(cj2*cj6*sj0);
IkReal x15672=(cj2*sj0*sj6);
CheckValue<IkReal> x15673 = IKatan2WithCheck(IkReal((((sj6*x15667*x15670))+((cj2*sj0*x15668))+((cj6*x15666*x15667))+((x15666*x15671))+((x15667*x15668))+((x15670*x15672)))),((((-1.0)*cj6*x15667*x15669))+((r21*x15672))+(((-1.0)*x15669*x15671))+((r21*sj6*x15667))),IKFAST_ATAN2_MAGTHRESH);
if(!x15673.valid){
continue;
}
CheckValue<IkReal> x15674=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15674.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15673.value)+(((1.5707963267949)*(x15674.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15675=IKcos(j4);
IkReal x15676=IKsin(j4);
IkReal x15677=(cj0*cj2);
IkReal x15678=(cj5*sj6);
IkReal x15679=(cj5*r01);
IkReal x15680=(cj0*sj2);
IkReal x15681=(cj5*r21);
IkReal x15682=((1.0)*sj0);
IkReal x15683=(sj2*x15682);
IkReal x15684=(cj5*cj6*r11);
IkReal x15685=((1.0)*x15676);
IkReal x15686=(cj6*x15675);
IkReal x15687=(sj5*x15675);
IkReal x15688=(cj6*x15676);
IkReal x15689=(sj5*x15685);
IkReal x15690=((1.0)*sj6*x15675);
evalcond[0]=(((r20*x15688))+(((-1.0)*r21*sj6*x15685))+((x15681*x15686))+((r22*x15687))+((r20*x15675*x15678)));
evalcond[1]=(((r20*x15686))+(((-1.0)*r20*x15678*x15685))+(((-1.0)*r21*x15690))+(((-1.0)*r22*x15689))+(((-1.0)*cj6*x15681*x15685)));
evalcond[2]=(((cj2*sj0))+((r10*x15688))+(((-1.0)*r11*sj6*x15685))+x15680+((r10*x15675*x15678))+((r12*x15687))+((x15675*x15684)));
evalcond[3]=(((r00*x15675*x15678))+((r00*x15688))+(((-1.0)*r01*sj6*x15685))+((x15679*x15686))+x15677+((r02*x15687))+(((-1.0)*x15683)));
evalcond[4]=(((r10*x15686))+(((-1.0)*r10*x15678*x15685))+(((-1.0)*x15684*x15685))+(((-1.0)*r11*x15690))+x15677+(((-1.0)*x15683))+(((-1.0)*r12*x15689)));
evalcond[5]=((((-1.0)*r00*x15678*x15685))+(((-1.0)*r01*x15690))+((r00*x15686))+(((-1.0)*cj2*x15682))+(((-1.0)*r02*x15689))+(((-1.0)*cj6*x15679*x15685))+(((-1.0)*x15680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15691=cj5*cj5;
IkReal x15692=cj6*cj6;
IkReal x15693=r22*r22;
IkReal x15694=r21*r21;
IkReal x15695=r20*r20;
IkReal x15696=((1.0)*cj5);
IkReal x15697=(cj6*r21);
IkReal x15698=(r20*sj6);
IkReal x15699=(cj1*cj2);
IkReal x15700=(cj1*sj2);
IkReal x15701=(r22*sj5);
IkReal x15702=(cj6*r20);
IkReal x15703=((2.0)*cj5);
IkReal x15704=(sj6*x15699);
IkReal x15705=((1.0)*x15694);
IkReal x15706=(x15692*x15695);
CheckValue<IkReal> x15707=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15697*x15701*x15703))+((x15691*x15693))+(((-1.0)*x15705))+(((-1.0)*x15698*x15701*x15703))+((x15692*x15694))+(((-1.0)*x15691*x15695))+(((-1.0)*x15691*x15692*x15705))+(((-2.0)*x15691*x15697*x15698))+((x15691*x15706))+(((-1.0)*x15693))+(((-1.0)*x15706))+(((2.0)*x15697*x15698)))),-1);
if(!x15707.valid){
continue;
}
CheckValue<IkReal> x15708 = IKatan2WithCheck(IkReal(((((-1.0)*x15699*x15702))+(((-1.0)*x15696*x15698*x15700))+((r21*x15704))+(((-1.0)*x15696*x15697*x15700))+(((-1.0)*x15700*x15701)))),((((-1.0)*x15696*x15697*x15699))+(((-1.0)*x15696*x15698*x15699))+(((-1.0)*x15699*x15701))+(((-1.0)*r21*sj6*x15700))+((x15700*x15702))),IKFAST_ATAN2_MAGTHRESH);
if(!x15708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15707.value)))+(x15708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15709=IKcos(j4);
IkReal x15710=IKsin(j4);
IkReal x15711=(cj0*sj1);
IkReal x15712=((1.0)*cj2);
IkReal x15713=(cj5*sj6);
IkReal x15714=(sj0*sj1);
IkReal x15715=((1.0)*sj6);
IkReal x15716=(cj5*cj6);
IkReal x15717=(r11*x15716);
IkReal x15718=((1.0)*x15710);
IkReal x15719=(sj5*x15709);
IkReal x15720=(r01*x15709);
IkReal x15721=(cj6*x15709);
IkReal x15722=(cj6*x15710);
IkReal x15723=(sj5*x15718);
evalcond[0]=((((-1.0)*r21*x15710*x15715))+((r21*x15709*x15716))+((r20*x15722))+((r22*x15719))+((r20*x15709*x15713))+(((-1.0)*cj1*x15712)));
evalcond[1]=((((-1.0)*r21*x15709*x15715))+((r20*x15721))+((cj1*sj2))+(((-1.0)*r22*x15723))+(((-1.0)*r21*x15716*x15718))+(((-1.0)*r20*x15713*x15718)));
evalcond[2]=((((-1.0)*x15712*x15714))+((r12*x15719))+(((-1.0)*r11*x15710*x15715))+((x15709*x15717))+((r10*x15709*x15713))+((r10*x15722))+((cj0*sj2)));
evalcond[3]=(((r00*x15722))+((r00*x15709*x15713))+(((-1.0)*sj0*sj2))+(((-1.0)*r01*x15710*x15715))+((r02*x15719))+(((-1.0)*x15711*x15712))+((x15716*x15720)));
evalcond[4]=(((cj0*cj2))+(((-1.0)*r11*x15709*x15715))+((sj2*x15714))+(((-1.0)*r12*x15723))+(((-1.0)*x15717*x15718))+((r10*x15721))+(((-1.0)*r10*x15713*x15718)));
evalcond[5]=((((-1.0)*r00*x15713*x15718))+(((-1.0)*r02*x15723))+((r00*x15721))+((sj2*x15711))+(((-1.0)*x15715*x15720))+(((-1.0)*r01*x15716*x15718))+(((-1.0)*sj0*x15712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15724=(sj0*sj2);
IkReal x15725=((1.0)*r21);
IkReal x15726=((1.0)*sj5);
IkReal x15727=(cj6*r20);
IkReal x15728=(cj5*cj6);
IkReal x15729=(cj1*cj2);
IkReal x15730=(sj6*x15729);
IkReal x15731=(cj0*cj2*sj1);
IkReal x15732=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x15733=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x15726))+(((-1.0)*r10*sj6*x15726)))),-1);
if(!x15733.valid){
continue;
}
CheckValue<IkReal> x15734 = IKatan2WithCheck(IkReal((((cj5*r00*x15730))+(((-1.0)*r22*x15724*x15726))+((r02*sj5*x15729))+((r01*x15728*x15729))+(((-1.0)*r22*x15726*x15731))+(((-1.0)*x15731*x15732))+(((-1.0)*x15724*x15732))+(((-1.0)*x15725*x15728*x15731))+(((-1.0)*x15724*x15725*x15728)))),(((x15724*x15727))+((r01*x15730))+(((-1.0)*cj6*r00*x15729))+((x15727*x15731))+(((-1.0)*sj6*x15725*x15731))+(((-1.0)*sj6*x15724*x15725))),IKFAST_ATAN2_MAGTHRESH);
if(!x15734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15733.value)))+(x15734.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15735=IKcos(j4);
IkReal x15736=IKsin(j4);
IkReal x15737=(cj0*sj1);
IkReal x15738=((1.0)*cj2);
IkReal x15739=(cj5*sj6);
IkReal x15740=(sj0*sj1);
IkReal x15741=((1.0)*sj6);
IkReal x15742=(cj5*cj6);
IkReal x15743=(r11*x15742);
IkReal x15744=((1.0)*x15736);
IkReal x15745=(sj5*x15735);
IkReal x15746=(r01*x15735);
IkReal x15747=(cj6*x15735);
IkReal x15748=(cj6*x15736);
IkReal x15749=(sj5*x15744);
evalcond[0]=((((-1.0)*r21*x15736*x15741))+((r22*x15745))+((r21*x15735*x15742))+((r20*x15748))+((r20*x15735*x15739))+(((-1.0)*cj1*x15738)));
evalcond[1]=(((cj1*sj2))+((r20*x15747))+(((-1.0)*r21*x15742*x15744))+(((-1.0)*r20*x15739*x15744))+(((-1.0)*r22*x15749))+(((-1.0)*r21*x15735*x15741)));
evalcond[2]=((((-1.0)*x15738*x15740))+(((-1.0)*r11*x15736*x15741))+((r10*x15735*x15739))+((r12*x15745))+((x15735*x15743))+((cj0*sj2))+((r10*x15748)));
evalcond[3]=(((r00*x15748))+(((-1.0)*x15737*x15738))+((x15742*x15746))+((r02*x15745))+((r00*x15735*x15739))+(((-1.0)*sj0*sj2))+(((-1.0)*r01*x15736*x15741)));
evalcond[4]=(((cj0*cj2))+(((-1.0)*r11*x15735*x15741))+(((-1.0)*r12*x15749))+(((-1.0)*r10*x15739*x15744))+((sj2*x15740))+((r10*x15747))+(((-1.0)*x15743*x15744)));
evalcond[5]=(((r00*x15747))+(((-1.0)*x15741*x15746))+((sj2*x15737))+(((-1.0)*r02*x15749))+(((-1.0)*r00*x15739*x15744))+(((-1.0)*sj0*x15738))+(((-1.0)*r01*x15742*x15744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15750=(cj6*r20);
IkReal x15751=(cj0*sj2);
IkReal x15752=((1.0)*sj6);
IkReal x15753=(cj1*cj2);
IkReal x15754=(cj5*cj6);
IkReal x15755=(cj5*r20);
IkReal x15756=(r22*sj5);
IkReal x15757=(cj2*sj0*sj1);
CheckValue<IkReal> x15758 = IKatan2WithCheck(IkReal((((r21*x15751*x15754))+((r11*x15753*x15754))+((sj6*x15751*x15755))+((cj5*r10*sj6*x15753))+(((-1.0)*r21*x15754*x15757))+((r12*sj5*x15753))+(((-1.0)*x15752*x15755*x15757))+(((-1.0)*x15756*x15757))+((x15751*x15756)))),(((x15750*x15757))+(((-1.0)*x15750*x15751))+(((-1.0)*r21*x15752*x15757))+((r21*sj6*x15751))+((r11*sj6*x15753))+(((-1.0)*cj6*r10*x15753))),IKFAST_ATAN2_MAGTHRESH);
if(!x15758.valid){
continue;
}
CheckValue<IkReal> x15759=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x15759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15758.value)+(((1.5707963267949)*(x15759.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15760=IKcos(j4);
IkReal x15761=IKsin(j4);
IkReal x15762=(cj0*sj1);
IkReal x15763=((1.0)*cj2);
IkReal x15764=(cj5*sj6);
IkReal x15765=(sj0*sj1);
IkReal x15766=((1.0)*sj6);
IkReal x15767=(cj5*cj6);
IkReal x15768=(r11*x15767);
IkReal x15769=((1.0)*x15761);
IkReal x15770=(sj5*x15760);
IkReal x15771=(r01*x15760);
IkReal x15772=(cj6*x15760);
IkReal x15773=(cj6*x15761);
IkReal x15774=(sj5*x15769);
evalcond[0]=(((r22*x15770))+((r21*x15760*x15767))+(((-1.0)*cj1*x15763))+((r20*x15760*x15764))+(((-1.0)*r21*x15761*x15766))+((r20*x15773)));
evalcond[1]=(((cj1*sj2))+(((-1.0)*r22*x15774))+(((-1.0)*r21*x15760*x15766))+((r20*x15772))+(((-1.0)*r20*x15764*x15769))+(((-1.0)*r21*x15767*x15769)));
evalcond[2]=(((r10*x15773))+((x15760*x15768))+(((-1.0)*x15763*x15765))+((r10*x15760*x15764))+((r12*x15770))+(((-1.0)*r11*x15761*x15766))+((cj0*sj2)));
evalcond[3]=(((x15767*x15771))+((r02*x15770))+((r00*x15773))+((r00*x15760*x15764))+(((-1.0)*sj0*sj2))+(((-1.0)*r01*x15761*x15766))+(((-1.0)*x15762*x15763)));
evalcond[4]=(((r10*x15772))+(((-1.0)*r10*x15764*x15769))+(((-1.0)*x15768*x15769))+((cj0*cj2))+((sj2*x15765))+(((-1.0)*r12*x15774))+(((-1.0)*r11*x15760*x15766)));
evalcond[5]=((((-1.0)*r00*x15764*x15769))+(((-1.0)*sj0*x15763))+((r00*x15772))+(((-1.0)*r01*x15767*x15769))+(((-1.0)*r02*x15774))+((sj2*x15762))+(((-1.0)*x15766*x15771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15775=cj5*cj5;
IkReal x15776=cj6*cj6;
IkReal x15777=r22*r22;
IkReal x15778=r21*r21;
IkReal x15779=r20*r20;
IkReal x15780=((1.0)*cj5);
IkReal x15781=(cj6*r21);
IkReal x15782=(r20*sj6);
IkReal x15783=(cj1*cj2);
IkReal x15784=(cj1*sj2);
IkReal x15785=(r22*sj5);
IkReal x15786=(cj6*r20);
IkReal x15787=((2.0)*cj5);
IkReal x15788=(sj6*x15783);
IkReal x15789=((1.0)*x15778);
IkReal x15790=(x15776*x15779);
CheckValue<IkReal> x15791=IKPowWithIntegerCheck(IKsign((((x15775*x15777))+(((2.0)*x15781*x15782))+(((-1.0)*x15777))+((x15776*x15778))+(((-1.0)*x15782*x15785*x15787))+(((-1.0)*x15775*x15779))+(((-1.0)*x15775*x15776*x15789))+((x15775*x15790))+(((-2.0)*x15775*x15781*x15782))+(((-1.0)*x15790))+(((-1.0)*x15789))+(((-1.0)*x15781*x15785*x15787)))),-1);
if(!x15791.valid){
continue;
}
CheckValue<IkReal> x15792 = IKatan2WithCheck(IkReal(((((-1.0)*x15780*x15782*x15784))+((r21*x15788))+(((-1.0)*x15784*x15785))+(((-1.0)*x15783*x15786))+(((-1.0)*x15780*x15781*x15784)))),((((-1.0)*x15780*x15782*x15783))+(((-1.0)*r21*sj6*x15784))+((x15784*x15786))+(((-1.0)*x15783*x15785))+(((-1.0)*x15780*x15781*x15783))),IKFAST_ATAN2_MAGTHRESH);
if(!x15792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15791.value)))+(x15792.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x15793=IKcos(j4);
IkReal x15794=IKsin(j4);
IkReal x15795=(r22*sj5);
IkReal x15796=(cj6*r20);
IkReal x15797=((1.0)*r21*sj6);
IkReal x15798=((1.0)*x15794);
IkReal x15799=(cj5*cj6*r21);
IkReal x15800=(cj5*r20*sj6);
evalcond[0]=(((x15793*x15795))+((x15793*x15799))+((x15794*x15796))+(((-1.0)*x15794*x15797))+(((-1.0)*cj1*cj2))+((x15793*x15800)));
evalcond[1]=(((x15793*x15796))+(((-1.0)*x15798*x15800))+((cj1*sj2))+(((-1.0)*x15795*x15798))+(((-1.0)*x15793*x15797))+(((-1.0)*x15798*x15799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x15801=(cj6*sj5);
IkReal x15802=(sj5*sj6);
IkReal x15803=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs(((((-1.0)*r12*x15803))+((r10*x15802))+((r11*x15801)))))+(IKabs(((((-1.0)*r02*x15803))+((r01*x15801))+((r00*x15802))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=sj2;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j0eval[0]=cj1;
j0eval[1]=cj2;
j0eval[2]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x15804=((1.0)*cj5);
IkReal x15805=(sj5*sj6);
IkReal x15806=(cj6*sj5);
IkReal x15807=(cj6*sj4);
IkReal x15808=(r22*sj5);
IkReal x15809=(cj4*r21);
IkReal x15810=(cj5*cj6);
IkReal x15811=((1.0)*sj6);
IkReal x15812=(cj5*r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r21*x15804*x15807))+(((-1.0)*r20*sj4*sj6*x15804))+((cj4*cj6*r20))+(((-1.0)*x15809*x15811))+(((-1.0)*sj4*x15808)));
evalcond[2]=((-0.36442)+(((-0.37429)*r21*x15806))+(((0.01)*r21*x15810))+(((-1.0)*pz))+(((0.01)*x15812))+(((0.01)*x15808))+(((0.37429)*cj5*r22))+(((-0.37429)*r20*x15805)));
evalcond[3]=((1.0)+((r21*x15806))+(((-1.0)*r22*x15804))+((r20*x15805)));
evalcond[4]=(((x15809*x15810))+(((-1.0)*r21*sj4*x15811))+((cj4*x15812))+((r20*x15807))+((cj4*x15808)));
evalcond[5]=((((-1.0)*r02*x15804))+((r01*x15806))+((r00*x15805)));
evalcond[6]=((((-1.0)*r12*x15804))+((r10*x15805))+((r11*x15806)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15813=(cj2*cj4);
IkReal x15814=(r02*sj5);
IkReal x15815=(cj4*sj2);
IkReal x15816=(r12*sj5);
IkReal x15817=((1.0)*r01);
IkReal x15818=(cj5*cj6*r11);
IkReal x15819=(cj5*r00*sj6);
IkReal x15820=(cj5*r10*sj6);
IkReal x15821=(cj6*r00*sj4);
IkReal x15822=(sj2*sj4*sj6);
IkReal x15823=(cj6*r10*sj4);
IkReal x15824=(cj2*sj4*sj6);
IkReal x15825=(cj5*cj6*r01);
if( IKabs((((cj2*x15823))+((x15813*x15816))+((x15813*x15818))+((x15813*x15820))+((x15815*x15825))+((sj2*x15821))+(((-1.0)*x15817*x15822))+(((-1.0)*r11*x15824))+((x15814*x15815))+((x15815*x15819)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj2*x15821))+((x15813*x15814))+((x15813*x15819))+((x15813*x15825))+(((-1.0)*x15815*x15816))+(((-1.0)*x15815*x15818))+(((-1.0)*sj2*x15823))+(((-1.0)*x15817*x15824))+((r11*x15822))+(((-1.0)*x15815*x15820)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj2*x15823))+((x15813*x15816))+((x15813*x15818))+((x15813*x15820))+((x15815*x15825))+((sj2*x15821))+(((-1.0)*x15817*x15822))+(((-1.0)*r11*x15824))+((x15814*x15815))+((x15815*x15819))))+IKsqr((((cj2*x15821))+((x15813*x15814))+((x15813*x15819))+((x15813*x15825))+(((-1.0)*x15815*x15816))+(((-1.0)*x15815*x15818))+(((-1.0)*sj2*x15823))+(((-1.0)*x15817*x15824))+((r11*x15822))+(((-1.0)*x15815*x15820))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj2*x15823))+((x15813*x15816))+((x15813*x15818))+((x15813*x15820))+((x15815*x15825))+((sj2*x15821))+(((-1.0)*x15817*x15822))+(((-1.0)*r11*x15824))+((x15814*x15815))+((x15815*x15819))), (((cj2*x15821))+((x15813*x15814))+((x15813*x15819))+((x15813*x15825))+(((-1.0)*x15815*x15816))+(((-1.0)*x15815*x15818))+(((-1.0)*sj2*x15823))+(((-1.0)*x15817*x15824))+((r11*x15822))+(((-1.0)*x15815*x15820))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x15826=IKcos(j0);
IkReal x15827=IKsin(j0);
IkReal x15828=((1.0)*sj4);
IkReal x15829=(cj6*sj4);
IkReal x15830=((0.37429)*sj5);
IkReal x15831=(r10*sj6);
IkReal x15832=(r01*sj6);
IkReal x15833=((0.37429)*cj5);
IkReal x15834=((0.069)*sj2);
IkReal x15835=(cj6*r01);
IkReal x15836=((0.01)*cj5);
IkReal x15837=(r12*sj5);
IkReal x15838=(r00*sj6);
IkReal x15839=(r02*sj5);
IkReal x15840=(cj4*cj6);
IkReal x15841=(cj4*cj5);
IkReal x15842=((1.0)*cj4);
IkReal x15843=(r11*sj6);
IkReal x15844=(sj2*x15826);
IkReal x15845=(cj5*cj6*r11);
IkReal x15846=(cj2*x15826);
IkReal x15847=((0.069)*x15827);
IkReal x15848=(sj2*x15827);
IkReal x15849=((1.0)*cj2*x15827);
evalcond[0]=(((cj4*x15837))+(((-1.0)*x15828*x15843))+(((-1.0)*x15849))+((r10*x15829))+((cj5*r11*x15840))+x15844+((x15831*x15841)));
evalcond[1]=(((cj4*x15839))+((x15838*x15841))+((r00*x15829))+(((-1.0)*x15828*x15832))+((x15835*x15841))+(((-1.0)*x15846))+(((-1.0)*x15848)));
evalcond[2]=(((r10*x15840))+(((-1.0)*x15828*x15845))+(((-1.0)*x15828*x15837))+(((-1.0)*cj5*x15828*x15831))+x15848+x15846+(((-1.0)*x15842*x15843)));
evalcond[3]=(((r00*x15840))+(((-1.0)*x15832*x15842))+(((-1.0)*x15849))+(((-1.0)*x15828*x15839))+(((-1.0)*cj5*x15828*x15838))+(((-1.0)*cj5*x15828*x15835))+x15844);
evalcond[4]=(((x15835*x15836))+((r02*x15833))+(((0.069)*x15826))+(((-1.0)*x15830*x15838))+(((-1.0)*x15830*x15835))+(((-1.0)*x15827*x15834))+(((0.01)*x15839))+(((-0.069)*x15846))+(((-1.0)*px))+((x15836*x15838)));
evalcond[5]=((((-1.0)*x15830*x15831))+(((-1.0)*cj2*x15847))+(((0.01)*x15837))+(((-1.0)*cj6*r11*x15830))+((x15831*x15836))+((r12*x15833))+(((-1.0)*py))+((cj6*r11*x15836))+((x15826*x15834))+x15847);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15850=((1.0)*cj5);
IkReal x15851=(sj5*sj6);
IkReal x15852=(cj6*sj5);
IkReal x15853=(cj6*sj4);
IkReal x15854=(r22*sj5);
IkReal x15855=(cj4*r21);
IkReal x15856=(cj5*cj6);
IkReal x15857=((1.0)*sj6);
IkReal x15858=(cj5*r20*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r21*x15850*x15853))+(((-1.0)*sj4*x15854))+(((-1.0)*x15855*x15857))+((cj4*cj6*r20))+(((-1.0)*r20*sj4*sj6*x15850)));
evalcond[2]=((0.36442)+(((0.01)*r21*x15856))+(((-1.0)*pz))+(((0.01)*x15858))+(((0.01)*x15854))+(((-0.37429)*r21*x15852))+(((-0.37429)*r20*x15851))+(((0.37429)*cj5*r22)));
evalcond[3]=((-1.0)+((r20*x15851))+(((-1.0)*r22*x15850))+((r21*x15852)));
evalcond[4]=(((x15855*x15856))+((r20*x15853))+(((-1.0)*r21*sj4*x15857))+((cj4*x15858))+((cj4*x15854)));
evalcond[5]=((((-1.0)*r02*x15850))+((r00*x15851))+((r01*x15852)));
evalcond[6]=((((-1.0)*r12*x15850))+((r10*x15851))+((r11*x15852)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15859=(r02*sj5);
IkReal x15860=(cj5*sj6);
IkReal x15861=(r00*sj2);
IkReal x15862=(cj6*sj4);
IkReal x15863=((1.0)*cj2);
IkReal x15864=(r12*sj5);
IkReal x15865=(cj4*sj2);
IkReal x15866=(cj4*x15863);
IkReal x15867=(cj5*cj6*r11);
IkReal x15868=((1.0)*x15865);
IkReal x15869=(cj5*cj6*r01);
IkReal x15870=(sj2*sj4*sj6);
IkReal x15871=(cj2*sj4*sj6);
if( IKabs(((((-1.0)*x15864*x15866))+((r11*x15871))+((x15865*x15869))+(((-1.0)*r01*x15870))+(((-1.0)*r10*x15860*x15866))+(((-1.0)*x15866*x15867))+((x15861*x15862))+((x15859*x15865))+(((-1.0)*r10*x15862*x15863))+((cj4*x15860*x15861)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x15864*x15868))+((r11*x15870))+(((-1.0)*x15859*x15866))+(((-1.0)*r10*sj2*x15862))+((r01*x15871))+(((-1.0)*r10*x15860*x15868))+(((-1.0)*x15866*x15869))+(((-1.0)*r00*x15860*x15866))+(((-1.0)*r00*x15862*x15863))+(((-1.0)*x15867*x15868)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x15864*x15866))+((r11*x15871))+((x15865*x15869))+(((-1.0)*r01*x15870))+(((-1.0)*r10*x15860*x15866))+(((-1.0)*x15866*x15867))+((x15861*x15862))+((x15859*x15865))+(((-1.0)*r10*x15862*x15863))+((cj4*x15860*x15861))))+IKsqr(((((-1.0)*x15864*x15868))+((r11*x15870))+(((-1.0)*x15859*x15866))+(((-1.0)*r10*sj2*x15862))+((r01*x15871))+(((-1.0)*r10*x15860*x15868))+(((-1.0)*x15866*x15869))+(((-1.0)*r00*x15860*x15866))+(((-1.0)*r00*x15862*x15863))+(((-1.0)*x15867*x15868))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x15864*x15866))+((r11*x15871))+((x15865*x15869))+(((-1.0)*r01*x15870))+(((-1.0)*r10*x15860*x15866))+(((-1.0)*x15866*x15867))+((x15861*x15862))+((x15859*x15865))+(((-1.0)*r10*x15862*x15863))+((cj4*x15860*x15861))), ((((-1.0)*x15864*x15868))+((r11*x15870))+(((-1.0)*x15859*x15866))+(((-1.0)*r10*sj2*x15862))+((r01*x15871))+(((-1.0)*r10*x15860*x15868))+(((-1.0)*x15866*x15869))+(((-1.0)*r00*x15860*x15866))+(((-1.0)*r00*x15862*x15863))+(((-1.0)*x15867*x15868))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x15872=IKcos(j0);
IkReal x15873=IKsin(j0);
IkReal x15874=((1.0)*sj4);
IkReal x15875=(cj6*sj4);
IkReal x15876=((0.37429)*sj5);
IkReal x15877=(r10*sj6);
IkReal x15878=((0.069)*sj2);
IkReal x15879=(r01*sj6);
IkReal x15880=((0.37429)*cj5);
IkReal x15881=(cj6*r01);
IkReal x15882=((0.01)*cj5);
IkReal x15883=(r12*sj5);
IkReal x15884=(r00*sj6);
IkReal x15885=(r02*sj5);
IkReal x15886=(cj4*cj6);
IkReal x15887=(cj4*cj5);
IkReal x15888=((1.0)*cj4);
IkReal x15889=(r11*sj6);
IkReal x15890=(cj2*x15872);
IkReal x15891=(cj5*cj6*r11);
IkReal x15892=((0.069)*x15873);
IkReal x15893=(sj2*x15872);
IkReal x15894=(cj2*x15873);
IkReal x15895=((1.0)*sj2*x15873);
evalcond[0]=(((cj5*r11*x15886))+((x15877*x15887))+((r10*x15875))+(((-1.0)*x15874*x15889))+((cj4*x15883))+x15893+x15894);
evalcond[1]=((((-1.0)*x15874*x15879))+((r00*x15875))+((x15881*x15887))+(((-1.0)*x15895))+((cj4*x15885))+((x15884*x15887))+x15890);
evalcond[2]=(((r10*x15886))+(((-1.0)*x15888*x15889))+(((-1.0)*cj5*x15874*x15877))+(((-1.0)*x15874*x15883))+(((-1.0)*x15895))+(((-1.0)*x15874*x15891))+x15890);
evalcond[3]=(((r00*x15886))+(((-1.0)*x15894))+(((-1.0)*x15893))+(((-1.0)*x15874*x15885))+(((-1.0)*cj5*x15874*x15881))+(((-1.0)*cj5*x15874*x15884))+(((-1.0)*x15879*x15888)));
evalcond[4]=((((0.01)*x15885))+(((0.069)*x15872))+(((-1.0)*x15873*x15878))+((x15881*x15882))+((x15882*x15884))+(((-1.0)*px))+(((-1.0)*x15876*x15881))+(((-1.0)*x15876*x15884))+((r02*x15880))+(((0.069)*x15890)));
evalcond[5]=((((0.01)*x15883))+((x15872*x15878))+((cj2*x15892))+((cj6*r11*x15882))+((x15877*x15882))+((r12*x15880))+(((-1.0)*py))+(((-1.0)*x15876*x15877))+x15892+(((-1.0)*cj6*r11*x15876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15896=((1.0)*sj4);
IkReal x15897=(r21*sj6);
IkReal x15898=(cj6*r21);
IkReal x15899=(cj4*cj5);
IkReal x15900=(r22*sj5);
IkReal x15901=(cj5*r22);
IkReal x15902=((0.01)*cj5);
IkReal x15903=(cj6*r20);
IkReal x15904=(r20*sj6);
IkReal x15905=(sj5*x15904);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*x15903))+(((-1.0)*x15896*x15900))+cj1+(((-1.0)*cj5*x15896*x15904))+(((-1.0)*cj5*x15896*x15898))+(((-1.0)*cj4*x15897)));
evalcond[2]=((((-0.37429)*x15905))+((x15902*x15904))+(((0.37429)*x15901))+(((-1.0)*pz))+((x15898*x15902))+(((-0.37429)*sj5*x15898))+(((0.01)*x15900))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*x15901))+((sj5*x15898))+x15905);
evalcond[4]=(((cj4*x15900))+(((-1.0)*x15896*x15897))+((x15898*x15899))+((sj4*x15903))+((x15899*x15904)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x15906=(cj6*sj5);
IkReal x15907=(sj5*sj6);
IkReal x15908=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r01*x15906))+(((-1.0)*r02*x15908))+((r00*x15907)))))+(IKabs(((((-1.0)*r12*x15908))+((r11*x15906))+((r10*x15907))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15909=(cj5*sj4);
CheckValue<IkReal> x15910=IKPowWithIntegerCheck(sj1,-1);
if(!x15910.valid){
continue;
}
CheckValue<IkReal> x15911=IKPowWithIntegerCheck(cj1,-1);
if(!x15911.valid){
continue;
}
if( IKabs(((x15910.value)*((((r10*sj6*x15909))+((cj6*r11*x15909))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15911.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15910.value)*((((r10*sj6*x15909))+((cj6*r11*x15909))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))))))+IKsqr(((x15911.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x15910.value)*((((r10*sj6*x15909))+((cj6*r11*x15909))+(((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((r12*sj4*sj5))))), ((x15911.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15912=IKcos(j0);
IkReal x15913=IKsin(j0);
IkReal x15914=((1.0)*sj4);
IkReal x15915=(cj6*sj4);
IkReal x15916=((0.37429)*sj5);
IkReal x15917=(r10*sj6);
IkReal x15918=(r01*sj6);
IkReal x15919=((0.36442)*cj1);
IkReal x15920=(cj6*r01);
IkReal x15921=(r00*sj6);
IkReal x15922=(cj6*r11);
IkReal x15923=(r02*sj5);
IkReal x15924=((0.01)*cj5);
IkReal x15925=(r12*sj5);
IkReal x15926=(cj4*cj6);
IkReal x15927=(cj5*r02);
IkReal x15928=(cj4*cj5);
IkReal x15929=((1.0)*cj4);
IkReal x15930=(r11*sj6);
IkReal x15931=(cj5*r12);
IkReal x15932=((0.069)*x15913);
IkReal x15933=((0.069)*x15912);
IkReal x15934=(cj5*x15922);
IkReal x15935=((1.0)*x15913);
evalcond[0]=(((sj5*x15920))+((sj5*x15921))+(((-1.0)*x15927))+(((-1.0)*cj1*x15912)));
evalcond[1]=(((sj5*x15917))+(((-1.0)*cj1*x15935))+((sj5*x15922))+(((-1.0)*x15931)));
evalcond[2]=((((-1.0)*x15914*x15930))+((x15922*x15928))+((r10*x15915))+((x15917*x15928))+((cj4*x15925))+x15912);
evalcond[3]=(((r00*x15915))+((x15920*x15928))+((x15921*x15928))+(((-1.0)*x15914*x15918))+(((-1.0)*x15935))+((cj4*x15923)));
evalcond[4]=(((r10*x15926))+(((-1.0)*x15914*x15934))+(((-1.0)*x15914*x15925))+(((-1.0)*x15929*x15930))+((sj1*x15913))+(((-1.0)*cj5*x15914*x15917)));
evalcond[5]=((((-1.0)*x15918*x15929))+(((-1.0)*x15914*x15923))+((r00*x15926))+((sj1*x15912))+(((-1.0)*cj5*x15914*x15920))+(((-1.0)*cj5*x15914*x15921)));
evalcond[6]=((((0.01)*x15923))+(((-1.0)*x15916*x15920))+(((-1.0)*x15916*x15921))+((x15912*x15919))+(((-1.0)*px))+((x15920*x15924))+((x15921*x15924))+(((-1.0)*x15932))+(((0.37429)*x15927))+x15933);
evalcond[7]=((((0.01)*x15925))+(((-1.0)*x15916*x15922))+(((0.37429)*x15931))+(((-1.0)*py))+((x15913*x15919))+((x15922*x15924))+((x15917*x15924))+(((-1.0)*x15916*x15917))+x15933+x15932);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15936=(cj6*r01);
IkReal x15937=(cj4*cj5);
IkReal x15938=(r00*sj6);
CheckValue<IkReal> x15939=IKPowWithIntegerCheck(cj1,-1);
if(!x15939.valid){
continue;
}
if( IKabs((((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x15936*x15937))+((x15937*x15938)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15939.value)*((((sj5*x15936))+((sj5*x15938))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x15936*x15937))+((x15937*x15938))))+IKsqr(((x15939.value)*((((sj5*x15936))+((sj5*x15938))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj6*r00*sj4))+((cj4*r02*sj5))+(((-1.0)*r01*sj4*sj6))+((x15936*x15937))+((x15937*x15938))), ((x15939.value)*((((sj5*x15936))+((sj5*x15938))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15940=IKcos(j0);
IkReal x15941=IKsin(j0);
IkReal x15942=((1.0)*sj4);
IkReal x15943=(cj6*sj4);
IkReal x15944=((0.37429)*sj5);
IkReal x15945=(r10*sj6);
IkReal x15946=(r01*sj6);
IkReal x15947=((0.36442)*cj1);
IkReal x15948=(cj6*r01);
IkReal x15949=(r00*sj6);
IkReal x15950=(cj6*r11);
IkReal x15951=(r02*sj5);
IkReal x15952=((0.01)*cj5);
IkReal x15953=(r12*sj5);
IkReal x15954=(cj4*cj6);
IkReal x15955=(cj5*r02);
IkReal x15956=(cj4*cj5);
IkReal x15957=((1.0)*cj4);
IkReal x15958=(r11*sj6);
IkReal x15959=(cj5*r12);
IkReal x15960=((0.069)*x15941);
IkReal x15961=((0.069)*x15940);
IkReal x15962=(cj5*x15950);
IkReal x15963=((1.0)*x15941);
evalcond[0]=((((-1.0)*x15955))+(((-1.0)*cj1*x15940))+((sj5*x15948))+((sj5*x15949)));
evalcond[1]=((((-1.0)*x15959))+((sj5*x15945))+((sj5*x15950))+(((-1.0)*cj1*x15963)));
evalcond[2]=(((x15950*x15956))+((cj4*x15953))+((r10*x15943))+((x15945*x15956))+(((-1.0)*x15942*x15958))+x15940);
evalcond[3]=(((r00*x15943))+(((-1.0)*x15963))+((cj4*x15951))+((x15949*x15956))+(((-1.0)*x15942*x15946))+((x15948*x15956)));
evalcond[4]=(((sj1*x15941))+(((-1.0)*cj5*x15942*x15945))+(((-1.0)*x15957*x15958))+((r10*x15954))+(((-1.0)*x15942*x15962))+(((-1.0)*x15942*x15953)));
evalcond[5]=(((sj1*x15940))+((r00*x15954))+(((-1.0)*cj5*x15942*x15949))+(((-1.0)*cj5*x15942*x15948))+(((-1.0)*x15946*x15957))+(((-1.0)*x15942*x15951)));
evalcond[6]=(((x15940*x15947))+(((0.37429)*x15955))+(((-1.0)*x15960))+(((-1.0)*x15944*x15949))+(((-1.0)*x15944*x15948))+(((0.01)*x15951))+((x15949*x15952))+(((-1.0)*px))+((x15948*x15952))+x15961);
evalcond[7]=((((0.37429)*x15959))+((x15950*x15952))+(((-1.0)*x15944*x15950))+(((-1.0)*x15944*x15945))+(((0.01)*x15953))+(((-1.0)*py))+((x15945*x15952))+((x15941*x15947))+x15960+x15961);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15964=(cj6*sj5);
IkReal x15965=(sj5*sj6);
IkReal x15966=((1.0)*cj5);
CheckValue<IkReal> x15967=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x15967.valid){
continue;
}
CheckValue<IkReal> x15968 = IKatan2WithCheck(IkReal((((r11*x15964))+((r10*x15965))+(((-1.0)*r12*x15966)))),(((r01*x15964))+(((-1.0)*r02*x15966))+((r00*x15965))),IKFAST_ATAN2_MAGTHRESH);
if(!x15968.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15967.value)))+(x15968.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15969=IKcos(j0);
IkReal x15970=IKsin(j0);
IkReal x15971=((1.0)*sj4);
IkReal x15972=(cj6*sj4);
IkReal x15973=((0.37429)*sj5);
IkReal x15974=(r10*sj6);
IkReal x15975=(r01*sj6);
IkReal x15976=((0.36442)*cj1);
IkReal x15977=(cj6*r01);
IkReal x15978=(r00*sj6);
IkReal x15979=(cj6*r11);
IkReal x15980=(r02*sj5);
IkReal x15981=((0.01)*cj5);
IkReal x15982=(r12*sj5);
IkReal x15983=(cj4*cj6);
IkReal x15984=(cj5*r02);
IkReal x15985=(cj4*cj5);
IkReal x15986=((1.0)*cj4);
IkReal x15987=(r11*sj6);
IkReal x15988=(cj5*r12);
IkReal x15989=((0.069)*x15970);
IkReal x15990=((0.069)*x15969);
IkReal x15991=(cj5*x15979);
IkReal x15992=((1.0)*x15970);
evalcond[0]=((((-1.0)*x15984))+(((-1.0)*cj1*x15969))+((sj5*x15978))+((sj5*x15977)));
evalcond[1]=((((-1.0)*x15988))+(((-1.0)*cj1*x15992))+((sj5*x15979))+((sj5*x15974)));
evalcond[2]=((((-1.0)*x15971*x15987))+((cj4*x15982))+((r10*x15972))+((x15979*x15985))+((x15974*x15985))+x15969);
evalcond[3]=(((x15977*x15985))+(((-1.0)*x15992))+((r00*x15972))+((cj4*x15980))+((x15978*x15985))+(((-1.0)*x15971*x15975)));
evalcond[4]=((((-1.0)*x15971*x15991))+((sj1*x15970))+(((-1.0)*x15986*x15987))+(((-1.0)*x15971*x15982))+((r10*x15983))+(((-1.0)*cj5*x15971*x15974)));
evalcond[5]=(((r00*x15983))+((sj1*x15969))+(((-1.0)*x15971*x15980))+(((-1.0)*cj5*x15971*x15977))+(((-1.0)*cj5*x15971*x15978))+(((-1.0)*x15975*x15986)));
evalcond[6]=(((x15977*x15981))+(((-1.0)*x15989))+((x15969*x15976))+(((0.01)*x15980))+(((-1.0)*x15973*x15977))+(((-1.0)*x15973*x15978))+(((-1.0)*px))+((x15978*x15981))+(((0.37429)*x15984))+x15990);
evalcond[7]=((((0.01)*x15982))+(((-1.0)*x15973*x15974))+(((-1.0)*x15973*x15979))+((x15970*x15976))+(((-1.0)*py))+(((0.37429)*x15988))+((x15979*x15981))+((x15974*x15981))+x15990+x15989);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15993=((1.0)*cj5);
IkReal x15994=(cj6*sj4);
IkReal x15995=(r22*sj5);
IkReal x15996=(cj4*r21);
IkReal x15997=(cj5*cj6);
IkReal x15998=((1.0)*sj6);
IkReal x15999=(cj5*r20*sj6);
IkReal x16000=(r20*sj5*sj6);
IkReal x16001=(cj6*r21*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*cj6*r20))+(((-1.0)*r21*x15993*x15994))+(((-1.0)*r20*sj4*sj6*x15993))+(((-1.0)*sj4*x15995))+(((-1.0)*cj1))+(((-1.0)*x15996*x15998)));
evalcond[2]=((((0.01)*x15999))+(((0.01)*x15995))+(((-0.37429)*x16000))+(((-0.37429)*x16001))+(((-1.0)*pz))+(((0.01)*r21*x15997))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*r22*x15993))+x16000+x16001);
evalcond[4]=(((r20*x15994))+((cj4*x15995))+((cj4*x15999))+((x15996*x15997))+(((-1.0)*r21*sj4*x15998)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x16002=(cj6*sj5);
IkReal x16003=(sj5*sj6);
IkReal x16004=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r10*x16003))+((r11*x16002))+(((-1.0)*r12*x16004)))))+(IKabs(((((-1.0)*r02*x16004))+((r01*x16002))+((r00*x16003))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16005=((1.0)*cj5*sj4);
CheckValue<IkReal> x16006=IKPowWithIntegerCheck(sj1,-1);
if(!x16006.valid){
continue;
}
CheckValue<IkReal> x16007=IKPowWithIntegerCheck(cj1,-1);
if(!x16007.valid){
continue;
}
if( IKabs(((x16006.value)*(((((-1.0)*cj6*r11*x16005))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*sj6))+((cj4*cj6*r10))+(((-1.0)*r10*sj6*x16005)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16007.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16006.value)*(((((-1.0)*cj6*r11*x16005))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*sj6))+((cj4*cj6*r10))+(((-1.0)*r10*sj6*x16005))))))+IKsqr(((x16007.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x16006.value)*(((((-1.0)*cj6*r11*x16005))+(((-1.0)*r12*sj4*sj5))+(((-1.0)*cj4*r11*sj6))+((cj4*cj6*r10))+(((-1.0)*r10*sj6*x16005))))), ((x16007.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16008=IKsin(j0);
IkReal x16009=IKcos(j0);
IkReal x16010=((1.0)*sj4);
IkReal x16011=(cj6*sj4);
IkReal x16012=((0.37429)*sj5);
IkReal x16013=(r10*sj6);
IkReal x16014=(r01*sj6);
IkReal x16015=((0.36442)*cj1);
IkReal x16016=(cj6*r01);
IkReal x16017=(r00*sj6);
IkReal x16018=(r12*sj5);
IkReal x16019=(cj6*r11);
IkReal x16020=(r02*sj5);
IkReal x16021=((0.01)*cj5);
IkReal x16022=(cj4*cj6);
IkReal x16023=(cj5*r02);
IkReal x16024=(cj4*cj5);
IkReal x16025=((1.0)*cj4);
IkReal x16026=(r11*sj6);
IkReal x16027=(cj5*r12);
IkReal x16028=((0.069)*x16008);
IkReal x16029=((0.069)*x16009);
IkReal x16030=(cj5*x16019);
IkReal x16031=((1.0)*x16009);
IkReal x16032=((1.0)*x16008);
evalcond[0]=(((sj5*x16017))+((sj5*x16016))+(((-1.0)*cj1*x16031))+(((-1.0)*x16023)));
evalcond[1]=(((sj5*x16013))+((sj5*x16019))+(((-1.0)*cj1*x16032))+(((-1.0)*x16027)));
evalcond[2]=((((-1.0)*x16010*x16014))+((x16017*x16024))+((x16016*x16024))+((cj4*x16020))+((r00*x16011))+x16008);
evalcond[3]=(((x16019*x16024))+(((-1.0)*x16010*x16026))+((x16013*x16024))+((cj4*x16018))+((r10*x16011))+(((-1.0)*x16031)));
evalcond[4]=((((-1.0)*x16010*x16018))+(((-1.0)*cj5*x16010*x16013))+(((-1.0)*x16025*x16026))+((r10*x16022))+(((-1.0)*sj1*x16032))+(((-1.0)*x16010*x16030)));
evalcond[5]=((((-1.0)*x16014*x16025))+(((-1.0)*x16010*x16020))+(((-1.0)*cj5*x16010*x16017))+(((-1.0)*cj5*x16010*x16016))+(((-1.0)*sj1*x16031))+((r00*x16022)));
evalcond[6]=((((0.37429)*x16023))+((x16009*x16015))+((x16017*x16021))+((x16016*x16021))+(((-1.0)*px))+(((0.01)*x16020))+x16028+x16029+(((-1.0)*x16012*x16017))+(((-1.0)*x16012*x16016)));
evalcond[7]=((((0.37429)*x16027))+((x16008*x16015))+(((-1.0)*x16029))+((x16019*x16021))+(((-1.0)*py))+x16028+((x16013*x16021))+(((-1.0)*x16012*x16013))+(((-1.0)*x16012*x16019))+(((0.01)*x16018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16033=(cj6*r11);
IkReal x16034=(cj4*cj5);
IkReal x16035=(r10*sj6);
CheckValue<IkReal> x16036=IKPowWithIntegerCheck(cj1,-1);
if(!x16036.valid){
continue;
}
if( IKabs(((x16036.value)*(((((-1.0)*cj5*r12))+((sj5*x16035))+((sj5*x16033)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj6*r10*sj4))+((x16033*x16034))+(((-1.0)*r11*sj4*sj6))+((x16034*x16035))+((cj4*r12*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16036.value)*(((((-1.0)*cj5*r12))+((sj5*x16035))+((sj5*x16033))))))+IKsqr((((cj6*r10*sj4))+((x16033*x16034))+(((-1.0)*r11*sj4*sj6))+((x16034*x16035))+((cj4*r12*sj5))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x16036.value)*(((((-1.0)*cj5*r12))+((sj5*x16035))+((sj5*x16033))))), (((cj6*r10*sj4))+((x16033*x16034))+(((-1.0)*r11*sj4*sj6))+((x16034*x16035))+((cj4*r12*sj5))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16037=IKsin(j0);
IkReal x16038=IKcos(j0);
IkReal x16039=((1.0)*sj4);
IkReal x16040=(cj6*sj4);
IkReal x16041=((0.37429)*sj5);
IkReal x16042=(r10*sj6);
IkReal x16043=(r01*sj6);
IkReal x16044=((0.36442)*cj1);
IkReal x16045=(cj6*r01);
IkReal x16046=(r00*sj6);
IkReal x16047=(r12*sj5);
IkReal x16048=(cj6*r11);
IkReal x16049=(r02*sj5);
IkReal x16050=((0.01)*cj5);
IkReal x16051=(cj4*cj6);
IkReal x16052=(cj5*r02);
IkReal x16053=(cj4*cj5);
IkReal x16054=((1.0)*cj4);
IkReal x16055=(r11*sj6);
IkReal x16056=(cj5*r12);
IkReal x16057=((0.069)*x16037);
IkReal x16058=((0.069)*x16038);
IkReal x16059=(cj5*x16048);
IkReal x16060=((1.0)*x16038);
IkReal x16061=((1.0)*x16037);
evalcond[0]=((((-1.0)*x16052))+((sj5*x16045))+((sj5*x16046))+(((-1.0)*cj1*x16060)));
evalcond[1]=((((-1.0)*x16056))+((sj5*x16042))+((sj5*x16048))+(((-1.0)*cj1*x16061)));
evalcond[2]=(((x16046*x16053))+((cj4*x16049))+x16037+((r00*x16040))+(((-1.0)*x16039*x16043))+((x16045*x16053)));
evalcond[3]=((((-1.0)*x16039*x16055))+((x16042*x16053))+((r10*x16040))+(((-1.0)*x16060))+((x16048*x16053))+((cj4*x16047)));
evalcond[4]=((((-1.0)*x16039*x16059))+(((-1.0)*cj5*x16039*x16042))+((r10*x16051))+(((-1.0)*sj1*x16061))+(((-1.0)*x16054*x16055))+(((-1.0)*x16039*x16047)));
evalcond[5]=((((-1.0)*cj5*x16039*x16046))+(((-1.0)*cj5*x16039*x16045))+(((-1.0)*sj1*x16060))+(((-1.0)*x16043*x16054))+((r00*x16051))+(((-1.0)*x16039*x16049)));
evalcond[6]=(((x16046*x16050))+((x16038*x16044))+(((-1.0)*x16041*x16046))+(((-1.0)*x16041*x16045))+(((0.01)*x16049))+(((0.37429)*x16052))+(((-1.0)*px))+x16058+x16057+((x16045*x16050)));
evalcond[7]=((((-1.0)*x16041*x16048))+(((-1.0)*x16041*x16042))+(((0.01)*x16047))+(((0.37429)*x16056))+((x16042*x16050))+(((-1.0)*x16058))+((x16048*x16050))+(((-1.0)*py))+x16057+((x16037*x16044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16062=(cj6*sj5);
IkReal x16063=(sj5*sj6);
IkReal x16064=((1.0)*cj5);
CheckValue<IkReal> x16065=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x16065.valid){
continue;
}
CheckValue<IkReal> x16066 = IKatan2WithCheck(IkReal((((r10*x16063))+(((-1.0)*r12*x16064))+((r11*x16062)))),(((r00*x16063))+((r01*x16062))+(((-1.0)*r02*x16064))),IKFAST_ATAN2_MAGTHRESH);
if(!x16066.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16065.value)))+(x16066.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16067=IKsin(j0);
IkReal x16068=IKcos(j0);
IkReal x16069=((1.0)*sj4);
IkReal x16070=(cj6*sj4);
IkReal x16071=((0.37429)*sj5);
IkReal x16072=(r10*sj6);
IkReal x16073=(r01*sj6);
IkReal x16074=((0.36442)*cj1);
IkReal x16075=(cj6*r01);
IkReal x16076=(r00*sj6);
IkReal x16077=(r12*sj5);
IkReal x16078=(cj6*r11);
IkReal x16079=(r02*sj5);
IkReal x16080=((0.01)*cj5);
IkReal x16081=(cj4*cj6);
IkReal x16082=(cj5*r02);
IkReal x16083=(cj4*cj5);
IkReal x16084=((1.0)*cj4);
IkReal x16085=(r11*sj6);
IkReal x16086=(cj5*r12);
IkReal x16087=((0.069)*x16067);
IkReal x16088=((0.069)*x16068);
IkReal x16089=(cj5*x16078);
IkReal x16090=((1.0)*x16068);
IkReal x16091=((1.0)*x16067);
evalcond[0]=((((-1.0)*x16082))+(((-1.0)*cj1*x16090))+((sj5*x16075))+((sj5*x16076)));
evalcond[1]=((((-1.0)*x16086))+(((-1.0)*cj1*x16091))+((sj5*x16072))+((sj5*x16078)));
evalcond[2]=((((-1.0)*x16069*x16073))+((x16076*x16083))+((x16075*x16083))+((cj4*x16079))+x16067+((r00*x16070)));
evalcond[3]=(((x16078*x16083))+(((-1.0)*x16090))+((r10*x16070))+((cj4*x16077))+((x16072*x16083))+(((-1.0)*x16069*x16085)));
evalcond[4]=((((-1.0)*x16069*x16077))+(((-1.0)*cj5*x16069*x16072))+(((-1.0)*sj1*x16091))+((r10*x16081))+(((-1.0)*x16084*x16085))+(((-1.0)*x16069*x16089)));
evalcond[5]=((((-1.0)*x16069*x16079))+(((-1.0)*cj5*x16069*x16076))+(((-1.0)*cj5*x16069*x16075))+(((-1.0)*sj1*x16090))+(((-1.0)*x16073*x16084))+((r00*x16081)));
evalcond[6]=((((0.01)*x16079))+((x16068*x16074))+((x16076*x16080))+((x16075*x16080))+(((-1.0)*px))+(((-1.0)*x16071*x16076))+(((-1.0)*x16071*x16075))+x16088+x16087+(((0.37429)*x16082)));
evalcond[7]=(((x16078*x16080))+(((0.01)*x16077))+(((-1.0)*py))+(((-1.0)*x16071*x16078))+(((-1.0)*x16071*x16072))+x16087+(((0.37429)*x16086))+((x16067*x16074))+((x16072*x16080))+(((-1.0)*x16088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16092=((1.0)*cj5);
IkReal x16093=(cj6*sj4);
IkReal x16094=(r22*sj5);
IkReal x16095=(cj4*r21);
IkReal x16096=(cj5*cj6);
IkReal x16097=((1.0)*sj6);
IkReal x16098=(cj5*r20*sj6);
IkReal x16099=(r20*sj5*sj6);
IkReal x16100=(cj6*r21*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=(sj2+((cj4*cj6*r20))+(((-1.0)*x16095*x16097))+(((-1.0)*r21*x16092*x16093))+(((-1.0)*sj4*x16094))+(((-1.0)*r20*sj4*sj6*x16092)));
evalcond[2]=((((0.01)*x16094))+(((0.01)*x16098))+(((-0.069)*cj2))+(((-0.37429)*x16099))+(((0.01)*r21*x16096))+(((-1.0)*pz))+(((-0.37429)*x16100))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r22*x16092))+x16100+x16099);
evalcond[4]=((((-1.0)*r21*sj4*x16097))+((r20*x16093))+((cj4*x16094))+((cj4*x16098))+((x16095*x16096))+(((-1.0)*cj2)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16101=(cj6*sj5);
IkReal x16102=(sj5*sj6);
IkReal x16103=((1.0)*cj5);
if( IKabs(((((-1.0)*r12*x16103))+((r10*x16102))+((r11*x16101)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r01*x16101))+(((-1.0)*r02*x16103))+((r00*x16102)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x16103))+((r10*x16102))+((r11*x16101))))+IKsqr((((r01*x16101))+(((-1.0)*r02*x16103))+((r00*x16102))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x16103))+((r10*x16102))+((r11*x16101))), (((r01*x16101))+(((-1.0)*r02*x16103))+((r00*x16102))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16104=IKcos(j0);
IkReal x16105=IKsin(j0);
IkReal x16106=((1.0)*sj4);
IkReal x16107=(cj6*sj4);
IkReal x16108=((0.37429)*sj5);
IkReal x16109=(r10*sj6);
IkReal x16110=(r01*sj6);
IkReal x16111=((0.069)*sj2);
IkReal x16112=(cj6*r01);
IkReal x16113=(r00*sj6);
IkReal x16114=(r12*sj5);
IkReal x16115=(cj6*r11);
IkReal x16116=(r02*sj5);
IkReal x16117=((0.01)*cj5);
IkReal x16118=(cj4*cj6);
IkReal x16119=(cj5*r02);
IkReal x16120=(cj4*cj5);
IkReal x16121=((1.0)*cj4);
IkReal x16122=(r11*sj6);
IkReal x16123=(cj5*r12);
IkReal x16124=(cj5*x16115);
IkReal x16125=((1.0)*x16105);
evalcond[0]=((((-1.0)*x16104))+(((-1.0)*x16119))+((sj5*x16113))+((sj5*x16112)));
evalcond[1]=((((-1.0)*x16125))+(((-1.0)*x16123))+((sj5*x16115))+((sj5*x16109)));
evalcond[2]=((((-1.0)*x16106*x16122))+((x16115*x16120))+((cj4*x16114))+((r10*x16107))+((x16109*x16120))+((sj2*x16104)));
evalcond[3]=(((x16113*x16120))+((x16112*x16120))+((cj4*x16116))+(((-1.0)*x16106*x16110))+(((-1.0)*sj2*x16125))+((r00*x16107)));
evalcond[4]=((((-1.0)*cj5*x16106*x16109))+(((-1.0)*x16121*x16122))+((cj2*x16104))+(((-1.0)*x16106*x16124))+(((-1.0)*x16106*x16114))+((r10*x16118)));
evalcond[5]=(((r00*x16118))+(((-1.0)*cj5*x16106*x16113))+(((-1.0)*cj5*x16106*x16112))+(((-1.0)*x16110*x16121))+(((-1.0)*cj2*x16125))+(((-1.0)*x16106*x16116)));
evalcond[6]=(((x16112*x16117))+((x16113*x16117))+(((-1.0)*x16105*x16111))+(((-1.0)*x16108*x16112))+(((-1.0)*x16108*x16113))+(((-1.0)*px))+(((0.43342)*x16104))+(((0.01)*x16116))+(((0.37429)*x16119)));
evalcond[7]=(((x16115*x16117))+((x16109*x16117))+(((-1.0)*x16108*x16115))+(((-1.0)*py))+(((-1.0)*x16108*x16109))+(((0.37429)*x16123))+(((0.43342)*x16105))+((x16104*x16111))+(((0.01)*x16114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16126=((1.0)*cj5);
IkReal x16127=(cj6*sj4);
IkReal x16128=(r22*sj5);
IkReal x16129=(cj4*r21);
IkReal x16130=(cj5*cj6);
IkReal x16131=((1.0)*sj6);
IkReal x16132=(cj5*r20*sj6);
IkReal x16133=(r20*sj5*sj6);
IkReal x16134=(cj6*r21*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj2))+(((-1.0)*r21*x16126*x16127))+((cj4*cj6*r20))+(((-1.0)*sj4*x16128))+(((-1.0)*r20*sj4*sj6*x16126))+(((-1.0)*x16129*x16131)));
evalcond[2]=((((-0.37429)*x16133))+(((-0.37429)*x16134))+(((0.069)*cj2))+(((-1.0)*pz))+(((0.01)*x16132))+(((0.01)*x16128))+(((0.01)*r21*x16130))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r22*x16126))+x16134+x16133);
evalcond[4]=(cj2+((x16129*x16130))+((r20*x16127))+(((-1.0)*r21*sj4*x16131))+((cj4*x16132))+((cj4*x16128)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16135=((1.0)*sj5);
if( IKabs((((cj5*r12))+(((-1.0)*r10*sj6*x16135))+(((-1.0)*cj6*r11*x16135)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*r01*x16135))+(((-1.0)*r00*sj6*x16135))+((cj5*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r12))+(((-1.0)*r10*sj6*x16135))+(((-1.0)*cj6*r11*x16135))))+IKsqr(((((-1.0)*cj6*r01*x16135))+(((-1.0)*r00*sj6*x16135))+((cj5*r02))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r12))+(((-1.0)*r10*sj6*x16135))+(((-1.0)*cj6*r11*x16135))), ((((-1.0)*cj6*r01*x16135))+(((-1.0)*r00*sj6*x16135))+((cj5*r02))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16136=IKcos(j0);
IkReal x16137=IKsin(j0);
IkReal x16138=((1.0)*sj4);
IkReal x16139=(cj6*sj4);
IkReal x16140=((0.37429)*sj5);
IkReal x16141=(r10*sj6);
IkReal x16142=(r01*sj6);
IkReal x16143=((0.37429)*cj5);
IkReal x16144=((0.069)*sj2);
IkReal x16145=(cj6*r01);
IkReal x16146=(r00*sj6);
IkReal x16147=(r12*sj5);
IkReal x16148=(cj6*r11);
IkReal x16149=(r02*sj5);
IkReal x16150=((0.01)*cj5);
IkReal x16151=(cj4*cj6);
IkReal x16152=((1.0)*cj5);
IkReal x16153=(cj4*cj5);
IkReal x16154=((1.0)*cj4);
IkReal x16155=(r11*sj6);
IkReal x16156=(cj5*x16148);
IkReal x16157=((1.0)*x16137);
evalcond[0]=(x16136+((sj5*x16145))+((sj5*x16146))+(((-1.0)*r02*x16152)));
evalcond[1]=(x16137+((sj5*x16148))+((sj5*x16141))+(((-1.0)*r12*x16152)));
evalcond[2]=(((cj4*x16147))+((x16148*x16153))+(((-1.0)*x16138*x16155))+((sj2*x16136))+((x16141*x16153))+((r10*x16139)));
evalcond[3]=(((cj4*x16149))+(((-1.0)*sj2*x16157))+((x16145*x16153))+(((-1.0)*x16138*x16142))+((x16146*x16153))+((r00*x16139)));
evalcond[4]=((((-1.0)*cj5*x16138*x16141))+((cj2*x16136))+(((-1.0)*x16138*x16156))+(((-1.0)*x16138*x16147))+((r10*x16151))+(((-1.0)*x16154*x16155)));
evalcond[5]=((((-1.0)*cj5*x16138*x16146))+(((-1.0)*cj5*x16138*x16145))+(((-1.0)*x16138*x16149))+(((-1.0)*cj2*x16157))+((r00*x16151))+(((-1.0)*x16142*x16154)));
evalcond[6]=((((0.01)*x16149))+((x16145*x16150))+(((-1.0)*px))+(((-1.0)*x16137*x16144))+((x16146*x16150))+(((-0.29542)*x16136))+(((-1.0)*x16140*x16145))+(((-1.0)*x16140*x16146))+((r02*x16143)));
evalcond[7]=((((0.01)*x16147))+((x16148*x16150))+((r12*x16143))+(((-1.0)*py))+((x16141*x16150))+(((-0.29542)*x16137))+((x16136*x16144))+(((-1.0)*x16140*x16148))+(((-1.0)*x16140*x16141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16158=((1.0)*cj5);
IkReal x16159=(cj6*sj4);
IkReal x16160=(r22*sj5);
IkReal x16161=(cj4*r21);
IkReal x16162=(cj5*cj6);
IkReal x16163=((1.0)*sj6);
IkReal x16164=(cj5*r20*sj6);
IkReal x16165=(r20*sj5*sj6);
IkReal x16166=(cj6*r21*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*sj4*x16160))+((cj4*cj6*r20))+(((-1.0)*r20*sj4*sj6*x16158))+(((-1.0)*x16161*x16163))+(((-1.0)*r21*x16158*x16159)));
evalcond[2]=((((0.01)*r21*x16162))+(((-0.37429)*x16165))+(((-0.37429)*x16166))+(((-0.069)*cj1))+(((0.01)*x16160))+(((0.01)*x16164))+(((-1.0)*pz))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+x16166+x16165+(((-1.0)*r22*x16158)));
evalcond[4]=(((cj4*x16164))+((cj4*x16160))+((r20*x16159))+(((-1.0)*r21*sj4*x16163))+((x16161*x16162))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
IkReal x16167=(cj6*sj5);
IkReal x16168=(sj5*sj6);
IkReal x16169=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r11*x16167))+((r10*x16168))+(((-1.0)*r12*x16169)))))+(IKabs((((r00*x16168))+((r01*x16167))+(((-1.0)*r02*x16169))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16170=(cj4*cj5);
CheckValue<IkReal> x16171=IKPowWithIntegerCheck(sj1,-1);
if(!x16171.valid){
continue;
}
CheckValue<IkReal> x16172=IKPowWithIntegerCheck(cj1,-1);
if(!x16172.valid){
continue;
}
if( IKabs(((x16171.value)*((((cj6*r10*sj4))+((r10*sj6*x16170))+(((-1.0)*r11*sj4*sj6))+((cj6*r11*x16170))+((cj4*r12*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16172.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16171.value)*((((cj6*r10*sj4))+((r10*sj6*x16170))+(((-1.0)*r11*sj4*sj6))+((cj6*r11*x16170))+((cj4*r12*sj5))))))+IKsqr(((x16172.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x16171.value)*((((cj6*r10*sj4))+((r10*sj6*x16170))+(((-1.0)*r11*sj4*sj6))+((cj6*r11*x16170))+((cj4*r12*sj5))))), ((x16172.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16173=IKcos(j0);
IkReal x16174=IKsin(j0);
IkReal x16175=((1.0)*sj4);
IkReal x16176=(cj6*sj4);
IkReal x16177=((0.37429)*sj5);
IkReal x16178=(r10*sj6);
IkReal x16179=(r01*sj6);
IkReal x16180=((0.36442)*cj1);
IkReal x16181=(cj6*r01);
IkReal x16182=(r00*sj6);
IkReal x16183=(r12*sj5);
IkReal x16184=(cj6*r11);
IkReal x16185=(r02*sj5);
IkReal x16186=((1.0)*cj5);
IkReal x16187=((0.01)*cj5);
IkReal x16188=(cj4*cj6);
IkReal x16189=((0.37429)*cj5);
IkReal x16190=(cj4*cj5);
IkReal x16191=((1.0)*cj4);
IkReal x16192=(r11*sj6);
IkReal x16193=(cj5*x16184);
IkReal x16194=((0.069)*x16173);
IkReal x16195=((0.069)*x16174);
IkReal x16196=((1.0)*x16174);
IkReal x16197=((1.0)*x16173);
evalcond[0]=((((-1.0)*r02*x16186))+(((-1.0)*cj1*x16197))+((sj5*x16181))+((sj5*x16182)));
evalcond[1]=(((sj5*x16178))+(((-1.0)*r12*x16186))+(((-1.0)*cj1*x16196))+((sj5*x16184)));
evalcond[2]=((((-1.0)*cj5*x16175*x16178))+((r10*x16188))+(((-1.0)*x16175*x16193))+(((-1.0)*x16175*x16183))+x16173+(((-1.0)*x16191*x16192)));
evalcond[3]=(((x16178*x16190))+(((-1.0)*x16175*x16192))+((cj4*x16183))+((r10*x16176))+((x16184*x16190))+(((-1.0)*sj1*x16196)));
evalcond[4]=(((x16182*x16190))+((x16181*x16190))+((cj4*x16185))+((r00*x16176))+(((-1.0)*sj1*x16197))+(((-1.0)*x16175*x16179)));
evalcond[5]=(((r00*x16188))+(((-1.0)*x16175*x16185))+(((-1.0)*cj5*x16175*x16182))+(((-1.0)*cj5*x16175*x16181))+(((-1.0)*x16196))+(((-1.0)*x16179*x16191)));
evalcond[6]=((((0.01)*x16185))+((x16182*x16187))+((x16181*x16187))+x16194+(((-1.0)*px))+(((-1.0)*x16177*x16182))+(((-1.0)*x16177*x16181))+((r02*x16189))+(((-1.0)*sj1*x16194))+((x16173*x16180)));
evalcond[7]=((((0.01)*x16183))+((x16178*x16187))+((x16184*x16187))+((r12*x16189))+x16195+(((-1.0)*py))+(((-1.0)*x16177*x16184))+((x16174*x16180))+(((-1.0)*x16177*x16178))+(((-1.0)*sj1*x16195)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16198=(cj6*r11);
IkReal x16199=(cj5*sj4);
IkReal x16200=(r10*sj6);
CheckValue<IkReal> x16201=IKPowWithIntegerCheck(cj1,-1);
if(!x16201.valid){
continue;
}
if( IKabs(((x16201.value)*(((((-1.0)*cj5*r12))+((sj5*x16198))+((sj5*x16200)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((x16199*x16200))+((r12*sj4*sj5))+((x16198*x16199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16201.value)*(((((-1.0)*cj5*r12))+((sj5*x16198))+((sj5*x16200))))))+IKsqr(((((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((x16199*x16200))+((r12*sj4*sj5))+((x16198*x16199))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x16201.value)*(((((-1.0)*cj5*r12))+((sj5*x16198))+((sj5*x16200))))), ((((-1.0)*cj4*cj6*r10))+((cj4*r11*sj6))+((x16199*x16200))+((r12*sj4*sj5))+((x16198*x16199))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16202=IKcos(j0);
IkReal x16203=IKsin(j0);
IkReal x16204=((1.0)*sj4);
IkReal x16205=(cj6*sj4);
IkReal x16206=((0.37429)*sj5);
IkReal x16207=(r10*sj6);
IkReal x16208=(r01*sj6);
IkReal x16209=((0.36442)*cj1);
IkReal x16210=(cj6*r01);
IkReal x16211=(r00*sj6);
IkReal x16212=(r12*sj5);
IkReal x16213=(cj6*r11);
IkReal x16214=(r02*sj5);
IkReal x16215=((1.0)*cj5);
IkReal x16216=((0.01)*cj5);
IkReal x16217=(cj4*cj6);
IkReal x16218=((0.37429)*cj5);
IkReal x16219=(cj4*cj5);
IkReal x16220=((1.0)*cj4);
IkReal x16221=(r11*sj6);
IkReal x16222=(cj5*x16213);
IkReal x16223=((0.069)*x16202);
IkReal x16224=((0.069)*x16203);
IkReal x16225=((1.0)*x16203);
IkReal x16226=((1.0)*x16202);
evalcond[0]=(((sj5*x16210))+((sj5*x16211))+(((-1.0)*r02*x16215))+(((-1.0)*cj1*x16226)));
evalcond[1]=(((sj5*x16213))+(((-1.0)*r12*x16215))+(((-1.0)*cj1*x16225))+((sj5*x16207)));
evalcond[2]=((((-1.0)*x16220*x16221))+x16202+(((-1.0)*cj5*x16204*x16207))+(((-1.0)*x16204*x16222))+((r10*x16217))+(((-1.0)*x16204*x16212)));
evalcond[3]=(((cj4*x16212))+(((-1.0)*sj1*x16225))+((x16213*x16219))+((r10*x16205))+((x16207*x16219))+(((-1.0)*x16204*x16221)));
evalcond[4]=(((x16210*x16219))+((cj4*x16214))+(((-1.0)*x16204*x16208))+(((-1.0)*sj1*x16226))+((x16211*x16219))+((r00*x16205)));
evalcond[5]=(((r00*x16217))+(((-1.0)*x16208*x16220))+(((-1.0)*x16225))+(((-1.0)*x16204*x16214))+(((-1.0)*cj5*x16204*x16211))+(((-1.0)*cj5*x16204*x16210)));
evalcond[6]=(((x16202*x16209))+((x16210*x16216))+(((0.01)*x16214))+(((-1.0)*sj1*x16223))+x16223+(((-1.0)*px))+((x16211*x16216))+((r02*x16218))+(((-1.0)*x16206*x16210))+(((-1.0)*x16206*x16211)));
evalcond[7]=((((0.01)*x16212))+(((-1.0)*sj1*x16224))+((x16213*x16216))+(((-1.0)*x16206*x16207))+x16224+((x16203*x16209))+(((-1.0)*py))+((x16207*x16216))+(((-1.0)*x16206*x16213))+((r12*x16218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16227=(cj6*sj5);
IkReal x16228=(sj5*sj6);
IkReal x16229=((1.0)*cj5);
CheckValue<IkReal> x16230=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x16230.valid){
continue;
}
CheckValue<IkReal> x16231 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x16229))+((r10*x16228))+((r11*x16227)))),(((r00*x16228))+((r01*x16227))+(((-1.0)*r02*x16229))),IKFAST_ATAN2_MAGTHRESH);
if(!x16231.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16230.value)))+(x16231.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16232=IKcos(j0);
IkReal x16233=IKsin(j0);
IkReal x16234=((1.0)*sj4);
IkReal x16235=(cj6*sj4);
IkReal x16236=((0.37429)*sj5);
IkReal x16237=(r10*sj6);
IkReal x16238=(r01*sj6);
IkReal x16239=((0.36442)*cj1);
IkReal x16240=(cj6*r01);
IkReal x16241=(r00*sj6);
IkReal x16242=(r12*sj5);
IkReal x16243=(cj6*r11);
IkReal x16244=(r02*sj5);
IkReal x16245=((1.0)*cj5);
IkReal x16246=((0.01)*cj5);
IkReal x16247=(cj4*cj6);
IkReal x16248=((0.37429)*cj5);
IkReal x16249=(cj4*cj5);
IkReal x16250=((1.0)*cj4);
IkReal x16251=(r11*sj6);
IkReal x16252=(cj5*x16243);
IkReal x16253=((0.069)*x16232);
IkReal x16254=((0.069)*x16233);
IkReal x16255=((1.0)*x16233);
IkReal x16256=((1.0)*x16232);
evalcond[0]=((((-1.0)*cj1*x16256))+((sj5*x16241))+((sj5*x16240))+(((-1.0)*r02*x16245)));
evalcond[1]=((((-1.0)*cj1*x16255))+((sj5*x16243))+(((-1.0)*r12*x16245))+((sj5*x16237)));
evalcond[2]=(x16232+(((-1.0)*cj5*x16234*x16237))+(((-1.0)*x16234*x16252))+(((-1.0)*x16250*x16251))+((r10*x16247))+(((-1.0)*x16234*x16242)));
evalcond[3]=(((x16237*x16249))+((cj4*x16242))+(((-1.0)*sj1*x16255))+(((-1.0)*x16234*x16251))+((r10*x16235))+((x16243*x16249)));
evalcond[4]=(((r00*x16235))+(((-1.0)*x16234*x16238))+((cj4*x16244))+(((-1.0)*sj1*x16256))+((x16241*x16249))+((x16240*x16249)));
evalcond[5]=(((r00*x16247))+(((-1.0)*cj5*x16234*x16241))+(((-1.0)*cj5*x16234*x16240))+(((-1.0)*x16238*x16250))+(((-1.0)*x16255))+(((-1.0)*x16234*x16244)));
evalcond[6]=(((r02*x16248))+x16253+(((-1.0)*px))+(((-1.0)*sj1*x16253))+(((-1.0)*x16236*x16240))+(((-1.0)*x16236*x16241))+((x16241*x16246))+((x16232*x16239))+((x16240*x16246))+(((0.01)*x16244)));
evalcond[7]=(((r12*x16248))+((x16237*x16246))+x16254+(((-1.0)*py))+(((-1.0)*sj1*x16254))+(((-1.0)*x16236*x16243))+(((-1.0)*x16236*x16237))+((x16233*x16239))+((x16243*x16246))+(((0.01)*x16242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16257=((1.0)*cj5);
IkReal x16258=(cj6*sj4);
IkReal x16259=(r22*sj5);
IkReal x16260=(cj4*r21);
IkReal x16261=(cj5*cj6);
IkReal x16262=((1.0)*sj6);
IkReal x16263=(cj5*r20*sj6);
IkReal x16264=(r20*sj5*sj6);
IkReal x16265=(cj6*r21*sj5);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*r20*sj4*sj6*x16257))+((cj4*cj6*r20))+(((-1.0)*x16260*x16262))+(((-1.0)*r21*x16257*x16258))+(((-1.0)*sj4*x16259)));
evalcond[2]=((((0.01)*r21*x16261))+(((0.069)*cj1))+(((0.01)*x16263))+(((0.01)*x16259))+(((-1.0)*pz))+(((-0.37429)*x16265))+(((-0.37429)*x16264))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*r22*x16257))+x16264+x16265);
evalcond[4]=(((cj4*x16263))+cj1+((r20*x16258))+((x16260*x16261))+(((-1.0)*r21*sj4*x16262))+((cj4*x16259)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x16266=(cj6*sj5);
IkReal x16267=(sj5*sj6);
IkReal x16268=((1.0)*cj5);
j0eval[0]=cj1;
j0eval[1]=((IKabs((((r10*x16267))+((r11*x16266))+(((-1.0)*r12*x16268)))))+(IKabs(((((-1.0)*r02*x16268))+((r00*x16267))+((r01*x16266))))));
j0eval[2]=IKsign(cj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=sj1;
j0eval[1]=cj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16269=((1.0)*cj6);
IkReal x16270=((1.0)*cj4);
CheckValue<IkReal> x16271=IKPowWithIntegerCheck(sj1,-1);
if(!x16271.valid){
continue;
}
CheckValue<IkReal> x16272=IKPowWithIntegerCheck(cj1,-1);
if(!x16272.valid){
continue;
}
if( IKabs(((x16271.value)*(((((-1.0)*cj5*r10*sj6*x16270))+(((-1.0)*r12*sj5*x16270))+((r11*sj4*sj6))+(((-1.0)*r10*sj4*x16269))+(((-1.0)*cj4*cj5*r11*x16269)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16272.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x16271.value)*(((((-1.0)*cj5*r10*sj6*x16270))+(((-1.0)*r12*sj5*x16270))+((r11*sj4*sj6))+(((-1.0)*r10*sj4*x16269))+(((-1.0)*cj4*cj5*r11*x16269))))))+IKsqr(((x16272.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x16271.value)*(((((-1.0)*cj5*r10*sj6*x16270))+(((-1.0)*r12*sj5*x16270))+((r11*sj4*sj6))+(((-1.0)*r10*sj4*x16269))+(((-1.0)*cj4*cj5*r11*x16269))))), ((x16272.value)*((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16273=IKsin(j0);
IkReal x16274=IKcos(j0);
IkReal x16275=((1.0)*sj4);
IkReal x16276=(cj6*sj4);
IkReal x16277=((0.37429)*sj5);
IkReal x16278=(r10*sj6);
IkReal x16279=(r01*sj6);
IkReal x16280=((0.36442)*cj1);
IkReal x16281=(cj6*r01);
IkReal x16282=(r00*sj6);
IkReal x16283=(cj6*r11);
IkReal x16284=(r02*sj5);
IkReal x16285=((0.01)*cj5);
IkReal x16286=(r12*sj5);
IkReal x16287=(cj4*cj6);
IkReal x16288=(cj5*r02);
IkReal x16289=(cj4*cj5);
IkReal x16290=((1.0)*cj4);
IkReal x16291=(r11*sj6);
IkReal x16292=(cj5*r12);
IkReal x16293=(cj5*x16283);
IkReal x16294=(sj1*x16273);
IkReal x16295=((1.0)*x16274);
IkReal x16296=((0.069)*x16274);
evalcond[0]=((((-1.0)*x16288))+((sj5*x16282))+((sj5*x16281))+(((-1.0)*cj1*x16295)));
evalcond[1]=((((-1.0)*x16292))+((sj5*x16278))+((sj5*x16283))+(((-1.0)*cj1*x16273)));
evalcond[2]=(((r10*x16276))+((x16278*x16289))+(((-1.0)*x16275*x16291))+((cj4*x16286))+((x16283*x16289))+x16294);
evalcond[3]=(((cj4*x16284))+((x16282*x16289))+((r00*x16276))+((x16281*x16289))+((sj1*x16274))+(((-1.0)*x16275*x16279)));
evalcond[4]=((((-1.0)*cj5*x16275*x16281))+(((-1.0)*cj5*x16275*x16282))+((r00*x16287))+x16273+(((-1.0)*x16279*x16290))+(((-1.0)*x16275*x16284)));
evalcond[5]=((((-1.0)*x16275*x16293))+(((-1.0)*cj5*x16275*x16278))+(((-1.0)*x16275*x16286))+(((-1.0)*x16295))+(((-1.0)*x16290*x16291))+((r10*x16287)));
evalcond[6]=(((x16282*x16285))+(((-1.0)*x16277*x16281))+(((-1.0)*x16277*x16282))+((x16274*x16280))+((x16281*x16285))+x16296+(((0.37429)*x16288))+(((-1.0)*px))+(((0.01)*x16284))+((sj1*x16296)));
evalcond[7]=(((x16278*x16285))+(((0.37429)*x16292))+(((0.069)*x16273))+((x16283*x16285))+(((-1.0)*x16277*x16278))+(((-1.0)*x16277*x16283))+(((0.069)*x16294))+(((-1.0)*py))+(((0.01)*x16286))+((x16273*x16280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16297=(cj6*r01);
IkReal x16298=(cj5*sj4);
IkReal x16299=(r00*sj6);
CheckValue<IkReal> x16300=IKPowWithIntegerCheck(cj1,-1);
if(!x16300.valid){
continue;
}
if( IKabs((((x16298*x16299))+((x16297*x16298))+(((-1.0)*cj4*cj6*r00))+((cj4*r01*sj6))+((r02*sj4*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x16300.value)*((((sj5*x16299))+((sj5*x16297))+(((-1.0)*cj5*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x16298*x16299))+((x16297*x16298))+(((-1.0)*cj4*cj6*r00))+((cj4*r01*sj6))+((r02*sj4*sj5))))+IKsqr(((x16300.value)*((((sj5*x16299))+((sj5*x16297))+(((-1.0)*cj5*r02))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x16298*x16299))+((x16297*x16298))+(((-1.0)*cj4*cj6*r00))+((cj4*r01*sj6))+((r02*sj4*sj5))), ((x16300.value)*((((sj5*x16299))+((sj5*x16297))+(((-1.0)*cj5*r02))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16301=IKsin(j0);
IkReal x16302=IKcos(j0);
IkReal x16303=((1.0)*sj4);
IkReal x16304=(cj6*sj4);
IkReal x16305=((0.37429)*sj5);
IkReal x16306=(r10*sj6);
IkReal x16307=(r01*sj6);
IkReal x16308=((0.36442)*cj1);
IkReal x16309=(cj6*r01);
IkReal x16310=(r00*sj6);
IkReal x16311=(cj6*r11);
IkReal x16312=(r02*sj5);
IkReal x16313=((0.01)*cj5);
IkReal x16314=(r12*sj5);
IkReal x16315=(cj4*cj6);
IkReal x16316=(cj5*r02);
IkReal x16317=(cj4*cj5);
IkReal x16318=((1.0)*cj4);
IkReal x16319=(r11*sj6);
IkReal x16320=(cj5*r12);
IkReal x16321=(cj5*x16311);
IkReal x16322=(sj1*x16301);
IkReal x16323=((1.0)*x16302);
IkReal x16324=((0.069)*x16302);
evalcond[0]=((((-1.0)*cj1*x16323))+((sj5*x16310))+((sj5*x16309))+(((-1.0)*x16316)));
evalcond[1]=((((-1.0)*x16320))+(((-1.0)*cj1*x16301))+((sj5*x16311))+((sj5*x16306)));
evalcond[2]=((((-1.0)*x16303*x16319))+((cj4*x16314))+((x16311*x16317))+x16322+((x16306*x16317))+((r10*x16304)));
evalcond[3]=(((cj4*x16312))+((x16310*x16317))+((sj1*x16302))+((r00*x16304))+(((-1.0)*x16303*x16307))+((x16309*x16317)));
evalcond[4]=((((-1.0)*x16303*x16312))+(((-1.0)*cj5*x16303*x16309))+(((-1.0)*cj5*x16303*x16310))+x16301+((r00*x16315))+(((-1.0)*x16307*x16318)));
evalcond[5]=((((-1.0)*x16303*x16314))+(((-1.0)*cj5*x16303*x16306))+(((-1.0)*x16303*x16321))+(((-1.0)*x16318*x16319))+(((-1.0)*x16323))+((r10*x16315)));
evalcond[6]=((((0.01)*x16312))+x16324+((x16310*x16313))+(((0.37429)*x16316))+(((-1.0)*px))+((sj1*x16324))+(((-1.0)*x16305*x16310))+((x16302*x16308))+(((-1.0)*x16305*x16309))+((x16309*x16313)));
evalcond[7]=((((0.069)*x16301))+(((0.01)*x16314))+((x16311*x16313))+((x16301*x16308))+(((0.37429)*x16320))+(((-1.0)*py))+(((-1.0)*x16305*x16311))+((x16306*x16313))+(((-1.0)*x16305*x16306))+(((0.069)*x16322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16325=(cj6*sj5);
IkReal x16326=(sj5*sj6);
IkReal x16327=((1.0)*cj5);
CheckValue<IkReal> x16328=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x16328.valid){
continue;
}
CheckValue<IkReal> x16329 = IKatan2WithCheck(IkReal((((r10*x16326))+(((-1.0)*r12*x16327))+((r11*x16325)))),(((r00*x16326))+((r01*x16325))+(((-1.0)*r02*x16327))),IKFAST_ATAN2_MAGTHRESH);
if(!x16329.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16328.value)))+(x16329.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16330=IKsin(j0);
IkReal x16331=IKcos(j0);
IkReal x16332=((1.0)*sj4);
IkReal x16333=(cj6*sj4);
IkReal x16334=((0.37429)*sj5);
IkReal x16335=(r10*sj6);
IkReal x16336=(r01*sj6);
IkReal x16337=((0.36442)*cj1);
IkReal x16338=(cj6*r01);
IkReal x16339=(r00*sj6);
IkReal x16340=(cj6*r11);
IkReal x16341=(r02*sj5);
IkReal x16342=((0.01)*cj5);
IkReal x16343=(r12*sj5);
IkReal x16344=(cj4*cj6);
IkReal x16345=(cj5*r02);
IkReal x16346=(cj4*cj5);
IkReal x16347=((1.0)*cj4);
IkReal x16348=(r11*sj6);
IkReal x16349=(cj5*r12);
IkReal x16350=(cj5*x16340);
IkReal x16351=(sj1*x16330);
IkReal x16352=((1.0)*x16331);
IkReal x16353=((0.069)*x16331);
evalcond[0]=((((-1.0)*cj1*x16352))+((sj5*x16339))+((sj5*x16338))+(((-1.0)*x16345)));
evalcond[1]=((((-1.0)*cj1*x16330))+((sj5*x16340))+((sj5*x16335))+(((-1.0)*x16349)));
evalcond[2]=(((r10*x16333))+x16351+((x16335*x16346))+(((-1.0)*x16332*x16348))+((cj4*x16343))+((x16340*x16346)));
evalcond[3]=(((x16338*x16346))+((x16339*x16346))+(((-1.0)*x16332*x16336))+((sj1*x16331))+((r00*x16333))+((cj4*x16341)));
evalcond[4]=((((-1.0)*cj5*x16332*x16339))+(((-1.0)*cj5*x16332*x16338))+(((-1.0)*x16336*x16347))+x16330+(((-1.0)*x16332*x16341))+((r00*x16344)));
evalcond[5]=((((-1.0)*x16352))+(((-1.0)*cj5*x16332*x16335))+((r10*x16344))+(((-1.0)*x16332*x16343))+(((-1.0)*x16347*x16348))+(((-1.0)*x16332*x16350)));
evalcond[6]=(((x16338*x16342))+(((0.01)*x16341))+((x16339*x16342))+((sj1*x16353))+x16353+(((-1.0)*x16334*x16338))+(((-1.0)*x16334*x16339))+(((-1.0)*px))+(((0.37429)*x16345))+((x16331*x16337)));
evalcond[7]=((((0.01)*x16343))+(((-1.0)*x16334*x16335))+((x16335*x16342))+(((-1.0)*py))+(((0.37429)*x16349))+((x16330*x16337))+(((0.069)*x16330))+(((-1.0)*x16334*x16340))+(((0.069)*x16351))+((x16340*x16342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x16361=IKPowWithIntegerCheck(cj1,-1);
if(!x16361.valid){
continue;
}
IkReal x16354=x16361.value;
IkReal x16355=(cj1*r10);
IkReal x16356=(cj1*cj4);
IkReal x16357=(sj2*sj5);
IkReal x16358=(cj6*r01);
IkReal x16359=(r00*sj6);
IkReal x16360=((1.0)*cj5*r02);
CheckValue<IkReal> x16362=IKPowWithIntegerCheck(cj2,-1);
if(!x16362.valid){
continue;
}
CheckValue<IkReal> x16363=IKPowWithIntegerCheck(sj1,-1);
if(!x16363.valid){
continue;
}
if( IKabs((x16354*(x16362.value)*(x16363.value)*((((cj4*cj5*sj6*x16355))+((x16357*x16358))+((x16357*x16359))+((r12*sj5*x16356))+((cj5*cj6*r11*x16356))+((cj6*sj4*x16355))+(((-1.0)*cj1*r11*sj4*sj6))+(((-1.0)*sj2*x16360)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x16354*(((((-1.0)*x16360))+((sj5*x16359))+((sj5*x16358)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16354*(x16362.value)*(x16363.value)*((((cj4*cj5*sj6*x16355))+((x16357*x16358))+((x16357*x16359))+((r12*sj5*x16356))+((cj5*cj6*r11*x16356))+((cj6*sj4*x16355))+(((-1.0)*cj1*r11*sj4*sj6))+(((-1.0)*sj2*x16360))))))+IKsqr((x16354*(((((-1.0)*x16360))+((sj5*x16359))+((sj5*x16358))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x16354*(x16362.value)*(x16363.value)*((((cj4*cj5*sj6*x16355))+((x16357*x16358))+((x16357*x16359))+((r12*sj5*x16356))+((cj5*cj6*r11*x16356))+((cj6*sj4*x16355))+(((-1.0)*cj1*r11*sj4*sj6))+(((-1.0)*sj2*x16360))))), (x16354*(((((-1.0)*x16360))+((sj5*x16359))+((sj5*x16358))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16364=IKcos(j0);
IkReal x16365=IKsin(j0);
IkReal x16366=((1.0)*sj4);
IkReal x16367=(cj6*sj4);
IkReal x16368=((0.37429)*sj5);
IkReal x16369=(r10*sj6);
IkReal x16370=((0.36442)*cj1);
IkReal x16371=(cj6*r11);
IkReal x16372=(r01*sj6);
IkReal x16373=(r00*sj6);
IkReal x16374=((0.069)*sj2);
IkReal x16375=(cj6*r01);
IkReal x16376=(r12*sj5);
IkReal x16377=(r02*sj5);
IkReal x16378=((1.0)*sj1);
IkReal x16379=((0.01)*cj5);
IkReal x16380=((1.0)*cj1);
IkReal x16381=(cj4*cj6);
IkReal x16382=(cj5*r02);
IkReal x16383=(cj4*cj5);
IkReal x16384=((1.0)*cj4);
IkReal x16385=(r11*sj6);
IkReal x16386=(cj5*r12);
IkReal x16387=(cj5*x16371);
IkReal x16388=(cj2*x16364);
IkReal x16389=((0.069)*x16365);
IkReal x16390=(sj2*x16364);
IkReal x16391=((1.0)*x16365);
evalcond[0]=(((sj5*x16375))+((sj5*x16373))+(((-1.0)*x16382))+(((-1.0)*x16364*x16380)));
evalcond[1]=(((sj5*x16369))+((sj5*x16371))+(((-1.0)*x16386))+(((-1.0)*x16365*x16380)));
evalcond[2]=((((-1.0)*cj2*x16365*x16378))+(((-1.0)*x16366*x16385))+x16390+((cj4*x16376))+((r10*x16367))+((x16369*x16383))+((x16371*x16383)));
evalcond[3]=(((r00*x16367))+(((-1.0)*sj2*x16391))+(((-1.0)*x16366*x16372))+((cj4*x16377))+(((-1.0)*x16378*x16388))+((x16375*x16383))+((x16373*x16383)));
evalcond[4]=((((-1.0)*x16384*x16385))+(((-1.0)*x16366*x16387))+(((-1.0)*x16366*x16376))+x16388+((sj1*sj2*x16365))+((r10*x16381))+(((-1.0)*cj5*x16366*x16369)));
evalcond[5]=(((sj1*x16390))+((r00*x16381))+(((-1.0)*x16366*x16377))+(((-1.0)*x16372*x16384))+(((-1.0)*cj2*x16391))+(((-1.0)*cj5*x16366*x16375))+(((-1.0)*cj5*x16366*x16373)));
evalcond[6]=((((-1.0)*x16365*x16374))+(((-0.069)*sj1*x16388))+(((0.01)*x16377))+(((-1.0)*x16368*x16375))+(((-1.0)*x16368*x16373))+((x16375*x16379))+(((-1.0)*px))+(((0.069)*x16364))+((x16373*x16379))+(((0.37429)*x16382))+((x16364*x16370)));
evalcond[7]=(x16389+(((0.01)*x16376))+(((-1.0)*x16368*x16371))+(((-1.0)*py))+(((-1.0)*x16368*x16369))+(((-1.0)*cj2*sj1*x16389))+((x16369*x16379))+(((0.37429)*x16386))+((x16365*x16370))+((x16371*x16379))+((x16364*x16374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x16399=IKPowWithIntegerCheck(cj1,-1);
if(!x16399.valid){
continue;
}
IkReal x16392=x16399.value;
IkReal x16393=(cj1*cj4);
IkReal x16394=(cj2*sj1);
IkReal x16395=(cj5*r02);
IkReal x16396=(r00*sj6);
IkReal x16397=(cj1*sj4);
IkReal x16398=(cj6*r01*sj5);
CheckValue<IkReal> x16400=IKPowWithIntegerCheck(sj2,-1);
if(!x16400.valid){
continue;
}
if( IKabs((x16392*(x16400.value)*(((((-1.0)*sj5*x16394*x16396))+((r02*sj5*x16393))+(((-1.0)*x16394*x16398))+((x16394*x16395))+(((-1.0)*r01*sj6*x16397))+((cj5*x16393*x16396))+((cj6*r00*x16397))+((cj5*cj6*r01*x16393)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x16392*((x16398+(((-1.0)*x16395))+((sj5*x16396)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x16392*(x16400.value)*(((((-1.0)*sj5*x16394*x16396))+((r02*sj5*x16393))+(((-1.0)*x16394*x16398))+((x16394*x16395))+(((-1.0)*r01*sj6*x16397))+((cj5*x16393*x16396))+((cj6*r00*x16397))+((cj5*cj6*r01*x16393))))))+IKsqr((x16392*((x16398+(((-1.0)*x16395))+((sj5*x16396))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x16392*(x16400.value)*(((((-1.0)*sj5*x16394*x16396))+((r02*sj5*x16393))+(((-1.0)*x16394*x16398))+((x16394*x16395))+(((-1.0)*r01*sj6*x16397))+((cj5*x16393*x16396))+((cj6*r00*x16397))+((cj5*cj6*r01*x16393))))), (x16392*((x16398+(((-1.0)*x16395))+((sj5*x16396))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16401=IKcos(j0);
IkReal x16402=IKsin(j0);
IkReal x16403=((1.0)*sj4);
IkReal x16404=(cj6*sj4);
IkReal x16405=((0.37429)*sj5);
IkReal x16406=(r10*sj6);
IkReal x16407=((0.36442)*cj1);
IkReal x16408=(cj6*r11);
IkReal x16409=(r01*sj6);
IkReal x16410=(r00*sj6);
IkReal x16411=((0.069)*sj2);
IkReal x16412=(cj6*r01);
IkReal x16413=(r12*sj5);
IkReal x16414=(r02*sj5);
IkReal x16415=((1.0)*sj1);
IkReal x16416=((0.01)*cj5);
IkReal x16417=((1.0)*cj1);
IkReal x16418=(cj4*cj6);
IkReal x16419=(cj5*r02);
IkReal x16420=(cj4*cj5);
IkReal x16421=((1.0)*cj4);
IkReal x16422=(r11*sj6);
IkReal x16423=(cj5*r12);
IkReal x16424=(cj5*x16408);
IkReal x16425=(cj2*x16401);
IkReal x16426=((0.069)*x16402);
IkReal x16427=(sj2*x16401);
IkReal x16428=((1.0)*x16402);
evalcond[0]=(((sj5*x16412))+((sj5*x16410))+(((-1.0)*x16401*x16417))+(((-1.0)*x16419)));
evalcond[1]=(((sj5*x16406))+((sj5*x16408))+(((-1.0)*x16402*x16417))+(((-1.0)*x16423)));
evalcond[2]=((((-1.0)*x16403*x16422))+((cj4*x16413))+x16427+(((-1.0)*cj2*x16402*x16415))+((r10*x16404))+((x16408*x16420))+((x16406*x16420)));
evalcond[3]=(((x16412*x16420))+((cj4*x16414))+((x16410*x16420))+(((-1.0)*x16403*x16409))+(((-1.0)*sj2*x16428))+(((-1.0)*x16415*x16425))+((r00*x16404)));
evalcond[4]=((((-1.0)*x16403*x16424))+(((-1.0)*x16421*x16422))+((sj1*sj2*x16402))+(((-1.0)*x16403*x16413))+x16425+((r10*x16418))+(((-1.0)*cj5*x16403*x16406)));
evalcond[5]=((((-1.0)*x16409*x16421))+(((-1.0)*x16403*x16414))+((sj1*x16427))+(((-1.0)*cj5*x16403*x16410))+(((-1.0)*cj5*x16403*x16412))+((r00*x16418))+(((-1.0)*cj2*x16428)));
evalcond[6]=(((x16401*x16407))+(((-0.069)*sj1*x16425))+(((0.01)*x16414))+((x16412*x16416))+(((0.069)*x16401))+((x16410*x16416))+(((-1.0)*px))+(((-1.0)*x16402*x16411))+(((-1.0)*x16405*x16410))+(((-1.0)*x16405*x16412))+(((0.37429)*x16419)));
evalcond[7]=((((0.37429)*x16423))+((x16402*x16407))+(((0.01)*x16413))+(((-1.0)*cj2*sj1*x16426))+x16426+((x16406*x16416))+((x16401*x16411))+(((-1.0)*py))+(((-1.0)*x16405*x16408))+(((-1.0)*x16405*x16406))+((x16408*x16416)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16429=(cj6*sj5);
IkReal x16430=(sj5*sj6);
IkReal x16431=((1.0)*cj5);
CheckValue<IkReal> x16432=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x16432.valid){
continue;
}
CheckValue<IkReal> x16433 = IKatan2WithCheck(IkReal((((r11*x16429))+(((-1.0)*r12*x16431))+((r10*x16430)))),(((r00*x16430))+((r01*x16429))+(((-1.0)*r02*x16431))),IKFAST_ATAN2_MAGTHRESH);
if(!x16433.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16432.value)))+(x16433.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x16434=IKcos(j0);
IkReal x16435=IKsin(j0);
IkReal x16436=((1.0)*sj4);
IkReal x16437=(cj6*sj4);
IkReal x16438=((0.37429)*sj5);
IkReal x16439=(r10*sj6);
IkReal x16440=((0.36442)*cj1);
IkReal x16441=(cj6*r11);
IkReal x16442=(r01*sj6);
IkReal x16443=(r00*sj6);
IkReal x16444=((0.069)*sj2);
IkReal x16445=(cj6*r01);
IkReal x16446=(r12*sj5);
IkReal x16447=(r02*sj5);
IkReal x16448=((1.0)*sj1);
IkReal x16449=((0.01)*cj5);
IkReal x16450=((1.0)*cj1);
IkReal x16451=(cj4*cj6);
IkReal x16452=(cj5*r02);
IkReal x16453=(cj4*cj5);
IkReal x16454=((1.0)*cj4);
IkReal x16455=(r11*sj6);
IkReal x16456=(cj5*r12);
IkReal x16457=(cj5*x16441);
IkReal x16458=(cj2*x16434);
IkReal x16459=((0.069)*x16435);
IkReal x16460=(sj2*x16434);
IkReal x16461=((1.0)*x16435);
evalcond[0]=((((-1.0)*x16434*x16450))+((sj5*x16443))+((sj5*x16445))+(((-1.0)*x16452)));
evalcond[1]=(((sj5*x16439))+(((-1.0)*x16435*x16450))+((sj5*x16441))+(((-1.0)*x16456)));
evalcond[2]=(((x16439*x16453))+((x16441*x16453))+x16460+(((-1.0)*cj2*x16435*x16448))+((r10*x16437))+((cj4*x16446))+(((-1.0)*x16436*x16455)));
evalcond[3]=(((x16443*x16453))+((r00*x16437))+(((-1.0)*x16436*x16442))+((x16445*x16453))+(((-1.0)*sj2*x16461))+((cj4*x16447))+(((-1.0)*x16448*x16458)));
evalcond[4]=(((sj1*sj2*x16435))+x16458+(((-1.0)*x16436*x16446))+((r10*x16451))+(((-1.0)*cj5*x16436*x16439))+(((-1.0)*x16454*x16455))+(((-1.0)*x16436*x16457)));
evalcond[5]=((((-1.0)*x16442*x16454))+((r00*x16451))+(((-1.0)*cj2*x16461))+(((-1.0)*x16436*x16447))+((sj1*x16460))+(((-1.0)*cj5*x16436*x16443))+(((-1.0)*cj5*x16436*x16445)));
evalcond[6]=((((0.069)*x16434))+(((-1.0)*px))+((x16443*x16449))+(((-1.0)*x16438*x16445))+(((-1.0)*x16438*x16443))+(((0.01)*x16447))+((x16434*x16440))+(((-1.0)*x16435*x16444))+((x16445*x16449))+(((-0.069)*sj1*x16458))+(((0.37429)*x16452)));
evalcond[7]=(((x16435*x16440))+x16459+(((-1.0)*cj2*sj1*x16459))+(((-1.0)*py))+(((-1.0)*x16438*x16441))+(((0.01)*x16446))+((x16439*x16449))+((x16441*x16449))+((x16434*x16444))+(((-1.0)*x16438*x16439))+(((0.37429)*x16456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16462=(cj6*sj5);
IkReal x16463=(sj5*sj6);
IkReal x16464=((1.0)*cj5);
CheckValue<IkReal> x16465=IKPowWithIntegerCheck(IKsign(cj1),-1);
if(!x16465.valid){
continue;
}
CheckValue<IkReal> x16466 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x16464))+((r10*x16463))+((r11*x16462)))),((((-1.0)*r02*x16464))+((r01*x16462))+((r00*x16463))),IKFAST_ATAN2_MAGTHRESH);
if(!x16466.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16465.value)))+(x16466.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x16467=IKcos(j0);
IkReal x16468=IKsin(j0);
IkReal x16469=((0.01)*cj5);
IkReal x16470=(cj6*r11);
IkReal x16471=(r10*sj6);
IkReal x16472=((0.37429)*sj5);
IkReal x16473=(cj5*r12);
IkReal x16474=((1.0)*cj1);
IkReal x16475=((0.36442)*cj1);
IkReal x16476=(r00*sj6);
IkReal x16477=(cj6*r01);
IkReal x16478=(cj5*r02);
IkReal x16479=(cj2*sj1);
IkReal x16480=((0.01)*sj5);
IkReal x16481=((0.069)*x16468);
IkReal x16482=((0.069)*x16467);
evalcond[0]=((((-1.0)*x16467*x16474))+((sj5*x16476))+((sj5*x16477))+(((-1.0)*x16478)));
evalcond[1]=((((-1.0)*x16468*x16474))+((sj5*x16470))+((sj5*x16471))+(((-1.0)*x16473)));
evalcond[2]=(x16482+((r02*x16480))+((x16469*x16476))+((x16469*x16477))+(((-1.0)*sj2*x16481))+((x16467*x16475))+(((-1.0)*px))+(((-1.0)*x16472*x16476))+(((-1.0)*x16472*x16477))+(((-1.0)*x16479*x16482))+(((0.37429)*x16478)));
evalcond[3]=((((-1.0)*x16470*x16472))+((r12*x16480))+((sj2*x16482))+x16481+((x16468*x16475))+((x16469*x16470))+((x16469*x16471))+(((-1.0)*py))+(((-1.0)*x16479*x16481))+(((-1.0)*x16471*x16472))+(((0.37429)*x16473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x16483=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x16483;
j4eval[1]=IKsign(x16483);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x16484=((1.0)*sj5);
IkReal x16485=(((cj5*r12))+(((-1.0)*cj6*r11*x16484))+(((-1.0)*r10*sj6*x16484)));
j4eval[0]=x16485;
j4eval[1]=IKsign(x16485);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x16486=cj5*cj5;
IkReal x16487=cj6*cj6;
IkReal x16488=r22*r22;
IkReal x16489=r21*r21;
IkReal x16490=r20*r20;
IkReal x16491=((1.0)*cj5);
IkReal x16492=(cj6*r21);
IkReal x16493=(r20*sj6);
IkReal x16494=(cj1*cj2);
IkReal x16495=(cj1*sj2);
IkReal x16496=(r22*sj5);
IkReal x16497=(cj6*r20);
IkReal x16498=((2.0)*cj5);
IkReal x16499=(sj6*x16494);
IkReal x16500=((1.0)*x16489);
IkReal x16501=(x16487*x16490);
IkReal x16502=((((-1.0)*x16486*x16490))+(((-1.0)*x16486*x16487*x16500))+((x16487*x16489))+((x16486*x16488))+(((-1.0)*x16493*x16496*x16498))+((x16486*x16501))+(((2.0)*x16492*x16493))+(((-1.0)*x16488))+(((-1.0)*x16492*x16496*x16498))+(((-1.0)*x16500))+(((-1.0)*x16501))+(((-2.0)*x16486*x16492*x16493)));
j4eval[0]=x16502;
j4eval[1]=IKsign(x16502);
j4eval[2]=((IKabs(((((-1.0)*x16491*x16492*x16495))+(((-1.0)*x16494*x16497))+(((-1.0)*x16495*x16496))+((r21*x16499))+(((-1.0)*x16491*x16493*x16495)))))+(IKabs(((((-1.0)*x16491*x16492*x16494))+(((-1.0)*x16494*x16496))+((x16495*x16497))+(((-1.0)*r21*sj6*x16495))+(((-1.0)*x16491*x16493*x16494))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x16503=((0.069)*cj0);
IkReal x16504=((0.01)*cj5);
IkReal x16505=(cj6*r11);
IkReal x16506=(r20*sj6);
IkReal x16507=((0.069)*sj0);
IkReal x16508=((0.01)*sj5);
IkReal x16509=((1.0)*cj5);
IkReal x16510=(cj6*r01);
IkReal x16511=((0.37429)*cj5);
IkReal x16512=((0.37429)*sj5);
IkReal x16513=(cj6*r21);
IkReal x16514=(r10*sj5*sj6);
IkReal x16515=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((-0.36442)+(((-1.0)*x16506*x16512))+((r22*x16511))+((x16504*x16513))+((x16504*x16506))+(((-1.0)*x16512*x16513))+(((-1.0)*pz))+((r22*x16508)));
evalcond[2]=((((-1.0)*r00*sj6*x16512))+((r02*x16511))+x16503+(((-1.0)*cj2*x16503))+(((-1.0)*sj2*x16507))+((x16504*x16510))+(((-1.0)*px))+((r00*sj6*x16504))+((r02*x16508))+(((-1.0)*x16510*x16512)));
evalcond[3]=(((r10*sj6*x16504))+((r12*x16508))+x16507+(((-1.0)*cj2*x16507))+((x16504*x16505))+(((-1.0)*x16505*x16512))+(((-1.0)*r10*sj6*x16512))+(((-1.0)*py))+((r12*x16511))+((sj2*x16503)));
evalcond[4]=((1.0)+((sj5*x16506))+((sj5*x16513))+(((-1.0)*r22*x16509)));
evalcond[5]=((((-1.0)*r02*x16509))+x16515+((sj5*x16510)));
evalcond[6]=((((-1.0)*r12*x16509))+((sj5*x16505))+x16514);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x16516=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x16516;
j4eval[1]=IKsign(x16516);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x16517=((1.0)*sj5);
IkReal x16518=(((cj5*r12))+(((-1.0)*r10*sj6*x16517))+(((-1.0)*cj6*r11*x16517)));
j4eval[0]=x16518;
j4eval[1]=IKsign(x16518);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=1.0;
cj1=0;
j1=1.5707963267949;
IkReal x16519=cj6*cj6;
IkReal x16520=cj5*cj5;
IkReal x16521=(cj5*sj5);
IkReal x16522=(cj6*r21);
IkReal x16523=((1.0)*r11);
IkReal x16524=(r10*r20);
IkReal x16525=(r10*sj6);
IkReal x16526=(r12*r22);
IkReal x16527=(r21*x16519);
IkReal x16528=(cj6*r20*sj6);
IkReal x16529=(r11*x16520);
IkReal x16530=((1.0)*x16520);
IkReal x16531=((((-1.0)*x16522*x16525))+((r22*x16521*x16525))+((x16528*x16529))+x16526+((r11*r21))+((x16527*x16529))+((r12*r20*sj6*x16521))+((cj6*r11*r22*x16521))+((x16520*x16522*x16525))+((r12*x16521*x16522))+(((-1.0)*x16519*x16524*x16530))+((x16519*x16524))+((x16520*x16524))+(((-1.0)*x16526*x16530))+(((-1.0)*x16523*x16528))+(((-1.0)*x16523*x16527)));
j4eval[0]=x16531;
j4eval[1]=IKsign(x16531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16532=cj6*cj6;
IkReal x16533=cj5*cj5;
IkReal x16534=((1.0)*r11);
IkReal x16535=(cj6*r20);
IkReal x16536=(cj0*cj2);
IkReal x16537=(cj5*r20);
IkReal x16538=(r12*r22);
IkReal x16539=(cj6*r21);
IkReal x16540=(sj0*sj2);
IkReal x16541=(r22*sj5);
IkReal x16542=(r12*sj5);
IkReal x16543=(r10*sj6);
IkReal x16544=(r21*x16532);
IkReal x16545=(sj6*x16540);
IkReal x16546=((1.0)*x16533);
IkReal x16547=(r10*x16533);
IkReal x16548=(r11*x16533);
IkReal x16549=(r10*r20*x16532);
CheckValue<IkReal> x16550 = IKatan2WithCheck(IkReal((((x16536*x16541))+((cj5*x16539*x16540))+((x16537*x16545))+((sj6*x16536*x16537))+((x16540*x16541))+((cj5*x16536*x16539)))),(((r21*x16545))+(((-1.0)*x16535*x16540))+(((-1.0)*x16535*x16536))+((r21*sj6*x16536))),IKFAST_ATAN2_MAGTHRESH);
if(!x16550.valid){
continue;
}
CheckValue<IkReal> x16551=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16534*x16544))+((sj6*x16535*x16548))+x16549+x16538+((r11*r21))+((cj5*x16539*x16542))+(((-1.0)*x16538*x16546))+((r20*x16547))+((x16533*x16539*x16543))+((sj6*x16537*x16542))+((cj5*x16541*x16543))+((cj5*cj6*r11*x16541))+(((-1.0)*x16546*x16549))+(((-1.0)*sj6*x16534*x16535))+((x16544*x16548))+(((-1.0)*x16539*x16543)))),-1);
if(!x16551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16550.value)+(((1.5707963267949)*(x16551.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16552=IKcos(j4);
IkReal x16553=IKsin(j4);
IkReal x16554=(cj0*sj2);
IkReal x16555=(cj0*cj2);
IkReal x16556=(cj5*sj6);
IkReal x16557=(cj5*r01);
IkReal x16558=(cj5*r21);
IkReal x16559=((1.0)*sj0);
IkReal x16560=(cj2*x16559);
IkReal x16561=(cj5*cj6*r11);
IkReal x16562=((1.0)*x16553);
IkReal x16563=(cj6*x16552);
IkReal x16564=(sj5*x16552);
IkReal x16565=(cj6*x16553);
IkReal x16566=(sj5*x16562);
IkReal x16567=((1.0)*sj6*x16552);
evalcond[0]=(((x16558*x16563))+(((-1.0)*r21*sj6*x16562))+((r22*x16564))+((r20*x16552*x16556))+((r20*x16565)));
evalcond[1]=((((-1.0)*r21*x16567))+(((-1.0)*cj6*x16558*x16562))+(((-1.0)*r20*x16556*x16562))+(((-1.0)*r22*x16566))+((r20*x16563)));
evalcond[2]=(x16554+((r12*x16564))+((r10*x16565))+(((-1.0)*x16560))+((x16552*x16561))+((r10*x16552*x16556))+(((-1.0)*r11*sj6*x16562)));
evalcond[3]=((((-1.0)*r01*sj6*x16562))+((r00*x16552*x16556))+(((-1.0)*x16555))+((x16557*x16563))+((r02*x16564))+(((-1.0)*sj2*x16559))+((r00*x16565)));
evalcond[4]=(x16555+((sj0*sj2))+(((-1.0)*r10*x16556*x16562))+((r10*x16563))+(((-1.0)*x16561*x16562))+(((-1.0)*r12*x16566))+(((-1.0)*r11*x16567)));
evalcond[5]=((((-1.0)*r02*x16566))+x16554+(((-1.0)*cj6*x16557*x16562))+(((-1.0)*x16560))+(((-1.0)*r01*x16567))+(((-1.0)*r00*x16556*x16562))+((r00*x16563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16568=((1.0)*r21);
IkReal x16569=(sj0*sj2);
IkReal x16570=(cj0*cj2);
IkReal x16571=((1.0)*sj5);
IkReal x16572=(cj6*x16570);
IkReal x16573=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x16574=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*cj6*r11*x16571))+(((-1.0)*r10*sj6*x16571)))),-1);
if(!x16574.valid){
continue;
}
CheckValue<IkReal> x16575 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x16570*x16571))+(((-1.0)*x16570*x16573))+(((-1.0)*cj5*x16568*x16572))+(((-1.0)*r22*x16569*x16571))+(((-1.0)*cj5*cj6*x16568*x16569))+(((-1.0)*x16569*x16573)))),(((cj6*r20*x16569))+(((-1.0)*sj6*x16568*x16570))+(((-1.0)*sj6*x16568*x16569))+((r20*x16572))),IKFAST_ATAN2_MAGTHRESH);
if(!x16575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16574.value)))+(x16575.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16576=IKcos(j4);
IkReal x16577=IKsin(j4);
IkReal x16578=(cj0*sj2);
IkReal x16579=(cj0*cj2);
IkReal x16580=(cj5*sj6);
IkReal x16581=(cj5*r01);
IkReal x16582=(cj5*r21);
IkReal x16583=((1.0)*sj0);
IkReal x16584=(cj2*x16583);
IkReal x16585=(cj5*cj6*r11);
IkReal x16586=((1.0)*x16577);
IkReal x16587=(cj6*x16576);
IkReal x16588=(sj5*x16576);
IkReal x16589=(cj6*x16577);
IkReal x16590=(sj5*x16586);
IkReal x16591=((1.0)*sj6*x16576);
evalcond[0]=((((-1.0)*r21*sj6*x16586))+((r20*x16589))+((r20*x16576*x16580))+((x16582*x16587))+((r22*x16588)));
evalcond[1]=((((-1.0)*r20*x16580*x16586))+(((-1.0)*cj6*x16582*x16586))+((r20*x16587))+(((-1.0)*r22*x16590))+(((-1.0)*r21*x16591)));
evalcond[2]=((((-1.0)*x16584))+x16578+((r12*x16588))+((x16576*x16585))+((r10*x16576*x16580))+((r10*x16589))+(((-1.0)*r11*sj6*x16586)));
evalcond[3]=(((r00*x16576*x16580))+(((-1.0)*r01*sj6*x16586))+((r00*x16589))+(((-1.0)*x16579))+((x16581*x16587))+(((-1.0)*sj2*x16583))+((r02*x16588)));
evalcond[4]=(x16579+((sj0*sj2))+(((-1.0)*r12*x16590))+(((-1.0)*r11*x16591))+(((-1.0)*x16585*x16586))+(((-1.0)*r10*x16580*x16586))+((r10*x16587)));
evalcond[5]=((((-1.0)*r00*x16580*x16586))+(((-1.0)*x16584))+(((-1.0)*cj6*x16581*x16586))+x16578+(((-1.0)*r02*x16590))+((r00*x16587))+(((-1.0)*r01*x16591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16592=(r22*sj5);
IkReal x16593=(cj6*r20);
IkReal x16594=(cj0*sj2);
IkReal x16595=(r21*sj6);
IkReal x16596=((1.0)*cj2*sj0);
IkReal x16597=(cj5*cj6*r21);
IkReal x16598=(cj5*r20*sj6);
CheckValue<IkReal> x16599=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x16599.valid){
continue;
}
CheckValue<IkReal> x16600 = IKatan2WithCheck(IkReal(((((-1.0)*x16592*x16596))+((x16594*x16597))+((x16594*x16598))+((x16592*x16594))+(((-1.0)*x16596*x16598))+(((-1.0)*x16596*x16597)))),((((-1.0)*x16593*x16594))+((x16594*x16595))+(((-1.0)*x16595*x16596))+((cj2*sj0*x16593))),IKFAST_ATAN2_MAGTHRESH);
if(!x16600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16599.value)))+(x16600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16601=IKcos(j4);
IkReal x16602=IKsin(j4);
IkReal x16603=(cj0*sj2);
IkReal x16604=(cj0*cj2);
IkReal x16605=(cj5*sj6);
IkReal x16606=(cj5*r01);
IkReal x16607=(cj5*r21);
IkReal x16608=((1.0)*sj0);
IkReal x16609=(cj2*x16608);
IkReal x16610=(cj5*cj6*r11);
IkReal x16611=((1.0)*x16602);
IkReal x16612=(cj6*x16601);
IkReal x16613=(sj5*x16601);
IkReal x16614=(cj6*x16602);
IkReal x16615=(sj5*x16611);
IkReal x16616=((1.0)*sj6*x16601);
evalcond[0]=(((r22*x16613))+((r20*x16601*x16605))+((r20*x16614))+((x16607*x16612))+(((-1.0)*r21*sj6*x16611)));
evalcond[1]=((((-1.0)*r20*x16605*x16611))+(((-1.0)*r22*x16615))+(((-1.0)*r21*x16616))+((r20*x16612))+(((-1.0)*cj6*x16607*x16611)));
evalcond[2]=(x16603+(((-1.0)*r11*sj6*x16611))+((r10*x16601*x16605))+((x16601*x16610))+(((-1.0)*x16609))+((r12*x16613))+((r10*x16614)));
evalcond[3]=(((x16606*x16612))+((r02*x16613))+(((-1.0)*r01*sj6*x16611))+((r00*x16614))+(((-1.0)*sj2*x16608))+(((-1.0)*x16604))+((r00*x16601*x16605)));
evalcond[4]=(x16604+(((-1.0)*r11*x16616))+(((-1.0)*r12*x16615))+(((-1.0)*r10*x16605*x16611))+((sj0*sj2))+(((-1.0)*x16610*x16611))+((r10*x16612)));
evalcond[5]=(x16603+(((-1.0)*r02*x16615))+((r00*x16612))+(((-1.0)*r00*x16605*x16611))+(((-1.0)*r01*x16616))+(((-1.0)*cj6*x16606*x16611))+(((-1.0)*x16609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x16617=((0.069)*cj0);
IkReal x16618=((0.01)*cj5);
IkReal x16619=(cj6*r11);
IkReal x16620=(r20*sj6);
IkReal x16621=((0.069)*sj0);
IkReal x16622=((0.01)*sj5);
IkReal x16623=((1.0)*cj5);
IkReal x16624=(cj6*r01);
IkReal x16625=((0.37429)*cj5);
IkReal x16626=((0.37429)*sj5);
IkReal x16627=(cj6*r21);
IkReal x16628=(r10*sj5*sj6);
IkReal x16629=(r00*sj5*sj6);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=((0.36442)+((r22*x16625))+((r22*x16622))+((x16618*x16627))+((x16618*x16620))+(((-1.0)*pz))+(((-1.0)*x16626*x16627))+(((-1.0)*x16620*x16626)));
evalcond[2]=(x16617+((r02*x16625))+((r02*x16622))+((cj2*x16617))+((r00*sj6*x16618))+((x16618*x16624))+(((-1.0)*px))+(((-1.0)*x16624*x16626))+(((-1.0)*sj2*x16621))+(((-1.0)*r00*sj6*x16626)));
evalcond[3]=(((r12*x16625))+((r12*x16622))+((r10*sj6*x16618))+x16621+((cj2*x16621))+((x16618*x16619))+(((-1.0)*x16619*x16626))+(((-1.0)*r10*sj6*x16626))+(((-1.0)*py))+((sj2*x16617)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x16623))+((sj5*x16627))+((sj5*x16620)));
evalcond[5]=(x16629+(((-1.0)*r02*x16623))+((sj5*x16624)));
evalcond[6]=(x16628+(((-1.0)*r12*x16623))+((sj5*x16619)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x16630=(((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)));
j4eval[0]=x16630;
j4eval[1]=IKsign(x16630);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x16631=((1.0)*sj5);
IkReal x16632=(((cj5*r12))+(((-1.0)*r10*sj6*x16631))+(((-1.0)*cj6*r11*x16631)));
j4eval[0]=x16632;
j4eval[1]=IKsign(x16632);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj1=-1.0;
cj1=0;
j1=-1.5707963267949;
IkReal x16633=cj6*cj6;
IkReal x16634=cj5*cj5;
IkReal x16635=(cj5*sj5);
IkReal x16636=(cj6*r21);
IkReal x16637=((1.0)*r11);
IkReal x16638=(r10*r20);
IkReal x16639=(r10*sj6);
IkReal x16640=(r12*r22);
IkReal x16641=(r21*x16633);
IkReal x16642=(cj6*r20*sj6);
IkReal x16643=(r11*x16634);
IkReal x16644=((1.0)*x16634);
IkReal x16645=(((x16634*x16636*x16639))+x16640+((cj6*r11*r22*x16635))+((x16634*x16638))+((x16642*x16643))+((r11*r21))+((r12*r20*sj6*x16635))+(((-1.0)*x16636*x16639))+((x16633*x16638))+(((-1.0)*x16633*x16638*x16644))+((r12*x16635*x16636))+((r22*x16635*x16639))+(((-1.0)*x16640*x16644))+(((-1.0)*x16637*x16641))+(((-1.0)*x16637*x16642))+((x16641*x16643)));
j4eval[0]=x16645;
j4eval[1]=IKsign(x16645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16646=cj6*cj6;
IkReal x16647=cj5*cj5;
IkReal x16648=((1.0)*r11);
IkReal x16649=((1.0)*r20);
IkReal x16650=(cj0*cj2);
IkReal x16651=(r12*r22);
IkReal x16652=(cj6*sj6);
IkReal x16653=((1.0)*r21);
IkReal x16654=(r22*sj5);
IkReal x16655=(sj0*sj2);
IkReal x16656=(r12*sj5);
IkReal x16657=(cj5*sj6);
IkReal x16658=(r21*x16646);
IkReal x16659=(cj5*x16655);
IkReal x16660=(r10*x16647);
IkReal x16661=(r11*x16647);
IkReal x16662=(cj5*cj6*r21);
CheckValue<IkReal> x16663 = IKatan2WithCheck(IkReal(((((-1.0)*x16654*x16655))+((r20*x16650*x16657))+(((-1.0)*x16649*x16655*x16657))+((x16650*x16654))+(((-1.0)*cj6*x16653*x16659))+((x16650*x16662)))),(((r21*sj6*x16650))+(((-1.0)*cj6*x16649*x16650))+((cj6*r20*x16655))+(((-1.0)*sj6*x16653*x16655))),IKFAST_ATAN2_MAGTHRESH);
if(!x16663.valid){
continue;
}
CheckValue<IkReal> x16664=IKPowWithIntegerCheck(IKsign((((r20*x16652*x16661))+((x16658*x16661))+((x16656*x16662))+x16651+((r20*x16656*x16657))+((r11*r21))+(((-1.0)*x16648*x16658))+((cj5*cj6*r11*x16654))+(((-1.0)*r10*x16652*x16653))+((r10*r20*x16646))+(((-1.0)*x16647*x16651))+(((-1.0)*r20*x16648*x16652))+((r10*x16654*x16657))+((r20*x16660))+(((-1.0)*x16646*x16649*x16660))+((r21*x16652*x16660)))),-1);
if(!x16664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16663.value)+(((1.5707963267949)*(x16664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16665=IKcos(j4);
IkReal x16666=IKsin(j4);
IkReal x16667=(cj0*cj2);
IkReal x16668=(cj5*sj6);
IkReal x16669=(cj5*r01);
IkReal x16670=(cj0*sj2);
IkReal x16671=(cj5*r21);
IkReal x16672=((1.0)*sj0);
IkReal x16673=(sj2*x16672);
IkReal x16674=(cj5*cj6*r11);
IkReal x16675=((1.0)*x16666);
IkReal x16676=(cj6*x16665);
IkReal x16677=(sj5*x16665);
IkReal x16678=(cj6*x16666);
IkReal x16679=(sj5*x16675);
IkReal x16680=((1.0)*sj6*x16665);
evalcond[0]=(((x16671*x16676))+((r22*x16677))+((r20*x16665*x16668))+(((-1.0)*r21*sj6*x16675))+((r20*x16678)));
evalcond[1]=((((-1.0)*cj6*x16671*x16675))+(((-1.0)*r21*x16680))+(((-1.0)*r20*x16668*x16675))+(((-1.0)*r22*x16679))+((r20*x16676)));
evalcond[2]=(((cj2*sj0))+x16670+(((-1.0)*r11*sj6*x16675))+((x16665*x16674))+((r12*x16677))+((r10*x16665*x16668))+((r10*x16678)));
evalcond[3]=(((r00*x16665*x16668))+x16667+((r02*x16677))+((x16669*x16676))+(((-1.0)*r01*sj6*x16675))+((r00*x16678))+(((-1.0)*x16673)));
evalcond[4]=((((-1.0)*r11*x16680))+x16667+(((-1.0)*r12*x16679))+(((-1.0)*r10*x16668*x16675))+(((-1.0)*x16674*x16675))+((r10*x16676))+(((-1.0)*x16673)));
evalcond[5]=((((-1.0)*r02*x16679))+(((-1.0)*cj2*x16672))+(((-1.0)*cj6*x16669*x16675))+(((-1.0)*r00*x16668*x16675))+(((-1.0)*x16670))+((r00*x16676))+(((-1.0)*r01*x16680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16681=(r21*sj6);
IkReal x16682=(sj0*sj2);
IkReal x16683=((1.0)*cj6);
IkReal x16684=(cj5*sj6);
IkReal x16685=(cj0*cj2);
IkReal x16686=(cj5*r21);
IkReal x16687=((1.0)*sj5);
IkReal x16688=(r20*x16685);
CheckValue<IkReal> x16689 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x16682*x16687))+((cj6*x16685*x16686))+((r22*sj5*x16685))+((x16684*x16688))+(((-1.0)*x16682*x16683*x16686))+(((-1.0)*r20*x16682*x16684)))),(((x16681*x16685))+(((-1.0)*x16683*x16688))+(((-1.0)*x16681*x16682))+((cj6*r20*x16682))),IKFAST_ATAN2_MAGTHRESH);
if(!x16689.valid){
continue;
}
CheckValue<IkReal> x16690=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r11*sj5*x16683))+(((-1.0)*r10*sj6*x16687)))),-1);
if(!x16690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16689.value)+(((1.5707963267949)*(x16690.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16691=IKcos(j4);
IkReal x16692=IKsin(j4);
IkReal x16693=(cj0*cj2);
IkReal x16694=(cj5*sj6);
IkReal x16695=(cj5*r01);
IkReal x16696=(cj0*sj2);
IkReal x16697=(cj5*r21);
IkReal x16698=((1.0)*sj0);
IkReal x16699=(sj2*x16698);
IkReal x16700=(cj5*cj6*r11);
IkReal x16701=((1.0)*x16692);
IkReal x16702=(cj6*x16691);
IkReal x16703=(sj5*x16691);
IkReal x16704=(cj6*x16692);
IkReal x16705=(sj5*x16701);
IkReal x16706=((1.0)*sj6*x16691);
evalcond[0]=(((x16697*x16702))+((r20*x16704))+((r20*x16691*x16694))+((r22*x16703))+(((-1.0)*r21*sj6*x16701)));
evalcond[1]=(((r20*x16702))+(((-1.0)*r20*x16694*x16701))+(((-1.0)*cj6*x16697*x16701))+(((-1.0)*r22*x16705))+(((-1.0)*r21*x16706)));
evalcond[2]=(((cj2*sj0))+x16696+(((-1.0)*r11*sj6*x16701))+((r10*x16691*x16694))+((r10*x16704))+((r12*x16703))+((x16691*x16700)));
evalcond[3]=(((r02*x16703))+(((-1.0)*r01*sj6*x16701))+(((-1.0)*x16699))+x16693+((x16695*x16702))+((r00*x16691*x16694))+((r00*x16704)));
evalcond[4]=((((-1.0)*x16699))+x16693+(((-1.0)*x16700*x16701))+(((-1.0)*r12*x16705))+(((-1.0)*r11*x16706))+((r10*x16702))+(((-1.0)*r10*x16694*x16701)));
evalcond[5]=((((-1.0)*r00*x16694*x16701))+(((-1.0)*r01*x16706))+(((-1.0)*cj2*x16698))+((r00*x16702))+(((-1.0)*r02*x16705))+(((-1.0)*x16696))+(((-1.0)*cj6*x16695*x16701)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16707=(cj5*r21);
IkReal x16708=(cj0*sj2);
IkReal x16709=(r22*sj5);
IkReal x16710=((1.0)*r20);
IkReal x16711=(cj5*r20);
IkReal x16712=(cj2*cj6*sj0);
IkReal x16713=(cj2*sj0*sj6);
CheckValue<IkReal> x16714 = IKatan2WithCheck(IkReal((((x16707*x16712))+((cj2*sj0*x16709))+((x16708*x16709))+((x16711*x16713))+((sj6*x16708*x16711))+((cj6*x16707*x16708)))),((((-1.0)*cj6*x16708*x16710))+(((-1.0)*x16710*x16712))+((r21*sj6*x16708))+((r21*x16713))),IKFAST_ATAN2_MAGTHRESH);
if(!x16714.valid){
continue;
}
CheckValue<IkReal> x16715=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x16715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16714.value)+(((1.5707963267949)*(x16715.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16716=IKcos(j4);
IkReal x16717=IKsin(j4);
IkReal x16718=(cj0*cj2);
IkReal x16719=(cj5*sj6);
IkReal x16720=(cj5*r01);
IkReal x16721=(cj0*sj2);
IkReal x16722=(cj5*r21);
IkReal x16723=((1.0)*sj0);
IkReal x16724=(sj2*x16723);
IkReal x16725=(cj5*cj6*r11);
IkReal x16726=((1.0)*x16717);
IkReal x16727=(cj6*x16716);
IkReal x16728=(sj5*x16716);
IkReal x16729=(cj6*x16717);
IkReal x16730=(sj5*x16726);
IkReal x16731=((1.0)*sj6*x16716);
evalcond[0]=(((r20*x16716*x16719))+((r20*x16729))+((x16722*x16727))+(((-1.0)*r21*sj6*x16726))+((r22*x16728)));
evalcond[1]=((((-1.0)*r21*x16731))+(((-1.0)*r20*x16719*x16726))+((r20*x16727))+(((-1.0)*r22*x16730))+(((-1.0)*cj6*x16722*x16726)));
evalcond[2]=(x16721+((cj2*sj0))+((x16716*x16725))+((r12*x16728))+((r10*x16716*x16719))+(((-1.0)*r11*sj6*x16726))+((r10*x16729)));
evalcond[3]=(x16718+(((-1.0)*x16724))+((r00*x16716*x16719))+((r02*x16728))+((r00*x16729))+((x16720*x16727))+(((-1.0)*r01*sj6*x16726)));
evalcond[4]=(x16718+(((-1.0)*r12*x16730))+(((-1.0)*x16724))+(((-1.0)*x16725*x16726))+((r10*x16727))+(((-1.0)*r10*x16719*x16726))+(((-1.0)*r11*x16731)));
evalcond[5]=((((-1.0)*r00*x16719*x16726))+(((-1.0)*cj2*x16723))+((r00*x16727))+(((-1.0)*x16721))+(((-1.0)*cj6*x16720*x16726))+(((-1.0)*r02*x16730))+(((-1.0)*r01*x16731)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16732=cj5*cj5;
IkReal x16733=cj6*cj6;
IkReal x16734=r22*r22;
IkReal x16735=r21*r21;
IkReal x16736=r20*r20;
IkReal x16737=((1.0)*cj5);
IkReal x16738=(cj6*r21);
IkReal x16739=(r20*sj6);
IkReal x16740=(cj1*cj2);
IkReal x16741=(cj1*sj2);
IkReal x16742=(r22*sj5);
IkReal x16743=(cj6*r20);
IkReal x16744=((2.0)*cj5);
IkReal x16745=(sj6*x16740);
IkReal x16746=((1.0)*x16735);
IkReal x16747=(x16733*x16736);
CheckValue<IkReal> x16748 = IKatan2WithCheck(IkReal(((((-1.0)*x16737*x16738*x16741))+(((-1.0)*x16737*x16739*x16741))+(((-1.0)*x16741*x16742))+(((-1.0)*x16740*x16743))+((r21*x16745)))),((((-1.0)*x16737*x16738*x16740))+((x16741*x16743))+(((-1.0)*x16737*x16739*x16740))+(((-1.0)*r21*sj6*x16741))+(((-1.0)*x16740*x16742))),IKFAST_ATAN2_MAGTHRESH);
if(!x16748.valid){
continue;
}
CheckValue<IkReal> x16749=IKPowWithIntegerCheck(IKsign(((((-2.0)*x16732*x16738*x16739))+(((2.0)*x16738*x16739))+((x16732*x16747))+(((-1.0)*x16732*x16736))+(((-1.0)*x16747))+((x16733*x16735))+(((-1.0)*x16732*x16733*x16746))+((x16732*x16734))+(((-1.0)*x16746))+(((-1.0)*x16734))+(((-1.0)*x16739*x16742*x16744))+(((-1.0)*x16738*x16742*x16744)))),-1);
if(!x16749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16748.value)+(((1.5707963267949)*(x16749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16750=IKcos(j4);
IkReal x16751=IKsin(j4);
IkReal x16752=(cj0*sj1);
IkReal x16753=((1.0)*cj2);
IkReal x16754=(cj5*sj6);
IkReal x16755=(sj0*sj1);
IkReal x16756=((1.0)*sj6);
IkReal x16757=(cj5*cj6);
IkReal x16758=(r11*x16757);
IkReal x16759=((1.0)*x16751);
IkReal x16760=(sj5*x16750);
IkReal x16761=(r01*x16750);
IkReal x16762=(cj6*x16750);
IkReal x16763=(cj6*x16751);
IkReal x16764=(sj5*x16759);
evalcond[0]=((((-1.0)*r21*x16751*x16756))+((r21*x16750*x16757))+((r22*x16760))+(((-1.0)*cj1*x16753))+((r20*x16763))+((r20*x16750*x16754)));
evalcond[1]=((((-1.0)*r21*x16757*x16759))+(((-1.0)*r22*x16764))+(((-1.0)*r20*x16754*x16759))+((cj1*sj2))+((r20*x16762))+(((-1.0)*r21*x16750*x16756)));
evalcond[2]=(((r12*x16760))+((r10*x16750*x16754))+(((-1.0)*x16753*x16755))+(((-1.0)*r11*x16751*x16756))+((r10*x16763))+((x16750*x16758))+((cj0*sj2)));
evalcond[3]=(((r00*x16763))+(((-1.0)*x16752*x16753))+((r00*x16750*x16754))+((x16757*x16761))+((r02*x16760))+(((-1.0)*sj0*sj2))+(((-1.0)*r01*x16751*x16756)));
evalcond[4]=((((-1.0)*r12*x16764))+((cj0*cj2))+(((-1.0)*r11*x16750*x16756))+((r10*x16762))+(((-1.0)*x16758*x16759))+((sj2*x16755))+(((-1.0)*r10*x16754*x16759)));
evalcond[5]=((((-1.0)*r02*x16764))+((r00*x16762))+(((-1.0)*r00*x16754*x16759))+((sj2*x16752))+(((-1.0)*r01*x16757*x16759))+(((-1.0)*x16756*x16761))+(((-1.0)*sj0*x16753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16765=(sj0*sj2);
IkReal x16766=((1.0)*r21);
IkReal x16767=((1.0)*sj5);
IkReal x16768=(cj6*r20);
IkReal x16769=(cj5*cj6);
IkReal x16770=(cj1*cj2);
IkReal x16771=(sj6*x16770);
IkReal x16772=(cj0*cj2*sj1);
IkReal x16773=((1.0)*cj5*r20*sj6);
CheckValue<IkReal> x16774=IKPowWithIntegerCheck(IKsign((((cj5*r12))+(((-1.0)*r10*sj6*x16767))+(((-1.0)*cj6*r11*x16767)))),-1);
if(!x16774.valid){
continue;
}
CheckValue<IkReal> x16775 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x16767*x16772))+((r01*x16769*x16770))+((cj5*r00*x16771))+(((-1.0)*x16766*x16769*x16772))+(((-1.0)*r22*x16765*x16767))+(((-1.0)*x16772*x16773))+(((-1.0)*x16765*x16766*x16769))+(((-1.0)*x16765*x16773))+((r02*sj5*x16770)))),((((-1.0)*sj6*x16765*x16766))+(((-1.0)*sj6*x16766*x16772))+((x16765*x16768))+((r01*x16771))+((x16768*x16772))+(((-1.0)*cj6*r00*x16770))),IKFAST_ATAN2_MAGTHRESH);
if(!x16775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16774.value)))+(x16775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16776=IKcos(j4);
IkReal x16777=IKsin(j4);
IkReal x16778=(cj0*sj1);
IkReal x16779=((1.0)*cj2);
IkReal x16780=(cj5*sj6);
IkReal x16781=(sj0*sj1);
IkReal x16782=((1.0)*sj6);
IkReal x16783=(cj5*cj6);
IkReal x16784=(r11*x16783);
IkReal x16785=((1.0)*x16777);
IkReal x16786=(sj5*x16776);
IkReal x16787=(r01*x16776);
IkReal x16788=(cj6*x16776);
IkReal x16789=(cj6*x16777);
IkReal x16790=(sj5*x16785);
evalcond[0]=(((r22*x16786))+((r20*x16776*x16780))+((r20*x16789))+(((-1.0)*r21*x16777*x16782))+(((-1.0)*cj1*x16779))+((r21*x16776*x16783)));
evalcond[1]=((((-1.0)*r21*x16783*x16785))+(((-1.0)*r21*x16776*x16782))+(((-1.0)*r22*x16790))+((cj1*sj2))+(((-1.0)*r20*x16780*x16785))+((r20*x16788)));
evalcond[2]=((((-1.0)*r11*x16777*x16782))+((r10*x16789))+(((-1.0)*x16779*x16781))+((r12*x16786))+((r10*x16776*x16780))+((cj0*sj2))+((x16776*x16784)));
evalcond[3]=(((x16783*x16787))+((r00*x16776*x16780))+(((-1.0)*x16778*x16779))+((r02*x16786))+(((-1.0)*sj0*sj2))+((r00*x16789))+(((-1.0)*r01*x16777*x16782)));
evalcond[4]=((((-1.0)*x16784*x16785))+((r10*x16788))+((cj0*cj2))+((sj2*x16781))+(((-1.0)*r10*x16780*x16785))+(((-1.0)*r12*x16790))+(((-1.0)*r11*x16776*x16782)));
evalcond[5]=((((-1.0)*r00*x16780*x16785))+((sj2*x16778))+(((-1.0)*x16782*x16787))+(((-1.0)*r01*x16783*x16785))+(((-1.0)*sj0*x16779))+(((-1.0)*r02*x16790))+((r00*x16788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16791=(cj6*r20);
IkReal x16792=(cj0*sj2);
IkReal x16793=((1.0)*sj6);
IkReal x16794=(cj1*cj2);
IkReal x16795=(cj5*cj6);
IkReal x16796=(cj5*r20);
IkReal x16797=(r22*sj5);
IkReal x16798=(cj2*sj0*sj1);
CheckValue<IkReal> x16799 = IKatan2WithCheck(IkReal((((r21*x16792*x16795))+((cj5*r10*sj6*x16794))+((r11*x16794*x16795))+(((-1.0)*x16793*x16796*x16798))+(((-1.0)*r21*x16795*x16798))+((r12*sj5*x16794))+((x16792*x16797))+(((-1.0)*x16797*x16798))+((sj6*x16792*x16796)))),((((-1.0)*cj6*r10*x16794))+(((-1.0)*x16791*x16792))+((x16791*x16798))+((r21*sj6*x16792))+((r11*sj6*x16794))+(((-1.0)*r21*x16793*x16798))),IKFAST_ATAN2_MAGTHRESH);
if(!x16799.valid){
continue;
}
CheckValue<IkReal> x16800=IKPowWithIntegerCheck(IKsign((((cj6*r01*sj5))+((r00*sj5*sj6))+(((-1.0)*cj5*r02)))),-1);
if(!x16800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16799.value)+(((1.5707963267949)*(x16800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x16801=IKcos(j4);
IkReal x16802=IKsin(j4);
IkReal x16803=(cj0*sj1);
IkReal x16804=((1.0)*cj2);
IkReal x16805=(cj5*sj6);
IkReal x16806=(sj0*sj1);
IkReal x16807=((1.0)*sj6);
IkReal x16808=(cj5*cj6);
IkReal x16809=(r11*x16808);
IkReal x16810=((1.0)*x16802);
IkReal x16811=(sj5*x16801);
IkReal x16812=(r01*x16801);
IkReal x16813=(cj6*x16801);
IkReal x16814=(cj6*x16802);
IkReal x16815=(sj5*x16810);
evalcond[0]=(((r20*x16814))+((r21*x16801*x16808))+(((-1.0)*r21*x16802*x16807))+(((-1.0)*cj1*x16804))+((r22*x16811))+((r20*x16801*x16805)));
evalcond[1]=((((-1.0)*r21*x16808*x16810))+(((-1.0)*r22*x16815))+((r20*x16813))+((cj1*sj2))+(((-1.0)*r21*x16801*x16807))+(((-1.0)*r20*x16805*x16810)));
evalcond[2]=((((-1.0)*x16804*x16806))+((r10*x16814))+((x16801*x16809))+(((-1.0)*r11*x16802*x16807))+((r10*x16801*x16805))+((r12*x16811))+((cj0*sj2)));
evalcond[3]=(((r00*x16801*x16805))+(((-1.0)*r01*x16802*x16807))+((x16808*x16812))+((r02*x16811))+(((-1.0)*sj0*sj2))+((r00*x16814))+(((-1.0)*x16803*x16804)));
evalcond[4]=((((-1.0)*r12*x16815))+((sj2*x16806))+(((-1.0)*r11*x16801*x16807))+((cj0*cj2))+((r10*x16813))+(((-1.0)*x16809*x16810))+(((-1.0)*r10*x16805*x16810)));
evalcond[5]=(((sj2*x16803))+(((-1.0)*r00*x16805*x16810))+(((-1.0)*x16807*x16812))+(((-1.0)*sj0*x16804))+(((-1.0)*r01*x16808*x16810))+((r00*x16813))+(((-1.0)*r02*x16815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x16816=cj1*cj1;
IkReal x16817=(cj5*r02);
IkReal x16818=((136398.7618)*cj1);
IkReal x16819=(r10*sj6);
IkReal x16820=((690.0)*r12);
IkReal x16821=((25826.01)*sj2);
IkReal x16822=(r00*sj6);
IkReal x16823=(cj6*sj5);
IkReal x16824=((25826.01)*r11);
IkReal x16825=((69000.0)*py);
IkReal x16826=(sj2*sj5);
IkReal x16827=(cj2*sj1);
IkReal x16828=((25826.01)*sj5);
IkReal x16829=((690.0)*r02);
IkReal x16830=((364420.0)*cj1);
IkReal x16831=((3644.2)*cj1);
IkReal x16832=(cj5*cj6);
IkReal x16833=((690.0)*r11);
IkReal x16834=((69000.0)*px);
IkReal x16835=((50289.96)*cj1);
IkReal x16836=((690.0)*cj5);
IkReal x16837=((690.0)*r01);
IkReal x16838=((25826.01)*r01);
IkReal x16839=(cj5*r12);
IkReal x16840=(sj5*x16827);
IkReal x16841=(sj2*x16836);
IkReal x16842=((25826.01)*x16839);
CheckValue<IkReal> x16843=IKPowWithIntegerCheck(IKsign(((9522.0)+x16835+(((-9522.0)*x16827))+(((-4761.0)*x16816*(cj2*cj2)))+(((-1.0)*x16827*x16835))+(((132801.9364)*x16816)))),-1);
if(!x16843.valid){
continue;
}
CheckValue<IkReal> x16844 = IKatan2WithCheck(IkReal((x16825+(((-1.0)*sj2*x16834))+((x16819*x16827*x16836))+(((-1.0)*r11*x16831*x16832))+(((-1.0)*sj5*x16821*x16822))+((x16827*x16832*x16833))+(((-1.0)*sj5*x16820))+((x16827*x16842))+((py*x16830))+((x16819*x16828))+((r11*x16818*x16823))+(((-1.0)*x16819*x16827*x16828))+(((-1.0)*cj5*x16819*x16831))+(((-1.0)*r01*x16821*x16823))+((sj2*x16832*x16837))+(((-1.0)*x16842))+(((-1.0)*x16825*x16827))+(((-1.0)*x16823*x16824*x16827))+((x16822*x16841))+((x16826*x16829))+(((-1.0)*r12*sj5*x16831))+(((-1.0)*x16832*x16833))+(((-1.0)*x16818*x16839))+((x16823*x16824))+((x16817*x16821))+((x16820*x16840))+((sj5*x16818*x16819))+(((-1.0)*x16819*x16836)))),(x16834+(((-1.0)*x16822*x16836))+((r01*x16818*x16823))+(((-25826.01)*x16817))+((x16827*x16832*x16837))+(((-1.0)*sj5*x16829))+((sj5*x16819*x16821))+((r11*x16821*x16823))+((x16822*x16827*x16836))+(((-1.0)*x16819*x16841))+(((-1.0)*x16820*x16826))+(((-1.0)*r01*x16831*x16832))+(((-1.0)*r02*sj5*x16831))+(((-1.0)*x16817*x16818))+(((-1.0)*x16827*x16834))+(((-1.0)*x16823*x16827*x16838))+(((-1.0)*x16822*x16827*x16828))+((x16823*x16838))+((sj5*x16818*x16822))+(((-1.0)*x16821*x16839))+(((-1.0)*x16832*x16837))+(((-1.0)*cj5*x16822*x16831))+(((-1.0)*sj2*x16832*x16833))+(((25826.01)*x16817*x16827))+((x16829*x16840))+((sj2*x16825))+((x16822*x16828))+((px*x16830))),IKFAST_ATAN2_MAGTHRESH);
if(!x16844.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16843.value)))+(x16844.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x16845=IKcos(j0);
IkReal x16846=IKsin(j0);
IkReal x16847=(r10*sj6);
IkReal x16848=((0.37429)*sj5);
IkReal x16849=((0.36442)*cj1);
IkReal x16850=((0.01)*cj5);
IkReal x16851=(cj6*r11);
IkReal x16852=(r00*sj6);
IkReal x16853=(cj6*r01);
IkReal x16854=((0.37429)*cj5);
IkReal x16855=(cj2*sj1);
IkReal x16856=((0.01)*sj5);
IkReal x16857=((0.069)*x16846);
IkReal x16858=((0.069)*x16845);
evalcond[0]=(x16858+((x16850*x16852))+((x16850*x16853))+(((-1.0)*px))+(((-1.0)*x16855*x16858))+((r02*x16856))+((r02*x16854))+((x16845*x16849))+(((-1.0)*x16848*x16853))+(((-1.0)*x16848*x16852))+(((-1.0)*sj2*x16857)));
evalcond[1]=(x16857+((x16847*x16850))+((r12*x16856))+((r12*x16854))+((x16850*x16851))+(((-1.0)*py))+(((-1.0)*x16847*x16848))+(((-1.0)*x16855*x16857))+((x16846*x16849))+((sj2*x16858))+(((-1.0)*x16848*x16851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x16859=((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)));
j4eval[0]=x16859;
j4eval[1]=IKsign(x16859);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16860=((1.0)*sj5);
IkReal x16861=((((-1.0)*r00*sj6*x16860))+(((-1.0)*cj6*r01*x16860))+((cj5*r02)));
j4eval[0]=x16861;
j4eval[1]=IKsign(x16861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x16862=((1.0)*sj5);
IkReal x16863=(((cj5*r22))+(((-1.0)*r20*sj6*x16862))+(((-1.0)*cj6*r21*x16862)));
j4eval[0]=x16863;
j4eval[1]=IKsign(x16863);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16864=((1.0)*sj6);
IkReal x16865=(cj5*cj6);
IkReal x16866=(sj1*sj2);
IkReal x16867=(cj0*r11);
IkReal x16868=(cj6*r00);
IkReal x16869=(cj2*sj0);
IkReal x16870=(cj0*cj2);
IkReal x16871=(r02*sj5);
IkReal x16872=((1.0)*sj5);
IkReal x16873=(cj5*sj6);
IkReal x16874=(cj0*r10);
IkReal x16875=(r01*sj0*x16866);
CheckValue<IkReal> x16876 = IKatan2WithCheck(IkReal((((cj6*r10*x16869))+((sj6*x16866*x16867))+((sj0*x16866*x16868))+(((-1.0)*x16864*x16875))+(((-1.0)*r11*x16864*x16869))+(((-1.0)*r01*x16864*x16870))+((x16868*x16870))+(((-1.0)*cj6*x16866*x16874)))),(((r00*sj0*x16866*x16873))+((x16870*x16871))+((r12*sj5*x16869))+((r11*x16865*x16869))+((r01*x16865*x16870))+(((-1.0)*cj0*r12*x16866*x16872))+((x16865*x16875))+((r10*x16869*x16873))+(((-1.0)*x16865*x16866*x16867))+((sj0*x16866*x16871))+(((-1.0)*cj5*x16864*x16866*x16874))+((r00*x16870*x16873))),IKFAST_ATAN2_MAGTHRESH);
if(!x16876.valid){
continue;
}
CheckValue<IkReal> x16877=IKPowWithIntegerCheck(IKsign((((cj5*r22))+(((-1.0)*cj6*r21*x16872))+(((-1.0)*r20*sj5*x16864)))),-1);
if(!x16877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x16876.value)+(((1.5707963267949)*(x16877.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16878=IKsin(j4);
IkReal x16879=IKcos(j4);
IkReal x16880=(r01*sj3);
IkReal x16881=((1.0)*sj5);
IkReal x16882=(cj3*r02);
IkReal x16883=((1.0)*cj6);
IkReal x16884=(cj5*r12);
IkReal x16885=(cj0*sj2);
IkReal x16886=(sj3*sj6);
IkReal x16887=((1.0)*r20);
IkReal x16888=(cj0*cj2);
IkReal x16889=(cj3*sj6);
IkReal x16890=((1.0)*cj1);
IkReal x16891=((1.0)*cj5);
IkReal x16892=(cj6*sj5);
IkReal x16893=(r21*sj3);
IkReal x16894=((1.0)*r00);
IkReal x16895=((1.0)*r10);
IkReal x16896=(cj3*r22);
IkReal x16897=(r11*sj3);
IkReal x16898=((1.0)*sj0);
IkReal x16899=(cj3*x16883);
IkReal x16900=(cj5*x16879);
IkReal x16901=(sj6*x16878);
IkReal x16902=(r10*x16878);
IkReal x16903=(r00*x16878);
IkReal x16904=(cj6*x16879);
IkReal x16905=(sj3*x16879);
IkReal x16906=(cj5*x16878);
IkReal x16907=(r20*x16878);
IkReal x16908=((1.0)*sj6*x16879);
evalcond[0]=((((-1.0)*r21*x16883*x16906))+(((-1.0)*r22*x16878*x16881))+((cj1*sj2))+(((-1.0)*r21*x16908))+(((-1.0)*cj5*x16887*x16901))+((r20*x16904)));
evalcond[1]=(x16888+((r10*x16904))+(((-1.0)*r11*x16883*x16906))+(((-1.0)*r11*x16908))+((sj0*sj1*sj2))+(((-1.0)*r12*x16878*x16881))+(((-1.0)*r10*x16891*x16901)));
evalcond[2]=((((-1.0)*r01*x16908))+(((-1.0)*r02*x16878*x16881))+(((-1.0)*cj2*x16898))+((r00*x16904))+(((-1.0)*r00*x16891*x16901))+(((-1.0)*r01*x16883*x16906))+((sj1*x16885)));
evalcond[3]=(sj1+(((-1.0)*sj3*x16883*x16907))+(((-1.0)*r22*x16881*x16905))+(((-1.0)*cj3*cj6*r21*x16881))+(((-1.0)*x16883*x16893*x16900))+(((-1.0)*r20*x16881*x16889))+((cj5*x16896))+(((-1.0)*x16886*x16887*x16900))+((r21*x16878*x16886)));
evalcond[4]=(((x16892*x16893))+(((-1.0)*x16887*x16889*x16900))+(((-1.0)*cj2*x16890))+(((-1.0)*r21*x16899*x16900))+(((-1.0)*x16899*x16907))+(((-1.0)*r22*sj3*x16891))+((r20*sj5*x16886))+(((-1.0)*x16879*x16881*x16896))+((r21*x16878*x16889)));
evalcond[5]=((((-1.0)*r02*x16881*x16905))+(((-1.0)*sj3*x16883*x16903))+((cj5*x16882))+(((-1.0)*cj0*x16890))+(((-1.0)*r00*x16879*x16886*x16891))+(((-1.0)*r00*x16881*x16889))+(((-1.0)*x16880*x16883*x16900))+((x16880*x16901))+(((-1.0)*cj3*cj6*r01*x16881)));
evalcond[6]=((((-1.0)*cj3*cj6*r11*x16881))+(((-1.0)*sj3*x16883*x16902))+(((-1.0)*r10*x16881*x16889))+(((-1.0)*r10*x16879*x16886*x16891))+(((-1.0)*sj0*x16890))+((r11*x16878*x16886))+((cj3*x16884))+(((-1.0)*x16883*x16897*x16900))+(((-1.0)*r12*x16881*x16905)));
evalcond[7]=(((x16892*x16897))+x16885+((r10*sj5*x16886))+(((-1.0)*r11*x16899*x16900))+(((-1.0)*r10*x16879*x16889*x16891))+(((-1.0)*cj2*sj1*x16898))+(((-1.0)*x16899*x16902))+((r11*x16878*x16889))+(((-1.0)*sj3*x16884))+(((-1.0)*cj3*r12*x16879*x16881)));
evalcond[8]=((((-1.0)*x16879*x16881*x16882))+(((-1.0)*sj1*x16888))+((x16880*x16892))+(((-1.0)*r02*sj3*x16891))+((r01*x16878*x16889))+(((-1.0)*x16899*x16903))+(((-1.0)*r01*x16899*x16900))+((r00*sj5*x16886))+(((-1.0)*sj2*x16898))+(((-1.0)*r00*x16879*x16889*x16891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16909=(cj6*r21);
IkReal x16910=(r20*sj6);
IkReal x16911=(cj1*sj2);
IkReal x16912=((1.0)*cj6);
IkReal x16913=((1.0)*sj5);
IkReal x16914=(cj0*cj2);
IkReal x16915=(r21*sj6);
IkReal x16916=(sj0*sj1*sj2);
IkReal x16917=((1.0)*cj5*x16914);
IkReal x16918=((1.0)*cj5*x16916);
CheckValue<IkReal> x16919=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj5*x16912))+(((-1.0)*r00*sj6*x16913))+((cj5*r02)))),-1);
if(!x16919.valid){
continue;
}
CheckValue<IkReal> x16920 = IKatan2WithCheck(IkReal((((x16915*x16916))+((x16914*x16915))+(((-1.0)*r11*sj6*x16911))+((cj6*r10*x16911))+(((-1.0)*r20*x16912*x16914))+(((-1.0)*r20*x16912*x16916)))),((((-1.0)*r22*x16913*x16914))+(((-1.0)*r22*x16913*x16916))+((cj5*cj6*r11*x16911))+((cj5*r10*sj6*x16911))+(((-1.0)*x16910*x16918))+(((-1.0)*x16910*x16917))+(((-1.0)*x16909*x16917))+(((-1.0)*x16909*x16918))+((r12*sj5*x16911))),IKFAST_ATAN2_MAGTHRESH);
if(!x16920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16919.value)))+(x16920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16921=IKsin(j4);
IkReal x16922=IKcos(j4);
IkReal x16923=(r01*sj3);
IkReal x16924=((1.0)*sj5);
IkReal x16925=(cj3*r02);
IkReal x16926=((1.0)*cj6);
IkReal x16927=(cj5*r12);
IkReal x16928=(cj0*sj2);
IkReal x16929=(sj3*sj6);
IkReal x16930=((1.0)*r20);
IkReal x16931=(cj0*cj2);
IkReal x16932=(cj3*sj6);
IkReal x16933=((1.0)*cj1);
IkReal x16934=((1.0)*cj5);
IkReal x16935=(cj6*sj5);
IkReal x16936=(r21*sj3);
IkReal x16937=((1.0)*r00);
IkReal x16938=((1.0)*r10);
IkReal x16939=(cj3*r22);
IkReal x16940=(r11*sj3);
IkReal x16941=((1.0)*sj0);
IkReal x16942=(cj3*x16926);
IkReal x16943=(cj5*x16922);
IkReal x16944=(sj6*x16921);
IkReal x16945=(r10*x16921);
IkReal x16946=(r00*x16921);
IkReal x16947=(cj6*x16922);
IkReal x16948=(sj3*x16922);
IkReal x16949=(cj5*x16921);
IkReal x16950=(r20*x16921);
IkReal x16951=((1.0)*sj6*x16922);
evalcond[0]=(((r20*x16947))+(((-1.0)*r21*x16951))+((cj1*sj2))+(((-1.0)*cj5*x16930*x16944))+(((-1.0)*r21*x16926*x16949))+(((-1.0)*r22*x16921*x16924)));
evalcond[1]=((((-1.0)*r12*x16921*x16924))+((r10*x16947))+(((-1.0)*r10*x16934*x16944))+((sj0*sj1*sj2))+(((-1.0)*r11*x16926*x16949))+(((-1.0)*r11*x16951))+x16931);
evalcond[2]=((((-1.0)*r01*x16926*x16949))+(((-1.0)*r02*x16921*x16924))+(((-1.0)*cj2*x16941))+((sj1*x16928))+((r00*x16947))+(((-1.0)*r00*x16934*x16944))+(((-1.0)*r01*x16951)));
evalcond[3]=((((-1.0)*sj3*x16926*x16950))+sj1+((r21*x16921*x16929))+(((-1.0)*r22*x16924*x16948))+(((-1.0)*x16929*x16930*x16943))+(((-1.0)*r20*x16924*x16932))+((cj5*x16939))+(((-1.0)*cj3*cj6*r21*x16924))+(((-1.0)*x16926*x16936*x16943)));
evalcond[4]=((((-1.0)*r22*sj3*x16934))+(((-1.0)*r21*x16942*x16943))+((r20*sj5*x16929))+(((-1.0)*x16922*x16924*x16939))+((x16935*x16936))+(((-1.0)*cj2*x16933))+((r21*x16921*x16932))+(((-1.0)*x16942*x16950))+(((-1.0)*x16930*x16932*x16943)));
evalcond[5]=((((-1.0)*sj3*x16926*x16946))+(((-1.0)*cj0*x16933))+(((-1.0)*cj3*cj6*r01*x16924))+((x16923*x16944))+(((-1.0)*r00*x16922*x16929*x16934))+(((-1.0)*r00*x16924*x16932))+(((-1.0)*r02*x16924*x16948))+(((-1.0)*x16923*x16926*x16943))+((cj5*x16925)));
evalcond[6]=(((r11*x16921*x16929))+(((-1.0)*x16926*x16940*x16943))+(((-1.0)*sj3*x16926*x16945))+(((-1.0)*r12*x16924*x16948))+(((-1.0)*r10*x16922*x16929*x16934))+((cj3*x16927))+(((-1.0)*r10*x16924*x16932))+(((-1.0)*sj0*x16933))+(((-1.0)*cj3*cj6*r11*x16924)));
evalcond[7]=((((-1.0)*cj3*r12*x16922*x16924))+(((-1.0)*cj2*sj1*x16941))+(((-1.0)*r10*x16922*x16932*x16934))+((r11*x16921*x16932))+(((-1.0)*r11*x16942*x16943))+(((-1.0)*sj3*x16927))+(((-1.0)*x16942*x16945))+((r10*sj5*x16929))+((x16935*x16940))+x16928);
evalcond[8]=((((-1.0)*sj1*x16931))+(((-1.0)*r00*x16922*x16932*x16934))+((r00*sj5*x16929))+(((-1.0)*x16922*x16924*x16925))+(((-1.0)*r01*x16942*x16943))+(((-1.0)*x16942*x16946))+((x16923*x16935))+((r01*x16921*x16932))+(((-1.0)*sj2*x16941))+(((-1.0)*r02*sj3*x16934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16952=(cj6*r20);
IkReal x16953=(cj2*sj0);
IkReal x16954=((1.0)*sj2);
IkReal x16955=(cj0*sj1);
IkReal x16956=(cj1*r01);
IkReal x16957=(r22*sj5);
IkReal x16958=(cj5*cj6);
IkReal x16959=(cj1*sj2);
IkReal x16960=(r21*sj6);
IkReal x16961=(cj5*r20*sj6);
CheckValue<IkReal> x16962=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r12))+((cj6*r11*sj5))+((r10*sj5*sj6)))),-1);
if(!x16962.valid){
continue;
}
CheckValue<IkReal> x16963 = IKatan2WithCheck(IkReal((((sj2*x16955*x16960))+((cj6*r00*x16959))+(((-1.0)*sj6*x16954*x16956))+((x16952*x16953))+(((-1.0)*x16952*x16954*x16955))+(((-1.0)*x16953*x16960)))),(((x16953*x16957))+((x16953*x16961))+((r21*x16953*x16958))+(((-1.0)*x16954*x16955*x16957))+(((-1.0)*x16954*x16955*x16961))+((r02*sj5*x16959))+((cj5*r00*sj6*x16959))+((sj2*x16956*x16958))+(((-1.0)*r21*x16954*x16955*x16958))),IKFAST_ATAN2_MAGTHRESH);
if(!x16963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x16962.value)))+(x16963.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x16964=IKsin(j4);
IkReal x16965=IKcos(j4);
IkReal x16966=(r01*sj3);
IkReal x16967=((1.0)*sj5);
IkReal x16968=(cj3*r02);
IkReal x16969=((1.0)*cj6);
IkReal x16970=(cj5*r12);
IkReal x16971=(cj0*sj2);
IkReal x16972=(sj3*sj6);
IkReal x16973=((1.0)*r20);
IkReal x16974=(cj0*cj2);
IkReal x16975=(cj3*sj6);
IkReal x16976=((1.0)*cj1);
IkReal x16977=((1.0)*cj5);
IkReal x16978=(cj6*sj5);
IkReal x16979=(r21*sj3);
IkReal x16980=((1.0)*r00);
IkReal x16981=((1.0)*r10);
IkReal x16982=(cj3*r22);
IkReal x16983=(r11*sj3);
IkReal x16984=((1.0)*sj0);
IkReal x16985=(cj3*x16969);
IkReal x16986=(cj5*x16965);
IkReal x16987=(sj6*x16964);
IkReal x16988=(r10*x16964);
IkReal x16989=(r00*x16964);
IkReal x16990=(cj6*x16965);
IkReal x16991=(sj3*x16965);
IkReal x16992=(cj5*x16964);
IkReal x16993=(r20*x16964);
IkReal x16994=((1.0)*sj6*x16965);
evalcond[0]=((((-1.0)*cj5*x16973*x16987))+((cj1*sj2))+(((-1.0)*r22*x16964*x16967))+((r20*x16990))+(((-1.0)*r21*x16994))+(((-1.0)*r21*x16969*x16992)));
evalcond[1]=(((r10*x16990))+(((-1.0)*r12*x16964*x16967))+(((-1.0)*r11*x16994))+(((-1.0)*r10*x16977*x16987))+(((-1.0)*r11*x16969*x16992))+((sj0*sj1*sj2))+x16974);
evalcond[2]=((((-1.0)*r01*x16994))+((r00*x16990))+(((-1.0)*r00*x16977*x16987))+(((-1.0)*cj2*x16984))+((sj1*x16971))+(((-1.0)*r02*x16964*x16967))+(((-1.0)*r01*x16969*x16992)));
evalcond[3]=((((-1.0)*cj3*cj6*r21*x16967))+sj1+(((-1.0)*x16972*x16973*x16986))+(((-1.0)*r22*x16967*x16991))+((r21*x16964*x16972))+(((-1.0)*x16969*x16979*x16986))+(((-1.0)*r20*x16967*x16975))+((cj5*x16982))+(((-1.0)*sj3*x16969*x16993)));
evalcond[4]=((((-1.0)*x16973*x16975*x16986))+((r21*x16964*x16975))+(((-1.0)*cj2*x16976))+(((-1.0)*x16965*x16967*x16982))+((x16978*x16979))+(((-1.0)*x16985*x16993))+((r20*sj5*x16972))+(((-1.0)*r22*sj3*x16977))+(((-1.0)*r21*x16985*x16986)));
evalcond[5]=((((-1.0)*r02*x16967*x16991))+(((-1.0)*sj3*x16969*x16989))+(((-1.0)*r00*x16967*x16975))+(((-1.0)*x16966*x16969*x16986))+((cj5*x16968))+(((-1.0)*cj3*cj6*r01*x16967))+(((-1.0)*cj0*x16976))+((x16966*x16987))+(((-1.0)*r00*x16965*x16972*x16977)));
evalcond[6]=((((-1.0)*cj3*cj6*r11*x16967))+((cj3*x16970))+(((-1.0)*sj3*x16969*x16988))+(((-1.0)*x16969*x16983*x16986))+(((-1.0)*sj0*x16976))+(((-1.0)*r12*x16967*x16991))+(((-1.0)*r10*x16965*x16972*x16977))+(((-1.0)*r10*x16967*x16975))+((r11*x16964*x16972)));
evalcond[7]=(((r10*sj5*x16972))+((x16978*x16983))+(((-1.0)*cj2*sj1*x16984))+(((-1.0)*r11*x16985*x16986))+(((-1.0)*sj3*x16970))+(((-1.0)*x16985*x16988))+(((-1.0)*r10*x16965*x16975*x16977))+(((-1.0)*cj3*r12*x16965*x16967))+((r11*x16964*x16975))+x16971);
evalcond[8]=((((-1.0)*sj1*x16974))+((r00*sj5*x16972))+((r01*x16964*x16975))+(((-1.0)*r00*x16965*x16975*x16977))+((x16966*x16978))+(((-1.0)*x16985*x16989))+(((-1.0)*sj2*x16984))+(((-1.0)*r01*x16985*x16986))+(((-1.0)*x16965*x16967*x16968))+(((-1.0)*r02*sj3*x16977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x16995=cj6*cj6;
IkReal x16996=r20*r20;
IkReal x16997=cj5*cj5;
IkReal x16998=r21*r21;
IkReal x16999=r22*r22;
IkReal x17000=(cj6*sj5);
IkReal x17001=(cj3*r22);
IkReal x17002=(cj5*r21);
IkReal x17003=(sj3*sj6);
IkReal x17004=((1.0)*r22);
IkReal x17005=(cj6*r21);
IkReal x17006=(cj3*cj6);
IkReal x17007=(cj1*cj2);
IkReal x17008=(cj5*sj3);
IkReal x17009=(cj6*r20);
IkReal x17010=((1.0)*cj3);
IkReal x17011=(cj3*sj6);
IkReal x17012=(cj5*r20);
IkReal x17013=((2.0)*r20);
IkReal x17014=(r21*sj3);
IkReal x17015=((1.0)*x16996);
IkReal x17016=(cj3*x16995);
IkReal x17017=((1.0)*cj1*sj2);
IkReal x17018=(sj5*x16995);
IkReal x17019=(r22*x16997);
IkReal x17020=((1.0)*x16998);
IkReal x17021=(cj3*x16997);
CheckValue<IkReal> x17022 = IKatan2WithCheck(IkReal(((((-1.0)*sj5*x17001*x17017))+((x16998*x17000*x17003))+((r20*sj5*x17014))+(((-1.0)*x17002*x17003*x17004))+(((-1.0)*x17002*x17006*x17017))+(((-1.0)*r21*sj6*x17007))+((r22*x17008*x17009))+((x17007*x17009))+(((-1.0)*x17013*x17014*x17018))+(((-1.0)*x17000*x17003*x17015))+(((-1.0)*cj1*sj2*sj6*x17010*x17012)))),(((r22*sj5*x17007))+(((-1.0)*x17000*x17002*x17003*x17013))+((sj6*x17007*x17012))+((cj6*x17002*x17007))+((x17003*x17013*x17019))+((cj1*r20*sj2*x17006))+(((-1.0)*sj5*x17008*x17015))+(((2.0)*sj3*x17005*x17019))+(((-1.0)*cj1*r21*sj2*sj6*x17010))+(((-1.0)*sj3*x17004*x17005))+(((-1.0)*r20*x17003*x17004))+((sj5*x16999*x17008))+(((-1.0)*x17008*x17018*x17020))+((x16996*x17008*x17018))),IKFAST_ATAN2_MAGTHRESH);
if(!x17022.valid){
continue;
}
CheckValue<IkReal> x17023=IKPowWithIntegerCheck(IKsign(((((-1.0)*x16995*x16996*x17010))+((x16999*x17021))+((x16998*x17016))+(((-1.0)*x16999*x17010))+(((-1.0)*x16996*x16997*x17010))+((x16996*x16997*x17016))+(((-1.0)*x16998*x17010))+(((-1.0)*x16995*x16997*x16998*x17010))+((x17005*x17011*x17013))+(((-1.0)*x16997*x17005*x17011*x17013))+(((-2.0)*x17000*x17001*x17002))+(((-2.0)*sj5*sj6*x17001*x17012)))),-1);
if(!x17023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x17022.value)+(((1.5707963267949)*(x17023.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x17024=IKsin(j4);
IkReal x17025=IKcos(j4);
IkReal x17026=(cj3*r21);
IkReal x17027=((1.0)*sj5);
IkReal x17028=(r21*sj3);
IkReal x17029=((1.0)*cj5);
IkReal x17030=(r22*sj3);
IkReal x17031=(cj6*r20);
IkReal x17032=(cj3*r22);
IkReal x17033=(sj6*x17024);
IkReal x17034=(r20*sj3*sj6);
IkReal x17035=(cj3*r20*sj6);
IkReal x17036=((1.0)*x17024);
IkReal x17037=(x17025*x17029);
evalcond[0]=(((x17025*x17031))+((cj1*sj2))+(((-1.0)*cj6*r21*x17024*x17029))+(((-1.0)*r22*x17024*x17027))+(((-1.0)*r21*sj6*x17025))+(((-1.0)*r20*x17029*x17033)));
evalcond[1]=(sj1+((x17028*x17033))+(((-1.0)*x17034*x17037))+(((-1.0)*x17027*x17035))+(((-1.0)*x17025*x17027*x17030))+(((-1.0)*sj3*x17031*x17036))+(((-1.0)*cj6*x17028*x17037))+(((-1.0)*cj6*x17026*x17027))+((cj5*x17032)));
evalcond[2]=((((-1.0)*cj3*x17031*x17036))+(((-1.0)*cj1*cj2))+(((-1.0)*x17025*x17027*x17032))+(((-1.0)*x17035*x17037))+((sj5*x17034))+((cj6*sj5*x17028))+(((-1.0)*x17029*x17030))+((x17026*x17033))+(((-1.0)*cj6*x17026*x17037)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x17038=cj1*cj1;
IkReal x17039=((1.0)+(((-1.0)*x17038))+((x17038*(cj2*cj2))));
j0eval[0]=x17039;
j0eval[1]=IKsign(x17039);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x17040=(cj1*cj2);
j0eval[0]=((((-1.0)*sj1))+cj2+(((5.28144927536232)*x17040)));
j0eval[1]=IKsign(((((364.42)*x17040))+(((-69.0)*sj1))+(((69.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x17041=cj1*cj1;
IkReal x17042=(sj1*sj2);
IkReal x17043=((5.28144927536232)*cj1);
IkReal x17044=(cj2*x17041);
j0eval[0]=(((sj2*x17044))+((x17042*x17043))+x17042);
j0eval[1]=((((-1.0)*sj1))+(((-1.0)*x17044))+(((-1.0)*sj1*x17043)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x17045=(cj6*r21);
IkReal x17046=(cj3*r22);
IkReal x17047=(cj3*sj4);
IkReal x17048=(r21*sj6);
IkReal x17049=(r20*sj6);
IkReal x17050=(sj3*sj5);
IkReal x17051=((1.0)*sj5);
IkReal x17052=((0.01)*cj5);
IkReal x17053=(sj3*sj4);
IkReal x17054=((1.0)*cj5);
IkReal x17055=(cj3*cj4);
IkReal x17056=((1.0)*cj4);
IkReal x17057=((0.37429)*sj5);
IkReal x17058=((1.0)*cj6*r20);
IkReal x17059=(cj4*sj3*x17054);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x17048*x17056))+((cj4*cj6*r20))+(((-1.0)*sj4*x17045*x17054))+(((-1.0)*r22*sj4*x17051))+(((-1.0)*sj4*x17049*x17054)));
evalcond[2]=((((-1.0)*x17049*x17057))+(((-0.069)*cj1))+(((-1.0)*x17045*x17057))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x17049*x17052))+(((0.37429)*cj5*r22))+((x17045*x17052))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*x17049*x17059))+(((-1.0)*r22*x17050*x17056))+(((-1.0)*x17053*x17058))+(((-1.0)*x17045*x17059))+(((-1.0)*cj3*x17045*x17051))+((x17048*x17053))+((cj5*x17046))+(((-1.0)*cj3*x17049*x17051)));
evalcond[4]=((((-1.0)*x17047*x17058))+(((-1.0)*r22*sj3*x17054))+(((-1.0)*x17045*x17054*x17055))+((x17047*x17048))+((x17049*x17050))+(((-1.0)*x17049*x17054*x17055))+(((-1.0)*cj1))+((x17045*x17050))+(((-1.0)*cj4*x17046*x17051)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17060=(cj4*sj6);
IkReal x17061=((1.0)*r01);
IkReal x17062=(cj5*sj4);
IkReal x17063=(sj4*sj5);
IkReal x17064=(cj4*cj6);
if( IKabs((((r00*x17064))+(((-1.0)*cj6*x17061*x17062))+(((-1.0)*x17060*x17061))+(((-1.0)*r00*sj6*x17062))+(((-1.0)*r02*x17063)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x17064))+((r10*sj6*x17062))+((r12*x17063))+((r11*x17060))+((cj6*r11*x17062)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x17064))+(((-1.0)*cj6*x17061*x17062))+(((-1.0)*x17060*x17061))+(((-1.0)*r00*sj6*x17062))+(((-1.0)*r02*x17063))))+IKsqr(((((-1.0)*r10*x17064))+((r10*sj6*x17062))+((r12*x17063))+((r11*x17060))+((cj6*r11*x17062))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r00*x17064))+(((-1.0)*cj6*x17061*x17062))+(((-1.0)*x17060*x17061))+(((-1.0)*r00*sj6*x17062))+(((-1.0)*r02*x17063))), ((((-1.0)*r10*x17064))+((r10*sj6*x17062))+((r12*x17063))+((r11*x17060))+((cj6*r11*x17062))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17065=IKcos(j0);
IkReal x17066=IKsin(j0);
IkReal x17067=((1.0)*sj4);
IkReal x17068=(cj6*r10);
IkReal x17069=(sj5*sj6);
IkReal x17070=(cj3*cj5);
IkReal x17071=(r00*sj3);
IkReal x17072=((0.36442)*cj1);
IkReal x17073=(cj6*r01);
IkReal x17074=((1.0)*cj3);
IkReal x17075=((0.01)*cj5);
IkReal x17076=(r10*sj6);
IkReal x17077=(r12*sj5);
IkReal x17078=(sj3*sj5);
IkReal x17079=(r02*sj5);
IkReal x17080=(cj6*r00);
IkReal x17081=((1.0)*cj4);
IkReal x17082=(r00*sj6);
IkReal x17083=((0.37429)*cj5);
IkReal x17084=(cj6*r11);
IkReal x17085=((0.37429)*sj5);
IkReal x17086=(cj5*x17084);
IkReal x17087=((0.069)*x17066);
IkReal x17088=(r11*sj4*sj6);
IkReal x17089=(sj3*x17081);
IkReal x17090=(r01*sj4*sj6);
IkReal x17091=((1.0)*x17066);
IkReal x17092=((1.0)*x17065);
IkReal x17093=((0.069)*x17065);
IkReal x17094=((1.0)*cj5*sj3);
evalcond[0]=(((cj4*x17068))+x17065+(((-1.0)*x17067*x17086))+(((-1.0)*cj5*x17067*x17076))+(((-1.0)*x17067*x17077))+(((-1.0)*r11*sj6*x17081)));
evalcond[1]=((((-1.0)*cj5*x17067*x17082))+(((-1.0)*x17091))+((cj4*x17080))+(((-1.0)*r01*sj6*x17081))+(((-1.0)*cj5*x17067*x17073))+(((-1.0)*x17067*x17079)));
evalcond[2]=(((x17065*x17072))+(((0.01)*x17079))+((x17075*x17082))+(((-1.0)*sj1*x17093))+(((-1.0)*x17073*x17085))+(((-0.37429)*r00*x17069))+(((-1.0)*px))+x17093+((x17073*x17075))+((r02*x17083)));
evalcond[3]=(((x17075*x17076))+(((0.01)*x17077))+((x17075*x17084))+((r12*x17083))+((x17066*x17072))+(((-1.0)*py))+(((-1.0)*sj1*x17087))+x17087+(((-1.0)*x17084*x17085))+(((-0.37429)*r10*x17069)));
evalcond[4]=(((cj3*x17088))+(((-1.0)*x17070*x17076*x17081))+(((-1.0)*sj1*x17091))+((x17078*x17084))+(((-1.0)*cj4*x17074*x17077))+(((-1.0)*x17070*x17081*x17084))+(((-1.0)*cj3*x17067*x17068))+((r10*sj3*x17069))+(((-1.0)*r12*x17094)));
evalcond[5]=((((-1.0)*x17070*x17073*x17081))+(((-1.0)*sj1*x17092))+(((-1.0)*cj3*x17067*x17080))+(((-1.0)*cj4*x17074*x17079))+(((-1.0)*x17070*x17081*x17082))+(((-1.0)*r02*x17094))+((x17069*x17071))+((cj3*x17090))+((x17073*x17078)));
evalcond[6]=((((-1.0)*sj5*x17073*x17074))+((sj3*x17090))+(((-1.0)*r00*x17069*x17074))+(((-1.0)*cj5*sj6*x17071*x17081))+(((-1.0)*cj6*x17067*x17071))+((r02*x17070))+(((-1.0)*r02*x17078*x17081))+(((-1.0)*cj5*x17073*x17089))+(((-1.0)*cj1*x17092)));
evalcond[7]=((((-1.0)*r10*x17069*x17074))+((sj3*x17088))+(((-1.0)*x17077*x17089))+(((-1.0)*sj5*x17074*x17084))+(((-1.0)*sj3*x17067*x17068))+(((-1.0)*x17086*x17089))+(((-1.0)*cj5*x17076*x17089))+((r12*x17070))+(((-1.0)*cj1*x17091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17095=(cj6*r21);
IkReal x17096=(cj3*r22);
IkReal x17097=(cj3*sj4);
IkReal x17098=(r21*sj6);
IkReal x17099=(r20*sj6);
IkReal x17100=(sj3*sj5);
IkReal x17101=((1.0)*sj5);
IkReal x17102=((0.01)*cj5);
IkReal x17103=(sj3*sj4);
IkReal x17104=((1.0)*cj5);
IkReal x17105=(cj3*cj4);
IkReal x17106=((1.0)*cj4);
IkReal x17107=((0.37429)*sj5);
IkReal x17108=((1.0)*cj6*r20);
IkReal x17109=(cj4*sj3*x17104);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=((((-1.0)*x17098*x17106))+((cj4*cj6*r20))+(((-1.0)*sj4*x17095*x17104))+(((-1.0)*sj4*x17099*x17104))+(((-1.0)*r22*sj4*x17101)));
evalcond[2]=((((-1.0)*x17099*x17107))+(((-1.0)*x17095*x17107))+((x17099*x17102))+(((0.069)*cj1))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x17095*x17102))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*cj3*x17099*x17101))+sj1+((cj5*x17096))+(((-1.0)*cj3*x17095*x17101))+(((-1.0)*x17099*x17109))+(((-1.0)*x17095*x17109))+(((-1.0)*x17103*x17108))+((x17098*x17103))+(((-1.0)*r22*x17100*x17106)));
evalcond[4]=((((-1.0)*x17097*x17108))+cj1+(((-1.0)*cj4*x17096*x17101))+(((-1.0)*x17099*x17104*x17105))+((x17099*x17100))+(((-1.0)*x17095*x17104*x17105))+((x17095*x17100))+((x17097*x17098))+(((-1.0)*r22*sj3*x17104)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17110=((1.0)*cj4);
IkReal x17111=(sj4*sj5);
IkReal x17112=(cj5*sj4*sj6);
IkReal x17113=(cj5*cj6*sj4);
if( IKabs(((((-1.0)*cj6*r00*x17110))+((r02*x17111))+((r01*x17113))+((r00*x17112))+((cj4*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x17113))+((cj4*cj6*r10))+(((-1.0)*r10*x17112))+(((-1.0)*r11*sj6*x17110))+(((-1.0)*r12*x17111)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r00*x17110))+((r02*x17111))+((r01*x17113))+((r00*x17112))+((cj4*r01*sj6))))+IKsqr(((((-1.0)*r11*x17113))+((cj4*cj6*r10))+(((-1.0)*r10*x17112))+(((-1.0)*r11*sj6*x17110))+(((-1.0)*r12*x17111))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj6*r00*x17110))+((r02*x17111))+((r01*x17113))+((r00*x17112))+((cj4*r01*sj6))), ((((-1.0)*r11*x17113))+((cj4*cj6*r10))+(((-1.0)*r10*x17112))+(((-1.0)*r11*sj6*x17110))+(((-1.0)*r12*x17111))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17114=IKcos(j0);
IkReal x17115=IKsin(j0);
IkReal x17116=((1.0)*sj4);
IkReal x17117=(cj6*sj3);
IkReal x17118=(sj5*sj6);
IkReal x17119=(cj3*cj5);
IkReal x17120=(r00*sj3);
IkReal x17121=((0.36442)*cj1);
IkReal x17122=(cj5*r01);
IkReal x17123=((1.0)*cj3);
IkReal x17124=(r10*sj6);
IkReal x17125=((0.01)*cj5);
IkReal x17126=(r12*sj5);
IkReal x17127=(r01*sj5);
IkReal x17128=((1.0)*cj4);
IkReal x17129=(r02*sj5);
IkReal x17130=(cj3*cj6);
IkReal x17131=(r00*sj6);
IkReal x17132=((0.37429)*cj5);
IkReal x17133=(cj4*cj6);
IkReal x17134=(r11*sj5);
IkReal x17135=(cj5*sj3);
IkReal x17136=((0.37429)*cj6);
IkReal x17137=(cj5*cj6*r11);
IkReal x17138=((0.069)*x17115);
IkReal x17139=(r11*sj4*sj6);
IkReal x17140=(r01*sj4*sj6);
IkReal x17141=((1.0)*x17114);
IkReal x17142=((0.069)*x17114);
evalcond[0]=((((-1.0)*cj6*x17116*x17122))+(((-1.0)*r01*sj6*x17128))+(((-1.0)*cj5*x17116*x17131))+x17115+((r00*x17133))+(((-1.0)*x17116*x17129)));
evalcond[1]=((((-1.0)*x17116*x17137))+(((-1.0)*x17141))+((r10*x17133))+(((-1.0)*x17116*x17126))+(((-1.0)*r11*sj6*x17128))+(((-1.0)*cj5*x17116*x17124)));
evalcond[2]=(((sj1*x17142))+((r02*x17132))+((x17114*x17121))+(((0.01)*x17129))+((x17125*x17131))+(((-1.0)*x17127*x17136))+(((-1.0)*px))+(((-0.37429)*r00*x17118))+(((0.01)*cj6*x17122))+x17142);
evalcond[3]=(((sj1*x17138))+((r12*x17132))+((x17115*x17121))+(((-0.37429)*r10*x17118))+(((-1.0)*x17134*x17136))+(((0.01)*x17126))+(((-1.0)*py))+x17138+((x17124*x17125))+((cj6*r11*x17125)));
evalcond[4]=(((x17117*x17134))+((cj3*x17139))+(((-1.0)*cj6*r11*x17119*x17128))+(((-1.0)*x17119*x17124*x17128))+(((-1.0)*r12*x17135))+(((-1.0)*cj4*x17123*x17126))+((r10*sj3*x17118))+((sj1*x17115))+(((-1.0)*r10*x17116*x17130)));
evalcond[5]=((((-1.0)*x17119*x17128*x17131))+((x17117*x17127))+(((-1.0)*r02*x17135))+((cj3*x17140))+(((-1.0)*r00*x17116*x17130))+(((-1.0)*cj4*x17123*x17129))+(((-1.0)*cj6*r01*x17119*x17128))+((x17118*x17120))+((sj1*x17114)));
evalcond[6]=((((-1.0)*cj5*sj6*x17120*x17128))+((sj3*x17140))+(((-1.0)*cj1*x17141))+((r02*x17119))+(((-1.0)*x17117*x17122*x17128))+(((-1.0)*r00*x17116*x17117))+(((-1.0)*sj3*x17128*x17129))+(((-1.0)*r00*x17118*x17123))+(((-1.0)*cj6*x17123*x17127)));
evalcond[7]=((((-1.0)*cj6*x17123*x17134))+(((-1.0)*x17124*x17128*x17135))+(((-1.0)*sj3*x17126*x17128))+(((-1.0)*cj5*r11*x17117*x17128))+((sj3*x17139))+(((-1.0)*r10*x17118*x17123))+(((-1.0)*r10*x17116*x17117))+((r12*x17119))+(((-1.0)*cj1*x17115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17143=(cj4*sj3);
IkReal x17144=(cj3*r22);
IkReal x17145=(cj3*sj4);
IkReal x17146=(r21*sj6);
IkReal x17147=(r20*sj6);
IkReal x17148=((1.0)*cj5);
IkReal x17149=(sj3*sj5);
IkReal x17150=((1.0)*sj5);
IkReal x17151=(cj6*r21);
IkReal x17152=((0.01)*cj5);
IkReal x17153=(sj3*sj4);
IkReal x17154=(cj3*cj4);
IkReal x17155=(cj4*cj6);
IkReal x17156=((1.0)*cj4);
IkReal x17157=(sj4*sj6);
IkReal x17158=((0.37429)*sj5);
IkReal x17159=(cj6*x17148);
IkReal x17160=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*sj4*x17147*x17148))+(((-1.0)*x17146*x17156))+(((-1.0)*r22*sj4*x17150))+((r20*x17155))+(((-1.0)*sj4*x17148*x17151)));
evalcond[2]=((((-1.0)*x17151*x17158))+((x17151*x17152))+(((0.01)*r22*sj5))+(((-1.0)*x17147*x17158))+(((-1.0)*pz))+((x17147*x17152))+(((0.37429)*cj5*r22)));
evalcond[3]=(((r10*x17155))+(((-1.0)*r12*sj4*x17150))+(((-1.0)*r11*sj6*x17156))+(((-1.0)*r11*sj4*x17159))+(((-1.0)*r10*x17148*x17157)));
evalcond[4]=((((-1.0)*r00*x17148*x17157))+(((-1.0)*r01*sj4*x17159))+((r00*x17155))+(((-1.0)*r01*sj6*x17156))+(((-1.0)*r02*sj4*x17150)));
evalcond[5]=((((-1.0)*x17153*x17160))+(((-1.0)*x17143*x17147*x17148))+(((-1.0)*cj3*x17147*x17150))+(((-1.0)*r22*x17143*x17150))+(((-1.0)*cj3*x17150*x17151))+((cj5*x17144))+(((-1.0)*x17143*x17148*x17151))+((x17146*x17153)));
evalcond[6]=(((x17147*x17149))+(((-1.0)*x17148*x17151*x17154))+(((-1.0)*x17145*x17160))+(((-1.0)*x17147*x17148*x17154))+((x17145*x17146))+(((-1.0)*cj4*x17144*x17150))+(((-1.0)*r22*sj3*x17148))+((x17149*x17151)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17161=((0.842227766698146)*sj5);
IkReal x17162=(r10*sj6);
IkReal x17163=(cj6*r01);
IkReal x17164=((0.00358229604870815)*cj5);
IkReal x17165=(cj6*r11);
IkReal x17166=((0.0225020109192911)*sj5);
IkReal x17167=((0.134081758807097)*sj5);
IkReal x17168=(r00*sj6);
IkReal x17169=((0.134081758807097)*cj5);
IkReal x17170=((0.0225020109192911)*cj5);
IkReal x17171=((0.842227766698146)*cj5);
IkReal x17172=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*r12*x17166))+(((-1.0)*x17165*x17170))+(((2.25020109192911)*py))+(((-1.0)*x17162*x17170))+((x17164*x17168))+(((-0.358229604870815)*px))+(((-1.0)*x17163*x17167))+((x17163*x17164))+(((-1.0)*x17167*x17168))+((r02*x17169))+((x17161*x17165))+((x17161*x17162))+((r02*x17172))+(((-1.0)*r12*x17171)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r12*x17169))+(((-1.0)*x17162*x17164))+(((2.25020109192911)*px))+(((-1.0)*x17163*x17170))+(((0.358229604870815)*py))+(((-1.0)*x17168*x17170))+((x17165*x17167))+((x17162*x17167))+(((-1.0)*r02*x17166))+((x17161*x17163))+((x17161*x17168))+(((-1.0)*r02*x17171))+(((-1.0)*x17164*x17165))+(((-1.0)*r12*x17172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x17166))+(((-1.0)*x17165*x17170))+(((2.25020109192911)*py))+(((-1.0)*x17162*x17170))+((x17164*x17168))+(((-0.358229604870815)*px))+(((-1.0)*x17163*x17167))+((x17163*x17164))+(((-1.0)*x17167*x17168))+((r02*x17169))+((x17161*x17165))+((x17161*x17162))+((r02*x17172))+(((-1.0)*r12*x17171))))+IKsqr(((((-1.0)*r12*x17169))+(((-1.0)*x17162*x17164))+(((2.25020109192911)*px))+(((-1.0)*x17163*x17170))+(((0.358229604870815)*py))+(((-1.0)*x17168*x17170))+((x17165*x17167))+((x17162*x17167))+(((-1.0)*r02*x17166))+((x17161*x17163))+((x17161*x17168))+(((-1.0)*r02*x17171))+(((-1.0)*x17164*x17165))+(((-1.0)*r12*x17172))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x17166))+(((-1.0)*x17165*x17170))+(((2.25020109192911)*py))+(((-1.0)*x17162*x17170))+((x17164*x17168))+(((-0.358229604870815)*px))+(((-1.0)*x17163*x17167))+((x17163*x17164))+(((-1.0)*x17167*x17168))+((r02*x17169))+((x17161*x17165))+((x17161*x17162))+((r02*x17172))+(((-1.0)*r12*x17171))), ((((-1.0)*r12*x17169))+(((-1.0)*x17162*x17164))+(((2.25020109192911)*px))+(((-1.0)*x17163*x17170))+(((0.358229604870815)*py))+(((-1.0)*x17168*x17170))+((x17165*x17167))+((x17162*x17167))+(((-1.0)*r02*x17166))+((x17161*x17163))+((x17161*x17168))+(((-1.0)*r02*x17171))+(((-1.0)*x17164*x17165))+(((-1.0)*r12*x17172))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17173=IKsin(j0);
IkReal x17174=IKcos(j0);
IkReal x17175=(r10*sj3);
IkReal x17176=(cj3*r00);
IkReal x17177=(sj5*sj6);
IkReal x17178=(cj5*r12);
IkReal x17179=(r00*sj3);
IkReal x17180=(cj3*r10);
IkReal x17181=(cj5*sj6);
IkReal x17182=((1.0)*cj4);
IkReal x17183=(cj5*r02);
IkReal x17184=(cj3*r01);
IkReal x17185=(sj4*sj6);
IkReal x17186=(r12*sj5);
IkReal x17187=(cj6*sj5);
IkReal x17188=(r01*sj3);
IkReal x17189=(r11*sj3);
IkReal x17190=((1.0)*sj3);
IkReal x17191=(r02*sj5);
IkReal x17192=(cj5*cj6);
IkReal x17193=(cj3*r11);
IkReal x17194=((1.0)*x17173);
IkReal x17195=((1.0)*cj6*sj4);
IkReal x17196=(r11*x17185);
IkReal x17197=((0.01)*x17192);
evalcond[0]=((((0.43342)*x17174))+(((0.01)*r00*x17181))+(((0.01)*x17191))+(((-1.0)*px))+((r01*x17197))+(((-0.37429)*r01*x17187))+(((-0.069)*x17173))+(((-0.37429)*r00*x17177))+(((0.37429)*x17183)));
evalcond[1]=((((0.43342)*x17173))+(((0.01)*x17186))+((r11*x17197))+(((0.01)*r10*x17181))+(((0.069)*x17174))+(((0.37429)*x17178))+(((-1.0)*py))+(((-0.37429)*r10*x17177))+(((-0.37429)*r11*x17187)));
evalcond[2]=((((-1.0)*x17180*x17195))+(((-1.0)*x17180*x17181*x17182))+((x17187*x17189))+(((-1.0)*x17182*x17192*x17193))+(((-1.0)*cj3*x17182*x17186))+((x17175*x17177))+(((-1.0)*x17178*x17190))+x17174+((x17185*x17193)));
evalcond[3]=((((-1.0)*x17176*x17195))+(((-1.0)*x17182*x17184*x17192))+((x17187*x17188))+(((-1.0)*x17194))+(((-1.0)*cj3*x17182*x17191))+(((-1.0)*x17183*x17190))+(((-1.0)*x17176*x17181*x17182))+((x17177*x17179))+((x17184*x17185)));
evalcond[4]=(((x17185*x17188))+(((-1.0)*x17182*x17188*x17192))+(((-1.0)*x17179*x17195))+(((-1.0)*x17179*x17181*x17182))+(((-1.0)*x17176*x17177))+(((-1.0)*x17184*x17187))+(((-1.0)*x17174))+(((-1.0)*sj3*x17182*x17191))+((cj3*x17183)));
evalcond[5]=((((-1.0)*x17175*x17181*x17182))+((x17185*x17189))+(((-1.0)*x17194))+(((-1.0)*x17187*x17193))+(((-1.0)*sj3*x17182*x17186))+((cj3*x17178))+(((-1.0)*x17182*x17189*x17192))+(((-1.0)*x17175*x17195))+(((-1.0)*x17177*x17180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17198=(cj4*sj3);
IkReal x17199=(cj3*r22);
IkReal x17200=(cj3*sj4);
IkReal x17201=(r21*sj6);
IkReal x17202=(r20*sj6);
IkReal x17203=((1.0)*cj5);
IkReal x17204=(sj3*sj5);
IkReal x17205=((1.0)*sj5);
IkReal x17206=(cj6*r21);
IkReal x17207=((0.01)*cj5);
IkReal x17208=(sj3*sj4);
IkReal x17209=(cj3*cj4);
IkReal x17210=(cj4*cj6);
IkReal x17211=((1.0)*cj4);
IkReal x17212=(sj4*sj6);
IkReal x17213=((0.37429)*sj5);
IkReal x17214=(cj6*x17203);
IkReal x17215=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*sj4*x17202*x17203))+(((-1.0)*sj4*x17203*x17206))+(((-1.0)*r22*sj4*x17205))+((r20*x17210))+(((-1.0)*x17201*x17211)));
evalcond[2]=(((x17202*x17207))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x17206*x17207))+(((-1.0)*x17202*x17213))+(((-1.0)*x17206*x17213))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r11*sj4*x17214))+(((-1.0)*r11*sj6*x17211))+(((-1.0)*r12*sj4*x17205))+(((-1.0)*r10*x17203*x17212))+((r10*x17210)));
evalcond[4]=((((-1.0)*r02*sj4*x17205))+((r00*x17210))+(((-1.0)*r01*sj4*x17214))+(((-1.0)*r00*x17203*x17212))+(((-1.0)*r01*sj6*x17211)));
evalcond[5]=(((x17201*x17208))+(((-1.0)*cj3*x17205*x17206))+(((-1.0)*x17198*x17203*x17206))+(((-1.0)*cj3*x17202*x17205))+(((-1.0)*x17208*x17215))+(((-1.0)*r22*x17198*x17205))+(((-1.0)*x17198*x17202*x17203))+((cj5*x17199)));
evalcond[6]=(((x17202*x17204))+(((-1.0)*x17202*x17203*x17209))+(((-1.0)*x17203*x17206*x17209))+((x17200*x17201))+((x17204*x17206))+(((-1.0)*r22*sj3*x17203))+(((-1.0)*x17200*x17215))+(((-1.0)*cj4*x17199*x17205)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17216=((0.842227766698146)*sj5);
IkReal x17217=(r10*sj6);
IkReal x17218=(cj6*r01);
IkReal x17219=((0.00358229604870815)*cj5);
IkReal x17220=(cj6*r11);
IkReal x17221=((0.0225020109192911)*sj5);
IkReal x17222=((0.134081758807097)*sj5);
IkReal x17223=(r00*sj6);
IkReal x17224=((0.134081758807097)*cj5);
IkReal x17225=((0.0225020109192911)*cj5);
IkReal x17226=((0.842227766698146)*cj5);
IkReal x17227=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*x17219*x17223))+(((-1.0)*r02*x17224))+(((-1.0)*r02*x17227))+((x17222*x17223))+(((2.25020109192911)*py))+(((-1.0)*x17218*x17219))+(((-1.0)*x17220*x17225))+(((0.358229604870815)*px))+((x17216*x17220))+(((-1.0)*r12*x17221))+(((-1.0)*r12*x17226))+((x17218*x17222))+(((-1.0)*x17217*x17225))+((x17216*x17217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x17227))+((r12*x17224))+(((-1.0)*r02*x17221))+(((-1.0)*r02*x17226))+(((2.25020109192911)*px))+(((-1.0)*x17223*x17225))+(((-1.0)*x17220*x17222))+(((-0.358229604870815)*py))+((x17216*x17223))+((x17219*x17220))+(((-1.0)*x17217*x17222))+((x17217*x17219))+((x17216*x17218))+(((-1.0)*x17218*x17225)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x17219*x17223))+(((-1.0)*r02*x17224))+(((-1.0)*r02*x17227))+((x17222*x17223))+(((2.25020109192911)*py))+(((-1.0)*x17218*x17219))+(((-1.0)*x17220*x17225))+(((0.358229604870815)*px))+((x17216*x17220))+(((-1.0)*r12*x17221))+(((-1.0)*r12*x17226))+((x17218*x17222))+(((-1.0)*x17217*x17225))+((x17216*x17217))))+IKsqr((((r12*x17227))+((r12*x17224))+(((-1.0)*r02*x17221))+(((-1.0)*r02*x17226))+(((2.25020109192911)*px))+(((-1.0)*x17223*x17225))+(((-1.0)*x17220*x17222))+(((-0.358229604870815)*py))+((x17216*x17223))+((x17219*x17220))+(((-1.0)*x17217*x17222))+((x17217*x17219))+((x17216*x17218))+(((-1.0)*x17218*x17225))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x17219*x17223))+(((-1.0)*r02*x17224))+(((-1.0)*r02*x17227))+((x17222*x17223))+(((2.25020109192911)*py))+(((-1.0)*x17218*x17219))+(((-1.0)*x17220*x17225))+(((0.358229604870815)*px))+((x17216*x17220))+(((-1.0)*r12*x17221))+(((-1.0)*r12*x17226))+((x17218*x17222))+(((-1.0)*x17217*x17225))+((x17216*x17217))), (((r12*x17227))+((r12*x17224))+(((-1.0)*r02*x17221))+(((-1.0)*r02*x17226))+(((2.25020109192911)*px))+(((-1.0)*x17223*x17225))+(((-1.0)*x17220*x17222))+(((-0.358229604870815)*py))+((x17216*x17223))+((x17219*x17220))+(((-1.0)*x17217*x17222))+((x17217*x17219))+((x17216*x17218))+(((-1.0)*x17218*x17225))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17228=IKsin(j0);
IkReal x17229=IKcos(j0);
IkReal x17230=(r10*sj3);
IkReal x17231=(cj3*r00);
IkReal x17232=(sj5*sj6);
IkReal x17233=(cj5*r12);
IkReal x17234=(r00*sj3);
IkReal x17235=((1.0)*cj3);
IkReal x17236=(cj5*r02);
IkReal x17237=((0.01)*cj5);
IkReal x17238=(r10*sj6);
IkReal x17239=(cj6*r11);
IkReal x17240=(cj4*cj5);
IkReal x17241=((1.0)*sj3);
IkReal x17242=(cj6*r01);
IkReal x17243=((1.0)*sj6);
IkReal x17244=((0.01)*sj5);
IkReal x17245=((1.0)*x17229);
IkReal x17246=((1.0)*cj6*sj4);
IkReal x17247=(sj5*x17242);
IkReal x17248=(r11*sj4*sj6);
IkReal x17249=(cj4*r12*sj5);
IkReal x17250=(r01*sj4*sj6);
IkReal x17251=(cj4*r02*sj5);
evalcond[0]=(((r02*x17244))+(((0.069)*x17228))+((r00*sj6*x17237))+(((-1.0)*px))+(((-0.37429)*r00*x17232))+(((0.43342)*x17229))+(((-0.37429)*x17247))+(((0.37429)*x17236))+((x17237*x17242)));
evalcond[1]=(((r12*x17244))+(((-1.0)*py))+((x17237*x17238))+((x17237*x17239))+(((0.43342)*x17228))+(((-0.069)*x17229))+(((-0.37429)*sj5*x17239))+(((0.37429)*x17233))+(((-0.37429)*r10*x17232)));
evalcond[2]=((((-1.0)*x17235*x17240*x17242))+((cj3*x17250))+((sj3*x17247))+(((-1.0)*x17235*x17251))+(((-1.0)*x17231*x17240*x17243))+(((-1.0)*x17236*x17241))+((x17232*x17234))+x17228+(((-1.0)*x17231*x17246)));
evalcond[3]=(((sj3*sj5*x17239))+(((-1.0)*cj6*r10*sj4*x17235))+((x17230*x17232))+((cj3*x17248))+(((-1.0)*x17235*x17239*x17240))+(((-1.0)*x17245))+(((-1.0)*x17235*x17249))+(((-1.0)*x17235*x17238*x17240))+(((-1.0)*x17233*x17241)));
evalcond[4]=((((-1.0)*x17234*x17246))+(((-1.0)*x17240*x17241*x17242))+(((-1.0)*x17241*x17251))+(((-1.0)*x17245))+(((-1.0)*x17235*x17247))+(((-1.0)*x17234*x17240*x17243))+(((-1.0)*x17231*x17232))+((sj3*x17250))+((cj3*x17236)));
evalcond[5]=((((-1.0)*x17241*x17249))+((sj3*x17248))+(((-1.0)*x17239*x17240*x17241))+(((-1.0)*sj5*x17235*x17239))+(((-1.0)*r10*x17232*x17235))+(((-1.0)*x17230*x17240*x17243))+(((-1.0)*x17228))+(((-1.0)*x17230*x17246))+((cj3*x17233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17252=(cj4*sj3);
IkReal x17253=(cj3*r22);
IkReal x17254=(cj3*sj4);
IkReal x17255=(r21*sj6);
IkReal x17256=(r20*sj6);
IkReal x17257=((1.0)*cj5);
IkReal x17258=(sj3*sj5);
IkReal x17259=((1.0)*sj5);
IkReal x17260=(cj6*r21);
IkReal x17261=((0.01)*cj5);
IkReal x17262=(sj3*sj4);
IkReal x17263=(cj3*cj4);
IkReal x17264=(cj4*cj6);
IkReal x17265=((1.0)*cj4);
IkReal x17266=(sj4*sj6);
IkReal x17267=((0.37429)*sj5);
IkReal x17268=(cj6*x17257);
IkReal x17269=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*sj4*x17257*x17260))+(((-1.0)*r22*sj4*x17259))+((r20*x17264))+(((-1.0)*sj4*x17256*x17257))+(((-1.0)*x17255*x17265)));
evalcond[2]=(((x17256*x17261))+(((-1.0)*x17256*x17267))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x17260*x17267))+(((0.37429)*cj5*r22))+((x17260*x17261)));
evalcond[3]=((((-1.0)*r11*sj6*x17265))+(((-1.0)*r11*sj4*x17268))+((r10*x17264))+(((-1.0)*r12*sj4*x17259))+(((-1.0)*r10*x17257*x17266)));
evalcond[4]=((((-1.0)*r01*sj6*x17265))+((r00*x17264))+(((-1.0)*r01*sj4*x17268))+(((-1.0)*r00*x17257*x17266))+(((-1.0)*r02*sj4*x17259)));
evalcond[5]=((((-1.0)*r22*x17252*x17259))+(((-1.0)*cj3*x17259*x17260))+(((-1.0)*cj3*x17256*x17259))+(((-1.0)*x17262*x17269))+(((-1.0)*x17252*x17257*x17260))+((x17255*x17262))+((cj5*x17253))+(((-1.0)*x17252*x17256*x17257)));
evalcond[6]=((((-1.0)*r22*sj3*x17257))+((x17254*x17255))+(((-1.0)*x17256*x17257*x17263))+(((-1.0)*x17257*x17260*x17263))+((x17258*x17260))+((x17256*x17258))+(((-1.0)*cj4*x17253*x17259))+(((-1.0)*x17254*x17269)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17270=((0.0320990151198118)*sj5);
IkReal x17271=((0.00749723120732182)*sj5);
IkReal x17272=(cj6*r01);
IkReal x17273=((0.00749723120732182)*cj5);
IkReal x17274=(r00*sj6);
IkReal x17275=((1.20143403691943)*sj5);
IkReal x17276=((0.0320990151198118)*cj5);
IkReal x17277=(r10*sj6);
IkReal x17278=((0.280613866858848)*cj5);
IkReal x17279=((1.20143403691943)*cj5);
IkReal x17280=((0.280613866858848)*sj5);
IkReal x17281=(cj6*r11);
IkReal x17282=(cj6*x17275);
IkReal x17283=(cj6*x17276);
if( IKabs(((((-0.749723120732182)*px))+((r12*x17279))+((r12*x17270))+(((-1.0)*x17275*x17281))+(((-1.0)*x17274*x17280))+((r02*x17271))+((r02*x17278))+((x17272*x17273))+((x17273*x17274))+(((-1.0)*x17275*x17277))+((x17276*x17277))+(((-1.0)*x17272*x17280))+((x17276*x17281))+(((-3.20990151198118)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x17274*x17276))+((r02*x17270))+((r02*x17279))+(((-1.0)*r12*x17271))+(((-1.0)*r12*x17278))+((x17272*x17276))+((x17277*x17280))+(((-1.0)*x17272*x17275))+(((-1.0)*x17274*x17275))+(((-1.0)*x17273*x17277))+(((-1.0)*x17273*x17281))+(((0.749723120732182)*py))+((x17280*x17281))+(((-3.20990151198118)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.749723120732182)*px))+((r12*x17279))+((r12*x17270))+(((-1.0)*x17275*x17281))+(((-1.0)*x17274*x17280))+((r02*x17271))+((r02*x17278))+((x17272*x17273))+((x17273*x17274))+(((-1.0)*x17275*x17277))+((x17276*x17277))+(((-1.0)*x17272*x17280))+((x17276*x17281))+(((-3.20990151198118)*py))))+IKsqr((((x17274*x17276))+((r02*x17270))+((r02*x17279))+(((-1.0)*r12*x17271))+(((-1.0)*r12*x17278))+((x17272*x17276))+((x17277*x17280))+(((-1.0)*x17272*x17275))+(((-1.0)*x17274*x17275))+(((-1.0)*x17273*x17277))+(((-1.0)*x17273*x17281))+(((0.749723120732182)*py))+((x17280*x17281))+(((-3.20990151198118)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.749723120732182)*px))+((r12*x17279))+((r12*x17270))+(((-1.0)*x17275*x17281))+(((-1.0)*x17274*x17280))+((r02*x17271))+((r02*x17278))+((x17272*x17273))+((x17273*x17274))+(((-1.0)*x17275*x17277))+((x17276*x17277))+(((-1.0)*x17272*x17280))+((x17276*x17281))+(((-3.20990151198118)*py))), (((x17274*x17276))+((r02*x17270))+((r02*x17279))+(((-1.0)*r12*x17271))+(((-1.0)*r12*x17278))+((x17272*x17276))+((x17277*x17280))+(((-1.0)*x17272*x17275))+(((-1.0)*x17274*x17275))+(((-1.0)*x17273*x17277))+(((-1.0)*x17273*x17281))+(((0.749723120732182)*py))+((x17280*x17281))+(((-3.20990151198118)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17284=IKcos(j0);
IkReal x17285=IKsin(j0);
IkReal x17286=(r10*sj3);
IkReal x17287=(cj3*r00);
IkReal x17288=(sj5*sj6);
IkReal x17289=(cj3*cj5);
IkReal x17290=(r00*sj3);
IkReal x17291=(cj3*r10);
IkReal x17292=(cj5*sj6);
IkReal x17293=((1.0)*cj4);
IkReal x17294=(cj5*cj6);
IkReal x17295=(r01*sj3);
IkReal x17296=(cj3*r01);
IkReal x17297=(sj4*sj6);
IkReal x17298=(r12*sj5);
IkReal x17299=(cj6*sj5);
IkReal x17300=((0.37429)*cj5);
IkReal x17301=(r11*sj3);
IkReal x17302=(r02*sj5);
IkReal x17303=((1.0)*cj6*sj4);
IkReal x17304=(r11*x17297);
IkReal x17305=((1.0)*cj5*sj3);
evalcond[0]=((((-0.069)*x17285))+(((-0.37429)*r01*x17299))+(((0.01)*x17302))+(((-0.29542)*x17284))+(((-1.0)*px))+((r02*x17300))+(((0.01)*r01*x17294))+(((0.01)*r00*x17292))+(((-0.37429)*r00*x17288)));
evalcond[1]=((((-0.37429)*r11*x17299))+(((0.01)*r11*x17294))+(((0.069)*x17284))+(((-0.29542)*x17285))+(((-0.37429)*r10*x17288))+((r12*x17300))+(((-1.0)*py))+(((0.01)*x17298))+(((0.01)*r10*x17292)));
evalcond[2]=(((x17299*x17301))+(((-1.0)*cj6*r11*x17289*x17293))+((cj3*x17304))+((x17286*x17288))+(((-1.0)*x17291*x17303))+(((-1.0)*cj3*x17293*x17298))+x17284+(((-1.0)*r10*sj6*x17289*x17293))+(((-1.0)*r12*x17305)));
evalcond[3]=((((-1.0)*x17290*x17292*x17293))+(((-1.0)*sj3*x17293*x17302))+(((-1.0)*x17290*x17303))+(((-1.0)*x17287*x17288))+((x17295*x17297))+(((-1.0)*x17293*x17294*x17295))+x17284+((r02*x17289))+(((-1.0)*x17296*x17299)));
evalcond[4]=(((x17297*x17301))+(((-1.0)*x17293*x17294*x17301))+((r12*x17289))+(((-1.0)*sj3*x17293*x17298))+(((-1.0)*x17288*x17291))+(((-1.0)*x17286*x17303))+(((-1.0)*x17286*x17292*x17293))+x17285+(((-1.0)*cj3*r11*x17299)));
evalcond[5]=((((-1.0)*cj3*x17293*x17302))+(((-1.0)*r02*x17305))+(((-1.0)*x17287*x17292*x17293))+(((-1.0)*x17287*x17303))+((x17296*x17297))+((x17295*x17299))+(((-1.0)*cj6*r01*x17289*x17293))+(((-1.0)*x17285))+((x17288*x17290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17306=(cj4*sj3);
IkReal x17307=(cj3*r22);
IkReal x17308=(cj3*sj4);
IkReal x17309=(r21*sj6);
IkReal x17310=(r20*sj6);
IkReal x17311=((1.0)*cj5);
IkReal x17312=(sj3*sj5);
IkReal x17313=((1.0)*sj5);
IkReal x17314=(cj6*r21);
IkReal x17315=((0.01)*cj5);
IkReal x17316=(sj3*sj4);
IkReal x17317=(cj3*cj4);
IkReal x17318=(cj4*cj6);
IkReal x17319=((1.0)*cj4);
IkReal x17320=(sj4*sj6);
IkReal x17321=((0.37429)*sj5);
IkReal x17322=(cj6*x17311);
IkReal x17323=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((1.0)+((r20*x17318))+(((-1.0)*sj4*x17310*x17311))+(((-1.0)*sj4*x17311*x17314))+(((-1.0)*x17309*x17319))+(((-1.0)*r22*sj4*x17313)));
evalcond[2]=((((-1.0)*x17310*x17321))+(((-1.0)*x17314*x17321))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x17310*x17315))+((x17314*x17315))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r12*sj4*x17313))+(((-1.0)*r11*sj4*x17322))+((r10*x17318))+(((-1.0)*r10*x17311*x17320))+(((-1.0)*r11*sj6*x17319)));
evalcond[4]=(((r00*x17318))+(((-1.0)*r01*sj6*x17319))+(((-1.0)*r01*sj4*x17322))+(((-1.0)*r02*sj4*x17313))+(((-1.0)*r00*x17311*x17320)));
evalcond[5]=((((-1.0)*cj3*x17313*x17314))+(((-1.0)*cj3*x17310*x17313))+(((-1.0)*x17316*x17323))+((x17309*x17316))+(((-1.0)*x17306*x17310*x17311))+((cj5*x17307))+(((-1.0)*r22*x17306*x17313))+(((-1.0)*x17306*x17311*x17314)));
evalcond[6]=((((-1.0)*x17311*x17314*x17317))+((x17308*x17309))+(((-1.0)*cj4*x17307*x17313))+(((-1.0)*x17310*x17311*x17317))+(((-1.0)*x17308*x17323))+(((-1.0)*r22*sj3*x17311))+((x17312*x17314))+((x17310*x17312)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17324=((0.0320990151198118)*sj5);
IkReal x17325=((0.00749723120732182)*sj5);
IkReal x17326=(cj6*r01);
IkReal x17327=((0.00749723120732182)*cj5);
IkReal x17328=(r00*sj6);
IkReal x17329=((1.20143403691943)*sj5);
IkReal x17330=((0.0320990151198118)*cj5);
IkReal x17331=(r10*sj6);
IkReal x17332=((0.280613866858848)*cj5);
IkReal x17333=((1.20143403691943)*cj5);
IkReal x17334=((0.280613866858848)*sj5);
IkReal x17335=(cj6*r11);
IkReal x17336=(cj6*x17329);
IkReal x17337=(cj6*x17330);
if( IKabs(((((-1.0)*x17326*x17327))+(((-1.0)*r02*x17325))+(((-1.0)*r02*x17332))+(((-1.0)*x17329*x17335))+(((-1.0)*x17329*x17331))+((r12*x17324))+((x17330*x17335))+((x17330*x17331))+((r12*x17333))+((x17328*x17334))+(((0.749723120732182)*px))+(((-1.0)*x17327*x17328))+(((-3.20990151198118)*py))+((x17326*x17334)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.749723120732182)*py))+(((-1.0)*x17334*x17335))+(((-1.0)*x17326*x17329))+(((-1.0)*x17328*x17329))+((r02*x17324))+((x17327*x17331))+((x17327*x17335))+((r12*x17325))+((r02*x17333))+((r12*x17332))+(((-1.0)*x17331*x17334))+((x17328*x17330))+(((-3.20990151198118)*px))+((x17326*x17330)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x17326*x17327))+(((-1.0)*r02*x17325))+(((-1.0)*r02*x17332))+(((-1.0)*x17329*x17335))+(((-1.0)*x17329*x17331))+((r12*x17324))+((x17330*x17335))+((x17330*x17331))+((r12*x17333))+((x17328*x17334))+(((0.749723120732182)*px))+(((-1.0)*x17327*x17328))+(((-3.20990151198118)*py))+((x17326*x17334))))+IKsqr(((((-0.749723120732182)*py))+(((-1.0)*x17334*x17335))+(((-1.0)*x17326*x17329))+(((-1.0)*x17328*x17329))+((r02*x17324))+((x17327*x17331))+((x17327*x17335))+((r12*x17325))+((r02*x17333))+((r12*x17332))+(((-1.0)*x17331*x17334))+((x17328*x17330))+(((-3.20990151198118)*px))+((x17326*x17330))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*x17326*x17327))+(((-1.0)*r02*x17325))+(((-1.0)*r02*x17332))+(((-1.0)*x17329*x17335))+(((-1.0)*x17329*x17331))+((r12*x17324))+((x17330*x17335))+((x17330*x17331))+((r12*x17333))+((x17328*x17334))+(((0.749723120732182)*px))+(((-1.0)*x17327*x17328))+(((-3.20990151198118)*py))+((x17326*x17334))), ((((-0.749723120732182)*py))+(((-1.0)*x17334*x17335))+(((-1.0)*x17326*x17329))+(((-1.0)*x17328*x17329))+((r02*x17324))+((x17327*x17331))+((x17327*x17335))+((r12*x17325))+((r02*x17333))+((r12*x17332))+(((-1.0)*x17331*x17334))+((x17328*x17330))+(((-3.20990151198118)*px))+((x17326*x17330))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17338=IKcos(j0);
IkReal x17339=IKsin(j0);
IkReal x17340=(r10*sj3);
IkReal x17341=(cj3*r00);
IkReal x17342=(sj5*sj6);
IkReal x17343=(cj3*cj5);
IkReal x17344=(r00*sj3);
IkReal x17345=((1.0)*cj3);
IkReal x17346=(cj6*r01);
IkReal x17347=((0.37429)*sj5);
IkReal x17348=((0.01)*cj5);
IkReal x17349=(r10*sj6);
IkReal x17350=(cj6*r11);
IkReal x17351=((1.0)*cj4);
IkReal x17352=(cj5*sj3);
IkReal x17353=(r12*sj5);
IkReal x17354=((0.37429)*cj5);
IkReal x17355=(sj3*sj5);
IkReal x17356=(cj5*sj6);
IkReal x17357=(r02*sj5);
IkReal x17358=((1.0)*cj6*sj4);
IkReal x17359=(r11*sj4*sj6);
IkReal x17360=(r01*sj4*sj6);
evalcond[0]=((((0.069)*x17339))+((x17346*x17348))+(((-0.29542)*x17338))+(((0.01)*x17357))+(((-1.0)*x17346*x17347))+(((-1.0)*px))+(((-0.37429)*r00*x17342))+((r00*sj6*x17348))+((r02*x17354)));
evalcond[1]=(((r12*x17354))+((x17348*x17350))+((x17348*x17349))+(((-0.29542)*x17339))+(((-1.0)*x17347*x17350))+(((0.01)*x17353))+(((-1.0)*py))+(((-0.37429)*r10*x17342))+(((-0.069)*x17338)));
evalcond[2]=((((-1.0)*x17343*x17346*x17351))+((x17346*x17355))+(((-1.0)*x17341*x17358))+((x17342*x17344))+(((-1.0)*x17341*x17351*x17356))+((cj3*x17360))+(((-1.0)*r02*x17352))+x17339+(((-1.0)*cj4*x17345*x17357)));
evalcond[3]=((((-1.0)*r02*x17351*x17355))+(((-1.0)*x17344*x17358))+(((-1.0)*x17346*x17351*x17352))+(((-1.0)*x17341*x17342))+((r02*x17343))+(((-1.0)*sj5*x17345*x17346))+x17338+((sj3*x17360))+(((-1.0)*x17344*x17351*x17356)));
evalcond[4]=((((-1.0)*r10*x17342*x17345))+((r12*x17343))+(((-1.0)*x17340*x17358))+(((-1.0)*sj3*x17351*x17353))+(((-1.0)*x17350*x17351*x17352))+((sj3*x17359))+(((-1.0)*x17340*x17351*x17356))+x17339+(((-1.0)*sj5*x17345*x17350)));
evalcond[5]=((((-1.0)*cj6*r10*sj4*x17345))+((x17350*x17355))+((x17340*x17342))+(((-1.0)*x17343*x17349*x17351))+(((-1.0)*x17338))+(((-1.0)*x17343*x17350*x17351))+((cj3*x17359))+(((-1.0)*r12*x17352))+(((-1.0)*cj4*x17345*x17353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17361=cj1*cj1;
IkReal x17362=((69.0)*r10);
IkReal x17363=(cj4*cj6);
IkReal x17364=((364.42)*cj1);
IkReal x17365=(cj5*sj4);
IkReal x17366=((374.29)*cj2);
IkReal x17367=(cj5*r02);
IkReal x17368=(sj1*sj5);
IkReal x17369=((10.0)*r02);
IkReal x17370=(sj1*sj2);
IkReal x17371=(cj6*r11);
IkReal x17372=((69.0)*cj2);
IkReal x17373=(cj6*r01);
IkReal x17374=(cj2*sj1);
IkReal x17375=(r12*sj4);
IkReal x17376=(r00*sj6);
IkReal x17377=((1000.0)*px);
IkReal x17378=(cj4*r11*sj6);
IkReal x17379=((10.0)*cj5*sj1);
IkReal x17380=((10.0)*cj2*cj5);
IkReal x17381=(x17362*x17363);
IkReal x17382=((69.0)*x17378);
IkReal x17383=((69.0)*sj5*x17375);
IkReal x17384=((69.0)*x17365*x17371);
IkReal x17385=(sj6*x17362*x17365);
IkReal x17386=(x17382+x17383+x17384+x17385);
CheckValue<IkReal> x17387=IKPowWithIntegerCheck((((sj2*x17361*x17372))+((x17364*x17370))+(((69.0)*x17370))),-1);
if(!x17387.valid){
continue;
}
CheckValue<IkReal> x17388=IKPowWithIntegerCheck(((((-69.0)*sj1))+(((-1.0)*x17361*x17372))+(((-1.0)*sj1*x17364))),-1);
if(!x17388.valid){
continue;
}
if( IKabs(((x17387.value)*((((x17364*x17365*x17371))+((sj5*x17364*x17375))+(((-1.0)*sj1*x17365*x17371*x17372))+(((-1.0)*x17368*x17372*x17375))+(((-1.0)*sj5*x17366*x17373))+(((-1.0)*sj5*x17366*x17376))+(((-1.0)*cj2*x17377))+(((-1.0)*sj1*x17372*x17378))+((x17373*x17380))+((x17364*x17378))+(((-1.0)*x17381))+(((-1.0)*x17374*x17385))+((x17374*x17381))+((cj2*sj5*x17369))+x17386+((x17366*x17367))+((x17376*x17380))+(((-1.0)*r10*x17363*x17364))+((r10*sj6*x17364*x17365)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x17388.value)*((((x17368*x17369))+(((-374.29)*x17368*x17373))+(((-374.29)*x17368*x17376))+((x17376*x17379))+(((-1.0)*sj1*x17377))+((x17373*x17379))+(((-1.0)*x17386))+(((374.29)*sj1*x17367))+x17381)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x17387.value)*((((x17364*x17365*x17371))+((sj5*x17364*x17375))+(((-1.0)*sj1*x17365*x17371*x17372))+(((-1.0)*x17368*x17372*x17375))+(((-1.0)*sj5*x17366*x17373))+(((-1.0)*sj5*x17366*x17376))+(((-1.0)*cj2*x17377))+(((-1.0)*sj1*x17372*x17378))+((x17373*x17380))+((x17364*x17378))+(((-1.0)*x17381))+(((-1.0)*x17374*x17385))+((x17374*x17381))+((cj2*sj5*x17369))+x17386+((x17366*x17367))+((x17376*x17380))+(((-1.0)*r10*x17363*x17364))+((r10*sj6*x17364*x17365))))))+IKsqr(((x17388.value)*((((x17368*x17369))+(((-374.29)*x17368*x17373))+(((-374.29)*x17368*x17376))+((x17376*x17379))+(((-1.0)*sj1*x17377))+((x17373*x17379))+(((-1.0)*x17386))+(((374.29)*sj1*x17367))+x17381))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x17387.value)*((((x17364*x17365*x17371))+((sj5*x17364*x17375))+(((-1.0)*sj1*x17365*x17371*x17372))+(((-1.0)*x17368*x17372*x17375))+(((-1.0)*sj5*x17366*x17373))+(((-1.0)*sj5*x17366*x17376))+(((-1.0)*cj2*x17377))+(((-1.0)*sj1*x17372*x17378))+((x17373*x17380))+((x17364*x17378))+(((-1.0)*x17381))+(((-1.0)*x17374*x17385))+((x17374*x17381))+((cj2*sj5*x17369))+x17386+((x17366*x17367))+((x17376*x17380))+(((-1.0)*r10*x17363*x17364))+((r10*sj6*x17364*x17365))))), ((x17388.value)*((((x17368*x17369))+(((-374.29)*x17368*x17373))+(((-374.29)*x17368*x17376))+((x17376*x17379))+(((-1.0)*sj1*x17377))+((x17373*x17379))+(((-1.0)*x17386))+(((374.29)*sj1*x17367))+x17381))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17389=IKcos(j0);
IkReal x17390=IKsin(j0);
IkReal x17391=((1.0)*sj4);
IkReal x17392=(cj6*sj3);
IkReal x17393=(cj3*cj5);
IkReal x17394=(sj5*sj6);
IkReal x17395=(r00*sj3);
IkReal x17396=((0.36442)*cj1);
IkReal x17397=((0.069)*sj2);
IkReal x17398=(cj6*r01);
IkReal x17399=((1.0)*cj3);
IkReal x17400=((0.37429)*sj5);
IkReal x17401=((0.01)*cj5);
IkReal x17402=(r10*sj6);
IkReal x17403=(r12*sj5);
IkReal x17404=((1.0)*cj4);
IkReal x17405=(r02*sj5);
IkReal x17406=((1.0)*sj1);
IkReal x17407=(cj3*cj6);
IkReal x17408=(r01*sj6);
IkReal x17409=(r00*sj6);
IkReal x17410=(cj6*r11);
IkReal x17411=((0.37429)*cj5);
IkReal x17412=(cj4*cj6);
IkReal x17413=(cj5*sj3);
IkReal x17414=(cj5*x17410);
IkReal x17415=(cj2*x17389);
IkReal x17416=((0.069)*x17390);
IkReal x17417=(r11*sj4*sj6);
IkReal x17418=(sj2*x17389);
IkReal x17419=((1.0)*x17390);
evalcond[0]=((((-1.0)*r11*sj6*x17404))+x17415+((sj1*sj2*x17390))+(((-1.0)*x17391*x17414))+(((-1.0)*cj5*x17391*x17402))+((r10*x17412))+(((-1.0)*x17391*x17403)));
evalcond[1]=(((r00*x17412))+(((-1.0)*cj2*x17419))+(((-1.0)*cj5*x17391*x17398))+((sj1*x17418))+(((-1.0)*cj5*x17391*x17409))+(((-1.0)*x17404*x17408))+(((-1.0)*x17391*x17405)));
evalcond[2]=((((-1.0)*cj5*sj6*x17395*x17404))+(((-1.0)*sj3*x17404*x17405))+(((-1.0)*sj5*x17398*x17399))+(((-1.0)*cj1*x17389))+((sj3*sj4*x17408))+(((-1.0)*r00*x17391*x17392))+(((-1.0)*cj5*r01*x17392*x17404))+(((-1.0)*r00*x17394*x17399))+((r02*x17393)));
evalcond[3]=((((-1.0)*sj3*x17403*x17404))+((sj3*x17417))+((r12*x17393))+(((-1.0)*x17402*x17404*x17413))+(((-1.0)*cj1*x17419))+(((-1.0)*cj5*r11*x17392*x17404))+(((-1.0)*sj5*x17399*x17410))+(((-1.0)*r10*x17391*x17392))+(((-1.0)*r10*x17394*x17399)));
evalcond[4]=(((x17401*x17409))+(((-0.069)*sj1*x17415))+((x17389*x17396))+(((0.01)*x17405))+(((-1.0)*px))+(((-1.0)*x17390*x17397))+(((0.069)*x17389))+(((-0.37429)*r00*x17394))+(((-1.0)*x17398*x17400))+((r02*x17411))+((x17398*x17401)));
evalcond[5]=(((x17401*x17402))+((x17389*x17397))+((x17401*x17410))+x17416+(((0.01)*x17403))+(((-1.0)*cj2*sj1*x17416))+(((-1.0)*py))+((x17390*x17396))+(((-0.37429)*r10*x17394))+(((-1.0)*x17400*x17410))+((r12*x17411)));
evalcond[6]=((((-1.0)*r10*x17391*x17407))+(((-1.0)*cj2*x17390*x17406))+(((-1.0)*x17393*x17402*x17404))+(((-1.0)*r12*x17413))+x17418+(((-1.0)*cj4*x17399*x17403))+((cj3*x17417))+(((-1.0)*x17393*x17404*x17410))+((r11*sj5*x17392))+((r10*sj3*x17394)));
evalcond[7]=((((-1.0)*x17406*x17415))+((r01*sj5*x17392))+(((-1.0)*sj2*x17419))+((x17394*x17395))+(((-1.0)*r02*x17413))+(((-1.0)*cj4*x17399*x17405))+(((-1.0)*x17393*x17404*x17409))+(((-1.0)*x17393*x17398*x17404))+(((-1.0)*r00*x17391*x17407))+((cj3*sj4*x17408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17420=(r10*sj6);
IkReal x17421=((69.0)*cj2);
IkReal x17422=(cj6*r11);
IkReal x17423=((374.29)*sj5);
IkReal x17424=((10.0)*cj5);
IkReal x17425=(cj5*sj4);
IkReal x17426=(r11*sj6);
IkReal x17427=(sj1*sj2);
IkReal x17428=((1000.0)*py);
IkReal x17429=((69.0)*sj2);
IkReal x17430=(r12*sj5);
IkReal x17431=((364.42)*cj1);
IkReal x17432=(cj4*x17431);
IkReal x17433=(sj1*x17430);
IkReal x17434=((374.29)*cj5*r12);
IkReal x17435=((69.0)*cj4*cj6*r10);
IkReal x17436=(x17425*x17431);
CheckValue<IkReal> x17437 = IKatan2WithCheck(IkReal((((cj2*x17420*x17423))+((cj2*x17422*x17423))+(((-1.0)*cj4*x17426*x17429))+(((-1.0)*cj2*x17434))+(((-10.0)*cj2*x17430))+(((-1.0)*x17422*x17425*x17429))+((cj2*x17428))+((cj4*cj6*r10*x17429))+(((-1.0)*sj4*x17429*x17430))+(((-1.0)*cj2*x17422*x17424))+(((-1.0)*x17420*x17425*x17429))+(((-1.0)*cj2*x17420*x17424)))),((((69.0)*sj4*x17430))+(((10.0)*x17427*x17430))+(((-1.0)*x17427*x17428))+(((-1.0)*x17435))+((x17422*x17436))+((x17420*x17424*x17427))+(((69.0)*x17420*x17425))+(((-1.0)*sj4*x17421*x17433))+(((-1.0)*x17422*x17423*x17427))+(((-1.0)*cj4*sj1*x17421*x17426))+(((69.0)*x17422*x17425))+(((69.0)*cj4*x17426))+((x17420*x17436))+(((-1.0)*sj1*x17420*x17421*x17425))+((sj4*x17430*x17431))+((x17427*x17434))+((x17422*x17424*x17427))+((x17426*x17432))+((cj4*cj6*r10*sj1*x17421))+(((-1.0)*sj1*x17421*x17422*x17425))+(((-1.0)*x17420*x17423*x17427))+(((-1.0)*cj6*r10*x17432))),IKFAST_ATAN2_MAGTHRESH);
if(!x17437.valid){
continue;
}
CheckValue<IkReal> x17438=IKPowWithIntegerCheck(IKsign(((((-69.0)*sj1))+x17421+((cj2*x17431)))),-1);
if(!x17438.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x17437.value)+(((1.5707963267949)*(x17438.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17439=IKcos(j0);
IkReal x17440=IKsin(j0);
IkReal x17441=((1.0)*sj4);
IkReal x17442=(cj6*sj3);
IkReal x17443=(cj3*cj5);
IkReal x17444=(sj5*sj6);
IkReal x17445=(r00*sj3);
IkReal x17446=((0.36442)*cj1);
IkReal x17447=((0.069)*sj2);
IkReal x17448=(cj6*r01);
IkReal x17449=((1.0)*cj3);
IkReal x17450=((0.37429)*sj5);
IkReal x17451=((0.01)*cj5);
IkReal x17452=(r10*sj6);
IkReal x17453=(r12*sj5);
IkReal x17454=((1.0)*cj4);
IkReal x17455=(r02*sj5);
IkReal x17456=((1.0)*sj1);
IkReal x17457=(cj3*cj6);
IkReal x17458=(r01*sj6);
IkReal x17459=(r00*sj6);
IkReal x17460=(cj6*r11);
IkReal x17461=((0.37429)*cj5);
IkReal x17462=(cj4*cj6);
IkReal x17463=(cj5*sj3);
IkReal x17464=(cj5*x17460);
IkReal x17465=(cj2*x17439);
IkReal x17466=((0.069)*x17440);
IkReal x17467=(r11*sj4*sj6);
IkReal x17468=(sj2*x17439);
IkReal x17469=((1.0)*x17440);
evalcond[0]=((((-1.0)*r11*sj6*x17454))+(((-1.0)*cj5*x17441*x17452))+x17465+((sj1*sj2*x17440))+((r10*x17462))+(((-1.0)*x17441*x17464))+(((-1.0)*x17441*x17453)));
evalcond[1]=(((r00*x17462))+(((-1.0)*cj5*x17441*x17459))+(((-1.0)*x17454*x17458))+(((-1.0)*cj2*x17469))+((sj1*x17468))+(((-1.0)*x17441*x17455))+(((-1.0)*cj5*x17441*x17448)));
evalcond[2]=((((-1.0)*cj1*x17439))+(((-1.0)*r00*x17444*x17449))+((sj3*sj4*x17458))+((r02*x17443))+(((-1.0)*sj5*x17448*x17449))+(((-1.0)*r00*x17441*x17442))+(((-1.0)*sj3*x17454*x17455))+(((-1.0)*cj5*r01*x17442*x17454))+(((-1.0)*cj5*sj6*x17445*x17454)));
evalcond[3]=((((-1.0)*r10*x17441*x17442))+(((-1.0)*cj1*x17469))+(((-1.0)*sj3*x17453*x17454))+((r12*x17443))+(((-1.0)*r10*x17444*x17449))+(((-1.0)*x17452*x17454*x17463))+(((-1.0)*sj5*x17449*x17460))+((sj3*x17467))+(((-1.0)*cj5*r11*x17442*x17454)));
evalcond[4]=(((x17439*x17446))+(((0.01)*x17455))+((x17448*x17451))+(((-1.0)*x17440*x17447))+(((-1.0)*px))+((r02*x17461))+(((-0.37429)*r00*x17444))+(((-1.0)*x17448*x17450))+(((-0.069)*sj1*x17465))+((x17451*x17459))+(((0.069)*x17439)));
evalcond[5]=(((x17440*x17446))+((x17439*x17447))+(((0.01)*x17453))+(((-1.0)*x17450*x17460))+((r12*x17461))+(((-0.37429)*r10*x17444))+x17466+(((-1.0)*py))+(((-1.0)*cj2*sj1*x17466))+((x17451*x17452))+((x17451*x17460)));
evalcond[6]=((((-1.0)*x17443*x17454*x17460))+(((-1.0)*x17443*x17452*x17454))+((r11*sj5*x17442))+(((-1.0)*cj2*x17440*x17456))+x17468+(((-1.0)*r10*x17441*x17457))+(((-1.0)*r12*x17463))+((r10*sj3*x17444))+(((-1.0)*cj4*x17449*x17453))+((cj3*x17467)));
evalcond[7]=(((r01*sj5*x17442))+(((-1.0)*r00*x17441*x17457))+(((-1.0)*r02*x17463))+(((-1.0)*sj2*x17469))+((cj3*sj4*x17458))+(((-1.0)*x17443*x17454*x17459))+(((-1.0)*x17443*x17448*x17454))+(((-1.0)*x17456*x17465))+(((-1.0)*cj4*x17449*x17455))+((x17444*x17445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17470=cj1*cj1;
IkReal x17471=((1.0)*r01);
IkReal x17472=(cj5*cj6);
IkReal x17473=(r02*sj5);
IkReal x17474=(cj2*sj4);
IkReal x17475=(cj5*sj6);
IkReal x17476=(cj4*cj6);
IkReal x17477=(r12*sj5);
IkReal x17478=(cj2*cj4*sj6);
IkReal x17479=(sj1*sj2*sj4);
IkReal x17480=((1.0)*sj1*sj2);
IkReal x17481=(cj4*sj1*sj2*sj6);
CheckValue<IkReal> x17482 = IKatan2WithCheck(IkReal((((x17477*x17479))+(((-1.0)*r00*x17474*x17475))+((r11*x17472*x17479))+((cj2*r00*x17476))+(((-1.0)*x17473*x17474))+(((-1.0)*r10*x17476*x17480))+((r11*x17481))+(((-1.0)*x17471*x17478))+(((-1.0)*x17471*x17472*x17474))+((r10*x17475*x17479)))),(((r11*x17472*x17474))+((r11*x17478))+((r01*x17481))+((x17474*x17477))+(((-1.0)*cj2*r10*x17476))+((r00*x17475*x17479))+((r01*x17472*x17479))+((x17473*x17479))+(((-1.0)*r00*x17476*x17480))+((r10*x17474*x17475))),IKFAST_ATAN2_MAGTHRESH);
if(!x17482.valid){
continue;
}
CheckValue<IkReal> x17483=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x17470))+((x17470*(cj2*cj2))))),-1);
if(!x17483.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x17482.value)+(((1.5707963267949)*(x17483.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17484=IKcos(j0);
IkReal x17485=IKsin(j0);
IkReal x17486=((1.0)*sj4);
IkReal x17487=(cj6*sj3);
IkReal x17488=(cj3*cj5);
IkReal x17489=(sj5*sj6);
IkReal x17490=(r00*sj3);
IkReal x17491=((0.36442)*cj1);
IkReal x17492=((0.069)*sj2);
IkReal x17493=(cj6*r01);
IkReal x17494=((1.0)*cj3);
IkReal x17495=((0.37429)*sj5);
IkReal x17496=((0.01)*cj5);
IkReal x17497=(r10*sj6);
IkReal x17498=(r12*sj5);
IkReal x17499=((1.0)*cj4);
IkReal x17500=(r02*sj5);
IkReal x17501=((1.0)*sj1);
IkReal x17502=(cj3*cj6);
IkReal x17503=(r01*sj6);
IkReal x17504=(r00*sj6);
IkReal x17505=(cj6*r11);
IkReal x17506=((0.37429)*cj5);
IkReal x17507=(cj4*cj6);
IkReal x17508=(cj5*sj3);
IkReal x17509=(cj5*x17505);
IkReal x17510=(cj2*x17484);
IkReal x17511=((0.069)*x17485);
IkReal x17512=(r11*sj4*sj6);
IkReal x17513=(sj2*x17484);
IkReal x17514=((1.0)*x17485);
evalcond[0]=(((r10*x17507))+(((-1.0)*x17486*x17498))+(((-1.0)*x17486*x17509))+x17510+(((-1.0)*r11*sj6*x17499))+((sj1*sj2*x17485))+(((-1.0)*cj5*x17486*x17497)));
evalcond[1]=((((-1.0)*x17486*x17500))+(((-1.0)*cj5*x17486*x17504))+(((-1.0)*x17499*x17503))+((r00*x17507))+(((-1.0)*cj2*x17514))+(((-1.0)*cj5*x17486*x17493))+((sj1*x17513)));
evalcond[2]=(((r02*x17488))+(((-1.0)*cj5*r01*x17487*x17499))+(((-1.0)*cj5*sj6*x17490*x17499))+(((-1.0)*sj5*x17493*x17494))+(((-1.0)*sj3*x17499*x17500))+(((-1.0)*r00*x17486*x17487))+((sj3*sj4*x17503))+(((-1.0)*r00*x17489*x17494))+(((-1.0)*cj1*x17484)));
evalcond[3]=((((-1.0)*r10*x17489*x17494))+(((-1.0)*x17497*x17499*x17508))+(((-1.0)*sj5*x17494*x17505))+(((-1.0)*cj5*r11*x17487*x17499))+(((-1.0)*r10*x17486*x17487))+((sj3*x17512))+((r12*x17488))+(((-1.0)*cj1*x17514))+(((-1.0)*sj3*x17498*x17499)));
evalcond[4]=(((r02*x17506))+(((-0.069)*sj1*x17510))+(((0.069)*x17484))+(((-1.0)*x17485*x17492))+(((0.01)*x17500))+((x17493*x17496))+(((-0.37429)*r00*x17489))+(((-1.0)*px))+((x17496*x17504))+((x17484*x17491))+(((-1.0)*x17493*x17495)));
evalcond[5]=(((r12*x17506))+(((-0.37429)*r10*x17489))+(((-1.0)*cj2*sj1*x17511))+(((-1.0)*x17495*x17505))+(((-1.0)*py))+x17511+((x17496*x17505))+((x17496*x17497))+((x17485*x17491))+(((0.01)*x17498))+((x17484*x17492)));
evalcond[6]=(((r10*sj3*x17489))+(((-1.0)*x17488*x17497*x17499))+(((-1.0)*cj4*x17494*x17498))+((r11*sj5*x17487))+(((-1.0)*r12*x17508))+x17513+(((-1.0)*cj2*x17485*x17501))+(((-1.0)*x17488*x17499*x17505))+((cj3*x17512))+(((-1.0)*r10*x17486*x17502)));
evalcond[7]=((((-1.0)*r02*x17508))+(((-1.0)*sj2*x17514))+((r01*sj5*x17487))+((cj3*sj4*x17503))+(((-1.0)*cj4*x17494*x17500))+(((-1.0)*x17488*x17499*x17504))+(((-1.0)*x17488*x17493*x17499))+(((-1.0)*r00*x17486*x17502))+((x17489*x17490))+(((-1.0)*x17501*x17510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x17515=cj6*cj6;
IkReal x17516=r21*r21;
IkReal x17517=r20*r20;
IkReal x17518=cj5*cj5;
IkReal x17519=r22*r22;
IkReal x17520=(cj3*r21);
IkReal x17521=((1.0)*r20);
IkReal x17522=(cj6*r22);
IkReal x17523=(cj1*sj2);
IkReal x17524=(cj3*cj5);
IkReal x17525=((2.0)*sj6);
IkReal x17526=((1.0)*sj3);
IkReal x17527=(cj5*cj6);
IkReal x17528=(r22*sj5);
IkReal x17529=(cj5*sj3);
IkReal x17530=(r21*sj6);
IkReal x17531=(r20*sj5);
IkReal x17532=(cj5*sj6);
IkReal x17533=((1.0)*sj1);
IkReal x17534=(cj6*r20*sj3);
IkReal x17535=(sj3*x17518);
IkReal x17536=(sj5*x17517);
IkReal x17537=(cj3*r20*r22);
IkReal x17538=(sj5*x17516);
IkReal x17539=(cj3*cj6*sj6);
IkReal x17540=(x17515*x17517);
IkReal x17541=(sj3*x17515*x17516);
CheckValue<IkReal> x17542=IKPowWithIntegerCheck(IKsign(((((-1.0)*x17519*x17526))+(((-2.0)*r21*sj5*x17522*x17529))+((x17519*x17535))+(((-1.0)*x17517*x17518*x17526))+x17541+(((-1.0)*x17526*x17540))+((r21*x17525*x17534))+(((-1.0)*r20*x17525*x17528*x17529))+(((-1.0)*r21*x17518*x17525*x17534))+(((-1.0)*x17516*x17526))+(((-1.0)*x17515*x17516*x17518*x17526))+((x17535*x17540)))),-1);
if(!x17542.valid){
continue;
}
CheckValue<IkReal> x17543 = IKatan2WithCheck(IkReal(((((-1.0)*sj5*x17520*x17521))+(((2.0)*x17515*x17520*x17531))+(((-1.0)*cj6*sj1*x17521))+(((-1.0)*x17523*x17526*x17528))+((r22*x17520*x17532))+((sj1*x17530))+(((-1.0)*sj6*x17521*x17523*x17529))+(((-1.0)*x17521*x17522*x17524))+(((-1.0)*r21*x17523*x17526*x17527))+(((-1.0)*x17538*x17539))+((x17536*x17539)))),(((x17523*x17534))+((x17520*x17522))+((sj6*x17537))+((x17515*x17524*x17538))+(((-1.0)*x17518*x17525*x17537))+(((-1.0)*sj1*x17521*x17532))+(((-1.0)*sj5*x17519*x17524))+(((-1.0)*x17515*x17524*x17536))+((x17524*x17536))+(((-1.0)*x17528*x17533))+((x17520*x17525*x17527*x17531))+(((-2.0)*x17518*x17520*x17522))+(((-1.0)*r21*x17527*x17533))+(((-1.0)*x17523*x17526*x17530))),IKFAST_ATAN2_MAGTHRESH);
if(!x17543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17542.value)))+(x17543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x17544=IKsin(j4);
IkReal x17545=IKcos(j4);
IkReal x17546=(cj3*r21);
IkReal x17547=((1.0)*sj5);
IkReal x17548=(r21*sj3);
IkReal x17549=((1.0)*cj5);
IkReal x17550=(r22*sj3);
IkReal x17551=(cj6*r20);
IkReal x17552=(cj3*r22);
IkReal x17553=(sj6*x17544);
IkReal x17554=(r20*sj3*sj6);
IkReal x17555=(cj3*r20*sj6);
IkReal x17556=((1.0)*x17544);
IkReal x17557=(x17545*x17549);
evalcond[0]=((((-1.0)*r22*x17544*x17547))+(((-1.0)*cj6*r21*x17544*x17549))+(((-1.0)*r20*x17549*x17553))+((cj1*sj2))+((x17545*x17551))+(((-1.0)*r21*sj6*x17545)));
evalcond[1]=(sj1+(((-1.0)*x17554*x17557))+(((-1.0)*sj3*x17551*x17556))+((x17548*x17553))+(((-1.0)*cj6*x17548*x17557))+((cj5*x17552))+(((-1.0)*cj6*x17546*x17547))+(((-1.0)*x17545*x17547*x17550))+(((-1.0)*x17547*x17555)));
evalcond[2]=(((cj6*sj5*x17548))+((sj5*x17554))+((x17546*x17553))+(((-1.0)*x17555*x17557))+(((-1.0)*x17549*x17550))+(((-1.0)*cj1*cj2))+(((-1.0)*x17545*x17547*x17552))+(((-1.0)*cj3*x17551*x17556))+(((-1.0)*cj6*x17546*x17557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[2];
IkReal x17558=cj1*cj1;
IkReal x17559=((1.0)+((x17558*(cj2*cj2)))+(((-1.0)*x17558)));
j0eval[0]=x17559;
j0eval[1]=IKsign(x17559);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x17560=(cj1*cj2);
j0eval[0]=((((-1.0)*sj1))+cj2+(((5.28144927536232)*x17560)));
j0eval[1]=IKsign(((((364.42)*x17560))+(((-69.0)*sj1))+(((69.0)*cj2))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x17561=cj1*cj1;
IkReal x17562=(sj1*sj2);
IkReal x17563=((5.28144927536232)*cj1);
IkReal x17564=(cj2*x17561);
j0eval[0]=(((x17562*x17563))+((sj2*x17564))+x17562);
j0eval[1]=((((-1.0)*x17564))+(((-1.0)*sj1))+(((-1.0)*sj1*x17563)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
bool bgotonextstatement = true;
do
{
IkReal x17565=(cj6*r21);
IkReal x17566=(cj3*r22);
IkReal x17567=(cj3*sj4);
IkReal x17568=(r21*sj6);
IkReal x17569=(r20*sj6);
IkReal x17570=(sj3*sj5);
IkReal x17571=((1.0)*sj5);
IkReal x17572=((0.01)*cj5);
IkReal x17573=(sj3*sj4);
IkReal x17574=((1.0)*cj5);
IkReal x17575=(cj3*cj4);
IkReal x17576=((1.0)*cj4);
IkReal x17577=((0.37429)*sj5);
IkReal x17578=((1.0)*cj6*r20);
IkReal x17579=(cj4*sj3*x17574);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
evalcond[1]=(((cj4*cj6*r20))+(((-1.0)*x17568*x17576))+(((-1.0)*r22*sj4*x17571))+(((-1.0)*sj4*x17565*x17574))+(((-1.0)*sj4*x17569*x17574)));
evalcond[2]=(((x17565*x17572))+(((-0.069)*cj1))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x17565*x17577))+((x17569*x17572))+(((-1.0)*x17569*x17577))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=((((-1.0)*x17573*x17578))+sj1+(((-1.0)*cj3*x17565*x17571))+((cj5*x17566))+(((-1.0)*r22*x17570*x17576))+(((-1.0)*cj3*x17569*x17571))+(((-1.0)*x17565*x17579))+((x17568*x17573))+(((-1.0)*x17569*x17579)));
evalcond[4]=(((x17565*x17570))+(((-1.0)*x17567*x17578))+(((-1.0)*r22*sj3*x17574))+(((-1.0)*x17565*x17574*x17575))+((x17567*x17568))+((x17569*x17570))+(((-1.0)*x17569*x17574*x17575))+(((-1.0)*cj4*x17566*x17571))+(((-1.0)*cj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17580=(cj4*sj6);
IkReal x17581=((1.0)*r01);
IkReal x17582=(cj5*sj4);
IkReal x17583=(sj4*sj5);
IkReal x17584=(cj4*cj6);
if( IKabs(((((-1.0)*r00*sj6*x17582))+((r00*x17584))+(((-1.0)*cj6*x17581*x17582))+(((-1.0)*r02*x17583))+(((-1.0)*x17580*x17581)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x17584))+((r12*x17583))+((r10*sj6*x17582))+((r11*x17580))+((cj6*r11*x17582)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj6*x17582))+((r00*x17584))+(((-1.0)*cj6*x17581*x17582))+(((-1.0)*r02*x17583))+(((-1.0)*x17580*x17581))))+IKsqr(((((-1.0)*r10*x17584))+((r12*x17583))+((r10*sj6*x17582))+((r11*x17580))+((cj6*r11*x17582))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*sj6*x17582))+((r00*x17584))+(((-1.0)*cj6*x17581*x17582))+(((-1.0)*r02*x17583))+(((-1.0)*x17580*x17581))), ((((-1.0)*r10*x17584))+((r12*x17583))+((r10*sj6*x17582))+((r11*x17580))+((cj6*r11*x17582))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17585=IKcos(j0);
IkReal x17586=IKsin(j0);
IkReal x17587=((1.0)*sj4);
IkReal x17588=(cj6*r10);
IkReal x17589=(sj5*sj6);
IkReal x17590=(cj3*cj5);
IkReal x17591=(r00*sj3);
IkReal x17592=((0.36442)*cj1);
IkReal x17593=(cj6*r01);
IkReal x17594=((1.0)*cj3);
IkReal x17595=((0.01)*cj5);
IkReal x17596=(r10*sj6);
IkReal x17597=(r12*sj5);
IkReal x17598=(sj3*sj5);
IkReal x17599=(r02*sj5);
IkReal x17600=(cj6*r00);
IkReal x17601=((1.0)*cj4);
IkReal x17602=(r00*sj6);
IkReal x17603=((0.37429)*cj5);
IkReal x17604=(cj6*r11);
IkReal x17605=((0.37429)*sj5);
IkReal x17606=(cj5*x17604);
IkReal x17607=((0.069)*x17586);
IkReal x17608=(r11*sj4*sj6);
IkReal x17609=(sj3*x17601);
IkReal x17610=(r01*sj4*sj6);
IkReal x17611=((1.0)*x17586);
IkReal x17612=((1.0)*x17585);
IkReal x17613=((0.069)*x17585);
IkReal x17614=((1.0)*cj5*sj3);
evalcond[0]=((((-1.0)*x17587*x17597))+(((-1.0)*r11*sj6*x17601))+x17585+((cj4*x17588))+(((-1.0)*cj5*x17587*x17596))+(((-1.0)*x17587*x17606)));
evalcond[1]=((((-1.0)*x17587*x17599))+((cj4*x17600))+(((-1.0)*r01*sj6*x17601))+(((-1.0)*cj5*x17587*x17602))+(((-1.0)*cj5*x17587*x17593))+(((-1.0)*x17611)));
evalcond[2]=((((-1.0)*sj1*x17613))+((x17593*x17595))+((r02*x17603))+((x17585*x17592))+((x17595*x17602))+(((-1.0)*px))+x17613+(((-0.37429)*r00*x17589))+(((0.01)*x17599))+(((-1.0)*x17593*x17605)));
evalcond[3]=((((-1.0)*sj1*x17607))+((x17595*x17596))+((x17595*x17604))+(((-1.0)*py))+((x17586*x17592))+x17607+((r12*x17603))+(((0.01)*x17597))+(((-1.0)*x17604*x17605))+(((-0.37429)*r10*x17589)));
evalcond[4]=((((-1.0)*cj3*x17587*x17588))+(((-1.0)*sj1*x17611))+((r10*sj3*x17589))+((cj3*x17608))+(((-1.0)*cj4*x17594*x17597))+(((-1.0)*x17590*x17601*x17604))+((x17598*x17604))+(((-1.0)*x17590*x17596*x17601))+(((-1.0)*r12*x17614)));
evalcond[5]=(((cj3*x17610))+(((-1.0)*sj1*x17612))+((x17593*x17598))+(((-1.0)*x17590*x17593*x17601))+((x17589*x17591))+(((-1.0)*cj4*x17594*x17599))+(((-1.0)*cj3*x17587*x17600))+(((-1.0)*x17590*x17601*x17602))+(((-1.0)*r02*x17614)));
evalcond[6]=((((-1.0)*cj5*sj6*x17591*x17601))+((sj3*x17610))+(((-1.0)*cj1*x17612))+(((-1.0)*cj5*x17593*x17609))+(((-1.0)*cj6*x17587*x17591))+((r02*x17590))+(((-1.0)*sj5*x17593*x17594))+(((-1.0)*r02*x17598*x17601))+(((-1.0)*r00*x17589*x17594)));
evalcond[7]=((((-1.0)*sj5*x17594*x17604))+(((-1.0)*cj5*x17596*x17609))+(((-1.0)*r10*x17589*x17594))+(((-1.0)*sj3*x17587*x17588))+(((-1.0)*x17597*x17609))+(((-1.0)*cj1*x17611))+((r12*x17590))+((sj3*x17608))+(((-1.0)*x17606*x17609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17615=(cj6*r21);
IkReal x17616=(cj3*r22);
IkReal x17617=(cj3*sj4);
IkReal x17618=(r21*sj6);
IkReal x17619=(r20*sj6);
IkReal x17620=(sj3*sj5);
IkReal x17621=((1.0)*sj5);
IkReal x17622=((0.01)*cj5);
IkReal x17623=(sj3*sj4);
IkReal x17624=((1.0)*cj5);
IkReal x17625=(cj3*cj4);
IkReal x17626=((1.0)*cj4);
IkReal x17627=((0.37429)*sj5);
IkReal x17628=((1.0)*cj6*r20);
IkReal x17629=(cj4*sj3*x17624);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
evalcond[1]=(((cj4*cj6*r20))+(((-1.0)*sj4*x17615*x17624))+(((-1.0)*r22*sj4*x17621))+(((-1.0)*sj4*x17619*x17624))+(((-1.0)*x17618*x17626)));
evalcond[2]=((((0.069)*cj1))+(((-1.0)*x17619*x17627))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x17615*x17622))+(((-1.0)*x17615*x17627))+((x17619*x17622))+(((0.37429)*cj5*r22))+(((-0.36442)*sj1)));
evalcond[3]=(sj1+(((-1.0)*x17623*x17628))+(((-1.0)*cj3*x17619*x17621))+(((-1.0)*cj3*x17615*x17621))+(((-1.0)*x17619*x17629))+((cj5*x17616))+(((-1.0)*x17615*x17629))+(((-1.0)*r22*x17620*x17626))+((x17618*x17623)));
evalcond[4]=((((-1.0)*cj4*x17616*x17621))+cj1+(((-1.0)*x17615*x17624*x17625))+(((-1.0)*r22*sj3*x17624))+(((-1.0)*x17619*x17624*x17625))+((x17615*x17620))+(((-1.0)*x17617*x17628))+((x17617*x17618))+((x17619*x17620)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17630=((1.0)*cj4);
IkReal x17631=(sj4*sj5);
IkReal x17632=(cj5*sj4*sj6);
IkReal x17633=(cj5*cj6*sj4);
if( IKabs(((((-1.0)*cj6*r00*x17630))+((r02*x17631))+((r01*x17633))+((r00*x17632))+((cj4*r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x17632))+(((-1.0)*r12*x17631))+(((-1.0)*r11*sj6*x17630))+(((-1.0)*r11*x17633))+((cj4*cj6*r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*r00*x17630))+((r02*x17631))+((r01*x17633))+((r00*x17632))+((cj4*r01*sj6))))+IKsqr(((((-1.0)*r10*x17632))+(((-1.0)*r12*x17631))+(((-1.0)*r11*sj6*x17630))+(((-1.0)*r11*x17633))+((cj4*cj6*r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj6*r00*x17630))+((r02*x17631))+((r01*x17633))+((r00*x17632))+((cj4*r01*sj6))), ((((-1.0)*r10*x17632))+(((-1.0)*r12*x17631))+(((-1.0)*r11*sj6*x17630))+(((-1.0)*r11*x17633))+((cj4*cj6*r10))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17634=IKcos(j0);
IkReal x17635=IKsin(j0);
IkReal x17636=((1.0)*sj4);
IkReal x17637=(cj6*sj3);
IkReal x17638=(sj5*sj6);
IkReal x17639=(cj3*cj5);
IkReal x17640=(r00*sj3);
IkReal x17641=((0.36442)*cj1);
IkReal x17642=(cj5*r01);
IkReal x17643=((1.0)*cj3);
IkReal x17644=(r10*sj6);
IkReal x17645=((0.01)*cj5);
IkReal x17646=(r12*sj5);
IkReal x17647=(r01*sj5);
IkReal x17648=((1.0)*cj4);
IkReal x17649=(r02*sj5);
IkReal x17650=(cj3*cj6);
IkReal x17651=(r00*sj6);
IkReal x17652=((0.37429)*cj5);
IkReal x17653=(cj4*cj6);
IkReal x17654=(r11*sj5);
IkReal x17655=(cj5*sj3);
IkReal x17656=((0.37429)*cj6);
IkReal x17657=(cj5*cj6*r11);
IkReal x17658=((0.069)*x17635);
IkReal x17659=(r11*sj4*sj6);
IkReal x17660=(r01*sj4*sj6);
IkReal x17661=((1.0)*x17634);
IkReal x17662=((0.069)*x17634);
evalcond[0]=((((-1.0)*x17636*x17649))+(((-1.0)*cj6*x17636*x17642))+(((-1.0)*r01*sj6*x17648))+((r00*x17653))+(((-1.0)*cj5*x17636*x17651))+x17635);
evalcond[1]=((((-1.0)*x17636*x17646))+(((-1.0)*r11*sj6*x17648))+((r10*x17653))+(((-1.0)*cj5*x17636*x17644))+(((-1.0)*x17661))+(((-1.0)*x17636*x17657)));
evalcond[2]=((((-1.0)*x17647*x17656))+((r02*x17652))+(((-0.37429)*r00*x17638))+(((0.01)*cj6*x17642))+((x17645*x17651))+((sj1*x17662))+(((0.01)*x17649))+(((-1.0)*px))+x17662+((x17634*x17641)));
evalcond[3]=((((-1.0)*x17654*x17656))+((r12*x17652))+((x17644*x17645))+(((0.01)*x17646))+((cj6*r11*x17645))+(((-1.0)*py))+((x17635*x17641))+x17658+(((-0.37429)*r10*x17638))+((sj1*x17658)));
evalcond[4]=((((-1.0)*cj6*r11*x17639*x17648))+(((-1.0)*r10*x17636*x17650))+((sj1*x17635))+((x17637*x17654))+((cj3*x17659))+(((-1.0)*cj4*x17643*x17646))+(((-1.0)*x17639*x17644*x17648))+((r10*sj3*x17638))+(((-1.0)*r12*x17655)));
evalcond[5]=((((-1.0)*cj6*r01*x17639*x17648))+((x17638*x17640))+(((-1.0)*x17639*x17648*x17651))+((cj3*x17660))+((sj1*x17634))+((x17637*x17647))+(((-1.0)*cj4*x17643*x17649))+(((-1.0)*r00*x17636*x17650))+(((-1.0)*r02*x17655)));
evalcond[6]=((((-1.0)*x17637*x17642*x17648))+(((-1.0)*r00*x17638*x17643))+(((-1.0)*cj6*x17643*x17647))+((sj3*x17660))+(((-1.0)*cj1*x17661))+(((-1.0)*r00*x17636*x17637))+((r02*x17639))+(((-1.0)*cj5*sj6*x17640*x17648))+(((-1.0)*sj3*x17648*x17649)));
evalcond[7]=((((-1.0)*cj6*x17643*x17654))+(((-1.0)*r10*x17638*x17643))+((sj3*x17659))+(((-1.0)*cj5*r11*x17637*x17648))+(((-1.0)*sj3*x17646*x17648))+((r12*x17639))+(((-1.0)*x17644*x17648*x17655))+(((-1.0)*r10*x17636*x17637))+(((-1.0)*cj1*x17635)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17663=(cj4*sj3);
IkReal x17664=(cj3*r22);
IkReal x17665=(cj3*sj4);
IkReal x17666=(r21*sj6);
IkReal x17667=(r20*sj6);
IkReal x17668=((1.0)*cj5);
IkReal x17669=(sj3*sj5);
IkReal x17670=((1.0)*sj5);
IkReal x17671=(cj6*r21);
IkReal x17672=((0.01)*cj5);
IkReal x17673=(sj3*sj4);
IkReal x17674=(cj3*cj4);
IkReal x17675=(cj4*cj6);
IkReal x17676=((1.0)*cj4);
IkReal x17677=(sj4*sj6);
IkReal x17678=((0.37429)*sj5);
IkReal x17679=(cj6*x17668);
IkReal x17680=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
evalcond[1]=((1.0)+((r20*x17675))+(((-1.0)*r22*sj4*x17670))+(((-1.0)*sj4*x17667*x17668))+(((-1.0)*x17666*x17676))+(((-1.0)*sj4*x17668*x17671)));
evalcond[2]=(((x17667*x17672))+(((-1.0)*x17671*x17678))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x17667*x17678))+(((0.37429)*cj5*r22))+((x17671*x17672)));
evalcond[3]=((((-1.0)*r11*sj6*x17676))+((r10*x17675))+(((-1.0)*r11*sj4*x17679))+(((-1.0)*r12*sj4*x17670))+(((-1.0)*r10*x17668*x17677)));
evalcond[4]=((((-1.0)*r01*sj6*x17676))+((r00*x17675))+(((-1.0)*r02*sj4*x17670))+(((-1.0)*r01*sj4*x17679))+(((-1.0)*r00*x17668*x17677)));
evalcond[5]=(((x17666*x17673))+(((-1.0)*x17663*x17667*x17668))+(((-1.0)*cj3*x17667*x17670))+((cj5*x17664))+(((-1.0)*r22*x17663*x17670))+(((-1.0)*x17663*x17668*x17671))+(((-1.0)*cj3*x17670*x17671))+(((-1.0)*x17673*x17680)));
evalcond[6]=((((-1.0)*x17668*x17671*x17674))+(((-1.0)*r22*sj3*x17668))+(((-1.0)*x17665*x17680))+((x17667*x17669))+(((-1.0)*x17667*x17668*x17674))+((x17665*x17666))+(((-1.0)*cj4*x17664*x17670))+((x17669*x17671)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17681=((0.842227766698146)*sj5);
IkReal x17682=(r10*sj6);
IkReal x17683=(cj6*r01);
IkReal x17684=((0.00358229604870815)*cj5);
IkReal x17685=(cj6*r11);
IkReal x17686=((0.0225020109192911)*sj5);
IkReal x17687=((0.134081758807097)*sj5);
IkReal x17688=(r00*sj6);
IkReal x17689=((0.134081758807097)*cj5);
IkReal x17690=((0.0225020109192911)*cj5);
IkReal x17691=((0.842227766698146)*cj5);
IkReal x17692=((0.00358229604870815)*sj5);
if( IKabs((((x17683*x17684))+((x17681*x17685))+((x17681*x17682))+((r02*x17692))+(((-1.0)*x17683*x17687))+(((-1.0)*r12*x17686))+(((2.25020109192911)*py))+(((-1.0)*x17687*x17688))+(((-1.0)*r12*x17691))+((x17684*x17688))+(((-0.358229604870815)*px))+(((-1.0)*x17682*x17690))+((r02*x17689))+(((-1.0)*x17685*x17690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x17681*x17683))+((x17681*x17688))+(((-1.0)*r12*x17689))+(((2.25020109192911)*px))+((x17682*x17687))+(((-1.0)*x17684*x17685))+(((-1.0)*r02*x17691))+(((-1.0)*r12*x17692))+(((0.358229604870815)*py))+(((-1.0)*x17683*x17690))+(((-1.0)*x17688*x17690))+(((-1.0)*r02*x17686))+((x17685*x17687))+(((-1.0)*x17682*x17684)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x17683*x17684))+((x17681*x17685))+((x17681*x17682))+((r02*x17692))+(((-1.0)*x17683*x17687))+(((-1.0)*r12*x17686))+(((2.25020109192911)*py))+(((-1.0)*x17687*x17688))+(((-1.0)*r12*x17691))+((x17684*x17688))+(((-0.358229604870815)*px))+(((-1.0)*x17682*x17690))+((r02*x17689))+(((-1.0)*x17685*x17690))))+IKsqr((((x17681*x17683))+((x17681*x17688))+(((-1.0)*r12*x17689))+(((2.25020109192911)*px))+((x17682*x17687))+(((-1.0)*x17684*x17685))+(((-1.0)*r02*x17691))+(((-1.0)*r12*x17692))+(((0.358229604870815)*py))+(((-1.0)*x17683*x17690))+(((-1.0)*x17688*x17690))+(((-1.0)*r02*x17686))+((x17685*x17687))+(((-1.0)*x17682*x17684))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((x17683*x17684))+((x17681*x17685))+((x17681*x17682))+((r02*x17692))+(((-1.0)*x17683*x17687))+(((-1.0)*r12*x17686))+(((2.25020109192911)*py))+(((-1.0)*x17687*x17688))+(((-1.0)*r12*x17691))+((x17684*x17688))+(((-0.358229604870815)*px))+(((-1.0)*x17682*x17690))+((r02*x17689))+(((-1.0)*x17685*x17690))), (((x17681*x17683))+((x17681*x17688))+(((-1.0)*r12*x17689))+(((2.25020109192911)*px))+((x17682*x17687))+(((-1.0)*x17684*x17685))+(((-1.0)*r02*x17691))+(((-1.0)*r12*x17692))+(((0.358229604870815)*py))+(((-1.0)*x17683*x17690))+(((-1.0)*x17688*x17690))+(((-1.0)*r02*x17686))+((x17685*x17687))+(((-1.0)*x17682*x17684))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17693=IKsin(j0);
IkReal x17694=IKcos(j0);
IkReal x17695=(r10*sj3);
IkReal x17696=(cj3*r00);
IkReal x17697=(sj5*sj6);
IkReal x17698=(cj5*r12);
IkReal x17699=(r00*sj3);
IkReal x17700=(cj3*r10);
IkReal x17701=(cj5*sj6);
IkReal x17702=((1.0)*cj4);
IkReal x17703=(cj5*r02);
IkReal x17704=(cj3*r01);
IkReal x17705=(sj4*sj6);
IkReal x17706=(r12*sj5);
IkReal x17707=(cj6*sj5);
IkReal x17708=(r01*sj3);
IkReal x17709=(r11*sj3);
IkReal x17710=((1.0)*sj3);
IkReal x17711=(r02*sj5);
IkReal x17712=(cj5*cj6);
IkReal x17713=(cj3*r11);
IkReal x17714=((1.0)*x17693);
IkReal x17715=((1.0)*cj6*sj4);
IkReal x17716=(r11*x17705);
IkReal x17717=((0.01)*x17712);
evalcond[0]=((((0.43342)*x17694))+(((0.37429)*x17703))+(((-0.069)*x17693))+(((0.01)*r00*x17701))+(((-1.0)*px))+((r01*x17717))+(((-0.37429)*r01*x17707))+(((0.01)*x17711))+(((-0.37429)*r00*x17697)));
evalcond[1]=((((0.43342)*x17693))+(((0.01)*r10*x17701))+(((0.069)*x17694))+((r11*x17717))+(((0.37429)*x17698))+(((-1.0)*py))+(((0.01)*x17706))+(((-0.37429)*r11*x17707))+(((-0.37429)*r10*x17697)));
evalcond[2]=((((-1.0)*x17702*x17712*x17713))+(((-1.0)*cj3*x17702*x17706))+((x17707*x17709))+(((-1.0)*x17700*x17715))+x17694+(((-1.0)*x17698*x17710))+(((-1.0)*x17700*x17701*x17702))+((x17705*x17713))+((x17695*x17697)));
evalcond[3]=((((-1.0)*x17696*x17701*x17702))+((x17697*x17699))+(((-1.0)*cj3*x17702*x17711))+((x17707*x17708))+(((-1.0)*x17703*x17710))+(((-1.0)*x17702*x17704*x17712))+(((-1.0)*x17696*x17715))+((x17704*x17705))+(((-1.0)*x17714)));
evalcond[4]=((((-1.0)*x17694))+(((-1.0)*x17699*x17715))+(((-1.0)*x17699*x17701*x17702))+(((-1.0)*x17702*x17708*x17712))+(((-1.0)*x17696*x17697))+(((-1.0)*sj3*x17702*x17711))+((x17705*x17708))+((cj3*x17703))+(((-1.0)*x17704*x17707)));
evalcond[5]=((((-1.0)*x17695*x17701*x17702))+(((-1.0)*x17695*x17715))+(((-1.0)*x17697*x17700))+(((-1.0)*x17702*x17709*x17712))+(((-1.0)*x17707*x17713))+((cj3*x17698))+(((-1.0)*x17714))+(((-1.0)*sj3*x17702*x17706))+((x17705*x17709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17718=(cj4*sj3);
IkReal x17719=(cj3*r22);
IkReal x17720=(cj3*sj4);
IkReal x17721=(r21*sj6);
IkReal x17722=(r20*sj6);
IkReal x17723=((1.0)*cj5);
IkReal x17724=(sj3*sj5);
IkReal x17725=((1.0)*sj5);
IkReal x17726=(cj6*r21);
IkReal x17727=((0.01)*cj5);
IkReal x17728=(sj3*sj4);
IkReal x17729=(cj3*cj4);
IkReal x17730=(cj4*cj6);
IkReal x17731=((1.0)*cj4);
IkReal x17732=(sj4*sj6);
IkReal x17733=((0.37429)*sj5);
IkReal x17734=(cj6*x17723);
IkReal x17735=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*x17721*x17731))+(((-1.0)*r22*sj4*x17725))+(((-1.0)*sj4*x17722*x17723))+((r20*x17730))+(((-1.0)*sj4*x17723*x17726)));
evalcond[2]=((((-1.0)*x17722*x17733))+((x17722*x17727))+(((0.01)*r22*sj5))+(((-1.0)*pz))+(((-1.0)*x17726*x17733))+((x17726*x17727))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r11*sj4*x17734))+(((-1.0)*r12*sj4*x17725))+(((-1.0)*r11*sj6*x17731))+((r10*x17730))+(((-1.0)*r10*x17723*x17732)));
evalcond[4]=((((-1.0)*r00*x17723*x17732))+(((-1.0)*r02*sj4*x17725))+(((-1.0)*r01*sj6*x17731))+(((-1.0)*r01*sj4*x17734))+((r00*x17730)));
evalcond[5]=((((-1.0)*cj3*x17722*x17725))+((cj5*x17719))+((x17721*x17728))+(((-1.0)*r22*x17718*x17725))+(((-1.0)*x17728*x17735))+(((-1.0)*x17718*x17723*x17726))+(((-1.0)*cj3*x17725*x17726))+(((-1.0)*x17718*x17722*x17723)));
evalcond[6]=((((-1.0)*x17722*x17723*x17729))+((x17724*x17726))+((x17722*x17724))+((x17720*x17721))+(((-1.0)*cj4*x17719*x17725))+(((-1.0)*x17723*x17726*x17729))+(((-1.0)*r22*sj3*x17723))+(((-1.0)*x17720*x17735)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17736=((0.842227766698146)*sj5);
IkReal x17737=(r10*sj6);
IkReal x17738=(cj6*r01);
IkReal x17739=((0.00358229604870815)*cj5);
IkReal x17740=(cj6*r11);
IkReal x17741=((0.0225020109192911)*sj5);
IkReal x17742=((0.134081758807097)*sj5);
IkReal x17743=(r00*sj6);
IkReal x17744=((0.134081758807097)*cj5);
IkReal x17745=((0.0225020109192911)*cj5);
IkReal x17746=((0.842227766698146)*cj5);
IkReal x17747=((0.00358229604870815)*sj5);
if( IKabs(((((-1.0)*r12*x17746))+(((-1.0)*r12*x17741))+(((-1.0)*x17740*x17745))+((x17736*x17740))+(((2.25020109192911)*py))+((x17736*x17737))+((x17742*x17743))+(((-1.0)*r02*x17744))+(((-1.0)*r02*x17747))+((x17738*x17742))+(((0.358229604870815)*px))+(((-1.0)*x17738*x17739))+(((-1.0)*x17737*x17745))+(((-1.0)*x17739*x17743)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x17737*x17739))+(((-1.0)*x17740*x17742))+((x17736*x17743))+(((2.25020109192911)*px))+((x17736*x17738))+(((-1.0)*r02*x17741))+(((-1.0)*r02*x17746))+(((-0.358229604870815)*py))+((x17739*x17740))+(((-1.0)*x17737*x17742))+((r12*x17747))+((r12*x17744))+(((-1.0)*x17738*x17745))+(((-1.0)*x17743*x17745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x17746))+(((-1.0)*r12*x17741))+(((-1.0)*x17740*x17745))+((x17736*x17740))+(((2.25020109192911)*py))+((x17736*x17737))+((x17742*x17743))+(((-1.0)*r02*x17744))+(((-1.0)*r02*x17747))+((x17738*x17742))+(((0.358229604870815)*px))+(((-1.0)*x17738*x17739))+(((-1.0)*x17737*x17745))+(((-1.0)*x17739*x17743))))+IKsqr((((x17737*x17739))+(((-1.0)*x17740*x17742))+((x17736*x17743))+(((2.25020109192911)*px))+((x17736*x17738))+(((-1.0)*r02*x17741))+(((-1.0)*r02*x17746))+(((-0.358229604870815)*py))+((x17739*x17740))+(((-1.0)*x17737*x17742))+((r12*x17747))+((r12*x17744))+(((-1.0)*x17738*x17745))+(((-1.0)*x17743*x17745))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r12*x17746))+(((-1.0)*r12*x17741))+(((-1.0)*x17740*x17745))+((x17736*x17740))+(((2.25020109192911)*py))+((x17736*x17737))+((x17742*x17743))+(((-1.0)*r02*x17744))+(((-1.0)*r02*x17747))+((x17738*x17742))+(((0.358229604870815)*px))+(((-1.0)*x17738*x17739))+(((-1.0)*x17737*x17745))+(((-1.0)*x17739*x17743))), (((x17737*x17739))+(((-1.0)*x17740*x17742))+((x17736*x17743))+(((2.25020109192911)*px))+((x17736*x17738))+(((-1.0)*r02*x17741))+(((-1.0)*r02*x17746))+(((-0.358229604870815)*py))+((x17739*x17740))+(((-1.0)*x17737*x17742))+((r12*x17747))+((r12*x17744))+(((-1.0)*x17738*x17745))+(((-1.0)*x17743*x17745))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17748=IKsin(j0);
IkReal x17749=IKcos(j0);
IkReal x17750=(r10*sj3);
IkReal x17751=(cj3*r00);
IkReal x17752=(sj5*sj6);
IkReal x17753=(cj5*r12);
IkReal x17754=(r00*sj3);
IkReal x17755=((1.0)*cj3);
IkReal x17756=(cj5*r02);
IkReal x17757=((0.01)*cj5);
IkReal x17758=(r10*sj6);
IkReal x17759=(cj6*r11);
IkReal x17760=(cj4*cj5);
IkReal x17761=((1.0)*sj3);
IkReal x17762=(cj6*r01);
IkReal x17763=((1.0)*sj6);
IkReal x17764=((0.01)*sj5);
IkReal x17765=((1.0)*x17749);
IkReal x17766=((1.0)*cj6*sj4);
IkReal x17767=(sj5*x17762);
IkReal x17768=(r11*sj4*sj6);
IkReal x17769=(cj4*r12*sj5);
IkReal x17770=(r01*sj4*sj6);
IkReal x17771=(cj4*r02*sj5);
evalcond[0]=(((r02*x17764))+(((0.069)*x17748))+(((-0.37429)*r00*x17752))+(((-0.37429)*x17767))+(((-1.0)*px))+(((0.43342)*x17749))+((r00*sj6*x17757))+(((0.37429)*x17756))+((x17757*x17762)));
evalcond[1]=((((-0.37429)*r10*x17752))+(((-0.37429)*sj5*x17759))+((x17757*x17758))+((x17757*x17759))+(((-0.069)*x17749))+(((-1.0)*py))+(((0.43342)*x17748))+(((0.37429)*x17753))+((r12*x17764)));
evalcond[2]=((((-1.0)*x17756*x17761))+(((-1.0)*x17755*x17771))+(((-1.0)*x17751*x17766))+((x17752*x17754))+(((-1.0)*x17751*x17760*x17763))+(((-1.0)*x17755*x17760*x17762))+x17748+((sj3*x17767))+((cj3*x17770)));
evalcond[3]=((((-1.0)*x17755*x17759*x17760))+(((-1.0)*x17755*x17758*x17760))+((x17750*x17752))+(((-1.0)*x17755*x17769))+(((-1.0)*x17753*x17761))+(((-1.0)*x17765))+((cj3*x17768))+(((-1.0)*cj6*r10*sj4*x17755))+((sj3*sj5*x17759)));
evalcond[4]=((((-1.0)*x17751*x17752))+((cj3*x17756))+((sj3*x17770))+(((-1.0)*x17755*x17767))+(((-1.0)*x17760*x17761*x17762))+(((-1.0)*x17754*x17760*x17763))+(((-1.0)*x17765))+(((-1.0)*x17754*x17766))+(((-1.0)*x17761*x17771)));
evalcond[5]=((((-1.0)*r10*x17752*x17755))+((cj3*x17753))+(((-1.0)*x17748))+(((-1.0)*sj5*x17755*x17759))+(((-1.0)*x17750*x17760*x17763))+(((-1.0)*x17750*x17766))+(((-1.0)*x17759*x17760*x17761))+((sj3*x17768))+(((-1.0)*x17761*x17769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17772=(cj4*sj3);
IkReal x17773=(cj3*r22);
IkReal x17774=(cj3*sj4);
IkReal x17775=(r21*sj6);
IkReal x17776=(r20*sj6);
IkReal x17777=((1.0)*cj5);
IkReal x17778=(sj3*sj5);
IkReal x17779=((1.0)*sj5);
IkReal x17780=(cj6*r21);
IkReal x17781=((0.01)*cj5);
IkReal x17782=(sj3*sj4);
IkReal x17783=(cj3*cj4);
IkReal x17784=(cj4*cj6);
IkReal x17785=((1.0)*cj4);
IkReal x17786=(sj4*sj6);
IkReal x17787=((0.37429)*sj5);
IkReal x17788=(cj6*x17777);
IkReal x17789=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
evalcond[1]=((-1.0)+(((-1.0)*sj4*x17776*x17777))+((r20*x17784))+(((-1.0)*x17775*x17785))+(((-1.0)*sj4*x17777*x17780))+(((-1.0)*r22*sj4*x17779)));
evalcond[2]=(((x17776*x17781))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x17780*x17781))+(((-1.0)*x17780*x17787))+(((-1.0)*x17776*x17787))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r11*sj6*x17785))+(((-1.0)*r12*sj4*x17779))+(((-1.0)*r11*sj4*x17788))+(((-1.0)*r10*x17777*x17786))+((r10*x17784)));
evalcond[4]=((((-1.0)*r01*sj6*x17785))+(((-1.0)*r02*sj4*x17779))+(((-1.0)*r00*x17777*x17786))+((r00*x17784))+(((-1.0)*r01*sj4*x17788)));
evalcond[5]=((((-1.0)*x17772*x17777*x17780))+(((-1.0)*cj3*x17779*x17780))+(((-1.0)*r22*x17772*x17779))+(((-1.0)*x17782*x17789))+((cj5*x17773))+(((-1.0)*cj3*x17776*x17779))+(((-1.0)*x17772*x17776*x17777))+((x17775*x17782)));
evalcond[6]=(((x17778*x17780))+(((-1.0)*cj4*x17773*x17779))+(((-1.0)*r22*sj3*x17777))+(((-1.0)*x17776*x17777*x17783))+((x17776*x17778))+(((-1.0)*x17774*x17789))+(((-1.0)*x17777*x17780*x17783))+((x17774*x17775)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17790=((0.0320990151198118)*sj5);
IkReal x17791=((0.00749723120732182)*sj5);
IkReal x17792=(cj6*r01);
IkReal x17793=((0.00749723120732182)*cj5);
IkReal x17794=(r00*sj6);
IkReal x17795=((1.20143403691943)*sj5);
IkReal x17796=((0.0320990151198118)*cj5);
IkReal x17797=(r10*sj6);
IkReal x17798=((0.280613866858848)*cj5);
IkReal x17799=((1.20143403691943)*cj5);
IkReal x17800=((0.280613866858848)*sj5);
IkReal x17801=(cj6*r11);
IkReal x17802=(cj6*x17795);
IkReal x17803=(cj6*x17796);
if( IKabs(((((-0.749723120732182)*px))+((x17796*x17797))+((x17792*x17793))+((x17796*x17801))+(((-1.0)*x17794*x17800))+((r02*x17798))+((r02*x17791))+(((-1.0)*x17795*x17801))+((x17793*x17794))+(((-1.0)*x17792*x17800))+(((-1.0)*x17795*x17797))+(((-3.20990151198118)*py))+((r12*x17790))+((r12*x17799)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x17800*x17801))+(((-1.0)*x17793*x17801))+((x17792*x17796))+(((-1.0)*x17793*x17797))+((x17797*x17800))+(((-1.0)*r12*x17798))+(((-1.0)*r12*x17791))+(((-1.0)*x17794*x17795))+(((0.749723120732182)*py))+(((-1.0)*x17792*x17795))+((r02*x17799))+((r02*x17790))+(((-3.20990151198118)*px))+((x17794*x17796)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.749723120732182)*px))+((x17796*x17797))+((x17792*x17793))+((x17796*x17801))+(((-1.0)*x17794*x17800))+((r02*x17798))+((r02*x17791))+(((-1.0)*x17795*x17801))+((x17793*x17794))+(((-1.0)*x17792*x17800))+(((-1.0)*x17795*x17797))+(((-3.20990151198118)*py))+((r12*x17790))+((r12*x17799))))+IKsqr((((x17800*x17801))+(((-1.0)*x17793*x17801))+((x17792*x17796))+(((-1.0)*x17793*x17797))+((x17797*x17800))+(((-1.0)*r12*x17798))+(((-1.0)*r12*x17791))+(((-1.0)*x17794*x17795))+(((0.749723120732182)*py))+(((-1.0)*x17792*x17795))+((r02*x17799))+((r02*x17790))+(((-3.20990151198118)*px))+((x17794*x17796))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.749723120732182)*px))+((x17796*x17797))+((x17792*x17793))+((x17796*x17801))+(((-1.0)*x17794*x17800))+((r02*x17798))+((r02*x17791))+(((-1.0)*x17795*x17801))+((x17793*x17794))+(((-1.0)*x17792*x17800))+(((-1.0)*x17795*x17797))+(((-3.20990151198118)*py))+((r12*x17790))+((r12*x17799))), (((x17800*x17801))+(((-1.0)*x17793*x17801))+((x17792*x17796))+(((-1.0)*x17793*x17797))+((x17797*x17800))+(((-1.0)*r12*x17798))+(((-1.0)*r12*x17791))+(((-1.0)*x17794*x17795))+(((0.749723120732182)*py))+(((-1.0)*x17792*x17795))+((r02*x17799))+((r02*x17790))+(((-3.20990151198118)*px))+((x17794*x17796))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17804=IKcos(j0);
IkReal x17805=IKsin(j0);
IkReal x17806=(r10*sj3);
IkReal x17807=(cj3*r00);
IkReal x17808=(sj5*sj6);
IkReal x17809=(cj3*cj5);
IkReal x17810=(r00*sj3);
IkReal x17811=(cj3*r10);
IkReal x17812=(cj5*sj6);
IkReal x17813=((1.0)*cj4);
IkReal x17814=(cj5*cj6);
IkReal x17815=(r01*sj3);
IkReal x17816=(cj3*r01);
IkReal x17817=(sj4*sj6);
IkReal x17818=(r12*sj5);
IkReal x17819=(cj6*sj5);
IkReal x17820=((0.37429)*cj5);
IkReal x17821=(r11*sj3);
IkReal x17822=(r02*sj5);
IkReal x17823=((1.0)*cj6*sj4);
IkReal x17824=(r11*x17817);
IkReal x17825=((1.0)*cj5*sj3);
evalcond[0]=((((-0.37429)*r01*x17819))+(((-0.29542)*x17804))+(((0.01)*x17822))+(((-0.069)*x17805))+(((0.01)*r00*x17812))+(((-1.0)*px))+(((0.01)*r01*x17814))+(((-0.37429)*r00*x17808))+((r02*x17820)));
evalcond[1]=((((0.01)*x17818))+((r12*x17820))+(((0.01)*r10*x17812))+(((0.069)*x17804))+(((-0.29542)*x17805))+(((-1.0)*py))+(((0.01)*r11*x17814))+(((-0.37429)*r10*x17808))+(((-0.37429)*r11*x17819)));
evalcond[2]=((((-1.0)*x17811*x17823))+((x17806*x17808))+x17804+(((-1.0)*r12*x17825))+(((-1.0)*cj6*r11*x17809*x17813))+(((-1.0)*cj3*x17813*x17818))+((x17819*x17821))+(((-1.0)*r10*sj6*x17809*x17813))+((cj3*x17824)));
evalcond[3]=((((-1.0)*sj3*x17813*x17822))+(((-1.0)*x17810*x17812*x17813))+((x17815*x17817))+x17804+((r02*x17809))+(((-1.0)*x17813*x17814*x17815))+(((-1.0)*x17807*x17808))+(((-1.0)*x17810*x17823))+(((-1.0)*x17816*x17819)));
evalcond[4]=((((-1.0)*sj3*x17813*x17818))+x17805+(((-1.0)*x17808*x17811))+(((-1.0)*cj3*r11*x17819))+((x17817*x17821))+(((-1.0)*x17806*x17823))+(((-1.0)*x17806*x17812*x17813))+(((-1.0)*x17813*x17814*x17821))+((r12*x17809)));
evalcond[5]=(((x17815*x17819))+(((-1.0)*x17807*x17823))+(((-1.0)*r02*x17825))+(((-1.0)*x17807*x17812*x17813))+((x17816*x17817))+(((-1.0)*cj6*r01*x17809*x17813))+(((-1.0)*x17805))+((x17808*x17810))+(((-1.0)*cj3*x17813*x17822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x17826=(cj4*sj3);
IkReal x17827=(cj3*r22);
IkReal x17828=(cj3*sj4);
IkReal x17829=(r21*sj6);
IkReal x17830=(r20*sj6);
IkReal x17831=((1.0)*cj5);
IkReal x17832=(sj3*sj5);
IkReal x17833=((1.0)*sj5);
IkReal x17834=(cj6*r21);
IkReal x17835=((0.01)*cj5);
IkReal x17836=(sj3*sj4);
IkReal x17837=(cj3*cj4);
IkReal x17838=(cj4*cj6);
IkReal x17839=((1.0)*cj4);
IkReal x17840=(sj4*sj6);
IkReal x17841=((0.37429)*sj5);
IkReal x17842=(cj6*x17831);
IkReal x17843=((1.0)*cj6*r20);
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
evalcond[1]=((1.0)+(((-1.0)*sj4*x17831*x17834))+(((-1.0)*sj4*x17830*x17831))+(((-1.0)*x17829*x17839))+(((-1.0)*r22*sj4*x17833))+((r20*x17838)));
evalcond[2]=(((x17830*x17835))+(((-1.0)*x17830*x17841))+(((0.01)*r22*sj5))+(((-1.0)*pz))+((x17834*x17835))+(((-1.0)*x17834*x17841))+(((0.37429)*cj5*r22)));
evalcond[3]=((((-1.0)*r11*sj4*x17842))+(((-1.0)*r12*sj4*x17833))+((r10*x17838))+(((-1.0)*r10*x17831*x17840))+(((-1.0)*r11*sj6*x17839)));
evalcond[4]=((((-1.0)*r02*sj4*x17833))+(((-1.0)*r01*sj6*x17839))+(((-1.0)*r00*x17831*x17840))+(((-1.0)*r01*sj4*x17842))+((r00*x17838)));
evalcond[5]=(((x17829*x17836))+((cj5*x17827))+(((-1.0)*r22*x17826*x17833))+(((-1.0)*x17826*x17831*x17834))+(((-1.0)*cj3*x17833*x17834))+(((-1.0)*x17836*x17843))+(((-1.0)*x17826*x17830*x17831))+(((-1.0)*cj3*x17830*x17833)));
evalcond[6]=(((x17830*x17832))+((x17832*x17834))+(((-1.0)*cj4*x17827*x17833))+((x17828*x17829))+(((-1.0)*r22*sj3*x17831))+(((-1.0)*x17830*x17831*x17837))+(((-1.0)*x17828*x17843))+(((-1.0)*x17831*x17834*x17837)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17844=((0.0320990151198118)*sj5);
IkReal x17845=((0.00749723120732182)*sj5);
IkReal x17846=(cj6*r01);
IkReal x17847=((0.00749723120732182)*cj5);
IkReal x17848=(r00*sj6);
IkReal x17849=((1.20143403691943)*sj5);
IkReal x17850=((0.0320990151198118)*cj5);
IkReal x17851=(r10*sj6);
IkReal x17852=((0.280613866858848)*cj5);
IkReal x17853=((1.20143403691943)*cj5);
IkReal x17854=((0.280613866858848)*sj5);
IkReal x17855=(cj6*r11);
IkReal x17856=(cj6*x17849);
IkReal x17857=(cj6*x17850);
if( IKabs((((r12*x17844))+((x17848*x17854))+(((-1.0)*r02*x17845))+(((-1.0)*x17846*x17847))+((x17846*x17854))+(((-1.0)*x17849*x17855))+(((-1.0)*x17849*x17851))+(((-1.0)*r02*x17852))+(((0.749723120732182)*px))+((x17850*x17855))+((x17850*x17851))+((r12*x17853))+(((-3.20990151198118)*py))+(((-1.0)*x17847*x17848)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.749723120732182)*py))+((r12*x17845))+((x17848*x17850))+((r02*x17844))+((x17847*x17855))+((x17847*x17851))+(((-1.0)*x17846*x17849))+((x17846*x17850))+(((-1.0)*x17848*x17849))+((r12*x17852))+((r02*x17853))+(((-3.20990151198118)*px))+(((-1.0)*x17854*x17855))+(((-1.0)*x17851*x17854)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x17844))+((x17848*x17854))+(((-1.0)*r02*x17845))+(((-1.0)*x17846*x17847))+((x17846*x17854))+(((-1.0)*x17849*x17855))+(((-1.0)*x17849*x17851))+(((-1.0)*r02*x17852))+(((0.749723120732182)*px))+((x17850*x17855))+((x17850*x17851))+((r12*x17853))+(((-3.20990151198118)*py))+(((-1.0)*x17847*x17848))))+IKsqr(((((-0.749723120732182)*py))+((r12*x17845))+((x17848*x17850))+((r02*x17844))+((x17847*x17855))+((x17847*x17851))+(((-1.0)*x17846*x17849))+((x17846*x17850))+(((-1.0)*x17848*x17849))+((r12*x17852))+((r02*x17853))+(((-3.20990151198118)*px))+(((-1.0)*x17854*x17855))+(((-1.0)*x17851*x17854))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r12*x17844))+((x17848*x17854))+(((-1.0)*r02*x17845))+(((-1.0)*x17846*x17847))+((x17846*x17854))+(((-1.0)*x17849*x17855))+(((-1.0)*x17849*x17851))+(((-1.0)*r02*x17852))+(((0.749723120732182)*px))+((x17850*x17855))+((x17850*x17851))+((r12*x17853))+(((-3.20990151198118)*py))+(((-1.0)*x17847*x17848))), ((((-0.749723120732182)*py))+((r12*x17845))+((x17848*x17850))+((r02*x17844))+((x17847*x17855))+((x17847*x17851))+(((-1.0)*x17846*x17849))+((x17846*x17850))+(((-1.0)*x17848*x17849))+((r12*x17852))+((r02*x17853))+(((-3.20990151198118)*px))+(((-1.0)*x17854*x17855))+(((-1.0)*x17851*x17854))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x17858=IKcos(j0);
IkReal x17859=IKsin(j0);
IkReal x17860=(r10*sj3);
IkReal x17861=(cj3*r00);
IkReal x17862=(sj5*sj6);
IkReal x17863=(cj3*cj5);
IkReal x17864=(r00*sj3);
IkReal x17865=((1.0)*cj3);
IkReal x17866=(cj6*r01);
IkReal x17867=((0.37429)*sj5);
IkReal x17868=((0.01)*cj5);
IkReal x17869=(r10*sj6);
IkReal x17870=(cj6*r11);
IkReal x17871=((1.0)*cj4);
IkReal x17872=(cj5*sj3);
IkReal x17873=(r12*sj5);
IkReal x17874=((0.37429)*cj5);
IkReal x17875=(sj3*sj5);
IkReal x17876=(cj5*sj6);
IkReal x17877=(r02*sj5);
IkReal x17878=((1.0)*cj6*sj4);
IkReal x17879=(r11*sj4*sj6);
IkReal x17880=(r01*sj4*sj6);
evalcond[0]=((((0.069)*x17859))+((r00*sj6*x17868))+(((-0.29542)*x17858))+(((0.01)*x17877))+((x17866*x17868))+(((-0.37429)*r00*x17862))+(((-1.0)*px))+(((-1.0)*x17866*x17867))+((r02*x17874)));
evalcond[1]=((((-0.29542)*x17859))+((x17868*x17869))+(((0.01)*x17873))+((x17868*x17870))+(((-1.0)*py))+(((-0.069)*x17858))+(((-0.37429)*r10*x17862))+(((-1.0)*x17867*x17870))+((r12*x17874)));
evalcond[2]=(((x17866*x17875))+(((-1.0)*r02*x17872))+((cj3*x17880))+x17859+(((-1.0)*x17861*x17878))+(((-1.0)*cj4*x17865*x17877))+((x17862*x17864))+(((-1.0)*x17863*x17866*x17871))+(((-1.0)*x17861*x17871*x17876)));
evalcond[3]=((((-1.0)*r02*x17871*x17875))+x17858+(((-1.0)*x17864*x17878))+(((-1.0)*x17861*x17862))+(((-1.0)*x17864*x17871*x17876))+((sj3*x17880))+((r02*x17863))+(((-1.0)*x17866*x17871*x17872))+(((-1.0)*sj5*x17865*x17866)));
evalcond[4]=(((sj3*x17879))+(((-1.0)*sj5*x17865*x17870))+x17859+((r12*x17863))+(((-1.0)*x17870*x17871*x17872))+(((-1.0)*x17860*x17871*x17876))+(((-1.0)*x17860*x17878))+(((-1.0)*sj3*x17871*x17873))+(((-1.0)*r10*x17862*x17865)));
evalcond[5]=(((x17860*x17862))+(((-1.0)*x17863*x17869*x17871))+(((-1.0)*cj4*x17865*x17873))+(((-1.0)*x17858))+(((-1.0)*cj6*r10*sj4*x17865))+(((-1.0)*x17863*x17870*x17871))+((cj3*x17879))+((x17870*x17875))+(((-1.0)*r12*x17872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17881=cj1*cj1;
IkReal x17882=((69.0)*r10);
IkReal x17883=(cj4*cj6);
IkReal x17884=((364.42)*cj1);
IkReal x17885=(cj5*sj4);
IkReal x17886=((374.29)*cj2);
IkReal x17887=(cj5*r02);
IkReal x17888=(sj1*sj5);
IkReal x17889=((10.0)*r02);
IkReal x17890=(sj1*sj2);
IkReal x17891=(cj6*r11);
IkReal x17892=((69.0)*cj2);
IkReal x17893=(cj6*r01);
IkReal x17894=(cj2*sj1);
IkReal x17895=(r12*sj4);
IkReal x17896=(r00*sj6);
IkReal x17897=((1000.0)*px);
IkReal x17898=(cj4*r11*sj6);
IkReal x17899=((10.0)*cj5*sj1);
IkReal x17900=((10.0)*cj2*cj5);
IkReal x17901=(x17882*x17883);
IkReal x17902=((69.0)*x17898);
IkReal x17903=((69.0)*sj5*x17895);
IkReal x17904=((69.0)*x17885*x17891);
IkReal x17905=(sj6*x17882*x17885);
IkReal x17906=(x17902+x17903+x17904+x17905);
CheckValue<IkReal> x17907=IKPowWithIntegerCheck((((sj2*x17881*x17892))+(((69.0)*x17890))+((x17884*x17890))),-1);
if(!x17907.valid){
continue;
}
CheckValue<IkReal> x17908=IKPowWithIntegerCheck(((((-69.0)*sj1))+(((-1.0)*sj1*x17884))+(((-1.0)*x17881*x17892))),-1);
if(!x17908.valid){
continue;
}
if( IKabs(((x17907.value)*((((sj5*x17884*x17895))+((x17886*x17887))+(((-1.0)*cj2*x17897))+((x17896*x17900))+((cj2*sj5*x17889))+x17906+((r10*sj6*x17884*x17885))+(((-1.0)*x17901))+((x17893*x17900))+(((-1.0)*x17888*x17892*x17895))+((x17894*x17901))+(((-1.0)*sj1*x17892*x17898))+(((-1.0)*sj1*x17885*x17891*x17892))+(((-1.0)*x17894*x17905))+((x17884*x17885*x17891))+(((-1.0)*sj5*x17886*x17893))+(((-1.0)*sj5*x17886*x17896))+(((-1.0)*r10*x17883*x17884))+((x17884*x17898)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x17908.value)*((((x17893*x17899))+(((374.29)*sj1*x17887))+x17901+(((-374.29)*x17888*x17896))+(((-374.29)*x17888*x17893))+(((-1.0)*sj1*x17897))+(((-1.0)*x17906))+((x17896*x17899))+((x17888*x17889)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x17907.value)*((((sj5*x17884*x17895))+((x17886*x17887))+(((-1.0)*cj2*x17897))+((x17896*x17900))+((cj2*sj5*x17889))+x17906+((r10*sj6*x17884*x17885))+(((-1.0)*x17901))+((x17893*x17900))+(((-1.0)*x17888*x17892*x17895))+((x17894*x17901))+(((-1.0)*sj1*x17892*x17898))+(((-1.0)*sj1*x17885*x17891*x17892))+(((-1.0)*x17894*x17905))+((x17884*x17885*x17891))+(((-1.0)*sj5*x17886*x17893))+(((-1.0)*sj5*x17886*x17896))+(((-1.0)*r10*x17883*x17884))+((x17884*x17898))))))+IKsqr(((x17908.value)*((((x17893*x17899))+(((374.29)*sj1*x17887))+x17901+(((-374.29)*x17888*x17896))+(((-374.29)*x17888*x17893))+(((-1.0)*sj1*x17897))+(((-1.0)*x17906))+((x17896*x17899))+((x17888*x17889))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x17907.value)*((((sj5*x17884*x17895))+((x17886*x17887))+(((-1.0)*cj2*x17897))+((x17896*x17900))+((cj2*sj5*x17889))+x17906+((r10*sj6*x17884*x17885))+(((-1.0)*x17901))+((x17893*x17900))+(((-1.0)*x17888*x17892*x17895))+((x17894*x17901))+(((-1.0)*sj1*x17892*x17898))+(((-1.0)*sj1*x17885*x17891*x17892))+(((-1.0)*x17894*x17905))+((x17884*x17885*x17891))+(((-1.0)*sj5*x17886*x17893))+(((-1.0)*sj5*x17886*x17896))+(((-1.0)*r10*x17883*x17884))+((x17884*x17898))))), ((x17908.value)*((((x17893*x17899))+(((374.29)*sj1*x17887))+x17901+(((-374.29)*x17888*x17896))+(((-374.29)*x17888*x17893))+(((-1.0)*sj1*x17897))+(((-1.0)*x17906))+((x17896*x17899))+((x17888*x17889))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17909=IKcos(j0);
IkReal x17910=IKsin(j0);
IkReal x17911=((1.0)*sj4);
IkReal x17912=(cj6*sj3);
IkReal x17913=(cj3*cj5);
IkReal x17914=(sj5*sj6);
IkReal x17915=(r00*sj3);
IkReal x17916=((0.36442)*cj1);
IkReal x17917=((0.069)*sj2);
IkReal x17918=(cj6*r01);
IkReal x17919=((1.0)*cj3);
IkReal x17920=((0.37429)*sj5);
IkReal x17921=((0.01)*cj5);
IkReal x17922=(r10*sj6);
IkReal x17923=(r12*sj5);
IkReal x17924=((1.0)*cj4);
IkReal x17925=(r02*sj5);
IkReal x17926=((1.0)*sj1);
IkReal x17927=(cj3*cj6);
IkReal x17928=(r01*sj6);
IkReal x17929=(r00*sj6);
IkReal x17930=(cj6*r11);
IkReal x17931=((0.37429)*cj5);
IkReal x17932=(cj4*cj6);
IkReal x17933=(cj5*sj3);
IkReal x17934=(cj5*x17930);
IkReal x17935=(cj2*x17909);
IkReal x17936=((0.069)*x17910);
IkReal x17937=(r11*sj4*sj6);
IkReal x17938=(sj2*x17909);
IkReal x17939=((1.0)*x17910);
evalcond[0]=(x17935+((r10*x17932))+(((-1.0)*x17911*x17923))+(((-1.0)*r11*sj6*x17924))+(((-1.0)*x17911*x17934))+(((-1.0)*cj5*x17911*x17922))+((sj1*sj2*x17910)));
evalcond[1]=(((r00*x17932))+((sj1*x17938))+(((-1.0)*cj2*x17939))+(((-1.0)*cj5*x17911*x17918))+(((-1.0)*x17911*x17925))+(((-1.0)*x17924*x17928))+(((-1.0)*cj5*x17911*x17929)));
evalcond[2]=((((-1.0)*cj5*r01*x17912*x17924))+(((-1.0)*cj1*x17909))+(((-1.0)*r00*x17914*x17919))+((r02*x17913))+((sj3*sj4*x17928))+(((-1.0)*sj3*x17924*x17925))+(((-1.0)*r00*x17911*x17912))+(((-1.0)*cj5*sj6*x17915*x17924))+(((-1.0)*sj5*x17918*x17919)));
evalcond[3]=(((r12*x17913))+(((-1.0)*cj1*x17939))+(((-1.0)*sj3*x17923*x17924))+(((-1.0)*r10*x17914*x17919))+(((-1.0)*r10*x17911*x17912))+(((-1.0)*cj5*r11*x17912*x17924))+((sj3*x17937))+(((-1.0)*x17922*x17924*x17933))+(((-1.0)*sj5*x17919*x17930)));
evalcond[4]=((((-0.069)*sj1*x17935))+((x17909*x17916))+((x17918*x17921))+(((0.01)*x17925))+(((-1.0)*px))+((r02*x17931))+(((-1.0)*x17918*x17920))+((x17921*x17929))+(((0.069)*x17909))+(((-0.37429)*r00*x17914))+(((-1.0)*x17910*x17917)));
evalcond[5]=(((x17909*x17917))+x17936+(((-1.0)*cj2*sj1*x17936))+(((-0.37429)*r10*x17914))+(((0.01)*x17923))+(((-1.0)*py))+(((-1.0)*x17920*x17930))+((x17921*x17922))+((x17921*x17930))+((r12*x17931))+((x17910*x17916)));
evalcond[6]=((((-1.0)*cj4*x17919*x17923))+((r11*sj5*x17912))+(((-1.0)*x17913*x17924*x17930))+x17938+(((-1.0)*cj2*x17910*x17926))+(((-1.0)*r10*x17911*x17927))+(((-1.0)*r12*x17933))+((cj3*x17937))+((r10*sj3*x17914))+(((-1.0)*x17913*x17922*x17924)));
evalcond[7]=((((-1.0)*x17913*x17918*x17924))+((x17914*x17915))+(((-1.0)*sj2*x17939))+(((-1.0)*cj4*x17919*x17925))+(((-1.0)*x17913*x17924*x17929))+((r01*sj5*x17912))+(((-1.0)*r02*x17933))+(((-1.0)*x17926*x17935))+((cj3*sj4*x17928))+(((-1.0)*r00*x17911*x17927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17940=(r10*sj6);
IkReal x17941=((69.0)*cj2);
IkReal x17942=(cj6*r11);
IkReal x17943=((374.29)*sj5);
IkReal x17944=((10.0)*cj5);
IkReal x17945=(cj5*sj4);
IkReal x17946=(r11*sj6);
IkReal x17947=(sj1*sj2);
IkReal x17948=((1000.0)*py);
IkReal x17949=((69.0)*sj2);
IkReal x17950=(r12*sj5);
IkReal x17951=((364.42)*cj1);
IkReal x17952=(cj4*x17951);
IkReal x17953=(sj1*x17950);
IkReal x17954=((374.29)*cj5*r12);
IkReal x17955=((69.0)*cj4*cj6*r10);
IkReal x17956=(x17945*x17951);
CheckValue<IkReal> x17957=IKPowWithIntegerCheck(IKsign(((((-69.0)*sj1))+((cj2*x17951))+x17941)),-1);
if(!x17957.valid){
continue;
}
CheckValue<IkReal> x17958 = IKatan2WithCheck(IkReal((((cj2*x17948))+(((-1.0)*sj4*x17949*x17950))+(((-1.0)*x17940*x17945*x17949))+((cj4*cj6*r10*x17949))+(((-1.0)*x17942*x17945*x17949))+(((-1.0)*cj2*x17942*x17944))+(((-10.0)*cj2*x17950))+((cj2*x17940*x17943))+(((-1.0)*cj2*x17954))+(((-1.0)*cj4*x17946*x17949))+((cj2*x17942*x17943))+(((-1.0)*cj2*x17940*x17944)))),((((69.0)*x17940*x17945))+((cj4*cj6*r10*sj1*x17941))+(((-1.0)*sj1*x17940*x17941*x17945))+((x17940*x17956))+(((69.0)*cj4*x17946))+(((-1.0)*cj6*r10*x17952))+(((-1.0)*x17955))+(((69.0)*sj4*x17950))+(((-1.0)*x17947*x17948))+(((-1.0)*sj4*x17941*x17953))+(((-1.0)*x17940*x17943*x17947))+((x17942*x17956))+(((-1.0)*x17942*x17943*x17947))+((x17942*x17944*x17947))+(((-1.0)*sj1*x17941*x17942*x17945))+((x17947*x17954))+(((10.0)*x17947*x17950))+((x17940*x17944*x17947))+((x17946*x17952))+(((69.0)*x17942*x17945))+(((-1.0)*cj4*sj1*x17941*x17946))+((sj4*x17950*x17951))),IKFAST_ATAN2_MAGTHRESH);
if(!x17958.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x17957.value)))+(x17958.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x17959=IKcos(j0);
IkReal x17960=IKsin(j0);
IkReal x17961=((1.0)*sj4);
IkReal x17962=(cj6*sj3);
IkReal x17963=(cj3*cj5);
IkReal x17964=(sj5*sj6);
IkReal x17965=(r00*sj3);
IkReal x17966=((0.36442)*cj1);
IkReal x17967=((0.069)*sj2);
IkReal x17968=(cj6*r01);
IkReal x17969=((1.0)*cj3);
IkReal x17970=((0.37429)*sj5);
IkReal x17971=((0.01)*cj5);
IkReal x17972=(r10*sj6);
IkReal x17973=(r12*sj5);
IkReal x17974=((1.0)*cj4);
IkReal x17975=(r02*sj5);
IkReal x17976=((1.0)*sj1);
IkReal x17977=(cj3*cj6);
IkReal x17978=(r01*sj6);
IkReal x17979=(r00*sj6);
IkReal x17980=(cj6*r11);
IkReal x17981=((0.37429)*cj5);
IkReal x17982=(cj4*cj6);
IkReal x17983=(cj5*sj3);
IkReal x17984=(cj5*x17980);
IkReal x17985=(cj2*x17959);
IkReal x17986=((0.069)*x17960);
IkReal x17987=(r11*sj4*sj6);
IkReal x17988=(sj2*x17959);
IkReal x17989=((1.0)*x17960);
evalcond[0]=((((-1.0)*cj5*x17961*x17972))+((r10*x17982))+x17985+(((-1.0)*x17961*x17984))+(((-1.0)*x17961*x17973))+((sj1*sj2*x17960))+(((-1.0)*r11*sj6*x17974)));
evalcond[1]=((((-1.0)*cj5*x17961*x17968))+(((-1.0)*cj5*x17961*x17979))+(((-1.0)*x17974*x17978))+(((-1.0)*x17961*x17975))+((r00*x17982))+((sj1*x17988))+(((-1.0)*cj2*x17989)));
evalcond[2]=((((-1.0)*sj3*x17974*x17975))+(((-1.0)*r00*x17964*x17969))+((r02*x17963))+(((-1.0)*cj5*r01*x17962*x17974))+((sj3*sj4*x17978))+(((-1.0)*r00*x17961*x17962))+(((-1.0)*cj5*sj6*x17965*x17974))+(((-1.0)*sj5*x17968*x17969))+(((-1.0)*cj1*x17959)));
evalcond[3]=(((sj3*x17987))+(((-1.0)*r10*x17961*x17962))+((r12*x17963))+(((-1.0)*cj5*r11*x17962*x17974))+(((-1.0)*r10*x17964*x17969))+(((-1.0)*sj5*x17969*x17980))+(((-1.0)*x17972*x17974*x17983))+(((-1.0)*cj1*x17989))+(((-1.0)*sj3*x17973*x17974)));
evalcond[4]=((((-0.37429)*r00*x17964))+((r02*x17981))+(((-1.0)*x17960*x17967))+(((0.01)*x17975))+((x17959*x17966))+((x17971*x17979))+(((-1.0)*px))+((x17968*x17971))+(((-0.069)*sj1*x17985))+(((0.069)*x17959))+(((-1.0)*x17968*x17970)));
evalcond[5]=(x17986+(((-1.0)*x17970*x17980))+(((0.01)*x17973))+((x17959*x17967))+(((-0.37429)*r10*x17964))+((x17971*x17972))+(((-1.0)*py))+((x17971*x17980))+((r12*x17981))+(((-1.0)*cj2*sj1*x17986))+((x17960*x17966)));
evalcond[6]=((((-1.0)*x17963*x17974*x17980))+((r10*sj3*x17964))+(((-1.0)*r10*x17961*x17977))+((cj3*x17987))+x17988+(((-1.0)*r12*x17983))+((r11*sj5*x17962))+(((-1.0)*cj4*x17969*x17973))+(((-1.0)*cj2*x17960*x17976))+(((-1.0)*x17963*x17972*x17974)));
evalcond[7]=(((cj3*sj4*x17978))+(((-1.0)*x17963*x17974*x17979))+(((-1.0)*x17963*x17968*x17974))+(((-1.0)*r00*x17961*x17977))+(((-1.0)*x17976*x17985))+(((-1.0)*sj2*x17989))+(((-1.0)*cj4*x17969*x17975))+((r01*sj5*x17962))+(((-1.0)*r02*x17983))+((x17964*x17965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x17990=cj1*cj1;
IkReal x17991=((1.0)*r01);
IkReal x17992=(cj5*cj6);
IkReal x17993=(r02*sj5);
IkReal x17994=(cj2*sj4);
IkReal x17995=(cj5*sj6);
IkReal x17996=(cj4*cj6);
IkReal x17997=(r12*sj5);
IkReal x17998=(cj2*cj4*sj6);
IkReal x17999=(sj1*sj2*sj4);
IkReal x18000=((1.0)*sj1*sj2);
IkReal x18001=(cj4*sj1*sj2*sj6);
CheckValue<IkReal> x18002 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x17994*x17995))+((cj2*r00*x17996))+((r10*x17995*x17999))+(((-1.0)*r10*x17996*x18000))+((r11*x18001))+(((-1.0)*x17993*x17994))+(((-1.0)*x17991*x17992*x17994))+(((-1.0)*x17991*x17998))+((r11*x17992*x17999))+((x17997*x17999)))),(((r10*x17994*x17995))+((x17993*x17999))+(((-1.0)*r00*x17996*x18000))+(((-1.0)*cj2*r10*x17996))+((r00*x17995*x17999))+((r01*x17992*x17999))+((r11*x17998))+((r01*x18001))+((x17994*x17997))+((r11*x17992*x17994))),IKFAST_ATAN2_MAGTHRESH);
if(!x18002.valid){
continue;
}
CheckValue<IkReal> x18003=IKPowWithIntegerCheck(IKsign(((1.0)+((x17990*(cj2*cj2)))+(((-1.0)*x17990)))),-1);
if(!x18003.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x18002.value)+(((1.5707963267949)*(x18003.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x18004=IKcos(j0);
IkReal x18005=IKsin(j0);
IkReal x18006=((1.0)*sj4);
IkReal x18007=(cj6*sj3);
IkReal x18008=(cj3*cj5);
IkReal x18009=(sj5*sj6);
IkReal x18010=(r00*sj3);
IkReal x18011=((0.36442)*cj1);
IkReal x18012=((0.069)*sj2);
IkReal x18013=(cj6*r01);
IkReal x18014=((1.0)*cj3);
IkReal x18015=((0.37429)*sj5);
IkReal x18016=((0.01)*cj5);
IkReal x18017=(r10*sj6);
IkReal x18018=(r12*sj5);
IkReal x18019=((1.0)*cj4);
IkReal x18020=(r02*sj5);
IkReal x18021=((1.0)*sj1);
IkReal x18022=(cj3*cj6);
IkReal x18023=(r01*sj6);
IkReal x18024=(r00*sj6);
IkReal x18025=(cj6*r11);
IkReal x18026=((0.37429)*cj5);
IkReal x18027=(cj4*cj6);
IkReal x18028=(cj5*sj3);
IkReal x18029=(cj5*x18025);
IkReal x18030=(cj2*x18004);
IkReal x18031=((0.069)*x18005);
IkReal x18032=(r11*sj4*sj6);
IkReal x18033=(sj2*x18004);
IkReal x18034=((1.0)*x18005);
evalcond[0]=(((r10*x18027))+(((-1.0)*cj5*x18006*x18017))+(((-1.0)*x18006*x18018))+(((-1.0)*x18006*x18029))+((sj1*sj2*x18005))+(((-1.0)*r11*sj6*x18019))+x18030);
evalcond[1]=(((sj1*x18033))+((r00*x18027))+(((-1.0)*x18019*x18023))+(((-1.0)*cj2*x18034))+(((-1.0)*cj5*x18006*x18013))+(((-1.0)*cj5*x18006*x18024))+(((-1.0)*x18006*x18020)));
evalcond[2]=((((-1.0)*sj5*x18013*x18014))+(((-1.0)*cj1*x18004))+((r02*x18008))+(((-1.0)*r00*x18006*x18007))+((sj3*sj4*x18023))+(((-1.0)*sj3*x18019*x18020))+(((-1.0)*cj5*sj6*x18010*x18019))+(((-1.0)*cj5*r01*x18007*x18019))+(((-1.0)*r00*x18009*x18014)));
evalcond[3]=((((-1.0)*x18017*x18019*x18028))+(((-1.0)*r10*x18009*x18014))+((r12*x18008))+((sj3*x18032))+(((-1.0)*sj3*x18018*x18019))+(((-1.0)*cj5*r11*x18007*x18019))+(((-1.0)*r10*x18006*x18007))+(((-1.0)*cj1*x18034))+(((-1.0)*sj5*x18014*x18025)));
evalcond[4]=(((x18013*x18016))+((r02*x18026))+(((-0.37429)*r00*x18009))+(((-0.069)*sj1*x18030))+(((0.01)*x18020))+(((-1.0)*px))+(((-1.0)*x18005*x18012))+(((-1.0)*x18013*x18015))+(((0.069)*x18004))+((x18004*x18011))+((x18016*x18024)));
evalcond[5]=((((-0.37429)*r10*x18009))+(((0.01)*x18018))+(((-1.0)*py))+((r12*x18026))+(((-1.0)*cj2*sj1*x18031))+(((-1.0)*x18015*x18025))+((x18004*x18012))+((x18016*x18017))+((x18005*x18011))+((x18016*x18025))+x18031);
evalcond[6]=((((-1.0)*r10*x18006*x18022))+(((-1.0)*r12*x18028))+(((-1.0)*x18008*x18017*x18019))+((cj3*x18032))+(((-1.0)*cj4*x18014*x18018))+(((-1.0)*x18008*x18019*x18025))+(((-1.0)*cj2*x18005*x18021))+((r11*sj5*x18007))+((r10*sj3*x18009))+x18033);
evalcond[7]=(((cj3*sj4*x18023))+(((-1.0)*sj2*x18034))+((r01*sj5*x18007))+(((-1.0)*r02*x18028))+(((-1.0)*r00*x18006*x18022))+(((-1.0)*x18021*x18030))+(((-1.0)*x18008*x18013*x18019))+((x18009*x18010))+(((-1.0)*x18008*x18019*x18024))+(((-1.0)*cj4*x18014*x18020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - baxter (da7256a9fac9c56fbf53d530328ffd3a)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
